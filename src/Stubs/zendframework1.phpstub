<?php

namespace {
    const ZEND_SEARCH_LUCENE_COMMON_ANALYZER_PROCESSED = true;
    class Zend_Acl
    {
        public const TYPE_ALLOW = 'TYPE_ALLOW';
        public const TYPE_DENY = 'TYPE_DENY';
        public const OP_ADD = 'OP_ADD';
        public const OP_REMOVE = 'OP_REMOVE';
        /**
         * @var Zend_Acl_Role_Registry
         */
        public $_roleRegistry;
        /**
         * @var array<array-key, mixed>
         */
        public $_resources;
        /**
         * @var Zend_Acl_Role_Interface
         */
        public $_isAllowedRole;
        /**
         * @var Zend_Acl_Resource_Interface
         */
        public $_isAllowedResource;
        /**
         * @var string
         */
        public $_isAllowedPrivilege;
        /**
         * @var array<array-key, mixed>
         */
        public $_rules;
        /**
         * @param Zend_Acl_Role_Interface|string $role
         * @param Zend_Acl_Role_Interface|array<array-key, mixed>|null|string $parents
         *
         * @return Zend_Acl
         */
        public function addRole($role, $parents = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         *
         * @return Zend_Acl_Role_Interface
         */
        public function getRole($role)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         *
         * @return bool
         */
        public function hasRole($role)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         * @param Zend_Acl_Role_Interface|string $inherit
         * @param bool $onlyParents
         *
         * @return bool
         */
        public function inheritsRole($role, $inherit, $onlyParents = false)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         *
         * @return Zend_Acl
         */
        public function removeRole($role)
        {
        }
        /**
         * @return Zend_Acl
         */
        public function removeRoleAll()
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface|string $resource
         * @param Zend_Acl_Resource_Interface|null|string $parent
         *
         * @return Zend_Acl
         *
         * @throws Zend_Acl_Exception
         */
        public function addResource($resource, $parent = null)
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface $resource
         * @param Zend_Acl_Resource_Interface|null|string $parent
         *
         * @return Zend_Acl
         *
         * @throws Zend_Acl_Exception
         */
        public function add(\Zend_Acl_Resource_Interface $resource, $parent = null)
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface|string $resource
         *
         * @return Zend_Acl_Resource_Interface
         *
         * @throws Zend_Acl_Exception
         */
        public function get($resource)
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface|string $resource
         *
         * @return bool
         */
        public function has($resource)
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface|string $resource
         * @param Zend_Acl_Resource_Interface|string $inherit
         * @param bool $onlyParent
         *
         * @return bool
         *
         * @throws Zend_Acl_Resource_Registry_Exception
         */
        public function inherits($resource, $inherit, $onlyParent = false)
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface|string $resource
         *
         * @return Zend_Acl
         *
         * @throws Zend_Acl_Exception
         */
        public function remove($resource)
        {
        }
        /**
         * @return Zend_Acl
         */
        public function removeAll()
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|array<array-key, mixed>|null|string $roles
         * @param Zend_Acl_Resource_Interface|array<array-key, mixed>|null|string $resources
         * @param array<array-key, mixed>|null|string $privileges
         * @param Zend_Acl_Assert_Interface|null $assert
         *
         * @return Zend_Acl
         */
        public function allow($roles = null, $resources = null, $privileges = null, ?\Zend_Acl_Assert_Interface $assert = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|array<array-key, mixed>|null|string $roles
         * @param Zend_Acl_Resource_Interface|array<array-key, mixed>|null|string $resources
         * @param array<array-key, mixed>|null|string $privileges
         * @param Zend_Acl_Assert_Interface|null $assert
         *
         * @return Zend_Acl
         */
        public function deny($roles = null, $resources = null, $privileges = null, ?\Zend_Acl_Assert_Interface $assert = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|array<array-key, mixed>|null|string $roles
         * @param Zend_Acl_Resource_Interface|array<array-key, mixed>|null|string $resources
         * @param array<array-key, mixed>|null|string $privileges
         *
         * @return Zend_Acl
         */
        public function removeAllow($roles = null, $resources = null, $privileges = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|array<array-key, mixed>|null|string $roles
         * @param Zend_Acl_Resource_Interface|array<array-key, mixed>|null|string $resources
         * @param array<array-key, mixed>|null|string $privileges
         *
         * @return Zend_Acl
         */
        public function removeDeny($roles = null, $resources = null, $privileges = null)
        {
        }
        /**
         * @param string $operation
         * @param string $type
         * @param Zend_Acl_Role_Interface|array<array-key, mixed>|null|string $roles
         * @param Zend_Acl_Resource_Interface|array<array-key, mixed>|null|string $resources
         * @param array<array-key, mixed>|null|string $privileges
         * @param Zend_Acl_Assert_Interface|null $assert
         *
         * @return Zend_Acl
         *
         * @throws Zend_Acl_Exception
         */
        public function setRule($operation, $type, $roles = null, $resources = null, $privileges = null, ?\Zend_Acl_Assert_Interface $assert = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|null|string $role
         * @param Zend_Acl_Resource_Interface|null|string $resource
         * @param null|string $privilege
         *
         * @return bool
         */
        public function isAllowed($role = null, $resource = null, $privilege = null)
        {
        }
        /**
         * @return Zend_Acl_Role_Registry
         */
        public function _getRoleRegistry()
        {
        }
        /**
         * @param Zend_Acl_Role_Interface $role
         * @param Zend_Acl_Resource_Interface|null $resource
         *
         * @return bool|null
         */
        public function _roleDFSAllPrivileges(\Zend_Acl_Role_Interface $role, ?\Zend_Acl_Resource_Interface $resource = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface $role
         * @param Zend_Acl_Resource_Interface|null $resource
         * @param array<array-key, mixed>|null $dfs
         *
         * @return bool|null
         *
         * @throws Zend_Acl_Exception
         */
        public function _roleDFSVisitAllPrivileges(\Zend_Acl_Role_Interface $role, ?\Zend_Acl_Resource_Interface $resource = null, &$dfs = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface $role
         * @param Zend_Acl_Resource_Interface|null $resource
         * @param null|string $privilege
         *
         * @return bool|null
         *
         * @throws Zend_Acl_Exception
         */
        public function _roleDFSOnePrivilege(\Zend_Acl_Role_Interface $role, ?\Zend_Acl_Resource_Interface $resource = null, $privilege = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface $role
         * @param Zend_Acl_Resource_Interface|null $resource
         * @param null|string $privilege
         * @param array<array-key, mixed>|null $dfs
         *
         * @return bool|null
         *
         * @throws Zend_Acl_Exception
         */
        public function _roleDFSVisitOnePrivilege(\Zend_Acl_Role_Interface $role, ?\Zend_Acl_Resource_Interface $resource = null, $privilege = null, &$dfs = null)
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface|null $resource
         * @param Zend_Acl_Role_Interface|null $role
         * @param null|string $privilege
         *
         * @return null|string
         */
        public function _getRuleType(?\Zend_Acl_Resource_Interface $resource = null, ?\Zend_Acl_Role_Interface $role = null, $privilege = null)
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface|null $resource
         * @param Zend_Acl_Role_Interface|null $role
         * @param bool $create
         *
         * @return array<array-key, mixed>|null
         */
        public function _getRules(?\Zend_Acl_Resource_Interface $resource = null, ?\Zend_Acl_Role_Interface $role = null, $create = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRegisteredRoles()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRoles()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getResources()
        {
        }
    }
    interface Zend_Acl_Assert_Interface
    {
        /**
         * @param Zend_Acl $acl
         * @param Zend_Acl_Role_Interface|null $role
         * @param Zend_Acl_Resource_Interface|null $resource
         * @param null|string $privilege
         *
         * @return bool
         */
        public function assert(\Zend_Acl $acl, ?\Zend_Acl_Role_Interface $role = null, ?\Zend_Acl_Resource_Interface $resource = null, $privilege = null);
    }
    class Zend_Acl_Exception extends \Zend_Exception
    {
    }
    class Zend_Acl_Resource implements \Zend_Acl_Resource_Interface
    {
        /**
         * @var string
         */
        public $_resourceId;
        /**
         * @param string $resourceId
         */
        public function __construct($resourceId)
        {
        }
        /**
         * @return string
         */
        public function getResourceId()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    interface Zend_Acl_Resource_Interface
    {
        /**
         * @return string
         */
        public function getResourceId();
    }
    class Zend_Acl_Role implements \Zend_Acl_Role_Interface
    {
        /**
         * @var string
         */
        public $_roleId;
        /**
         * @param string $roleId
         */
        public function __construct($roleId)
        {
        }
        /**
         * @return string
         */
        public function getRoleId()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    interface Zend_Acl_Role_Interface
    {
        /**
         * @return string
         */
        public function getRoleId();
    }
    class Zend_Acl_Role_Registry
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_roles;
        /**
         * @param Zend_Acl_Role_Interface $role
         * @param Zend_Acl_Role_Interface|array<array-key, mixed>|null|string $parents
         *
         * @return Zend_Acl_Role_Registry
         *
         * @throws Zend_Acl_Role_Registry_Exception
         */
        public function add(\Zend_Acl_Role_Interface $role, $parents = null)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         *
         * @return Zend_Acl_Role_Interface
         *
         * @throws Zend_Acl_Role_Registry_Exception
         */
        public function get($role)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         *
         * @return bool
         */
        public function has($role)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         *
         * @return array<array-key, mixed>
         */
        public function getParents($role)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         * @param Zend_Acl_Role_Interface|string $inherit
         * @param bool $onlyParents
         *
         * @return bool
         *
         * @throws Zend_Acl_Role_Registry_Exception
         */
        public function inherits($role, $inherit, $onlyParents = false)
        {
        }
        /**
         * @param Zend_Acl_Role_Interface|string $role
         *
         * @return Zend_Acl_Role_Registry
         *
         * @throws Zend_Acl_Role_Registry_Exception
         */
        public function remove($role)
        {
        }
        /**
         * @return Zend_Acl_Role_Registry
         */
        public function removeAll()
        {
        }
        public function getRoles()
        {
        }
    }
    class Zend_Acl_Role_Registry_Exception extends \Zend_Acl_Exception
    {
    }
    class Zend_Amf_Adobe_Auth extends \Zend_Amf_Auth_Abstract
    {
        /**
         * @var Zend_Acl
         */
        public $_acl;
        /**
         * @var array<array-key, mixed>
         */
        public $_users;
        /**
         * @param string $rolefile
         */
        public function __construct($rolefile)
        {
        }
        /**
         * @return Zend_Acl
         */
        public function getAcl()
        {
        }
        /**
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function authenticate()
        {
        }
    }
    class Zend_Amf_Adobe_DbInspector
    {
        /**
         * @param string $dbType
         * @param array<array-key, mixed>|object $dbDescription
         *
         * @return Zend_Db_Adapter_Abstract
         */
        public function _connect($dbType, $dbDescription)
        {
        }
        /**
         * @param string $dbType
         * @param array<array-key, mixed>|object $dbDescription
         * @param string $tableName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($dbType, $dbDescription, $tableName)
        {
        }
        /**
         * @param string $dbType
         * @param array<array-key, mixed>|object $dbDescription
         *
         * @return bool
         */
        public function connect($dbType, $dbDescription)
        {
        }
        /**
         * @param string $dbType
         * @param array<array-key, mixed>|object $dbDescription
         *
         * @return array<array-key, mixed>
         */
        public function getTables($dbType, $dbDescription)
        {
        }
    }
    class Zend_Amf_Adobe_Introspector
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var DOMElement
         */
        public $_types;
        /**
         * @var array<array-key, mixed>
         */
        public $_typesMap;
        /**
         * @var DOMDocument
         */
        public $_xml;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param string $serviceClass
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public function introspect($serviceClass, $options = array())
        {
        }
        /**
         * @param Zend_Acl $acl
         *
         * @return unknown_type
         */
        public function initAcl(\Zend_Acl $acl)
        {
        }
        /**
         * @param string $typename
         * @param DOMElement $typexml
         *
         * @return void
         */
        public function _addClassAttributes($typename, \DOMElement $typexml)
        {
        }
        /**
         * @param Zend_Server_Reflection_Class $refclass
         * @param DOMElement $target
         *
         * @return void
         */
        public function _addService(\Zend_Server_Reflection_Class $refclass, \DOMElement $target)
        {
        }
        /**
         * @param Zend_Reflection_Property $prop
         *
         * @return string
         */
        public function _getPropertyType(\Zend_Reflection_Property $prop)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getServicePath()
        {
        }
        /**
         * @param string $typename
         *
         * @return string
         */
        public function _phpTypeToAS($typename)
        {
        }
        /**
         * @param string $typename
         *
         * @return string
         */
        public function _registerType($typename)
        {
        }
        /**
         * @param string $msg
         *
         * @return string
         */
        public function _returnError($msg)
        {
        }
    }
    class Zend_Amf_Auth_Abstract implements \Zend_Auth_Adapter_Interface
    {
        public $_username;
        public $_password;
        public function setCredentials($username, $password)
        {
        }
    }
    class Zend_Amf_Constants
    {
        public const AMF0_NUMBER = 0;
        public const AMF0_BOOLEAN = 1;
        public const AMF0_STRING = 2;
        public const AMF0_OBJECT = 3;
        public const AMF0_MOVIECLIP = 4;
        public const AMF0_NULL = 5;
        public const AMF0_UNDEFINED = 6;
        public const AMF0_REFERENCE = 7;
        public const AMF0_MIXEDARRAY = 8;
        public const AMF0_OBJECTTERM = 9;
        public const AMF0_ARRAY = 10;
        public const AMF0_DATE = 11;
        public const AMF0_LONGSTRING = 12;
        public const AMF0_UNSUPPORTED = 14;
        public const AMF0_XML = 15;
        public const AMF0_TYPEDOBJECT = 16;
        public const AMF0_AMF3 = 17;
        public const AMF0_OBJECT_ENCODING = 0;
        public const AMF3_UNDEFINED = 0;
        public const AMF3_NULL = 1;
        public const AMF3_BOOLEAN_FALSE = 2;
        public const AMF3_BOOLEAN_TRUE = 3;
        public const AMF3_INTEGER = 4;
        public const AMF3_NUMBER = 5;
        public const AMF3_STRING = 6;
        public const AMF3_XML = 7;
        public const AMF3_DATE = 8;
        public const AMF3_ARRAY = 9;
        public const AMF3_OBJECT = 10;
        public const AMF3_XMLSTRING = 11;
        public const AMF3_BYTEARRAY = 12;
        public const AMF3_OBJECT_ENCODING = 3;
        public const ET_PROPLIST = 0;
        public const ET_EXTERNAL = 1;
        public const ET_DYNAMIC = 2;
        public const ET_PROXY = 3;
        public const FMS_OBJECT_ENCODING = 1;
        public const UNKNOWN_CONTENT_LENGTH = -1;
        public const URL_APPEND_HEADER = 'AppendToGatewayUrl';
        public const RESULT_METHOD = '/onResult';
        public const STATUS_METHOD = '/onStatus';
        public const CREDENTIALS_HEADER = 'Credentials';
        public const PERSISTENT_HEADER = 'RequestPersistentHeader';
        public const DESCRIBE_HEADER = 'DescribeService';
        public const GUEST_ROLE = 'anonymous';
    }
    class Zend_Amf_Exception extends \Zend_Exception
    {
    }
    class Zend_Amf_Parse_Amf0_Deserializer extends \Zend_Amf_Parse_Deserializer
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_reference;
        /**
         * @var int
         */
        public $_objectEncoding;
        /**
         * @param int|null $typeMarker
         *
         * @return mixed
         *
         * @throws Zend_Amf_Exception
         */
        public function readTypeMarker($typeMarker = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $object
         *
         * @return object
         */
        public function readObject($object = null)
        {
        }
        /**
         * @return object
         *
         * @throws Zend_Amf_Exception
         */
        public function readReference()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function readMixedArray()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function readArray()
        {
        }
        /**
         * @return Zend_Date
         */
        public function readDate()
        {
        }
        /**
         * @return SimpleXml
         */
        public function readXmlString()
        {
        }
        /**
         * @return array<array-key, mixed>|object
         *
         * @throws Zend_Amf_Exception
         */
        public function readTypedObject()
        {
        }
        /**
         * @return string
         */
        public function readAmf3TypeMarker()
        {
        }
        /**
         * @return int
         */
        public function getObjectEncoding()
        {
        }
    }
    class Zend_Amf_Parse_Amf0_Serializer extends \Zend_Amf_Parse_Serializer
    {
        /**
         * @var string
         */
        public $_className;
        /**
         * @var array<array-key, mixed>
         */
        public $_referenceObjects;
        /**
         * @param mixed $data
         * @param mixed|null $markerType
         * @param mixed $dataByVal
         *
         * @return Zend_Amf_Parse_Amf0_Serializer
         *
         * @throws Zend_Amf_Exception
         */
        public function writeTypeMarker(&$data, $markerType = null, $dataByVal = false)
        {
        }
        /**
         * @param mixed $object
         * @param string $markerType
         * @param mixed $objectByVal
         *
         * @return Boolean
         */
        public function writeObjectReference(&$object, $markerType, $objectByVal = false)
        {
        }
        /**
         * @return Zend_Amf_Parse_Amf0_Serializer
         */
        public function writeObject($object)
        {
        }
        /**
         * @param array<array-key, mixed> $array
         *
         * @return Zend_Amf_Parse_Amf0_Serializer
         */
        public function writeArray(&$array)
        {
        }
        /**
         * @param DateTime|Zend_Date $data
         *
         * @return Zend_Amf_Parse_Amf0_Serializer
         */
        public function writeDate($data)
        {
        }
        /**
         * @param object $data
         *
         * @return Zend_Amf_Parse_Amf0_Serializer
         */
        public function writeTypedObject($data)
        {
        }
        /**
         * @param string $data
         *
         * @return Zend_Amf_Parse_Amf0_Serializer
         */
        public function writeAmf3TypeMarker(&$data)
        {
        }
        /**
         * @param object $object
         *
         * @return false|string
         */
        public function getClassName($object)
        {
        }
    }
    class Zend_Amf_Parse_Amf3_Deserializer extends \Zend_Amf_Parse_Deserializer
    {
        /**
         * @var int
         */
        public $_objectCount;
        /**
         * @var array<array-key, mixed>
         */
        public $_referenceObjects;
        /**
         * @var array<array-key, mixed>
         */
        public $_referenceStrings;
        /**
         * @var array<array-key, mixed>
         */
        public $_referenceDefinitions;
        /**
         * @param int|null $typeMarker
         *
         * @return mixed
         *
         * @throws Zend_Amf_Exception
         */
        public function readTypeMarker($typeMarker = null)
        {
        }
        /**
         * @return float|int
         */
        public function readInteger()
        {
        }
        /**
         * @return string
         */
        public function readString()
        {
        }
        /**
         * @return Zend_Date
         */
        public function readDate()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function readArray()
        {
        }
        /**
         * @return array<array-key, mixed>|object
         */
        public function readObject()
        {
        }
        /**
         * @return SimpleXml
         */
        public function readXmlString()
        {
        }
    }
    class Zend_Amf_Parse_Amf3_Serializer extends \Zend_Amf_Parse_Serializer
    {
        /**
         * @var string
         */
        public $_strEmpty;
        /**
         * @var array<array-key, mixed>
         */
        public $_referenceObjects;
        /**
         * @var array<array-key, mixed>
         */
        public $_referenceStrings;
        /**
         * @var array<array-key, mixed>
         */
        public $_referenceDefinitions;
        /**
         * @param mixed $data
         * @param int|null $markerType
         * @param mixed $dataByVal
         *
         * @return void
         */
        public function writeTypeMarker(&$data, $markerType = null, $dataByVal = false)
        {
        }
        /**
         * @return Zend_Amf_Parse_Amf3_Serializer
         */
        public function writeInteger($int)
        {
        }
        /**
         * @param string $string
         *
         * @return Zend_Amf_Parse_Amf3_Serializer
         */
        public function writeBinaryString(&$string)
        {
        }
        /**
         * @param string $string
         *
         * @return Zend_Amf_Parse_Amf3_Serializer
         */
        public function writeString(&$string)
        {
        }
        /**
         * @param Zend_Amf_Value_ByteArray|string $data
         *
         * @return Zend_Amf_Parse_Amf3_Serializer
         */
        public function writeByteArray(&$data)
        {
        }
        /**
         * @param DOMDocument|SimpleXMLElement $xml
         *
         * @return Zend_Amf_Parse_Amf3_Serializer
         */
        public function writeXml($xml)
        {
        }
        /**
         * @param DateTime|Zend_Date $date
         *
         * @return Zend_Amf_Parse_Amf3_Serializer
         */
        public function writeDate($date)
        {
        }
        /**
         * @param array<array-key, mixed> $array
         *
         * @return Zend_Amf_Parse_Amf3_Serializer
         */
        public function writeArray(&$array)
        {
        }
        /**
         * @param mixed $object
         * @param mixed $objectByVal
         *
         * @return Boolean
         */
        public function writeObjectReference(&$object, $objectByVal = false)
        {
        }
        /**
         * @return Zend_Amf_Parse_Amf3_Serializer
         */
        public function writeObject($object)
        {
        }
    }
    class Zend_Amf_Parse_Deserializer
    {
        /**
         * @var Zend_Amf_Parse_InputStream
         */
        public $_stream;
        /**
         * @param Zend_Amf_Parse_InputStream $stream
         *
         * @return void
         */
        public function __construct(\Zend_Amf_Parse_InputStream $stream)
        {
        }
        /**
         * @return mixed
         */
        public abstract function readTypeMarker($markerType = null);
    }
    class Zend_Amf_Parse_InputStream extends \Zend_Amf_Util_BinaryStream
    {
    }
    class Zend_Amf_Parse_OutputStream extends \Zend_Amf_Util_BinaryStream
    {
        /**
         * @return void
         */
        public function __construct()
        {
        }
    }
    class Zend_Amf_Parse_Resource_MysqlResult
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $fieldTypes;
        /**
         * @param resource $resource
         *
         * @return array<array-key, mixed>
         */
        public function parse($resource)
        {
        }
    }
    class Zend_Amf_Parse_Resource_MysqliResult
    {
        public static $mysqli_type = 'Psalm could not infer this type';
        public static $mysqli_to_php = 'Psalm could not infer this type';
        /**
         * @param resource $resource
         *
         * @return array<array-key, mixed>
         */
        public function parse($resource)
        {
        }
    }
    class Zend_Amf_Parse_Resource_Stream
    {
        /**
         * @param resource $resource
         *
         * @return array<array-key, mixed>
         */
        public function parse($resource)
        {
        }
    }
    class Zend_Amf_Parse_Serializer
    {
        /**
         * @var string
         */
        public $_stream;
        /**
         * @var bool
         */
        public $mbStringFunctionsOverloaded;
        /**
         * @param Zend_Amf_Parse_OutputStream $stream
         *
         * @return void
         */
        public function __construct(\Zend_Amf_Parse_OutputStream $stream)
        {
        }
        /**
         * @param mixed $content
         * @param int|null $markerType
         * @param mixed $contentByVal
         *
         * @return void
         */
        public abstract function writeTypeMarker(&$content, $markerType = null, $contentByVal = false);
    }
    class Zend_Amf_Parse_TypeLoader
    {
        /**
         * @var string
         */
        public static $callbackClass;
        /**
         * @var array<array-key, mixed>
         */
        public static $classMap;
        /**
         * @var array<array-key, mixed>
         */
        public static $_defaultClassMap;
        /**
         * @var Zend_Loader_PluginLoader_Interface
         */
        public static $_resourceLoader;
        /**
         * @param string $className
         *
         * @return false|object
         */
        public static function loadType($className)
        {
        }
        /**
         * @param string $className
         *
         * @return string
         */
        public static function getMappedClassName($className)
        {
        }
        /**
         * @param string $asClassName
         * @param string $phpClassName
         *
         * @return void
         */
        public static function setMapping($asClassName, $phpClassName)
        {
        }
        /**
         * @return void
         */
        public static function resetMap()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         */
        public static function setResourceLoader(\Zend_Loader_PluginLoader_Interface $loader)
        {
        }
        /**
         * @param string $prefix
         * @param string $dir
         */
        public static function addResourceDirectory($prefix, $dir)
        {
        }
        /**
         * @param resource $resource
         *
         * @return string
         */
        public static function getResourceParser($resource)
        {
        }
        /**
         * @param resource $resource
         *
         * @return mixed
         */
        public static function handleResource($resource)
        {
        }
    }
    class Zend_Amf_Request
    {
        /**
         * @var int
         */
        public $_clientType;
        /**
         * @var array<array-key, mixed>
         */
        public $_bodies;
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var int
         */
        public $_objectEncoding;
        /**
         * @var Zend_Amf_Parse_InputStream
         */
        public $_inputStream;
        /**
         * @var Zend_Amf_Parse_AMF0_Deserializer
         */
        public $_deserializer;
        /**
         * @var mixed
         */
        public $_time;
        /**
         * @param string $request
         *
         * @return Zend_Amf_Request
         */
        public function initialize($request)
        {
        }
        public function readMessage(\Zend_Amf_Parse_InputStream $stream)
        {
        }
        /**
         * @return Zend_Amf_Value_MessageHeader
         */
        public function readHeader()
        {
        }
        /**
         * @return Zend_Amf_Value_MessageBody
         */
        public function readBody()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAmfBodies()
        {
        }
        /**
         * @param Zend_Amf_Value_MessageBody $message
         *
         * @return Zend_Amf_Request
         */
        public function addAmfBody(\Zend_Amf_Value_MessageBody $message)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAmfHeaders()
        {
        }
        /**
         * @return int
         */
        public function getObjectEncoding()
        {
        }
        /**
         * @param mixed $int
         *
         * @return Zend_Amf_Request
         */
        public function setObjectEncoding($int)
        {
        }
    }
    class Zend_Amf_Request_Http extends \Zend_Amf_Request
    {
        /**
         * @var string
         */
        public $_rawRequest;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function getRawRequest()
        {
        }
    }
    class Zend_Amf_Response
    {
        /**
         * @var int
         */
        public $_objectEncoding;
        /**
         * @var array<array-key, mixed>
         */
        public $_bodies;
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var Zend_Amf_Parse_OutputStream
         */
        public $_outputStream;
        /**
         * @return Zend_Amf_Response
         */
        public function finalize()
        {
        }
        /**
         * @param Zend_Amf_Parse_OutputStream $stream
         *
         * @return Zend_Amf_Response
         */
        public function writeMessage(\Zend_Amf_Parse_OutputStream $stream)
        {
        }
        /**
         * @return string
         */
        public function getResponse()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param Zend_Amf_Value_MessageBody $body
         *
         * @return Zend_Amf_Response
         */
        public function addAmfBody(\Zend_Amf_Value_MessageBody $body)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAmfBodies()
        {
        }
        /**
         * @param Zend_Amf_Value_MessageHeader $header
         *
         * @return Zend_Amf_Response
         */
        public function addAmfHeader(\Zend_Amf_Value_MessageHeader $header)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAmfHeaders()
        {
        }
        /**
         * @param int $encoding
         *
         * @return Zend_Amf_Response
         */
        public function setObjectEncoding($encoding)
        {
        }
    }
    class Zend_Amf_Response_Http extends \Zend_Amf_Response
    {
        /**
         * @return string
         */
        public function getResponse()
        {
        }
        public function isIeOverSsl()
        {
        }
    }
    class Zend_Amf_Server implements \Zend_Server_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_methods;
        /**
         * @var array<array-key, mixed>
         */
        public $_classAllowed;
        /**
         * @var Zend_Loader_PluginLoader
         */
        public $_loader;
        /**
         * @var bool
         */
        public $_production;
        /**
         * @var Zend_Amf_Request|null
         */
        public $_request;
        /**
         * @var Zend_Amf_Response|null
         */
        public $_response;
        /**
         * @var array<array-key, mixed>
         */
        public $_table;
        /**
         * @var bool
         */
        public $_session;
        /**
         * @var Zend_Session_NameSpace
         */
        public $_sesionNamespace;
        /**
         * @var string
         */
        public $_sessionName;
        /**
         * @var Zend_Amf_Auth_Abstract
         */
        public $_auth;
        /**
         * @var Zend_Acl
         */
        public $_acl;
        public function __construct()
        {
        }
        /**
         * @param Zend_Amf_Auth_Abstract $auth
         *
         * @return Zend_Amf_Server
         */
        public function setAuth(\Zend_Amf_Auth_Abstract $auth)
        {
        }
        /**
         * @return Zend_Amf_Auth_Abstract
         */
        public function getAuth()
        {
        }
        /**
         * @param Zend_Acl $acl
         *
         * @return Zend_Amf_Server
         */
        public function setAcl(\Zend_Acl $acl)
        {
        }
        /**
         * @return Zend_Acl
         */
        public function getAcl()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Amf_Server
         */
        public function setProduction($flag)
        {
        }
        /**
         * @return bool
         */
        public function isProduction()
        {
        }
        /**
         * @return Zend_Amf_Server
         */
        public function setSession($namespace = 'Zend_Amf')
        {
        }
        /**
         * @return bool
         */
        public function isSession()
        {
        }
        /**
         * @param object|string $object
         * @param string $function
         *
         * @return unknown_type
         */
        public function _checkAcl($object, $function)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public function getLoader()
        {
        }
        /**
         * @param string $method
         *
         * @return mixed
         *
         * @throws Zend_Amf_Server_Exception
         */
        public function _dispatch($method, $params = null, $source = null)
        {
        }
        /**
         * @param Zend_Amf_Value_Messaging_CommandMessage $message
         *
         * @return Zend_Amf_Value_Messaging_AcknowledgeMessage
         */
        public function _loadCommandMessage(\Zend_Amf_Value_Messaging_CommandMessage $message)
        {
        }
        /**
         * @param int $objectEncoding
         * @param string $message
         * @param string $description
         * @param mixed $detail
         * @param int $code
         * @param int $line
         *
         * @return Zend_Amf_Value_Messaging_ErrorMessage|array<array-key, mixed>
         */
        public function _errorMessage($objectEncoding, $message, $description, $detail, $code, $line)
        {
        }
        /**
         * @param string $userid
         * @param string $password
         *
         * @return bool
         */
        public function _handleAuth($userid, $password)
        {
        }
        /**
         * @param Zend_Amf_Request $request
         *
         * @return Zend_Amf_Response
         *
         * @throws Zend_Amf_server_Exception
         * @throws Exception
         */
        public function _handle(\Zend_Amf_Request $request)
        {
        }
        /**
         * @param Zend_Amf_Request|null $request
         *
         * @return Zend_Amf_Response
         */
        public function handle($request = null)
        {
        }
        /**
         * @param Zend_Amf_Request|string $request
         *
         * @return Zend_Amf_Server
         */
        public function setRequest($request)
        {
        }
        /**
         * @return Zend_Amf_Request|null
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Amf_Server_Response|string $response
         *
         * @return Zend_Amf_Server
         */
        public function setResponse($response)
        {
        }
        /**
         * @return Zend_Amf_Server_Response
         */
        public function getResponse()
        {
        }
        /**
         * @param object|string $class
         * @param string $namespace
         *
         * @return Zend_Amf_Server
         *
         * @throws Zend_Amf_Server_Exception
         */
        public function setClass($class, $namespace = '', $argv = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $function
         * @param string $namespace
         *
         * @return Zend_Amf_Server
         *
         * @throws Zend_Amf_Server_Exception
         */
        public function addFunction($function, $namespace = '')
        {
        }
        /**
         * @param string $dir
         */
        public function addDirectory($dir)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDirectory()
        {
        }
        /**
         * @return void
         */
        public function _buildDispatchTable()
        {
        }
        /**
         * @param Exception|null|string $fault
         *
         * @return void
         */
        public function fault($fault = null, $code = 404)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFunctions()
        {
        }
        /**
         * @param mixed $mode
         *
         * @return void
         */
        public function setPersistence($mode)
        {
        }
        /**
         * @param array<array-key, mixed> $definition
         *
         * @return void
         */
        public function loadFunctions($definition)
        {
        }
        /**
         * @param string $asClass
         * @param string $phpClass
         *
         * @return Zend_Amf_Server
         */
        public function setClassMap($asClass, $phpClass)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listMethods()
        {
        }
        /**
         * @param Reflection $reflectionMethod
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>
         */
        public function _castParameters($reflectionMethod, array $params)
        {
        }
    }
    class Zend_Amf_Server_Exception extends \Zend_Amf_Exception
    {
    }
    class Zend_Amf_Util_BinaryStream
    {
        /**
         * @var string
         */
        public $_stream;
        /**
         * @var int
         */
        public $_streamLength;
        /**
         * @var bool
         */
        public $_bigEndian;
        /**
         * @var int
         */
        public $_needle;
        /**
         * @var bool
         */
        public $_mbStringFunctionsOverloaded;
        /**
         * @param string $stream
         *
         * @return void
         */
        public function __construct($stream)
        {
        }
        /**
         * @return string
         */
        public function getStream()
        {
        }
        /**
         * @param int $length
         *
         * @return string
         *
         * @throws Zend_Amf_Exception
         */
        public function readBytes($length)
        {
        }
        /**
         * @param string $bytes
         *
         * @return Zend_Amf_Util_BinaryStream
         */
        public function writeBytes($bytes)
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Amf_Exception
         */
        public function readByte()
        {
        }
        /**
         * @param string $stream
         *
         * @return Zend_Amf_Util_BinaryStream
         */
        public function writeByte($stream)
        {
        }
        /**
         * @return int
         */
        public function readInt()
        {
        }
        /**
         * @param int $stream
         *
         * @return Zend_Amf_Util_BinaryStream
         */
        public function writeInt($stream)
        {
        }
        /**
         * @return string
         */
        public function readUtf()
        {
        }
        /**
         * @param string $stream
         *
         * @return Zend_Amf_Util_BinaryStream
         */
        public function writeUtf($stream)
        {
        }
        /**
         * @return string
         */
        public function readLongUtf()
        {
        }
        /**
         * @param string $stream
         *
         * @return Zend_Amf_Util_BinaryStream
         */
        public function writeLongUtf($stream)
        {
        }
        /**
         * @return float
         */
        public function readLong()
        {
        }
        /**
         * @param int|string $stream
         *
         * @return Zend_Amf_Util_BinaryStream
         */
        public function writeLong($stream)
        {
        }
        /**
         * @return float
         */
        public function readUnsignedShort()
        {
        }
        /**
         * @return float
         */
        public function readDouble()
        {
        }
        /**
         * @param float|string $stream
         *
         * @return Zend_Amf_Util_BinaryStream
         */
        public function writeDouble($stream)
        {
        }
    }
    class Zend_Amf_Value_ByteArray
    {
        /**
         * @var string
         */
        public $_data;
        /**
         * @param string $data
         *
         * @return void
         */
        public function __construct($data)
        {
        }
        /**
         * @return string
         */
        public function getData()
        {
        }
    }
    class Zend_Amf_Value_MessageBody
    {
        /**
         * @var string
         */
        public $_targetUri;
        /**
         * @var string
         */
        public $_responseUri;
        /**
         * @var string
         */
        public $_data;
        /**
         * @param string $targetUri
         * @param string $responseUri
         * @param string $data
         *
         * @return void
         */
        public function __construct($targetUri, $responseUri, $data)
        {
        }
        /**
         * @return string
         */
        public function getTargetUri()
        {
        }
        /**
         * @param string $targetUri
         *
         * @return Zend_Amf_Value_MessageBody
         */
        public function setTargetUri($targetUri)
        {
        }
        /**
         * @return string
         */
        public function getResponseUri()
        {
        }
        /**
         * @param string $responseUri
         *
         * @return Zend_Amf_Value_MessageBody
         */
        public function setResponseUri($responseUri)
        {
        }
        /**
         * @return string
         */
        public function getData()
        {
        }
        /**
         * @param mixed $data
         *
         * @return Zend_Amf_Value_MessageBody
         */
        public function setData($data)
        {
        }
        /**
         * @param string $methodName
         *
         * @return Zend_Amf_Value_MessageBody
         */
        public function setReplyMethod($methodName)
        {
        }
    }
    class Zend_Amf_Value_MessageHeader
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var bool
         */
        public $mustRead;
        /**
         * @var int
         */
        public $length;
        /**
         * @var mixed
         */
        public $data;
        /**
         * @param string $name
         * @param Boolean $mustRead
         * @param int|null $length
         */
        public function __construct($name, $mustRead, $data, $length = null)
        {
        }
    }
    class Zend_Amf_Value_Messaging_AbstractMessage
    {
        /**
         * @var string
         */
        public $clientId;
        /**
         * @var string
         */
        public $destination;
        /**
         * @var string
         */
        public $messageId;
        /**
         * @var int
         */
        public $timestamp;
        /**
         * @var int
         */
        public $timeToLive;
        /**
         * @var object
         */
        public $headers;
        /**
         * @var string
         */
        public $body;
        /**
         * @return string
         */
        public function generateId()
        {
        }
    }
    class Zend_Amf_Value_Messaging_AcknowledgeMessage extends \Zend_Amf_Value_Messaging_AsyncMessage
    {
        /**
         * @param unknown_type $message
         */
        public function __construct($message)
        {
        }
    }
    class Zend_Amf_Value_Messaging_ArrayCollection extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
    }
    class Zend_Amf_Value_Messaging_AsyncMessage extends \Zend_Amf_Value_Messaging_AbstractMessage
    {
        /**
         * @var string
         */
        public $correlationId;
    }
    class Zend_Amf_Value_Messaging_CommandMessage extends \Zend_Amf_Value_Messaging_AsyncMessage
    {
        public const SUBSCRIBE_OPERATION = 0;
        public const UNSUSBSCRIBE_OPERATION = 1;
        public const POLL_OPERATION = 2;
        public const CLIENT_SYNC_OPERATION = 4;
        public const CLIENT_PING_OPERATION = 5;
        public const CLUSTER_REQUEST_OPERATION = 7;
        public const LOGIN_OPERATION = 8;
        public const LOGOUT_OPERATION = 9;
        public const SESSION_INVALIDATE_OPERATION = 10;
        public const MULTI_SUBSCRIBE_OPERATION = 11;
        public const DISCONNECT_OPERATION = 12;
        public const UNKNOWN_OPERATION = 10000;
        /**
         * @var int
         */
        public $operation;
    }
    class Zend_Amf_Value_Messaging_ErrorMessage extends \Zend_Amf_Value_Messaging_AcknowledgeMessage
    {
        /**
         * @var object
         */
        public $extendedData;
        /**
         * @var string
         */
        public $faultCode;
        /**
         * @var string
         */
        public $faultDetail;
        /**
         * @var string
         */
        public $faultString;
        /**
         * @var object
         */
        public $rootCause;
    }
    class Zend_Amf_Value_Messaging_RemotingMessage extends \Zend_Amf_Value_Messaging_AbstractMessage
    {
        /**
         * @var string
         */
        public $source;
        /**
         * @var string
         */
        public $operation;
        /**
         * @var array<array-key, mixed>
         */
        public $parameters;
        /**
         * @return void
         */
        public function __construct()
        {
        }
    }
    class Zend_Amf_Value_TraitsInfo
    {
        /**
         * @var string
         */
        public $_className;
        /**
         * @var bool
         */
        public $_dynamic;
        /**
         * @var bool
         */
        public $_externalizable;
        /**
         * @var array<array-key, mixed>
         */
        public $_properties;
        /**
         * @param string $className
         * @param bool $dynamic
         * @param bool $externalizable
         * @param bool|null $properties
         *
         * @return void
         */
        public function __construct($className, $dynamic = false, $externalizable = false, $properties = null)
        {
        }
        /**
         * @return bool
         */
        public function isDynamic()
        {
        }
        /**
         * @return bool
         */
        public function isExternalizable()
        {
        }
        /**
         * @return int
         */
        public function length()
        {
        }
        /**
         * @return string
         */
        public function getClassName()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Amf_Value_TraitsInfo
         */
        public function addProperty($name)
        {
        }
        /**
         * @param array<array-key, mixed> $props
         *
         * @return Zend_Amf_Value_TraitsInfo
         */
        public function addAllProperties(array $props)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function getProperty($index)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAllProperties()
        {
        }
    }
    class Zend_Application
    {
        /**
         * @var Zend_Loader_Autoloader
         */
        public $_autoloader;
        /**
         * @var Zend_Application_Bootstrap_BootstrapAbstract
         */
        public $_bootstrap;
        /**
         * @var string
         */
        public $_environment;
        /**
         * @var array<array-key, mixed>
         */
        public $_optionKeys;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param string $environment
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         * @param bool|null $suppressNotFoundWarnings
         *
         * @return void
         *
         * @throws Zend_Application_Exception
         */
        public function __construct($environment, $options = null, $suppressNotFoundWarnings = null)
        {
        }
        /**
         * @return string
         */
        public function getEnvironment()
        {
        }
        /**
         * @return Zend_Loader_Autoloader
         */
        public function getAutoloader()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Application
         *
         * @throws Zend_Application_Exception
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function hasOption($key)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getOption($key)
        {
        }
        /**
         * @param array<array-key, mixed> $array1
         * @param mixed|null $array2
         *
         * @return array<array-key, mixed>
         */
        public function mergeOptions(array $array1, $array2 = null)
        {
        }
        /**
         * @param array<array-key, mixed> $settings
         * @param string $prefix
         *
         * @return Zend_Application
         */
        public function setPhpSettings(array $settings, $prefix = '')
        {
        }
        /**
         * @param array<array-key, mixed> $paths
         *
         * @return Zend_Application
         */
        public function setIncludePaths(array $paths)
        {
        }
        /**
         * @param array<array-key, mixed> $namespaces
         *
         * @return Zend_Application
         */
        public function setAutoloaderNamespaces(array $namespaces)
        {
        }
        /**
         * @param string $path
         * @param null|string $class
         *
         * @return Zend_Application
         */
        public function setBootstrap($path, $class = null)
        {
        }
        /**
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         */
        public function getBootstrap()
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $resource
         *
         * @return Zend_Application
         */
        public function bootstrap($resource = null)
        {
        }
        /**
         * @return void
         */
        public function run()
        {
        }
        /**
         * @param string $file
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Application_Exception
         */
        public function _loadConfig($file)
        {
        }
    }
    class Zend_Application_Bootstrap_Bootstrap extends \Zend_Application_Bootstrap_BootstrapAbstract
    {
        /**
         * @var false|string
         */
        public $_appNamespace;
        /**
         * @var Zend_Loader_Autoloader_Resource
         */
        public $_resourceLoader;
        /**
         * @param Zend_Application|Zend_Application_Bootstrap_Bootstrapper $application
         */
        public function __construct($application)
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function run()
        {
        }
        /**
         * @param Zend_Loader_Autoloader_Resource $loader
         *
         * @return Zend_Application_Module_Bootstrap
         */
        public function setResourceLoader(\Zend_Loader_Autoloader_Resource $loader)
        {
        }
        /**
         * @return Zend_Loader_Autoloader_Resource
         */
        public function getResourceLoader()
        {
        }
        /**
         * @return string
         */
        public function getAppNamespace()
        {
        }
        public function setAppNamespace($value)
        {
        }
    }
    class Zend_Application_Bootstrap_BootstrapAbstract implements \Zend_Application_Bootstrap_Bootstrapper, \Zend_Application_Bootstrap_ResourceBootstrapper
    {
        /**
         * @var Zend_Application|Zend_Application_Bootstrap_Bootstrapper
         */
        public $_application;
        /**
         * @var array<array-key, mixed>
         */
        public $_classResources;
        /**
         * @var object
         */
        public $_container;
        /**
         * @var string
         */
        public $_environment;
        /**
         * @var array<array-key, mixed>
         */
        public $_optionKeys;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var Zend_Loader_PluginLoader_Interface
         */
        public $_pluginLoader;
        /**
         * @var array<array-key, mixed>
         */
        public $_pluginResources;
        /**
         * @var array<array-key, mixed>
         */
        public $_run;
        /**
         * @var array<array-key, mixed>
         */
        public $_started;
        /**
         * @param Zend_Application|Zend_Application_Bootstrap_Bootstrapper $application
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function __construct($application)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function hasOption($key)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getOption($key)
        {
        }
        /**
         * @param array<array-key, mixed> $array1
         * @param mixed|null $array2
         *
         * @return array<array-key, mixed>
         */
        public function mergeOptions(array $array1, $array2 = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getClassResources()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getClassResourceNames()
        {
        }
        /**
         * @param Zend_Application_Resource_Resource|string $resource
         * @param mixed|null $options
         *
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function registerPluginResource($resource, $options = null)
        {
        }
        /**
         * @param Zend_Application_Resource_Resource|string $resource
         *
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function unregisterPluginResource($resource)
        {
        }
        /**
         * @param string $resource
         *
         * @return bool
         */
        public function hasPluginResource($resource)
        {
        }
        /**
         * @param string $resource
         *
         * @return Zend_Application_Resource_Resource
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function getPluginResource($resource)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPluginResources()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPluginResourceNames()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         *
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader_Interface
         */
        public function getPluginLoader()
        {
        }
        /**
         * @param Zend_Application|Zend_Application_Bootstrap_Bootstrapper $application
         *
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function setApplication($application)
        {
        }
        /**
         * @return Zend_Application|Zend_Application_Bootstrap_Bootstrapper
         */
        public function getApplication()
        {
        }
        /**
         * @return string
         */
        public function getEnvironment()
        {
        }
        /**
         * @param object $container
         *
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function setContainer($container)
        {
        }
        /**
         * @return object
         */
        public function getContainer()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasResource($name)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed|null
         */
        public function getResource($name)
        {
        }
        /**
         * @param string $prop
         *
         * @return mixed|null
         */
        public function __get($prop)
        {
        }
        /**
         * @param string $prop
         *
         * @return bool
         */
        public function __isset($prop)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $resource
         *
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function bootstrap($resource = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return Zend_Application_Bootstrap_BootstrapAbstract
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $resource
         *
         * @return void
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function _bootstrap($resource = null)
        {
        }
        /**
         * @param string $resource
         *
         * @return void
         *
         * @throws Zend_Application_Bootstrap_Exception
         */
        public function _executeResource($resource)
        {
        }
        /**
         * @param string $resource
         * @param array<array-key, mixed>|null|object $options
         *
         * @return false|string
         */
        public function _loadPluginResource($resource, $options)
        {
        }
        /**
         * @param string $resource
         *
         * @return void
         */
        public function _markRun($resource)
        {
        }
        /**
         * @param Zend_Application_Resource_Resource $resource
         *
         * @return string
         */
        public function _resolvePluginResourceName($resource)
        {
        }
    }
    interface Zend_Application_Bootstrap_Bootstrapper
    {
        /**
         * @param Zend_Application $application
         */
        public function __construct($application);
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Application_Bootstrap_Bootstrapper
         */
        public function setOptions(array $options);
        /**
         * @return Zend_Application|Zend_Application_Bootstrap_Bootstrapper
         */
        public function getApplication();
        /**
         * @return string
         */
        public function getEnvironment();
        /**
         * @return array<array-key, mixed>
         */
        public function getClassResources();
        /**
         * @return array<array-key, mixed>
         */
        public function getClassResourceNames();
        /**
         * @param null|string $resource
         *
         * @return mixed
         */
        public function bootstrap($resource = null);
        /**
         * @return void
         */
        public function run();
    }
    class Zend_Application_Bootstrap_Exception extends \Zend_Application_Exception
    {
    }
    interface Zend_Application_Bootstrap_ResourceBootstrapper
    {
        /**
         * @param Zend_Application_Resource_Resource|string $resource
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Application_Bootstrap_ResourceBootstrapper
         */
        public function registerPluginResource($resource, $options = null);
        /**
         * @param Zend_Application_Resource_Resource|string $resource
         *
         * @return Zend_Application_Bootstrap_ResourceBootstrapper
         */
        public function unregisterPluginResource($resource);
        /**
         * @param string $resource
         *
         * @return bool
         */
        public function hasPluginResource($resource);
        /**
         * @param string $resource
         *
         * @return Zend_Application_Resource_Resource
         */
        public function getPluginResource($resource);
        /**
         * @return array<array-key, mixed>
         */
        public function getPluginResources();
        /**
         * @return array<array-key, mixed>
         */
        public function getPluginResourceNames();
        /**
         * @return Zend_Application_Bootstrap_ResourceBootstrapper
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader);
        /**
         * @return Zend_Loader_PluginLoader
         */
        public function getPluginLoader();
    }
    class Zend_Application_Exception extends \Zend_Exception
    {
    }
    class Zend_Application_Module_Autoloader extends \Zend_Loader_Autoloader_Resource
    {
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         */
        public function __construct($options)
        {
        }
        /**
         * @return void
         */
        public function initDefaultResourceTypes()
        {
        }
    }
    class Zend_Application_Module_Bootstrap extends \Zend_Application_Bootstrap_Bootstrap
    {
        /**
         * @var string
         */
        public $_moduleName;
        /**
         * @param Zend_Application|Zend_Application_Bootstrap_Bootstrapper $application
         */
        public function __construct($application)
        {
        }
        /**
         * @return void
         */
        public function initResourceLoader()
        {
        }
        /**
         * @return string
         */
        public function getAppNamespace()
        {
        }
        /**
         * @return string
         */
        public function getModuleName()
        {
        }
    }
    class Zend_Application_Resource_Cachemanager extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Cache_Manager
         */
        public $_manager;
        /**
         * @return Zend_Cache_Manager
         */
        public function init()
        {
        }
        /**
         * @return Zend_Cache_Manager
         */
        public function getCacheManager()
        {
        }
    }
    class Zend_Application_Resource_Db extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var string
         */
        public $_adapter;
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_db;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var bool
         */
        public $_isDefaultTableAdapter;
        /**
         * @param string $adapter
         *
         * @return Zend_Application_Resource_Db
         */
        public function setAdapter($adapter)
        {
        }
        /**
         * @return string
         */
        public function getAdapter()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Application_Resource_Db
         */
        public function setParams(array $params)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @param bool $isDefaultTableAdapter
         *
         * @return Zend_Application_Resource_Db
         */
        public function setIsDefaultTableAdapter($isDefaultTableAdapter)
        {
        }
        /**
         * @return bool
         */
        public function isDefaultTableAdapter()
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract|null
         */
        public function getDbAdapter()
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract|null
         */
        public function init()
        {
        }
        /**
         * @param Zend_Cache_Core|string $cache
         *
         * @return Zend_Application_Resource_Db
         */
        public function setDefaultMetadataCache($cache)
        {
        }
    }
    class Zend_Application_Resource_Dojo extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Dojo_View_Helper_Dojo_Container
         */
        public $_dojo;
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function init()
        {
        }
        /**
         * @return Zend_Dojo_View_Dojo_Container
         */
        public function getDojo()
        {
        }
    }
    class Zend_Application_Resource_Exception extends \Zend_Application_Exception
    {
    }
    class Zend_Application_Resource_Frontcontroller extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Controller_Front
         */
        public $_front;
        /**
         * @return Zend_Controller_Front
         *
         * @throws Zend_Application_Exception
         */
        public function init()
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public function getFrontController()
        {
        }
    }
    class Zend_Application_Resource_Layout extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Layout
         */
        public $_layout;
        /**
         * @return Zend_Layout
         */
        public function init()
        {
        }
        /**
         * @return Zend_Layout
         */
        public function getLayout()
        {
        }
    }
    class Zend_Application_Resource_Locale extends \Zend_Application_Resource_ResourceAbstract
    {
        public const DEFAULT_REGISTRY_KEY = 'Zend_Locale';
        /**
         * @var Zend_Locale
         */
        public $_locale;
        /**
         * @return Zend_Locale
         */
        public function init()
        {
        }
        /**
         * @return Zend_Locale
         */
        public function getLocale()
        {
        }
        /**
         * @param Zend_Cache_Core|string $cache
         *
         * @return Zend_Application_Resource_Locale
         */
        public function setCache($cache)
        {
        }
    }
    class Zend_Application_Resource_Log extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Log
         */
        public $_log;
        /**
         * @return Zend_Log
         */
        public function init()
        {
        }
        /**
         * @param Zend_Log $log
         *
         * @return Zend_Application_Resource_Log
         */
        public function setLog(\Zend_Log $log)
        {
        }
        /**
         * @return Zend_Log
         */
        public function getLog()
        {
        }
    }
    class Zend_Application_Resource_Mail extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Mail_Transport_Abstract
         */
        public $_transport;
        public function init()
        {
        }
        /**
         * @return Zend_Mail_Transport_Abstract|null
         */
        public function getMail()
        {
        }
        public function _setDefaults($type)
        {
        }
        public function _setupTransport($options)
        {
        }
    }
    class Zend_Application_Resource_Modules extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var ArrayObject
         */
        public $_bootstraps;
        /**
         * @param mixed|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Application_Resource_Exception
         */
        public function init()
        {
        }
        public function bootstrapBootstraps($bootstraps)
        {
        }
        /**
         * @return ArrayObject
         */
        public function getExecutedBootstraps()
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _formatModuleName($name)
        {
        }
    }
    class Zend_Application_Resource_Multidb extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_dbs;
        /**
         * @var Zend_Db_Adapter_Abstract|null
         */
        public $_defaultDb;
        /**
         * @return Zend_Application_Resource_Multidb
         */
        public function init()
        {
        }
        /**
         * @param Zend_Db_Adapter_Abstract|string $db
         *
         * @return bool
         */
        public function isDefault($db)
        {
        }
        /**
         * @param Zend_Db_Adapter_Abstract|null|string $db
         *
         * @return Zend_Db_Adapter_Abstract
         *
         * @throws Zend_Application_Resource_Exception
         */
        public function getDb($db = null)
        {
        }
        /**
         * @param bool $justPickOne
         *
         * @return Zend_Db_Adapter_Abstract|null
         */
        public function getDefaultDb($justPickOne = true)
        {
        }
        public function _setDefault(\Zend_Db_Adapter_Abstract $adapter)
        {
        }
        /**
         * @param Zend_Cache_Core|string $cache
         *
         * @return Zend_Application_Resource_Multidb
         */
        public function _setDefaultMetadataCache($cache)
        {
        }
    }
    class Zend_Application_Resource_Navigation extends \Zend_Application_Resource_ResourceAbstract
    {
        public const DEFAULT_REGISTRY_KEY = 'Zend_Navigation';
        /**
         * @var Zend_Navigation
         */
        public $_container;
        /**
         * @return Zend_Navigation
         */
        public function init()
        {
        }
        /**
         * @return void
         */
        public function store()
        {
        }
        /**
         * @return void
         */
        public function _storeRegistry()
        {
        }
        /**
         * @return void
         */
        public function _storeHelper()
        {
        }
        /**
         * @return Zend_Navigation
         */
        public function getContainer()
        {
        }
    }
    interface Zend_Application_Resource_Resource
    {
        /**
         * @param mixed|null $options
         */
        public function __construct($options = null);
        /**
         * @param Zend_Application_Bootstrap_Bootstrapper $bootstrap
         *
         * @return Zend_Application_Resource_Resource
         */
        public function setBootstrap(\Zend_Application_Bootstrap_Bootstrapper $bootstrap);
        /**
         * @return Zend_Application_Bootstrap_Bootstrapper
         */
        public function getBootstrap();
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Application_Resource_Resource
         */
        public function setOptions(array $options);
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions();
        /**
         * @return mixed
         */
        public function init();
    }
    class Zend_Application_Resource_ResourceAbstract implements \Zend_Application_Resource_Resource
    {
        /**
         * @var Zend_Application_Bootstrap_Bootstrapper
         */
        public $_bootstrap;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @param mixed|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Application_Resource_ResourceAbstract
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param array<array-key, mixed> $array1
         * @param mixed|null $array2
         *
         * @return array<array-key, mixed>
         */
        public function mergeOptions(array $array1, $array2 = null)
        {
        }
        /**
         * @param Zend_Application_Bootstrap_Bootstrapper $bootstrap
         *
         * @return Zend_Application_Resource_Resource
         */
        public function setBootstrap(\Zend_Application_Bootstrap_Bootstrapper $bootstrap)
        {
        }
        /**
         * @return Zend_Application_Bootstrap_Bootstrapper|null
         */
        public function getBootstrap()
        {
        }
    }
    class Zend_Application_Resource_Router extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Controller_Router_Rewrite
         */
        public $_router;
        /**
         * @return Zend_Controller_Router_Rewrite
         */
        public function init()
        {
        }
        /**
         * @return Zend_Controller_Router_Rewrite
         */
        public function getRouter()
        {
        }
    }
    class Zend_Application_Resource_Session extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Session_SaveHandler_Interface
         */
        public $_saveHandler;
        /**
         * @param Zend_Session_SaveHandler_Interface|array<array-key, mixed>|string $saveHandler
         *
         * @return Zend_Application_Resource_Session
         *
         * @throws Zend_Application_Resource_Exception
         */
        public function setSaveHandler($saveHandler)
        {
        }
        /**
         * @return Zend_Session_SaveHandler_Interface
         *
         * @throws Zend_Application_Resource_Exception
         */
        public function getSaveHandler()
        {
        }
        /**
         * @return bool
         */
        public function _hasSaveHandler()
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
    }
    class Zend_Application_Resource_Translate extends \Zend_Application_Resource_ResourceAbstract
    {
        public const DEFAULT_REGISTRY_KEY = 'Zend_Translate';
        /**
         * @var Zend_Translate
         */
        public $_translate;
        /**
         * @return Zend_Translate
         */
        public function init()
        {
        }
        /**
         * @return Zend_Translate
         *
         * @throws Zend_Application_Resource_Exception
         */
        public function getTranslate()
        {
        }
    }
    class Zend_Application_Resource_UserAgent extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_Http_UserAgent
         */
        public $_userAgent;
        /**
         * @return Zend_Http_UserAgent
         */
        public function init()
        {
        }
        /**
         * @return Zend_Http_UserAgent
         */
        public function getUserAgent()
        {
        }
    }
    class Zend_Application_Resource_View extends \Zend_Application_Resource_ResourceAbstract
    {
        /**
         * @var Zend_View_Interface
         */
        public $_view;
        /**
         * @return Zend_View
         */
        public function init()
        {
        }
        /**
         * @return Zend_View
         */
        public function getView()
        {
        }
    }
    class Zend_Auth
    {
        /**
         * @var Zend_Auth
         */
        public static $_instance;
        /**
         * @var Zend_Auth_Storage_Interface
         */
        public $_storage;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return void
         */
        public function __clone()
        {
        }
        /**
         * @return Zend_Auth
         */
        public static function getInstance()
        {
        }
        /**
         * @return Zend_Auth_Storage_Interface
         */
        public function getStorage()
        {
        }
        /**
         * @param Zend_Auth_Storage_Interface $storage
         *
         * @return Zend_Auth
         */
        public function setStorage(\Zend_Auth_Storage_Interface $storage)
        {
        }
        /**
         * @param Zend_Auth_Adapter_Interface $adapter
         *
         * @return Zend_Auth_Result
         */
        public function authenticate(\Zend_Auth_Adapter_Interface $adapter)
        {
        }
        /**
         * @return bool
         */
        public function hasIdentity()
        {
        }
        /**
         * @return mixed|null
         */
        public function getIdentity()
        {
        }
        /**
         * @return void
         */
        public function clearIdentity()
        {
        }
    }
    class Zend_Auth_Adapter_DbTable implements \Zend_Auth_Adapter_Interface
    {
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_zendDb;
        /**
         * @var Zend_Db_Select
         */
        public $_dbSelect;
        /**
         * @var string
         */
        public $_tableName;
        /**
         * @var string
         */
        public $_identityColumn;
        /**
         * @var string
         */
        public $_credentialColumn;
        /**
         * @var string
         */
        public $_identity;
        /**
         * @var string
         */
        public $_credential;
        /**
         * @var string
         */
        public $_credentialTreatment;
        /**
         * @var array<array-key, mixed>
         */
        public $_authenticateResultInfo;
        /**
         * @var array<array-key, mixed>
         */
        public $_resultRow;
        /**
         * @var bool
         */
        public $_ambiguityIdentity;
        /**
         * @param Zend_Db_Adapter_Abstract|null $zendDb
         * @param null|string $tableName
         * @param null|string $identityColumn
         * @param null|string $credentialColumn
         * @param null|string $credentialTreatment
         */
        public function __construct(?\Zend_Db_Adapter_Abstract $zendDb = null, $tableName = null, $identityColumn = null, $credentialColumn = null, $credentialTreatment = null)
        {
        }
        public function _setDbAdapter(?\Zend_Db_Adapter_Abstract $zendDb = null)
        {
        }
        /**
         * @param string $tableName
         *
         * @return Zend_Auth_Adapter_DbTable
         */
        public function setTableName($tableName)
        {
        }
        /**
         * @param string $identityColumn
         *
         * @return Zend_Auth_Adapter_DbTable
         */
        public function setIdentityColumn($identityColumn)
        {
        }
        /**
         * @param string $credentialColumn
         *
         * @return Zend_Auth_Adapter_DbTable
         */
        public function setCredentialColumn($credentialColumn)
        {
        }
        /**
         * @param string $treatment
         *
         * @return Zend_Auth_Adapter_DbTable
         */
        public function setCredentialTreatment($treatment)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Auth_Adapter_DbTable
         */
        public function setIdentity($value)
        {
        }
        /**
         * @param string $credential
         *
         * @return Zend_Auth_Adapter_DbTable
         */
        public function setCredential($credential)
        {
        }
        /**
         * @param bool|int $flag
         *
         * @return Zend_Auth_Adapter_DbTable
         */
        public function setAmbiguityIdentity($flag)
        {
        }
        /**
         * @return bool
         */
        public function getAmbiguityIdentity()
        {
        }
        /**
         * @return Zend_Db_Select
         */
        public function getDbSelect()
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $returnColumns
         * @param array<array-key, mixed>|null|string $omitColumns
         *
         * @return bool|stdClass
         */
        public function getResultRowObject($returnColumns = null, $omitColumns = null)
        {
        }
        /**
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function authenticate()
        {
        }
        /**
         * @return true
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function _authenticateSetup()
        {
        }
        /**
         * @return Zend_Db_Select
         */
        public function _authenticateCreateSelect()
        {
        }
        /**
         * @param Zend_Db_Select $dbSelect
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function _authenticateQuerySelect(\Zend_Db_Select $dbSelect)
        {
        }
        /**
         * @param array<array-key, mixed> $resultIdentities
         *
         * @return Zend_Auth_Result|true
         */
        public function _authenticateValidateResultSet(array $resultIdentities)
        {
        }
        /**
         * @param array<array-key, mixed> $resultIdentity
         *
         * @return Zend_Auth_Result
         */
        public function _authenticateValidateResult($resultIdentity)
        {
        }
        /**
         * @return Zend_Auth_Result
         */
        public function _authenticateCreateAuthResult()
        {
        }
    }
    class Zend_Auth_Adapter_Digest implements \Zend_Auth_Adapter_Interface
    {
        /**
         * @var string
         */
        public $_filename;
        /**
         * @var string
         */
        public $_realm;
        /**
         * @var string
         */
        public $_username;
        /**
         * @var string
         */
        public $_password;
        /**
         * @param mixed|null $filename
         * @param mixed|null $realm
         * @param mixed|null $username
         * @param mixed|null $password
         */
        public function __construct($filename = null, $realm = null, $username = null, $password = null)
        {
        }
        /**
         * @return null|string
         */
        public function getFilename()
        {
        }
        /**
         * @param mixed $filename
         *
         * @return Zend_Auth_Adapter_Digest
         */
        public function setFilename($filename)
        {
        }
        /**
         * @return null|string
         */
        public function getRealm()
        {
        }
        /**
         * @param mixed $realm
         *
         * @return Zend_Auth_Adapter_Digest
         */
        public function setRealm($realm)
        {
        }
        /**
         * @return null|string
         */
        public function getUsername()
        {
        }
        /**
         * @param mixed $username
         *
         * @return Zend_Auth_Adapter_Digest
         */
        public function setUsername($username)
        {
        }
        /**
         * @return null|string
         */
        public function getPassword()
        {
        }
        /**
         * @param mixed $password
         *
         * @return Zend_Auth_Adapter_Digest
         */
        public function setPassword($password)
        {
        }
        /**
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function authenticate()
        {
        }
        /**
         * @param string $a
         * @param string $b
         *
         * @return bool
         */
        public function _secureStringCompare($a, $b)
        {
        }
    }
    class Zend_Auth_Adapter_Exception extends \Zend_Auth_Exception
    {
    }
    class Zend_Auth_Adapter_Http implements \Zend_Auth_Adapter_Interface
    {
        /**
         * @var Zend_Controller_Request_Http
         */
        public $_request;
        /**
         * @var Zend_Controller_Response_Http
         */
        public $_response;
        /**
         * @var Zend_Auth_Adapter_Http_Resolver_Interface
         */
        public $_basicResolver;
        /**
         * @var Zend_Auth_Adapter_Http_Resolver_Interface
         */
        public $_digestResolver;
        /**
         * @var array<array-key, mixed>
         */
        public $_supportedSchemes;
        /**
         * @var array<array-key, mixed>
         */
        public $_acceptSchemes;
        /**
         * @var string
         */
        public $_domains;
        /**
         * @var string
         */
        public $_realm;
        /**
         * @var int
         */
        public $_nonceTimeout;
        /**
         * @var bool
         */
        public $_useOpaque;
        /**
         * @var array<array-key, mixed>
         */
        public $_supportedAlgos;
        /**
         * @var string
         */
        public $_algo;
        /**
         * @var array<array-key, mixed>
         */
        public $_supportedQops;
        /**
         * @var bool
         */
        public $_imaProxy;
        /**
         * @var bool
         */
        public $_ieNoOpaque;
        /**
         * @param array<array-key, mixed> $config
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function __construct(array $config)
        {
        }
        /**
         * @param Zend_Auth_Adapter_Http_Resolver_Interface $resolver
         *
         * @return Zend_Auth_Adapter_Http
         */
        public function setBasicResolver(\Zend_Auth_Adapter_Http_Resolver_Interface $resolver)
        {
        }
        /**
         * @return Zend_Auth_Adapter_Http_Resolver_Interface
         */
        public function getBasicResolver()
        {
        }
        /**
         * @param Zend_Auth_Adapter_Http_Resolver_Interface $resolver
         *
         * @return Zend_Auth_Adapter_Http
         */
        public function setDigestResolver(\Zend_Auth_Adapter_Http_Resolver_Interface $resolver)
        {
        }
        /**
         * @return Zend_Auth_Adapter_Http_Resolver_Interface
         */
        public function getDigestResolver()
        {
        }
        /**
         * @param Zend_Controller_Request_Http $request
         *
         * @return Zend_Auth_Adapter_Http
         */
        public function setRequest(\Zend_Controller_Request_Http $request)
        {
        }
        /**
         * @return Zend_Controller_Request_Http
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Controller_Response_Http $response
         *
         * @return Zend_Auth_Adapter_Http
         */
        public function setResponse(\Zend_Controller_Response_Http $response)
        {
        }
        /**
         * @return Zend_Controller_Response_Http
         */
        public function getResponse()
        {
        }
        /**
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function authenticate()
        {
        }
        /**
         * @return Zend_Auth_Result
         */
        public function _challengeClient()
        {
        }
        /**
         * @return string
         */
        public function _basicHeader()
        {
        }
        /**
         * @return string
         */
        public function _digestHeader()
        {
        }
        /**
         * @param string $header
         *
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function _basicAuth($header)
        {
        }
        /**
         * @param string $header
         *
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function _digestAuth($header)
        {
        }
        /**
         * @return string
         */
        public function _calcNonce()
        {
        }
        /**
         * @return string
         */
        public function _calcOpaque()
        {
        }
        /**
         * @param string $header
         *
         * @return array<array-key, mixed>|false
         */
        public function _parseDigestAuth($header)
        {
        }
        /**
         * @param string $a
         * @param string $b
         *
         * @return bool
         */
        public function _secureStringCompare($a, $b)
        {
        }
    }
    class Zend_Auth_Adapter_Http_Resolver_Exception extends \Zend_Auth_Exception
    {
    }
    class Zend_Auth_Adapter_Http_Resolver_File implements \Zend_Auth_Adapter_Http_Resolver_Interface
    {
        /**
         * @var string
         */
        public $_file;
        /**
         * @param string $path
         */
        public function __construct($path = '')
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Auth_Adapter_Http_Resolver_File
         *
         * @throws Zend_Auth_Adapter_Http_Resolver_Exception
         */
        public function setFile($path)
        {
        }
        /**
         * @return string
         */
        public function getFile()
        {
        }
        /**
         * @param string $username
         * @param string $realm
         *
         * @return false|string
         *
         * @throws Zend_Auth_Adapter_Http_Resolver_Exception
         */
        public function resolve($username, $realm)
        {
        }
    }
    interface Zend_Auth_Adapter_Http_Resolver_Interface
    {
        /**
         * @param string $username
         * @param string $realm
         *
         * @return false|string
         */
        public function resolve($username, $realm);
    }
    interface Zend_Auth_Adapter_Interface
    {
        /**
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function authenticate();
    }
    class Zend_Auth_Adapter_Ldap implements \Zend_Auth_Adapter_Interface
    {
        /**
         * @var Zend_Ldap
         */
        public $_ldap;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var string
         */
        public $_username;
        /**
         * @var string
         */
        public $_password;
        /**
         * @var string
         */
        public $_authenticatedDn;
        /**
         * @param array<array-key, mixed> $options
         * @param null|string $username
         * @param null|string $password
         */
        public function __construct(array $options = array(), $username = null, $password = null)
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getOptions()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Auth_Adapter_Ldap
         */
        public function setOptions($options)
        {
        }
        /**
         * @return null|string
         */
        public function getUsername()
        {
        }
        /**
         * @param string $username
         *
         * @return Zend_Auth_Adapter_Ldap
         */
        public function setUsername($username)
        {
        }
        /**
         * @return null|string
         */
        public function getPassword()
        {
        }
        /**
         * @param string $password
         *
         * @return Zend_Auth_Adapter_Ldap
         */
        public function setPassword($password)
        {
        }
        /**
         * @param string $identity
         *
         * @return Zend_Auth_Adapter_Ldap
         */
        public function setIdentity($identity)
        {
        }
        /**
         * @param string $credential
         *
         * @return Zend_Auth_Adapter_Ldap
         */
        public function setCredential($credential)
        {
        }
        /**
         * @return Zend_Ldap
         */
        public function getLdap()
        {
        }
        /**
         * @param Zend_Ldap $ldap
         *
         * @return Zend_Auth_Adapter_Ldap
         */
        public function setLdap(\Zend_Ldap $ldap)
        {
        }
        /**
         * @return string
         */
        public function _getAuthorityName()
        {
        }
        /**
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function authenticate()
        {
        }
        /**
         * @param Zend_Ldap $ldap
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function _prepareOptions(\Zend_Ldap $ldap, array $options)
        {
        }
        /**
         * @param Zend_Ldap $ldap
         * @param string $canonicalName
         * @param string $dn
         * @param array<array-key, mixed> $adapterOptions
         *
         * @return string|true
         */
        public function _checkGroupMembership(\Zend_Ldap $ldap, $canonicalName, $dn, array $adapterOptions)
        {
        }
        /**
         * @param array<array-key, mixed> $returnAttribs
         * @param array<array-key, mixed> $omitAttribs
         *
         * @return bool|stdClass
         */
        public function getAccountObject(array $returnAttribs = array(), array $omitAttribs = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public function _optionsToString(array $options)
        {
        }
    }
    class Zend_Auth_Adapter_OpenId implements \Zend_Auth_Adapter_Interface
    {
        /**
         * @var string
         */
        public $_id;
        /**
         * @var Zend_OpenId_Consumer_Storage
         */
        public $_storage;
        /**
         * @var string
         */
        public $_returnTo;
        /**
         * @var string
         */
        public $_root;
        /**
         * @var string
         */
        public $_extensions;
        /**
         * @var Zend_Controller_Response_Abstract
         */
        public $_response;
        /**
         * @var bool
         */
        public $_check_immediate;
        /**
         * @var Zend_Http_Client
         */
        public $_httpClient;
        /**
         * @param null|string $id
         * @param Zend_OpenId_Consumer_Storage|null $storage
         * @param null|string $returnTo
         * @param null|string $root
         * @param mixed|null $extensions
         * @param Zend_Controller_Response_Abstract|null $response
         */
        public function __construct($id = null, ?\Zend_OpenId_Consumer_Storage $storage = null, $returnTo = null, $root = null, $extensions = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Auth_Adapter_OpenId
         */
        public function setIdentity($id)
        {
        }
        /**
         * @param Zend_OpenId_Consumer_Storage $storage
         *
         * @return Zend_Auth_Adapter_OpenId
         */
        public function setStorage(\Zend_OpenId_Consumer_Storage $storage)
        {
        }
        /**
         * @param string $returnTo
         *
         * @return Zend_Auth_Adapter_OpenId
         */
        public function setReturnTo($returnTo)
        {
        }
        /**
         * @param string $root
         *
         * @return Zend_Auth_Adapter_OpenId
         */
        public function setRoot($root)
        {
        }
        /**
         * @param mixed $extensions
         *
         * @return Zend_Auth_Adapter_OpenId
         */
        public function setExtensions($extensions)
        {
        }
        /**
         * @param string $response
         *
         * @return Zend_Auth_Adapter_OpenId
         */
        public function setResponse($response)
        {
        }
        /**
         * @param bool $check_immediate
         *
         * @return Zend_Auth_Adapter_OpenId
         */
        public function setCheckImmediate($check_immediate)
        {
        }
        /**
         * @param Zend_Http_Client $client
         */
        public function setHttpClient($client)
        {
        }
        /**
         * @return Zend_Auth_Result
         *
         * @throws Zend_Auth_Adapter_Exception
         */
        public function authenticate()
        {
        }
    }
    class Zend_Auth_Exception extends \Zend_Exception
    {
    }
    class Zend_Auth_Result
    {
        public const FAILURE = 0;
        public const FAILURE_IDENTITY_NOT_FOUND = -1;
        public const FAILURE_IDENTITY_AMBIGUOUS = -2;
        public const FAILURE_CREDENTIAL_INVALID = -3;
        public const FAILURE_UNCATEGORIZED = -4;
        public const SUCCESS = 1;
        /**
         * @var int
         */
        public $_code;
        /**
         * @var mixed
         */
        public $_identity;
        /**
         * @var array<array-key, mixed>
         */
        public $_messages;
        /**
         * @param int $code
         * @param mixed $identity
         * @param array<array-key, mixed> $messages
         */
        public function __construct($code, $identity, array $messages = array())
        {
        }
        /**
         * @return bool
         */
        public function isValid()
        {
        }
        /**
         * @return int
         */
        public function getCode()
        {
        }
        /**
         * @return mixed
         */
        public function getIdentity()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages()
        {
        }
    }
    class Zend_Auth_Storage_Exception extends \Zend_Auth_Exception
    {
    }
    interface Zend_Auth_Storage_Interface
    {
        /**
         * @return bool
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function isEmpty();
        /**
         * @return mixed
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function read();
        /**
         * @param mixed $contents
         *
         * @return void
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function write($contents);
        /**
         * @return void
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function clear();
    }
    class Zend_Auth_Storage_NonPersistent implements \Zend_Auth_Storage_Interface
    {
        public $_data;
        /**
         * @return bool
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function isEmpty()
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function read()
        {
        }
        /**
         * @param mixed $contents
         *
         * @return void
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function write($contents)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function clear()
        {
        }
    }
    class Zend_Auth_Storage_Session implements \Zend_Auth_Storage_Interface
    {
        public const NAMESPACE_DEFAULT = 'Zend_Auth';
        public const MEMBER_DEFAULT = 'storage';
        /**
         * @var Zend_Session_Namespace
         */
        public $_session;
        /**
         * @var mixed
         */
        public $_namespace;
        /**
         * @var mixed
         */
        public $_member;
        /**
         * @param mixed $namespace
         * @param mixed $member
         */
        public function __construct($namespace, $member)
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @return string
         */
        public function getMember()
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function isEmpty()
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function read()
        {
        }
        /**
         * @param mixed $contents
         *
         * @return void
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function write($contents)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Auth_Storage_Exception
         */
        public function clear()
        {
        }
    }
    class Zend_Barcode
    {
        /**
         * @param mixed $barcode
         * @param mixed $renderer
         * @param mixed $barcodeConfig
         * @param mixed $rendererConfig
         * @param bool $automaticRenderError
         *
         * @return Zend_Barcode
         *
         * @throws Zend_Barcode_Exception
         */
        public static function factory($barcode, $renderer = 'image', $barcodeConfig = array(), $rendererConfig = array(), $automaticRenderError = true)
        {
        }
        /**
         * @param mixed $barcode
         * @param mixed $barcodeConfig
         *
         * @return Zend_Barcode_Object
         */
        public static function makeBarcode($barcode, $barcodeConfig = array())
        {
        }
        /**
         * @param mixed $renderer
         * @param mixed $rendererConfig
         *
         * @return Zend_Barcode_Renderer
         */
        public static function makeRenderer($renderer = 'image', $rendererConfig = array())
        {
        }
        /**
         * @param Zend_Barcode_Object|Zend_Config|array<array-key, mixed>|string $barcode
         * @param Zend_Barcode_Renderer|string $renderer
         * @param Zend_Config|array<array-key, mixed> $barcodeConfig
         * @param Zend_Config|array<array-key, mixed> $rendererConfig
         */
        public static function render($barcode, $renderer, $barcodeConfig = array(), $rendererConfig = array())
        {
        }
        /**
         * @param Zend_Barcode_Object|Zend_Config|array<array-key, mixed>|string $barcode
         * @param Zend_Barcode_Renderer|string $renderer
         * @param Zend_Config|array<array-key, mixed> $barcodeConfig
         * @param Zend_Config|array<array-key, mixed> $rendererConfig
         *
         * @return mixed
         */
        public static function draw($barcode, $renderer, $barcodeConfig = array(), $rendererConfig = array())
        {
        }
        /**
         * @param string $font
         */
        public static function setBarcodeFont($font)
        {
        }
    }
    class Zend_Barcode_Exception extends \Zend_Exception
    {
        /**
         * @var bool
         */
        public $_isRenderable;
        /**
         * @param bool $flag
         *
         * @return Zend_Barcode_Exception
         */
        public function setIsRenderable($flag)
        {
        }
        /**
         * @return bool
         */
        public function isRenderable()
        {
        }
    }
    class Zend_Barcode_Object_Code128 extends \Zend_Barcode_Object_ObjectAbstract
    {
        /**
         * @var bool
         */
        public $_withChecksum;
        /**
         * @var array<array-key, mixed>
         */
        public $_convertedText;
        public $_codingMap = array();
        /**
         * @var array<array-key, mixed>
         */
        public $_charSets;
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @param string $string
         * @param int $pos
         * @param int $length
         *
         * @return bool
         */
        public static function _isDigit($string, $pos, $length = 2)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _convertToBarcodeChars($string)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Barcode_Object
         */
        public function setText($value)
        {
        }
        /**
         * @return string
         */
        public function getText()
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @return bool
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function _validateText($value, $options = array())
        {
        }
    }
    class Zend_Barcode_Object_Code25 extends \Zend_Barcode_Object_ObjectAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_codingMap;
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
    }
    class Zend_Barcode_Object_Code25interleaved extends \Zend_Barcode_Object_Code25
    {
        /**
         * @var bool
         */
        public $_withBearerBars;
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Barcode_Object_Int25
         */
        public function setWithBearerBars($value)
        {
        }
        /**
         * @return bool
         */
        public function getWithBearerBars()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @return void
         */
        public function _postDrawBarcode()
        {
        }
    }
    class Zend_Barcode_Object_Code39 extends \Zend_Barcode_Object_ObjectAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_codingMap;
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Barcode_Object
         */
        public function setText($value)
        {
        }
        /**
         * @return string
         */
        public function getText()
        {
        }
        /**
         * @return string
         */
        public function getTextToDisplay()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
    }
    class Zend_Barcode_Object_Ean13 extends \Zend_Barcode_Object_ObjectAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_codingMap;
        public $_parities = 'Psalm could not infer this type';
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
        /**
         * @return void
         */
        public function _drawText()
        {
        }
        public function _drawEan13Text()
        {
        }
    }
    class Zend_Barcode_Object_Ean2 extends \Zend_Barcode_Object_Ean5
    {
        public $_parities = 'Psalm could not infer this type';
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        public function _getParity($i)
        {
        }
    }
    class Zend_Barcode_Object_Ean5 extends \Zend_Barcode_Object_Ean13
    {
        public $_parities = 'Psalm could not infer this type';
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
        public function _getParity($i)
        {
        }
        /**
         * @return string
         */
        public function getText()
        {
        }
    }
    class Zend_Barcode_Object_Ean8 extends \Zend_Barcode_Object_Ean13
    {
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @return void
         */
        public function _drawText()
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function _validateText($value, $options = array())
        {
        }
    }
    class Zend_Barcode_Object_Error extends \Zend_Barcode_Object_ObjectAbstract
    {
        /**
         * @param string $value
         *
         * @return bool
         */
        public function validateText($value)
        {
        }
        /**
         * @param bool $recalculate
         *
         * @return int
         */
        public function getHeight($recalculate = false)
        {
        }
        /**
         * @param bool $recalculate
         *
         * @return int
         */
        public function getWidth($recalculate = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function draw()
        {
        }
        /**
         * @return void
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return void
         */
        public function _calculateBarcodeWidth()
        {
        }
    }
    class Zend_Barcode_Object_Exception extends \Zend_Barcode_Exception
    {
    }
    class Zend_Barcode_Object_Identcode extends \Zend_Barcode_Object_Code25interleaved
    {
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return string
         */
        public function getTextToDisplay()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function validateText($value)
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
    }
    class Zend_Barcode_Object_Itf14 extends \Zend_Barcode_Object_Code25interleaved
    {
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
    }
    class Zend_Barcode_Object_Leitcode extends \Zend_Barcode_Object_Identcode
    {
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return string
         */
        public function getTextToDisplay()
        {
        }
    }
    class Zend_Barcode_Object_ObjectAbstract
    {
        /**
         * @var string
         */
        public $_barcodeNamespace;
        /**
         * @var array<array-key, mixed>
         */
        public $_instructions;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var int
         */
        public $_height;
        /**
         * @var int
         */
        public $_width;
        /**
         * @var int
         */
        public $_barHeight;
        /**
         * @var int
         */
        public $_barThinWidth;
        /**
         * @var int
         */
        public $_barThickWidth;
        /**
         * @var int
         */
        public $_factor;
        /**
         * @var int
         */
        public $_foreColor;
        /**
         * @var int
         */
        public $_backgroundColor;
        /**
         * @var bool
         */
        public $_withBorder;
        /**
         * @var bool
         */
        public $_withQuietZones;
        /**
         * @var bool
         */
        public $_mandatoryQuietZones;
        /**
         * @var float
         */
        public $_orientation;
        /**
         * @var int
         */
        public $_offsetTop;
        /**
         * @var int
         */
        public $_offsetLeft;
        /**
         * @var string
         */
        public $_text;
        /**
         * @var bool
         */
        public $_drawText;
        /**
         * @var bool
         */
        public $_stretchText;
        /**
         * @var int|string
         */
        public $_font;
        /**
         * @var float
         */
        public $_fontSize;
        /**
         * @var bool
         */
        public $_withChecksum;
        /**
         * @var bool
         */
        public $_withChecksumInText;
        public $_barcodeLength = null;
        public $_addLeadingZeros = true;
        public $_mandatoryChecksum = false;
        public $_substituteChecksumCharacter = 0;
        /**
         * @var string
         */
        public static $_staticFont;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        public function _getDefaultOptions()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return static
         */
        public function setOptions($options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return static
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param string $namespace
         *
         * @return static
         */
        public function setBarcodeNamespace($namespace)
        {
        }
        /**
         * @return string
         */
        public function getBarcodeNamespace()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param int $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setBarHeight($value)
        {
        }
        /**
         * @return int
         */
        public function getBarHeight()
        {
        }
        /**
         * @param int $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setBarThinWidth($value)
        {
        }
        /**
         * @return int
         */
        public function getBarThinWidth()
        {
        }
        /**
         * @param int $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setBarThickWidth($value)
        {
        }
        /**
         * @return int
         */
        public function getBarThickWidth()
        {
        }
        /**
         * @param scalar $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setFactor($value)
        {
        }
        /**
         * @return int
         */
        public function getFactor()
        {
        }
        /**
         * @param string $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setForeColor($value)
        {
        }
        /**
         * @return unknown
         */
        public function getForeColor()
        {
        }
        /**
         * @param int $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setBackgroundColor($value)
        {
        }
        /**
         * @return int
         */
        public function getBackgroundColor()
        {
        }
        /**
         * @param bool $value
         *
         * @return static
         */
        public function setWithBorder($value)
        {
        }
        /**
         * @return bool
         */
        public function getWithBorder()
        {
        }
        /**
         * @param bool $value
         *
         * @return static
         */
        public function setWithQuietZones($value)
        {
        }
        /**
         * @return bool
         */
        public function getWithQuietZones()
        {
        }
        /**
         * @return static
         */
        public function setReverseColor()
        {
        }
        /**
         * @param scalar $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setOrientation($value)
        {
        }
        /**
         * @return float
         */
        public function getOrientation()
        {
        }
        /**
         * @param string $value
         *
         * @return static
         */
        public function setText($value)
        {
        }
        /**
         * @return string
         */
        public function getText()
        {
        }
        /**
         * @param string $text
         * @param bool $withoutChecksum
         *
         * @return string
         */
        public function _addLeadingZeros($text, $withoutChecksum = false)
        {
        }
        /**
         * @return string
         */
        public function getRawText()
        {
        }
        /**
         * @return string
         */
        public function getTextToDisplay()
        {
        }
        /**
         * @param bool $value
         *
         * @return static
         */
        public function setDrawText($value)
        {
        }
        /**
         * @return bool
         */
        public function getDrawText()
        {
        }
        /**
         * @param bool $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setStretchText($value)
        {
        }
        /**
         * @return bool
         */
        public function getStretchText()
        {
        }
        /**
         * @param bool $value
         *
         * @return static
         */
        public function setWithChecksum($value)
        {
        }
        /**
         * @return bool
         */
        public function getWithChecksum()
        {
        }
        /**
         * @param bool $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setWithChecksumInText($value)
        {
        }
        /**
         * @return bool
         */
        public function getWithChecksumInText()
        {
        }
        /**
         * @param string $font
         */
        public static function setBarcodeFont($font)
        {
        }
        /**
         * @param int|string $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setFont($value)
        {
        }
        /**
         * @return int|string
         */
        public function getFont()
        {
        }
        /**
         * @param float $value
         *
         * @return static
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function setFontSize($value)
        {
        }
        /**
         * @return float
         */
        public function getFontSize()
        {
        }
        /**
         * @return int
         */
        public function getQuietZone()
        {
        }
        /**
         * @param array<array-key, mixed> $instruction
         */
        public function _addInstruction(array $instruction)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getInstructions()
        {
        }
        /**
         * @param array<array-key, mixed> $points
         * @param int|null $color
         * @param bool $filled
         */
        public function _addPolygon(array $points, $color = null, $filled = true)
        {
        }
        /**
         * @param string $text
         * @param float $size
         * @param array<array-key, mixed> $position
         * @param string $font
         * @param int $color
         * @param string $alignment
         * @param float|int $orientation
         */
        public function _addText($text, $size, $position, $font, $color, $alignment = 'center', $orientation = 0)
        {
        }
        /**
         * @return bool
         */
        public function checkParams()
        {
        }
        /**
         * @param null|string $value
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function _checkText($value = null)
        {
        }
        /**
         * @param int $min
         * @param int $max
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function _checkRatio($min = 2, $max = 3)
        {
        }
        /**
         * @throws Zend_Barcode_Object_Exception
         */
        public function _checkFontAndOrientation()
        {
        }
        /**
         * @return int
         */
        public function _calculateWidth()
        {
        }
        /**
         * @return int
         */
        public abstract function _calculateBarcodeWidth();
        /**
         * @return int
         */
        public function _calculateHeight()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeHeight()
        {
        }
        /**
         * @param bool $recalculate
         *
         * @return int
         */
        public function getHeight($recalculate = false)
        {
        }
        /**
         * @param bool $recalculate
         *
         * @return int
         */
        public function getWidth($recalculate = false)
        {
        }
        /**
         * @param bool $recalculate
         *
         * @return float
         */
        public function getOffsetLeft($recalculate = false)
        {
        }
        /**
         * @param bool $recalculate
         *
         * @return float
         */
        public function getOffsetTop($recalculate = false)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         *
         * @return array<array-key, mixed>
         */
        public function _rotate($x1, $y1)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function draw()
        {
        }
        public function _drawBarcode()
        {
        }
        public function _drawBorder()
        {
        }
        public function _drawText()
        {
        }
        /**
         * @param string $value
         */
        public function validateText($value)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function _validateText($value, $options = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public abstract function _prepareBarcode();
        public abstract function _checkParams();
        public function _preDrawBarcode()
        {
        }
        public function _postDrawBarcode()
        {
        }
    }
    class Zend_Barcode_Object_Planet extends \Zend_Barcode_Object_Postnet
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_codingMap;
    }
    class Zend_Barcode_Object_Postnet extends \Zend_Barcode_Object_ObjectAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_codingMap;
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
    }
    class Zend_Barcode_Object_Royalmail extends \Zend_Barcode_Object_ObjectAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_codingMap;
        public $_rows = 'Psalm could not infer this type';
        public $_columns = 'Psalm could not infer this type';
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
    }
    class Zend_Barcode_Object_Upca extends \Zend_Barcode_Object_Ean13
    {
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @return void
         */
        public function _drawText()
        {
        }
    }
    class Zend_Barcode_Object_Upce extends \Zend_Barcode_Object_Ean13
    {
        public $_parities = 'Psalm could not infer this type';
        /**
         * @return void
         */
        public function _getDefaultOptions()
        {
        }
        /**
         * @return string
         */
        public function getText()
        {
        }
        /**
         * @return int
         */
        public function _calculateBarcodeWidth()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareBarcode()
        {
        }
        /**
         * @return void
         */
        public function _drawText()
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Barcode_Object_Exception
         */
        public function _validateText($value, $options = array())
        {
        }
        /**
         * @param string $text
         *
         * @return int
         */
        public function getChecksum($text)
        {
        }
    }
    class Zend_Barcode_Renderer_Exception extends \Zend_Barcode_Exception
    {
    }
    class Zend_Barcode_Renderer_Image extends \Zend_Barcode_Renderer_RendererAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_allowedImageType;
        /**
         * @var string
         */
        public $_imageType;
        /**
         * @var resource
         */
        public $_resource;
        /**
         * @var int
         */
        public $_imageForeColor;
        /**
         * @var int
         */
        public $_imageBackgroundColor;
        /**
         * @var int
         */
        public $_userHeight;
        /**
         * @var int
         */
        public $_userWidth;
        public function __construct($options = null)
        {
        }
        /**
         * @param int|null $value
         *
         * @return Zend_Image_Barcode_Abstract
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setHeight($value)
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Barcode_Renderer_Image
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setWidth($value)
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        /**
         * @return Zend_Barcode_Renderer
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setResource($image)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Barcode_RendererAbstract
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setImageType($value)
        {
        }
        /**
         * @return string
         */
        public function getImageType()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Barcode_Exception
         */
        public function _initRenderer()
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function _checkDimensions()
        {
        }
        /**
         * @return mixed
         */
        public function render()
        {
        }
        /**
         * @param array<array-key, mixed> $points
         * @param int $color
         * @param bool $filled
         */
        public function _drawPolygon($points, $color, $filled = true)
        {
        }
        /**
         * @param string $text
         * @param float $size
         * @param array<array-key, mixed> $position
         * @param string $font
         * @param int $color
         * @param string $alignment
         * @param float|int $orientation
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function _drawText($text, $size, $position, $font, $color, $alignment = 'center', $orientation = 0)
        {
        }
    }
    class Zend_Barcode_Renderer_Pdf extends \Zend_Barcode_Renderer_RendererAbstract
    {
        /**
         * @var Zend_Pdf
         */
        public $_resource;
        /**
         * @var int
         */
        public $_page;
        /**
         * @var float
         */
        public $_moduleSize;
        /**
         * @param Zend_Pdf $pdf
         * @param int $page
         *
         * @return Zend_Barcode_Renderer
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setResource($pdf, $page = 0)
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return mixed
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _initRenderer()
        {
        }
        /**
         * @param array<array-key, mixed> $points
         * @param int $color
         * @param bool $filled
         */
        public function _drawPolygon($points, $color, $filled = true)
        {
        }
        /**
         * @param string $text
         * @param float $size
         * @param array<array-key, mixed> $position
         * @param string $font
         * @param int $color
         * @param string $alignment
         * @param float|int $orientation
         */
        public function _drawText($text, $size, $position, $font, $color, $alignment = 'center', $orientation = 0)
        {
        }
        /**
         * @param string $text
         * @param Zend_Pdf_Font $font
         * @param float $fontSize
         *
         * @return float
         */
        public function widthForStringUsingFontSize($text, $font, $fontSize)
        {
        }
    }
    class Zend_Barcode_Renderer_RendererAbstract
    {
        /**
         * @var string
         */
        public $_rendererNamespace;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var bool
         */
        public $_automaticRenderError;
        /**
         * @var int
         */
        public $_topOffset;
        /**
         * @var int
         */
        public $_leftOffset;
        /**
         * @var int
         */
        public $_horizontalPosition;
        /**
         * @var int
         */
        public $_verticalPosition;
        /**
         * @var float
         */
        public $_moduleSize;
        /**
         * @var Zend_Barcode_Object_ObjectAbstract
         */
        public $_barcode;
        public $_resource;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Barcode_Renderer_RendererAbstract
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Renderer_Object
         */
        public function setOptions($options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Renderer_Object
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param string $namespace
         *
         * @return Zend_Renderer_Object
         */
        public function setRendererNamespace($namespace)
        {
        }
        /**
         * @return string
         */
        public function getRendererNamespace()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Barcode_Renderer
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setTopOffset($value)
        {
        }
        /**
         * @return int
         */
        public function getTopOffset()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Barcode_Renderer
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setLeftOffset($value)
        {
        }
        /**
         * @return int
         */
        public function getLeftOffset()
        {
        }
        /**
         * @param bool $value
         *
         * @return static
         */
        public function setAutomaticRenderError($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Barcode_Renderer
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setHorizontalPosition($value)
        {
        }
        /**
         * @return string
         */
        public function getHorizontalPosition()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Barcode_Renderer_RendererAbstract
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setVerticalPosition($value)
        {
        }
        /**
         * @return string
         */
        public function getVerticalPosition()
        {
        }
        /**
         * @param float $value
         *
         * @return Zend_Barcode_Renderer
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setModuleSize($value)
        {
        }
        /**
         * @return float
         */
        public function getModuleSize()
        {
        }
        /**
         * @return bool
         */
        public function getAutomaticRenderError()
        {
        }
        /**
         * @param Zend_Barcode_Object $barcode
         *
         * @return Zend_Barcode_Renderer
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setBarcode($barcode)
        {
        }
        /**
         * @return Zend_Barcode_Object
         */
        public function getBarcode()
        {
        }
        /**
         * @return bool
         */
        public function checkParams()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function _checkBarcodeObject()
        {
        }
        /**
         * @param float $supportHeight
         * @param float $supportWidth
         *
         * @return void
         */
        public function _adjustPosition($supportHeight, $supportWidth)
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Exception
         * @throws Zend_Barcode_Exception
         */
        public function draw()
        {
        }
        public function _drawInstructionList()
        {
        }
        /**
         * @return void
         */
        public abstract function _checkParams();
        /**
         * @return mixed
         */
        public abstract function render();
        /**
         * @return void
         */
        public abstract function _initRenderer();
        /**
         * @param array<array-key, mixed> $points
         * @param int $color
         * @param bool $filled
         */
        public abstract function _drawPolygon($points, $color, $filled = true);
        /**
         * @param string $text
         * @param float $size
         * @param array<array-key, mixed> $position
         * @param string $font
         * @param int $color
         * @param string $alignment
         * @param float|int $orientation
         */
        public abstract function _drawText($text, $size, $position, $font, $color, $alignment = 'center', $orientation = 0);
    }
    class Zend_Barcode_Renderer_Svg extends \Zend_Barcode_Renderer_RendererAbstract
    {
        /**
         * @var DOMDocument
         */
        public $_resource;
        /**
         * @var DOMElement
         */
        public $_rootElement;
        /**
         * @var int
         */
        public $_userHeight;
        /**
         * @var int
         */
        public $_userWidth;
        /**
         * @param int|null $value
         *
         * @return Zend_Image_Barcode_Abstract
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setHeight($value)
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Barcode_Renderer_Svg
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setWidth($value)
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        /**
         * @return Zend_Barcode_Renderer
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function setResource($svg)
        {
        }
        /**
         * @return void
         */
        public function _initRenderer()
        {
        }
        public function _readRootElement()
        {
        }
        /**
         * @param string $tagName
         * @param array<array-key, mixed> $attributes
         * @param null|string $textContent
         */
        public function _appendRootElement($tagName, $attributes = array(), $textContent = null)
        {
        }
        /**
         * @param string $tagName
         * @param array<array-key, mixed> $attributes
         * @param null|string $textContent
         *
         * @return DOMElement
         */
        public function _createElement($tagName, $attributes = array(), $textContent = null)
        {
        }
        /**
         * @return void
         */
        public function _checkParams()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Barcode_Renderer_Exception
         */
        public function _checkDimensions()
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Exception
         * @throws Zend_Barcode_Exception
         */
        public function draw()
        {
        }
        /**
         * @return mixed
         */
        public function render()
        {
        }
        /**
         * @param array<array-key, mixed> $points
         * @param int $color
         * @param bool $filled
         */
        public function _drawPolygon($points, $color, $filled = true)
        {
        }
        /**
         * @param string $text
         * @param float $size
         * @param array<array-key, mixed> $position
         * @param string $font
         * @param int $color
         * @param string $alignment
         * @param float|int $orientation
         */
        public function _drawText($text, $size, $position, $font, $color, $alignment = 'center', $orientation = 0)
        {
        }
    }
    class Zend_Cache
    {
        public const CLEANING_MODE_ALL = 'all';
        public const CLEANING_MODE_OLD = 'old';
        public const CLEANING_MODE_MATCHING_TAG = 'matchingTag';
        public const CLEANING_MODE_NOT_MATCHING_TAG = 'notMatchingTag';
        public const CLEANING_MODE_MATCHING_ANY_TAG = 'matchingAnyTag';
        /**
         * @var array<array-key, mixed>
         */
        public static $standardFrontends;
        /**
         * @var array<array-key, mixed>
         */
        public static $standardBackends;
        /**
         * @var array<array-key, mixed>
         */
        public static $standardExtendedBackends;
        /**
         * @var array<array-key, mixed>
         */
        public static $availableFrontends;
        /**
         * @var array<array-key, mixed>
         */
        public static $availableBackends;
        /**
         * @param mixed $frontend
         * @param mixed $backend
         * @param array<array-key, mixed> $frontendOptions
         * @param array<array-key, mixed> $backendOptions
         * @param bool $customFrontendNaming
         * @param bool $customBackendNaming
         * @param bool $autoload
         *
         * @return Zend_Cache_Core|Zend_Cache_Frontend
         *
         * @throws Zend_Cache_Exception
         */
        public static function factory($frontend, $backend, $frontendOptions = array(), $backendOptions = array(), $customFrontendNaming = false, $customBackendNaming = false, $autoload = false)
        {
        }
        /**
         * @param string $backend
         * @param array<array-key, mixed> $backendOptions
         * @param bool $customBackendNaming
         * @param bool $autoload
         *
         * @return Zend_Cache_Backend
         */
        public static function _makeBackend($backend, $backendOptions, $customBackendNaming = false, $autoload = false)
        {
        }
        /**
         * @param string $frontend
         * @param array<array-key, mixed> $frontendOptions
         * @param bool $customFrontendNaming
         * @param bool $autoload
         *
         * @return Zend_Cache_Core|Zend_Cache_Frontend
         */
        public static function _makeFrontend($frontend, $frontendOptions = array(), $customFrontendNaming = false, $autoload = false)
        {
        }
        /**
         * @param string $msg
         *
         * @throws Zend_Cache_Exception
         */
        public static function throwException($msg, ?\Exception $e = null)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public static function _normalizeName($name)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public static function _isReadable($filename)
        {
        }
    }
    class Zend_Cache_Backend
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_directives;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param array<array-key, mixed> $options
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $directives
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setDirectives($directives)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setOption($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         *
         * @throws Zend_Cache_Exceptions
         */
        public function getOption($name)
        {
        }
        /**
         * @param int $specificLifetime
         *
         * @return int
         */
        public function getLifetime($specificLifetime)
        {
        }
        /**
         * @return bool
         */
        public function isAutomaticCleaningAvailable()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Cache_Exception
         */
        public function getTmpDir()
        {
        }
        /**
         * @param string $dir
         *
         * @return bool
         */
        public function _isGoodTmpDir($dir)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function _loggerSanity()
        {
        }
        /**
         * @param string $message
         * @param int $priority
         *
         * @return void
         */
        public function _log($message, $priority = 4)
        {
        }
    }
    class Zend_Cache_Backend_Apc extends \Zend_Cache_Backend
    {
        public const TAGS_UNSUPPORTED_BY_CLEAN_OF_APC_BACKEND = 'Zend_Cache_Backend_Apc::clean() : tags are unsupported by the Apc backend';
        public const TAGS_UNSUPPORTED_BY_SAVE_OF_APC_BACKEND = 'Zend_Cache_Backend_Apc::save() : tags are unsupported by the Apc backend';
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return bool
         */
        public function isAutomaticCleaningAvailable()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Cache_Exception
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
    }
    class Zend_Cache_Backend_BlackHole extends \Zend_Cache_Backend
    {
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return false|string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         *
         * @return bool
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Cache_Exception
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @param string $id
         */
        public function ___expire($id)
        {
        }
    }
    interface Zend_Cache_Backend_ExtendedInterface extends \Zend_Cache_Backend_Interface
    {
        /**
         * @return array<array-key, mixed>
         */
        public function getIds();
        /**
         * @return array<array-key, mixed>
         */
        public function getTags();
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array());
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array());
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array());
        /**
         * @return int
         */
        public function getFillingPercentage();
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id);
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime);
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities();
    }
    class Zend_Cache_Backend_File extends \Zend_Cache_Backend
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_metadatasArray;
        /**
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $value
         * @param bool $trailingSeparator
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setCacheDir($value, $trailingSeparator = true)
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return false|string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param bool|int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Cache_Exception
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @param string $id
         */
        public function ___expire($id)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>|false
         */
        public function _getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param array<array-key, mixed> $metadatas
         * @param bool $save
         *
         * @return bool
         */
        public function _setMetadatas($id, $metadatas, $save = true)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function _delMetadatas($id)
        {
        }
        /**
         * @return void
         */
        public function _cleanMetadatas()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>|false
         */
        public function _loadMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param array<array-key, mixed> $metadatas
         *
         * @return bool
         */
        public function _saveMetadatas($id, $metadatas)
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function _metadatasFile($id)
        {
        }
        /**
         * @param string $fileName
         *
         * @return bool
         */
        public function _isMetadatasFile($fileName)
        {
        }
        /**
         * @param string $file
         *
         * @return bool
         */
        public function _remove($file)
        {
        }
        /**
         * @param string $dir
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function _clean($dir, $mode, $tags = array())
        {
        }
        public function _get($dir, $mode, $tags = array())
        {
        }
        /**
         * @param int $lifetime
         *
         * @return int
         */
        public function _expireTime($lifetime)
        {
        }
        /**
         * @param string $data
         * @param string $controlType
         *
         * @return string
         *
         * @throws Zend_Cache_Exception
         */
        public function _hash($data, $controlType)
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function _idToFileName($id)
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function _file($id)
        {
        }
        /**
         * @param string $id
         * @param bool $parts
         *
         * @return string
         */
        public function _path($id, $parts = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function _recursiveMkdirAndChmod($id)
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return bool|mixed
         */
        public function _test($id, $doNotTestCacheValidity)
        {
        }
        /**
         * @param string $file
         *
         * @return string
         */
        public function _fileGetContents($file)
        {
        }
        /**
         * @param string $file
         * @param string $string
         *
         * @return bool
         */
        public function _filePutContents($file, $string)
        {
        }
        /**
         * @param string $fileName
         *
         * @return string
         */
        public function _fileNameToId($fileName)
        {
        }
    }
    interface Zend_Cache_Backend_Interface
    {
        /**
         * @param array<array-key, mixed> $directives
         */
        public function setDirectives($directives);
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return false|string
         */
        public function load($id, $doNotTestCacheValidity = false);
        /**
         * @param string $id
         *
         * @return false|mixed
         */
        public function test($id);
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false);
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id);
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         */
        public function clean($mode, $tags = array());
    }
    class Zend_Cache_Backend_Libmemcached extends \Zend_Cache_Backend
    {
        public const DEFAULT_HOST = '127.0.0.1';
        public const DEFAULT_PORT = 11211;
        public const DEFAULT_WEIGHT = 1;
        public const TAGS_UNSUPPORTED_BY_CLEAN_OF_LIBMEMCACHED_BACKEND = 'Zend_Cache_Backend_Libmemcached::clean() : tags are unsupported by the Libmemcached backend';
        public const TAGS_UNSUPPORTED_BY_SAVE_OF_LIBMEMCACHED_BACKEND = 'Zend_Cache_Backend_Libmemcached::save() : tags are unsupported by the Libmemcached backend';
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var mixed
         */
        public $_memcache;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return false|string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return false|int
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return bool
         */
        public function isAutomaticCleaningAvailable()
        {
        }
        /**
         * @param array<array-key, mixed> $directives
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setDirectives($directives)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Cache_Exception
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
    }
    class Zend_Cache_Backend_Memcached extends \Zend_Cache_Backend
    {
        public const DEFAULT_HOST = '127.0.0.1';
        public const DEFAULT_PORT = 11211;
        public const DEFAULT_PERSISTENT = true;
        public const DEFAULT_WEIGHT = 1;
        public const DEFAULT_TIMEOUT = 1;
        public const DEFAULT_RETRY_INTERVAL = 15;
        public const DEFAULT_STATUS = true;
        public const DEFAULT_FAILURE_CALLBACK = null;
        public const TAGS_UNSUPPORTED_BY_CLEAN_OF_MEMCACHED_BACKEND = 'Zend_Cache_Backend_Memcached::clean() : tags are unsupported by the Memcached backend';
        public const TAGS_UNSUPPORTED_BY_SAVE_OF_MEMCACHED_BACKEND = 'Zend_Cache_Backend_Memcached::save() : tags are unsupported by the Memcached backend';
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var mixed
         */
        public $_memcache;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return false|string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return false|mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return bool
         */
        public function isAutomaticCleaningAvailable()
        {
        }
        /**
         * @param array<array-key, mixed> $directives
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setDirectives($directives)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Cache_Exception
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
    }
    class Zend_Cache_Backend_Sqlite extends \Zend_Cache_Backend
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var mixed
         */
        public $_db;
        /**
         * @var bool
         */
        public $_structureChecked;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return false|string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return false|mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Cache_Exception
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @param string $id
         */
        public function ___expire($id)
        {
        }
        /**
         * @return resource
         *
         * @throws Zend_Cache_Exception
         */
        public function _getConnection()
        {
        }
        /**
         * @param string $query
         *
         * @return false|mixed
         */
        public function _query($query)
        {
        }
        /**
         * @return void
         */
        public function _automaticVacuum()
        {
        }
        /**
         * @param string $id
         * @param string $tag
         *
         * @return bool
         */
        public function _registerTag($id, $tag)
        {
        }
        /**
         * @return false
         */
        public function _buildStructure()
        {
        }
        /**
         * @return bool
         */
        public function _checkStructureVersion()
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         */
        public function _clean($mode, $tags = array())
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function _checkAndBuildStructure()
        {
        }
    }
    class Zend_Cache_Backend_Static extends \Zend_Cache_Backend
    {
        public const INNER_CACHE_NAME = 'zend_cache_backend_static_tagcache';
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var Zend_Cache_Core
         */
        public $_tagCache;
        /**
         * @var array<array-key, mixed>
         */
        public $_tagged;
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Cache_Backend_Static
         *
         * @throws Zend_Cache_Exception
         */
        public function setOption($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         *
         * @throws Zend_Cache_Exceptions
         */
        public function getOption($name)
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return false|string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        public function _createDirectoriesFor($path)
        {
        }
        public function _isSerialized($data)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function removeRecursively($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
        public function setInnerCache(\Zend_Cache_Core $cache)
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public function getInnerCache()
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        public function _verifyPath($path)
        {
        }
        /**
         * @return string
         */
        public function _detectId()
        {
        }
        /**
         * @param string $string
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public static function _validateIdOrTag($string)
        {
        }
        /**
         * @param string $val
         *
         * @return int
         */
        public function _octdec($val)
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function _decodeId($id)
        {
        }
    }
    class Zend_Cache_Backend_Test extends \Zend_Cache_Backend
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_directives;
        /**
         * @var array<array-key, mixed>
         */
        public $_log;
        /**
         * @var int
         */
        public $_index;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $directives
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setDirectives($directives)
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return false|mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return string
         */
        public function getLastLog()
        {
        }
        /**
         * @return int
         */
        public function getLogIndex()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAllLogs()
        {
        }
        /**
         * @return bool
         */
        public function isAutomaticCleaningAvailable()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return int
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @param string $methodName
         * @param array<array-key, mixed> $args
         *
         * @return void
         */
        public function _addLog($methodName, $args)
        {
        }
    }
    class Zend_Cache_Backend_TwoLevels extends \Zend_Cache_Backend
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var Zend_Cache_Backend_ExtendedInterface
         */
        public $_slowBackend;
        /**
         * @var Zend_Cache_Backend_ExtendedInterface
         */
        public $_fastBackend;
        /**
         * @var int
         */
        public $_fastBackendFillingPercentage;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         *
         * @return false|mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         * @param int $priority
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false, $priority = 8)
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return false|string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return int
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @param string $data
         * @param int $lifetime
         * @param int $priority
         *
         * @return string
         */
        public function _prepareData($data, $lifetime, $priority)
        {
        }
        /**
         * @param int $lifetime
         * @param int $priority
         * @param int|null $maxLifetime
         *
         * @return int
         */
        public function _getFastLifetime($lifetime, $priority, $maxLifetime = null)
        {
        }
        /**
         * @param string $id
         */
        public function ___expire($id)
        {
        }
        public function _getFastFillingPercentage($mode)
        {
        }
    }
    class Zend_Cache_Backend_WinCache extends \Zend_Cache_Backend
    {
        public const TAGS_UNSUPPORTED_BY_CLEAN_OF_WINCACHE_BACKEND = 'Zend_Cache_Backend_WinCache::clean() : tags are unsupported by the WinCache backend';
        public const TAGS_UNSUPPORTED_BY_SAVE_OF_WINCACHE_BACKEND = 'Zend_Cache_Backend_WinCache::save() : tags are unsupported by the WinCache backend';
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return bool
         */
        public function isAutomaticCleaningAvailable()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Cache_Exception
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
    }
    class Zend_Cache_Backend_Xcache extends \Zend_Cache_Backend
    {
        public const TAGS_UNSUPPORTED_BY_CLEAN_OF_XCACHE_BACKEND = 'Zend_Cache_Backend_Xcache::clean() : tags are unsupported by the Xcache backend';
        public const TAGS_UNSUPPORTED_BY_SAVE_OF_XCACHE_BACKEND = 'Zend_Cache_Backend_Xcache::save() : tags are unsupported by the Xcache backend';
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @return bool
         */
        public function isAutomaticCleaningAvailable()
        {
        }
    }
    class Zend_Cache_Backend_ZendPlatform extends \Zend_Cache_Backend
    {
        public const TAGS_PREFIX = 'internal_ZPtag:';
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return false|mixed
         */
        public function test($id)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
        /**
         * @param string $dir
         * @param string $mode
         *
         * @return bool
         */
        public function _clean($dir, $mode)
        {
        }
        /**
         * @param string $file
         *
         * @return bool
         */
        public function _remove($file)
        {
        }
    }
    class Zend_Cache_Backend_ZendServer extends \Zend_Cache_Backend
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param mixed $data
         * @param string $id
         * @param int $timeToLive
         *
         * @throws Zend_Cache_Exception
         */
        public abstract function _store($data, $id, $timeToLive);
        /**
         * @param string $id
         *
         * @throws Zend_Cache_Exception
         */
        public abstract function _fetch($id);
        /**
         * @param string $id
         */
        public abstract function _unset($id);
        public abstract function _clear();
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         *
         * @return string
         */
        public function load($id, $doNotTestCacheValidity = false)
        {
        }
        /**
         * @param string $id
         *
         * @return mixed
         *
         * @throws Zend_Cache_Exception
         */
        public function test($id)
        {
        }
        /**
         * @return int
         */
        public function _expireTime($lifetime)
        {
        }
        /**
         * @param string $data
         * @param string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         *
         * @return bool
         */
        public function save($data, $id, $tags = array(), $specificLifetime = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed> $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode, $tags = array())
        {
        }
    }
    class Zend_Cache_Backend_ZendServer_Disk extends \Zend_Cache_Backend_ZendServer
    {
        /**
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param mixed $data
         * @param string $id
         * @param int $timeToLive
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function _store($data, $id, $timeToLive)
        {
        }
        /**
         * @param string $id
         *
         * @return mixed|null
         *
         * @throws Zend_Cache_Exception
         */
        public function _fetch($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function _unset($id)
        {
        }
        public function _clear()
        {
        }
    }
    class Zend_Cache_Backend_ZendServer_ShMem extends \Zend_Cache_Backend_ZendServer
    {
        /**
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param mixed $data
         * @param string $id
         * @param int $timeToLive
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function _store($data, $id, $timeToLive)
        {
        }
        /**
         * @param string $id
         *
         * @return mixed|null
         *
         * @throws Zend_Cache_Exception
         */
        public function _fetch($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function _unset($id)
        {
        }
        public function _clear()
        {
        }
    }
    class Zend_Cache_Core
    {
        public const BACKEND_NOT_SUPPORTS_TAG = 'tags are not supported by the current backend';
        public const BACKEND_NOT_IMPLEMENTS_EXTENDED_IF = 'Current backend doesn\'t implement the Zend_Cache_Backend_ExtendedInterface, so this method is not available';
        /**
         * @var Zend_Cache_Backend_Interface
         */
        public $_backend;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public static $_directivesList;
        /**
         * @var array<array-key, mixed>
         */
        public $_specificOptions;
        /**
         * @var string
         */
        public $_lastId;
        /**
         * @var bool
         */
        public $_extendedBackend;
        /**
         * @var array<array-key, mixed>
         */
        public $_backendCapabilities;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Cache_Core
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param Zend_Cache_Backend $backendObject
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setBackend(\Zend_Cache_Backend $backendObject)
        {
        }
        /**
         * @return Zend_Cache_Backend
         */
        public function getBackend()
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setOption($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         *
         * @throws Zend_Cache_Exception
         */
        public function getOption($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function _setOption($name, $value)
        {
        }
        /**
         * @param int $newLifetime
         *
         * @return void
         */
        public function setLifetime($newLifetime)
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         * @param bool $doNotUnserialize
         *
         * @return false|mixed
         */
        public function load($id, $doNotTestCacheValidity = false, $doNotUnserialize = false)
        {
        }
        /**
         * @param string $id
         *
         * @return false|int
         */
        public function test($id)
        {
        }
        /**
         * @param mixed $data
         * @param null|string $id
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         * @param int $priority
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function save($data, $id = null, $tags = array(), $specificLifetime = false, $priority = 8)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function remove($id)
        {
        }
        /**
         * @param string $mode
         * @param array<array-key, mixed>|string $tags
         *
         * @return bool
         *
         * @throws Zend_Cache_Exception
         */
        public function clean($mode = 'all', $tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsNotMatchingTags($tags = array())
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return array<array-key, mixed>
         */
        public function getIdsMatchingAnyTags($tags = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIds()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @return int
         */
        public function getFillingPercentage()
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getMetadatas($id)
        {
        }
        /**
         * @param string $id
         * @param int $extraLifetime
         *
         * @return bool
         */
        public function touch($id, $extraLifetime)
        {
        }
        /**
         * @param string $string
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function _validateIdOrTag($string)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function _validateTagsArray($tags)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function _loggerSanity()
        {
        }
        /**
         * @param string $message
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function _log($message, $priority = 4)
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function _id($id)
        {
        }
    }
    class Zend_Cache_Exception extends \Zend_Exception
    {
    }
    class Zend_Cache_Frontend_Capture extends \Zend_Cache_Core
    {
        public const BACKEND_NOT_SUPPORTS_TAG = 'tags are not supported by the current backend';
        public const BACKEND_NOT_IMPLEMENTS_EXTENDED_IF = 'Current backend doesn\'t implement the Zend_Cache_Backend_ExtendedInterface, so this method is not available';
        /**
         * @var array<array-key, mixed>
         */
        public $_idStack;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        public $_extension = null;
        /**
         * @param string $id
         *
         * @return mixed
         */
        public function start($id, array $tags, $extension = null)
        {
        }
        /**
         * @param string $data
         *
         * @return string
         */
        public function _flush($data)
        {
        }
    }
    class Zend_Cache_Frontend_Class extends \Zend_Cache_Core
    {
        public const BACKEND_NOT_SUPPORTS_TAG = 'tags are not supported by the current backend';
        public const BACKEND_NOT_IMPLEMENTS_EXTENDED_IF = 'Current backend doesn\'t implement the Zend_Cache_Backend_ExtendedInterface, so this method is not available';
        /**
         * @var array<array-key, mixed>
         */
        public $_specificOptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        /**
         * @var bool|int
         */
        public $_specificLifetime;
        /**
         * @var mixed
         */
        public $_cachedEntity;
        /**
         * @var string
         */
        public $_cachedEntityLabel;
        /**
         * @var int
         */
        public $_priority;
        /**
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param bool|int $specificLifetime
         *
         * @return void
         */
        public function setSpecificLifetime($specificLifetime = false)
        {
        }
        /**
         * @param int $priority
         */
        public function setPriority($priority)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setOption($name, $value)
        {
        }
        /**
         * @param mixed $cachedEntity
         */
        public function setCachedEntity($cachedEntity)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return void
         */
        public function setTagsArray($tags = array())
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $parameters
         *
         * @return mixed
         *
         * @throws Exception
         */
        public function __call($name, $parameters)
        {
        }
        public function _makeId($name, $args)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $args
         *
         * @return string
         */
        public function makeId($name, array $args = array())
        {
        }
    }
    class Zend_Cache_Frontend_File extends \Zend_Cache_Core
    {
        public const BACKEND_NOT_SUPPORTS_TAG = 'tags are not supported by the current backend';
        public const BACKEND_NOT_IMPLEMENTS_EXTENDED_IF = 'Current backend doesn\'t implement the Zend_Cache_Backend_ExtendedInterface, so this method is not available';
        public const MODE_AND = 'AND';
        public const MODE_OR = 'OR';
        /**
         * @var array<array-key, mixed>
         */
        public $_specificOptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_masterFile_mtimes;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $masterFiles
         */
        public function setMasterFiles(array $masterFiles)
        {
        }
        /**
         * @param string $masterFile
         */
        public function setMasterFile($masterFile)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function setOption($name, $value)
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         * @param bool $doNotUnserialize
         *
         * @return false|mixed
         */
        public function load($id, $doNotTestCacheValidity = false, $doNotUnserialize = false)
        {
        }
        /**
         * @param string $id
         *
         * @return false|int
         */
        public function test($id)
        {
        }
    }
    class Zend_Cache_Frontend_Function extends \Zend_Cache_Core
    {
        public const BACKEND_NOT_SUPPORTS_TAG = 'tags are not supported by the current backend';
        public const BACKEND_NOT_IMPLEMENTS_EXTENDED_IF = 'Current backend doesn\'t implement the Zend_Cache_Backend_ExtendedInterface, so this method is not available';
        /**
         * @var array<array-key, mixed>
         */
        public $_specificOptions;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param callback $callback
         * @param array<array-key, mixed> $parameters
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         * @param int $priority
         *
         * @return mixed
         */
        public function call($callback, array $parameters = array(), $tags = array(), $specificLifetime = false, $priority = 8)
        {
        }
        public function _makeId($callback, array $args)
        {
        }
        /**
         * @param callback $callback
         * @param array<array-key, mixed> $args
         *
         * @return string
         *
         * @throws Zend_Cache_Exception
         */
        public function makeId($callback, array $args = array())
        {
        }
    }
    class Zend_Cache_Frontend_Output extends \Zend_Cache_Core
    {
        public const BACKEND_NOT_SUPPORTS_TAG = 'tags are not supported by the current backend';
        public const BACKEND_NOT_IMPLEMENTS_EXTENDED_IF = 'Current backend doesn\'t implement the Zend_Cache_Backend_ExtendedInterface, so this method is not available';
        public $_idStack = array();
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         * @param bool $doNotTestCacheValidity
         * @param bool $echoData
         *
         * @return mixed
         */
        public function start($id, $doNotTestCacheValidity = false, $echoData = true)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         * @param int $specificLifetime
         * @param null|string $forcedDatas
         * @param bool $echoData
         * @param int $priority
         *
         * @return void
         */
        public function end($tags = array(), $specificLifetime = false, $forcedDatas = null, $echoData = true, $priority = 8)
        {
        }
    }
    class Zend_Cache_Frontend_Page extends \Zend_Cache_Core
    {
        public const BACKEND_NOT_SUPPORTS_TAG = 'tags are not supported by the current backend';
        public const BACKEND_NOT_IMPLEMENTS_EXTENDED_IF = 'Current backend doesn\'t implement the Zend_Cache_Backend_ExtendedInterface, so this method is not available';
        /**
         * @var array<array-key, mixed>
         */
        public $_specificOptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_activeOptions;
        /**
         * @var bool
         */
        public $_cancel;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function _setDefaultOptions($options)
        {
        }
        /**
         * @param bool $value
         *
         * @return void
         */
        public function _setContentTypeMemorization($value)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Cache_Exception
         */
        public function _setRegexps($regexps)
        {
        }
        /**
         * @param string $id
         * @param bool $doNotDie
         *
         * @return bool
         */
        public function start($id = false, $doNotDie = false)
        {
        }
        public function cancel()
        {
        }
        /**
         * @param string $data
         *
         * @return string
         */
        public function _flush($data)
        {
        }
        /**
         * @return false|mixed
         */
        public function _makeId()
        {
        }
        /**
         * @param string $arrayName
         * @param bool $bool1
         * @param bool $bool2
         *
         * @return false|mixed
         */
        public function _makePartialId($arrayName, $bool1, $bool2)
        {
        }
    }
    class Zend_Cache_Manager
    {
        public const PAGECACHE = 'page';
        public const PAGETAGCACHE = 'pagetag';
        /**
         * @var array<array-key, mixed>
         */
        public $_caches;
        /**
         * @var array<array-key, mixed>
         */
        public $_optionTemplates;
        /**
         * @param string $name
         * @param Zend_Cache_Core $cache
         *
         * @return Zend_Cache_Manager
         */
        public function setCache($name, \Zend_Cache_Core $cache)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasCache($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Cache_Core
         */
        public function getCache($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCaches()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Cache_Manager
         *
         * @throws Zend_Cache_Exception
         */
        public function setCacheTemplate($name, $options)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasCacheTemplate($name)
        {
        }
        /**
         * @param string $name
         *
         * @return array<array-key, mixed>
         */
        public function getCacheTemplate($name)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Cache_Manager
         *
         * @throws Zend_Cache_Exception
         */
        public function setTemplateOptions($name, $options)
        {
        }
        /**
         * @param array<array-key, mixed> $current
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function _mergeOptions(array $current, array $options)
        {
        }
    }
    interface Zend_Captcha_Adapter extends \Zend_Validate_Interface
    {
        /**
         * @return string
         */
        public function generate();
        /**
         * @param Zend_View_Interface|null $view
         * @param mixed|null $element
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null, $element = null);
        /**
         * @param string $name
         *
         * @return Zend_Captcha_Adapter
         */
        public function setName($name);
        /**
         * @return string
         */
        public function getName();
        /**
         * @return Zend_Form_Decorator_Interface|string
         */
        public function getDecorator();
    }
    class Zend_Captcha_Base extends \Zend_Validate_Abstract
    {
        /**
         * @var string
         */
        public $_name;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Captcha_Adapter
         */
        public function setName($name)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return Zend_Form_Element
         */
        public function setOption($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Form_Element
         */
        public function setOptions($options = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Captcha_Base
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @return null
         */
        public function getDecorator()
        {
        }
    }
    class Zend_Captcha_Dumb extends \Zend_Captcha_Word
    {
        public const MISSING_VALUE = 'missingValue';
        public const MISSING_ID = 'missingID';
        public const BAD_CAPTCHA = 'badCaptcha';
        public $_label = 'Please type this word backwards';
        /**
         * @param string $label
         */
        public function setLabel($label)
        {
        }
        /**
         * @return string
         */
        public function getLabel()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         * @param mixed|null $element
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null, $element = null)
        {
        }
    }
    class Zend_Captcha_Exception extends \Zend_Exception
    {
    }
    class Zend_Captcha_Figlet extends \Zend_Captcha_Word
    {
        public const MISSING_VALUE = 'missingValue';
        public const MISSING_ID = 'missingID';
        public const BAD_CAPTCHA = 'badCaptcha';
        /**
         * @var Zend_Text_Figlet
         */
        public $_figlet;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         * @param mixed|null $element
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null, $element = null)
        {
        }
    }
    class Zend_Captcha_Image extends \Zend_Captcha_Word
    {
        public const MISSING_VALUE = 'missingValue';
        public const MISSING_ID = 'missingID';
        public const BAD_CAPTCHA = 'badCaptcha';
        /**
         * @var string
         */
        public $_imgDir;
        /**
         * @var string
         */
        public $_imgUrl;
        /**
         * @var string
         */
        public $_imgAlt;
        /**
         * @var string
         */
        public $_suffix;
        /**
         * @var int
         */
        public $_width;
        /**
         * @var int
         */
        public $_height;
        /**
         * @var int
         */
        public $_fsize;
        /**
         * @var string
         */
        public $_font;
        /**
         * @var string
         */
        public $_startImage;
        /**
         * @var int
         */
        public $_gcFreq;
        /**
         * @var int
         */
        public $_expiration;
        /**
         * @var int
         */
        public $_dotNoiseLevel;
        /**
         * @var int
         */
        public $_lineNoiseLevel;
        /**
         * @return string
         */
        public function getImgAlt()
        {
        }
        /**
         * @return string
         */
        public function getStartImage()
        {
        }
        /**
         * @return int
         */
        public function getDotNoiseLevel()
        {
        }
        /**
         * @return int
         */
        public function getLineNoiseLevel()
        {
        }
        /**
         * @return int
         */
        public function getExpiration()
        {
        }
        /**
         * @return int
         */
        public function getGcFreq()
        {
        }
        /**
         * @return string
         */
        public function getFont()
        {
        }
        /**
         * @return int
         */
        public function getFontSize()
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
        /**
         * @return string
         */
        public function getImgDir()
        {
        }
        /**
         * @return string
         */
        public function getImgUrl()
        {
        }
        /**
         * @return string
         */
        public function getSuffix()
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        /**
         * @param string $startImage
         *
         * @return Zend_Captcha_Image
         */
        public function setStartImage($startImage)
        {
        }
        /**
         * @param int $dotNoiseLevel
         *
         * @return Zend_Captcha_Image
         */
        public function setDotNoiseLevel($dotNoiseLevel)
        {
        }
        /**
         * @param int $lineNoiseLevel
         *
         * @return Zend_Captcha_Image
         */
        public function setLineNoiseLevel($lineNoiseLevel)
        {
        }
        /**
         * @param int $expiration
         *
         * @return Zend_Captcha_Image
         */
        public function setExpiration($expiration)
        {
        }
        /**
         * @param int $gcFreq
         *
         * @return Zend_Captcha_Image
         */
        public function setGcFreq($gcFreq)
        {
        }
        /**
         * @param string $font
         *
         * @return Zend_Captcha_Image
         */
        public function setFont($font)
        {
        }
        /**
         * @param int $fsize
         *
         * @return Zend_Captcha_Image
         */
        public function setFontSize($fsize)
        {
        }
        /**
         * @param int $height
         *
         * @return Zend_Captcha_Image
         */
        public function setHeight($height)
        {
        }
        /**
         * @param string $imgDir
         *
         * @return Zend_Captcha_Image
         */
        public function setImgDir($imgDir)
        {
        }
        /**
         * @param string $imgUrl
         *
         * @return Zend_Captcha_Image
         */
        public function setImgUrl($imgUrl)
        {
        }
        /**
         * @param string $imgAlt
         *
         * @return Zend_Captcha_Image
         */
        public function setImgAlt($imgAlt)
        {
        }
        /**
         * @param string $suffix
         *
         * @return Zend_Captcha_Image
         */
        public function setSuffix($suffix)
        {
        }
        /**
         * @param int $width
         *
         * @return Zend_Captcha_Image
         */
        public function setWidth($width)
        {
        }
        /**
         * @return float
         */
        public function _randomFreq()
        {
        }
        /**
         * @return float
         */
        public function _randomPhase()
        {
        }
        /**
         * @return int
         */
        public function _randomSize()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
        /**
         * @param string $id
         * @param string $word
         *
         * @throws Zend_Captcha_Exception
         */
        public function _generateImage($id, $word)
        {
        }
        public function _gc()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         * @param mixed|null $element
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null, $element = null)
        {
        }
    }
    class Zend_Captcha_ReCaptcha extends \Zend_Captcha_Base
    {
        public const MISSING_VALUE = 'missingValue';
        public const ERR_CAPTCHA = 'errCaptcha';
        public const BAD_CAPTCHA = 'badCaptcha';
        public $_CHALLENGE = 'recaptcha_challenge_field';
        public $_RESPONSE = 'recaptcha_response_field';
        /**
         * @var Zend_Service_Recaptcha
         */
        public $_service;
        /**
         * @var array<array-key, mixed>
         */
        public $_serviceParams;
        /**
         * @var array<array-key, mixed>
         */
        public $_serviceOptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @return string
         */
        public function getPrivkey()
        {
        }
        /**
         * @return string
         */
        public function getPubkey()
        {
        }
        /**
         * @param string $privkey
         *
         * @return Zend_Captcha_ReCaptcha
         */
        public function setPrivkey($privkey)
        {
        }
        /**
         * @param string $pubkey
         *
         * @return Zend_Captcha_ReCaptcha
         */
        public function setPubkey($pubkey)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param Zend_Service_ReCaptcha $service
         *
         * @return Zend_Captcha_ReCaptcha
         */
        public function setService(\Zend_Service_ReCaptcha $service)
        {
        }
        /**
         * @return Zend_Service_ReCaptcha
         */
        public function getService()
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Captcha_ReCaptcha
         */
        public function setOption($key, $value)
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed>|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         * @param mixed|null $element
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null, $element = null)
        {
        }
        /**
         * @return string
         */
        public function getDecorator()
        {
        }
    }
    class Zend_Captcha_Word extends \Zend_Captcha_Base
    {
        public const MISSING_VALUE = 'missingValue';
        public const MISSING_ID = 'missingID';
        public const BAD_CAPTCHA = 'badCaptcha';
        public static $V = 'Psalm could not infer this type';
        public static $VN = 'Psalm could not infer this type';
        public static $C = 'Psalm could not infer this type';
        public static $CN = 'Psalm could not infer this type';
        /**
         * @var string
         */
        public $_id;
        /**
         * @var string
         */
        public $_word;
        /**
         * @var Zend_Session_Namespace
         */
        public $_session;
        /**
         * @var string
         */
        public $_sessionClass;
        /**
         * @var bool
         */
        public $_useNumbers;
        /**
         * @var int
         */
        public $_timeout;
        /**
         * @var bool
         */
        public $_keepSession;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var int
         */
        public $_wordlen;
        /**
         * @return string
         */
        public function getSessionClass()
        {
        }
        /**
         * @param string $_sessionClass
         *
         * @return Zend_Captcha_Word
         */
        public function setSessionClass($_sessionClass)
        {
        }
        /**
         * @return int
         */
        public function getWordlen()
        {
        }
        /**
         * @param int $wordlen
         *
         * @return Zend_Captcha_Word
         */
        public function setWordlen($wordlen)
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Captcha_Word
         */
        public function _setId($id)
        {
        }
        /**
         * @param int $ttl
         *
         * @return Zend_Captcha_Word
         */
        public function setTimeout($ttl)
        {
        }
        /**
         * @return int
         */
        public function getTimeout()
        {
        }
        /**
         * @param bool $keepSession
         *
         * @return Zend_Captcha_Word
         */
        public function setKeepSession($keepSession)
        {
        }
        /**
         * @return bool
         */
        public function getUseNumbers()
        {
        }
        /**
         * @param bool $_useNumbers
         *
         * @return Zend_Captcha_Word
         */
        public function setUseNumbers($_useNumbers)
        {
        }
        /**
         * @return Zend_Session_Namespace
         */
        public function getSession()
        {
        }
        /**
         * @param Zend_Session_Namespace $session
         *
         * @return Zend_Captcha_Word
         */
        public function setSession(\Zend_Session_Namespace $session)
        {
        }
        /**
         * @return string
         */
        public function getWord()
        {
        }
        /**
         * @param string $word
         *
         * @return Zend_Captcha_Word
         */
        public function _setWord($word)
        {
        }
        /**
         * @return string
         */
        public function _generateWord()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
        public function _generateRandomId()
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed>|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
        /**
         * @return string
         */
        public function getDecorator()
        {
        }
    }
    class Zend_Cloud_AbstractFactory
    {
        public function __construct()
        {
        }
        /**
         * @param string $adapterOption
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Cloud_DocumentService_Adapter|Zend_Cloud_QueueService_Adapter|Zend_Cloud_StorageService_Adapter|null
         */
        public static function _getAdapter($adapterOption, $options)
        {
        }
    }
    interface Zend_Cloud_DocumentService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function createCollection($name, $options = null);
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteCollection($name, $options = null);
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listCollections($options = null);
        /**
         * @param string $collectionName
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Cloud_DocumentService_DocumentSet
         */
        public function listDocuments($collectionName, ?array $options = null);
        /**
         * @param string $collectionName
         * @param Zend_Cloud_DocumentService_Document $document
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function insertDocument($collectionName, $document, $options = null);
        /**
         * @param string $collectionName
         * @param Zend_Cloud_DocumentService_Document $document
         * @param array<array-key, mixed>|null $options
         */
        public function replaceDocument($collectionName, $document, $options = null);
        /**
         * @param string $collectionName
         * @param Zend_Cloud_DocumentService_Document|mixed $documentID
         * @param Zend_Cloud_DocumentService_Document|array<array-key, mixed>|null $fieldset
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function updateDocument($collectionName, $documentID, $fieldset = null, $options = null);
        /**
         * @param string $collectionName
         * @param mixed $documentID
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteDocument($collectionName, $documentID, $options = null);
        /**
         * @param string $collectionName
         * @param mixed $documentID
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Cloud_DocumentService_Document
         */
        public function fetchDocument($collectionName, $documentID, $options = null);
        /**
         * @param string $collectionName
         * @param string $query
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function query($collectionName, $query, $options = null);
        /**
         * @param null|string $fields
         *
         * @return Zend_Cloud_DocumentService_Query
         */
        public function select($fields = null);
        public function getClient();
    }
    class Zend_Cloud_DocumentService_Adapter_AbstractAdapter implements \Zend_Cloud_DocumentService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const DOCUMENT_CLASS = 'document_class';
        public const DOCUMENTSET_CLASS = 'documentset_class';
        public const QUERY_CLASS = 'query_class';
        /**
         * @var string
         */
        public $_documentClass;
        /**
         * @var string
         */
        public $_documentSetClass;
        /**
         * @var string
         */
        public $_queryClass;
        /**
         * @param string $class
         *
         * @return Zend_Cloud_DocumentService_Adapter_AbstractAdapter
         */
        public function setDocumentClass($class)
        {
        }
        /**
         * @return string
         */
        public function getDocumentClass()
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Cloud_DocumentService_Adapter_AbstractAdapter
         */
        public function setDocumentSetClass($class)
        {
        }
        /**
         * @return string
         */
        public function getDocumentSetClass()
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Cloud_DocumentService_Adapter_AbstractAdapter
         */
        public function setQueryClass($class)
        {
        }
        /**
         * @return string
         */
        public function getQueryClass()
        {
        }
    }
    class Zend_Cloud_DocumentService_Adapter_SimpleDb extends \Zend_Cloud_DocumentService_Adapter_AbstractAdapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const DOCUMENT_CLASS = 'document_class';
        public const DOCUMENTSET_CLASS = 'documentset_class';
        public const QUERY_CLASS = 'query_class';
        public const AWS_ACCESS_KEY = 'aws_accesskey';
        public const AWS_SECRET_KEY = 'aws_secretkey';
        public const ITEM_NAME = 'ItemName';
        public const MERGE_OPTION = 'merge';
        public const RETURN_DOCUMENTS = 'return_documents';
        public const DEFAULT_QUERY_CLASS = 'Zend_Cloud_DocumentService_Adapter_SimpleDb_Query';
        /**
         * @var Zend_Service_Amazon_SimpleDb
         */
        public $_simpleDb;
        /**
         * @var string
         */
        public $_queryClass;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function createCollection($name, $options = null)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteCollection($name, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listCollections($options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Cloud_DocumentService_DocumentSet
         */
        public function listDocuments($collectionName, ?array $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param Zend_Cloud_DocumentService_Document|array<array-key, mixed> $document
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function insertDocument($collectionName, $document, $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param Zend_Cloud_DocumentService_Document|array<array-key, mixed> $document
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function replaceDocument($collectionName, $document, $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param Zend_Cloud_DocumentService_Document|mixed $documentId
         * @param Zend_Cloud_DocumentService_Document|array<array-key, mixed>|null $fieldset
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function updateDocument($collectionName, $documentId, $fieldset = null, $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param mixed $document
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function deleteDocument($collectionName, $document, $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param mixed $documentId
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Cloud_DocumentService_Document
         */
        public function fetchDocument($collectionName, $documentId, $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param string $query
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function query($collectionName, $query, $options = null)
        {
        }
        /**
         * @param null|string $fields
         *
         * @return Zend_Cloud_DocumentService_Adapter_SimpleDb_Query
         */
        public function select($fields = null)
        {
        }
        /**
         * @return Zend_Service_Amazon_SimpleDb
         */
        public function getClient()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $attributes
         *
         * @return array<array-key, mixed>
         */
        public function _makeAttributes($name, $attributes)
        {
        }
        /**
         * @param array<array-key, mixed> $attributes
         *
         * @return array<array-key, mixed>
         */
        public function _resolveAttributes($attributes, $returnDocument = false)
        {
        }
        /**
         * @param array<array-key, mixed> $document
         *
         * @return Zend_Cloud_DocumentService_Document
         */
        public function _getDocumentFromArray($document)
        {
        }
        /**
         * @param Zend_Service_Amazon_SimpleDb_Page $resultSet
         * @param bool $returnDocs
         *
         * @return Zend_Cloud_DocumentService_DocumentSet
         */
        public function _getDocumentSetFromResultSet(\Zend_Service_Amazon_SimpleDb_Page $resultSet, $returnDocs = true)
        {
        }
    }
    class Zend_Cloud_DocumentService_Adapter_SimpleDb_Query extends \Zend_Cloud_DocumentService_Query
    {
        public const QUERY_SELECT = 'select';
        public const QUERY_FROM = 'from';
        public const QUERY_WHERE = 'where';
        public const QUERY_WHEREID = 'whereid';
        public const QUERY_LIMIT = 'limit';
        public const QUERY_ORDER = 'order';
        /**
         * @var Zend_Cloud_DocumentService_Adapter_SimpleDb
         */
        public $_adapter;
        /**
         * @param Zend_Cloud_DocumentService_Adapter_SimpleDb $adapter
         * @param null|string $collectionName
         *
         * @return void
         */
        public function __construct(\Zend_Cloud_DocumentService_Adapter_SimpleDb $adapter, $collectionName = null)
        {
        }
        /**
         * @return Zend_Cloud_DocumentService_Adapter_SimpleDb
         */
        public function getAdapter()
        {
        }
        /**
         * @return string
         */
        public function assemble($collectionName = null)
        {
        }
        /**
         * @param string $where
         * @param array<array-key, mixed> $args
         *
         * @return string
         */
        public function _parseWhere($where, $args)
        {
        }
    }
    class Zend_Cloud_DocumentService_Adapter_WindowsAzure extends \Zend_Cloud_DocumentService_Adapter_AbstractAdapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const DOCUMENT_CLASS = 'document_class';
        public const DOCUMENTSET_CLASS = 'documentset_class';
        public const QUERY_CLASS = 'query_class';
        public const ACCOUNT_NAME = 'storage_accountname';
        public const ACCOUNT_KEY = 'storage_accountkey';
        public const HOST = 'storage_host';
        public const PROXY_HOST = 'storage_proxy_host';
        public const PROXY_PORT = 'storage_proxy_port';
        public const PROXY_CREDENTIALS = 'storage_proxy_credentials';
        public const DEFAULT_PARTITION_KEY = 'default_partition_key';
        public const PARTITION_KEY = 'PartitionKey';
        public const ROW_KEY = 'RowKey';
        public const VERIFY_ETAG = 'verify_etag';
        public const TIMESTAMP_KEY = 'Timestamp';
        public const DEFAULT_QUERY_CLASS = 'Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query';
        /**
         * @var Zend_Service_WindowsAzure_Storage_Table
         */
        public $_storageClient;
        /**
         * @var string
         */
        public $_queryClass;
        /**
         * @var string
         */
        public $_defaultPartitionKey;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Cloud_DocumentService_Adapter_WindowsAzure
         */
        public function setDefaultPartitionKey($key)
        {
        }
        /**
         * @return null|string
         */
        public function getDefaultPartitionKey()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function createCollection($name, $options = null)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function deleteCollection($name, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listCollections($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $document
         * @param null|string $collectionName
         *
         * @return Zend_Cloud_DocumentService_Document
         */
        public function _getDocumentFromArray($document, $collectionName = null)
        {
        }
        /**
         * @param string $collectionName
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Cloud_DocumentService_DocumentSet
         */
        public function listDocuments($collectionName, ?array $options = null)
        {
        }
        /**
         * @param Zend_Cloud_DocumentService_Document|array<array-key, mixed> $document
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function insertDocument($collectionName, $document, $options = null)
        {
        }
        /**
         * @param Zend_Cloud_DocumentService_Document $document
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function replaceDocument($collectionName, $document, $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param Zend_Cloud_DocumentService_Document|mixed $documentId
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function updateDocument($collectionName, $documentId, $fieldset = null, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteDocument($collectionName, $documentId, $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param mixed $documentId
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Cloud_DocumentService_Document
         */
        public function fetchDocument($collectionName, $documentId, $options = null)
        {
        }
        /**
         * @param string $collectionName
         * @param Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query|string $query
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function query($collectionName, $query, $options = null)
        {
        }
        /**
         * @return Zend_Cloud_DocumentService_Query
         */
        public function select($fields = null)
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Storage_Table
         */
        public function getClient()
        {
        }
        /**
         * @param Zend_Service_WindowsAzure_Storage_TableEntity $entity
         *
         * @return array<array-key, mixed>
         */
        public function _resolveAttributes(\Zend_Service_WindowsAzure_Storage_TableEntity $entity)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         *
         * @throws Zend_Cloud_DocumentService_Exception
         */
        public function _validateKey($key)
        {
        }
        /**
         * @param array<array-key, mixed> $key
         *
         * @return throws
         */
        public function _validateCompositeKey(array $key)
        {
        }
        /**
         * @param array<array-key, mixed>|string $documentId
         * @param null|string $collectionName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Cloud_DocumentService_Exception
         */
        public function _validateDocumentId($documentId, $collectionName = false)
        {
        }
        /**
         * @param Zend_Cloud_DocumentService_Document|array<array-key, mixed> $document
         *
         * @return void
         *
         * @throws Zend_Cloud_DocumentService_Exception
         */
        public function _validateFields($document)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         *
         * @throws Zend_Cloud_DocumentService_Exception
         */
        public function _validateFieldKey($key)
        {
        }
    }
    class Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query implements \Zend_Cloud_DocumentService_QueryAdapter
    {
        /**
         * @var Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public $_azureSelect;
        /**
         * @param Zend_Service_WindowsAzure_Storage_TableEntityQuery|null $select
         *
         * @return void
         */
        public function __construct($select = null)
        {
        }
        /**
         * @param string $select
         *
         * @return Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query
         */
        public function select($select)
        {
        }
        /**
         * @param string $from
         *
         * @return Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query
         */
        public function from($from)
        {
        }
        /**
         * @param string $where
         * @param mixed|null $value
         * @param string $op
         *
         * @return Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query
         */
        public function where($where, $value = null, $op = 'and')
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query
         */
        public function whereId($value)
        {
        }
        /**
         * @param int $limit
         *
         * @return Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query
         */
        public function limit($limit)
        {
        }
        /**
         * @param string $sort
         * @param string $direction
         *
         * @return Zend_Cloud_DocumentService_Adapter_WindowsAzure_Query
         *
         * @throws Zend_Cloud_OperationNotAvailableException
         */
        public function order($sort, $direction = 'asc')
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function getAzureSelect()
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function assemble()
        {
        }
    }
    class Zend_Cloud_DocumentService_Document implements \ArrayAccess, \IteratorAggregate, \Countable
    {
        public const KEY_FIELD = '_id';
        /**
         * @var mixed
         */
        public $_id;
        /**
         * @var array<array-key, mixed>
         */
        public $_fields;
        /**
         * @param array<array-key, mixed> $fields
         * @param mixed|null $id
         *
         * @return void
         */
        public function __construct($fields, $id = null)
        {
        }
        /**
         * @param mixed $id
         *
         * @return Zend_Cloud_DocumentService_Document
         */
        public function setId($id)
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFields()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getField($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Cloud_DocumentService_Document
         */
        public function setField($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function offsetExists($name)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function offsetGet($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         */
        public function offsetSet($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function offsetUnset($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $args
         *
         * @return mixed
         */
        public function __call($name, $args)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Iterator
         */
        public function getIterator()
        {
        }
    }
    class Zend_Cloud_DocumentService_DocumentSet implements \Countable, \IteratorAggregate
    {
        /**
         * @var int
         */
        public $_documentCount;
        /**
         * @var ArrayIterator
         */
        public $_documents;
        /**
         * @param array<array-key, mixed> $documents
         *
         * @return void
         */
        public function __construct(array $documents)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Traversable
         */
        public function getIterator()
        {
        }
    }
    class Zend_Cloud_DocumentService_Exception extends \Zend_Cloud_Exception
    {
    }
    class Zend_Cloud_DocumentService_Factory extends \Zend_Cloud_AbstractFactory
    {
        public const DOCUMENT_ADAPTER_KEY = 'document_adapter';
        /**
         * @var string
         */
        public static $_adapterInterface;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public static function getAdapter($options = array())
        {
        }
    }
    class Zend_Cloud_DocumentService_Query implements \Zend_Cloud_DocumentService_QueryAdapter
    {
        public const QUERY_SELECT = 'select';
        public const QUERY_FROM = 'from';
        public const QUERY_WHERE = 'where';
        public const QUERY_WHEREID = 'whereid';
        public const QUERY_LIMIT = 'limit';
        public const QUERY_ORDER = 'order';
        /**
         * @var array<array-key, mixed>
         */
        public $_clauses;
        /**
         * @param string $name
         * @param mixed $args
         *
         * @return Zend_Cloud_DocumentService_Query
         */
        public function __call($name, $args)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $select
         *
         * @return Zend_Cloud_DocumentService_Query
         */
        public function select($select)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Cloud_DocumentService_Query
         */
        public function from($name)
        {
        }
        /**
         * @param string $cond
         * @param string $op
         *
         * @return Zend_Cloud_DocumentService_Query
         */
        public function where($cond, $value = null, $op = 'and')
        {
        }
        /**
         * @param int|string $value
         *
         * @return Zend_Cloud_DocumentService_Query
         */
        public function whereId($value)
        {
        }
        /**
         * @param int $limit
         *
         * @return Zend_Cloud_DocumentService_Query
         */
        public function limit($limit)
        {
        }
        /**
         * @param array<array-key, mixed>|int|string $sort
         * @param string $direction
         *
         * @return Zend_Cloud_DocumentService_Query
         */
        public function order($sort, $direction = 'asc')
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function assemble()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getClauses()
        {
        }
    }
    interface Zend_Cloud_DocumentService_QueryAdapter
    {
        /**
         * @param string $select
         *
         * @return Zend_Cloud_DocumentService_QueryAdapter
         */
        public function select($select);
        /**
         * @param string $from
         *
         * @return Zend_Cloud_DocumentService_QueryAdapter
         */
        public function from($from);
        /**
         * @param string $where
         * @param mixed|null $value
         * @param string $op
         *
         * @return Zend_Cloud_DocumentService_QueryAdapter
         */
        public function where($where, $value = null, $op = 'and');
        /**
         * @param mixed $value
         *
         * @return Zend_Cloud_DocumentService_QueryAdapter
         */
        public function whereId($value);
        /**
         * @param int $limit
         *
         * @return Zend_Cloud_DocumentService_QueryAdapter
         */
        public function limit($limit);
        /**
         * @param string $sort
         * @param string $direction
         *
         * @return Zend_Cloud_DocumentService_QueryAdapter
         */
        public function order($sort, $direction = 'asc');
        /**
         * @return mixed
         */
        public function assemble();
    }
    class Zend_Cloud_Exception extends \Zend_Exception
    {
        /**
         * @var Exception
         */
        public $_clientException;
        public function __construct($message, $code = 0, $clientException = null)
        {
        }
        public function getClientException()
        {
        }
    }
    interface Zend_Cloud_Infrastructure_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const TIMEOUT_STATUS_CHANGE = 30;
        public const TIME_STEP_STATUS_CHANGE = 5;
        /**
         * @return InstanceList
         */
        public function listInstances();
        /**
         * @param string $id
         *
         * @return string
         */
        public function statusInstance($id);
        /**
         * @param string $id
         * @param string $status
         * @param int $timeout
         *
         * @return bool
         */
        public function waitStatusInstance($id, $status, $timeout);
        /**
         * @param string $id
         *
         * @return bool|string
         */
        public function publicDnsInstance($id);
        /**
         * @param string $id
         *
         * @return bool
         */
        public function rebootInstance($id);
        /**
         * @param string $name
         * @param array<array-key, mixed> $options
         *
         * @return bool
         */
        public function createInstance($name, $options);
        /**
         * @param string $id
         *
         * @return bool
         */
        public function stopInstance($id);
        /**
         * @param string $id
         *
         * @return bool
         */
        public function startInstance($id);
        /**
         * @param string $id
         *
         * @return bool
         */
        public function destroyInstance($id);
        /**
         * @return ImageList
         */
        public function imagesInstance();
        /**
         * @return array<array-key, mixed>
         */
        public function zonesInstance();
        /**
         * @param string $id
         * @param string $metric
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function monitorInstance($id, $metric, $options = null);
        /**
         * @param string $id
         * @param array<array-key, mixed> $param
         * @param array<array-key, mixed>|string $cmd
         *
         * @return array<array-key, mixed>|string
         */
        public function deployInstance($id, $param, $cmd);
        /**
         * @return object
         */
        public function getAdapter();
        /**
         * @return array<array-key, mixed>
         */
        public function getAdapterResult();
        /**
         * @return Zend_Http_Response
         */
        public function getLastHttpResponse();
        /**
         * @return string
         */
        public function getLastHttpRequest();
    }
    class Zend_Cloud_Infrastructure_Adapter_AbstractAdapter implements \Zend_Cloud_Infrastructure_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const TIMEOUT_STATUS_CHANGE = 30;
        public const TIME_STEP_STATUS_CHANGE = 5;
        /**
         * @var array<array-key, mixed>
         */
        public $adapterResult;
        /**
         * @var array<array-key, mixed>
         */
        public $validMetrics;
        /**
         * @return array<array-key, mixed>
         */
        public function getAdapterResult()
        {
        }
        /**
         * @param string $id
         * @param string $status
         * @param int $timeout
         *
         * @return bool
         */
        public function waitStatusInstance($id, $status, $timeout)
        {
        }
        /**
         * @param string $id
         * @param array<array-key, mixed>|string $cmd
         *
         * @return array<array-key, mixed>|string
         */
        public function deployInstance($id, $params, $cmd)
        {
        }
    }
    class Zend_Cloud_Infrastructure_Adapter_Ec2 extends \Zend_Cloud_Infrastructure_Adapter_AbstractAdapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const TIMEOUT_STATUS_CHANGE = 30;
        public const TIME_STEP_STATUS_CHANGE = 5;
        public const AWS_ACCESS_KEY = 'aws_accesskey';
        public const AWS_SECRET_KEY = 'aws_secretkey';
        public const AWS_REGION = 'aws_region';
        public const AWS_SECURITY_GROUP = 'securityGroup';
        /**
         * @var Ec2Instance
         */
        public $ec2;
        /**
         * @var Ec2Image
         */
        public $ec2Image;
        /**
         * @var Ec2Zone
         */
        public $ec2Zone;
        /**
         * @var Ec2Monitor
         */
        public $ec2Monitor;
        /**
         * @var string
         */
        public $accessKey;
        /**
         * @var string
         */
        public $accessSecret;
        /**
         * @var string
         */
        public $region;
        /**
         * @var array<array-key, mixed>
         */
        public $mapStatus;
        /**
         * @var array<array-key, mixed>
         */
        public $mapMetrics;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $attr
         *
         * @return array<array-key, mixed>|bool
         */
        public function convertAttributes($attr)
        {
        }
        /**
         * @return Zend_Cloud_Infrastructure_InstanceList
         */
        public function listInstances()
        {
        }
        public function statusInstance($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool|string
         */
        public function publicDnsInstance($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function rebootInstance($id)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $options
         *
         * @return Instance|bool
         */
        public function createInstance($name, $options)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function stopInstance($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function startInstance($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function destroyInstance($id)
        {
        }
        /**
         * @return ImageList
         */
        public function imagesInstance()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function zonesInstance()
        {
        }
        /**
         * @param string $id
         * @param string $metric
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function monitorInstance($id, $metric, $options = null)
        {
        }
        /**
         * @return Zend_Service_Amazon_Ec2_Instance
         */
        public function getAdapter()
        {
        }
        /**
         * @return string
         */
        public function getLastHttpRequest()
        {
        }
        /**
         * @return Zend_Http_Response
         */
        public function getLastHttpResponse()
        {
        }
    }
    class Zend_Cloud_Infrastructure_Adapter_Rackspace extends \Zend_Cloud_Infrastructure_Adapter_AbstractAdapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const TIMEOUT_STATUS_CHANGE = 30;
        public const TIME_STEP_STATUS_CHANGE = 5;
        public const RACKSPACE_USER = 'rackspace_user';
        public const RACKSPACE_KEY = 'rackspace_key';
        public const RACKSPACE_REGION = 'rackspace_region';
        public const RACKSPACE_ZONE_USA = 'USA';
        public const RACKSPACE_ZONE_UK = 'UK';
        public const MONITOR_CPU_SAMPLES = 3;
        /**
         * @var Zend_Service_Rackspace_Servers
         */
        public $rackspace;
        /**
         * @var string
         */
        public $accessUser;
        /**
         * @var string
         */
        public $accessKey;
        /**
         * @var string
         */
        public $region;
        /**
         * @var array<array-key, mixed>
         */
        public $flavors;
        /**
         * @var array<array-key, mixed>
         */
        public $mapStatus;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $attr
         *
         * @return array<array-key, mixed>|bool
         */
        public function convertAttributes($attr)
        {
        }
        /**
         * @return InstanceList|bool
         */
        public function listInstances()
        {
        }
        public function statusInstance($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool|string
         */
        public function publicDnsInstance($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function rebootInstance($id)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $options
         *
         * @return Instance|bool
         */
        public function createInstance($name, $options)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function stopInstance($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function startInstance($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function destroyInstance($id)
        {
        }
        /**
         * @return ImageList|bool
         */
        public function imagesInstance()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function zonesInstance()
        {
        }
        /**
         * @param string $id
         * @param string $metric
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>|bool
         */
        public function monitorInstance($id, $metric, $options = null)
        {
        }
        /**
         * @return Zend_Service_Rackspace_Servers
         */
        public function getAdapter()
        {
        }
        /**
         * @return string
         */
        public function getLastHttpRequest()
        {
        }
        /**
         * @return Zend_Http_Response
         */
        public function getLastHttpResponse()
        {
        }
    }
    class Zend_Cloud_Infrastructure_Exception extends \Zend_Cloud_Exception
    {
    }
    class Zend_Cloud_Infrastructure_Factory extends \Zend_Cloud_AbstractFactory
    {
        public const INFRASTRUCTURE_ADAPTER_KEY = 'infrastructure_adapter';
        /**
         * @var string
         */
        public static $_adapterInterface;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public static function getAdapter($options = array())
        {
        }
    }
    class Zend_Cloud_Infrastructure_Image
    {
        public const IMAGE_ID = 'imageId';
        public const IMAGE_OWNERID = 'ownerId';
        public const IMAGE_NAME = 'name';
        public const IMAGE_DESCRIPTION = 'description';
        public const IMAGE_PLATFORM = 'platform';
        public const IMAGE_ARCHITECTURE = 'architecture';
        public const ARCH_32BIT = 'i386';
        public const ARCH_64BIT = 'x86_64';
        public const IMAGE_WINDOWS = 'windows';
        public const IMAGE_LINUX = 'linux';
        /**
         * @var array<array-key, mixed>
         */
        public $attributes;
        /**
         * @var object
         */
        public $adapter;
        /**
         * @var array<array-key, mixed>
         */
        public $attributeRequired;
        /**
         * @param array<array-key, mixed> $data
         * @param null|object $adapter
         */
        public function __construct($data, $adapter = null)
        {
        }
        /**
         * @return bool|misc
         */
        public function getAttribute($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttributes()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getOwnerId()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return string
         */
        public function getPlatform()
        {
        }
        /**
         * @return string
         */
        public function getArchitecture()
        {
        }
    }
    class Zend_Cloud_Infrastructure_ImageList implements \Countable, \Iterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $images;
        /**
         * @var int
         */
        public $iteratorKey;
        /**
         * @var object
         */
        public $adapter;
        /**
         * @param null|object $adapter
         *
         * @return bool
         */
        public function __construct($images, $adapter = null)
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function constructFromArray(array $list)
        {
        }
        public function addImage(\Zend_Cloud_Infrastructure_Image $image)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Image
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return Image
         *
         * @throws Zend_Cloud_Infrastructure_Exception
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $value
         *
         * @throws Zend_Cloud_Infrastructure_Exception
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Cloud_Infrastructure_Exception
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Cloud_Infrastructure_Instance
    {
        public const STATUS_RUNNING = 'running';
        public const STATUS_STOPPED = 'stopped';
        public const STATUS_SHUTTING_DOWN = 'shutting-down';
        public const STATUS_REBOOTING = 'rebooting';
        public const STATUS_TERMINATED = 'terminated';
        public const STATUS_PENDING = 'pending';
        public const STATUS_REBUILD = 'rebuild';
        public const INSTANCE_ID = 'id';
        public const INSTANCE_IMAGEID = 'imageId';
        public const INSTANCE_NAME = 'name';
        public const INSTANCE_STATUS = 'status';
        public const INSTANCE_PUBLICDNS = 'publicDns';
        public const INSTANCE_CPU = 'cpu';
        public const INSTANCE_RAM = 'ram';
        public const INSTANCE_STORAGE = 'storageSize';
        public const INSTANCE_ZONE = 'zone';
        public const INSTANCE_LAUNCHTIME = 'launchTime';
        public const MONITOR_CPU = 'CpuUsage';
        public const MONITOR_RAM = 'RamUsage';
        public const MONITOR_NETWORK_IN = 'NetworkIn';
        public const MONITOR_NETWORK_OUT = 'NetworkOut';
        public const MONITOR_DISK = 'DiskUsage';
        public const MONITOR_DISK_WRITE = 'DiskWrite';
        public const MONITOR_DISK_READ = 'DiskRead';
        public const MONITOR_START_TIME = 'StartTime';
        public const MONITOR_END_TIME = 'EndTime';
        public const SSH_USERNAME = 'username';
        public const SSH_PASSWORD = 'password';
        public const SSH_PRIVATE_KEY = 'privateKey';
        public const SSH_PUBLIC_KEY = 'publicKey';
        public const SSH_PASSPHRASE = 'passphrase';
        /**
         * @var Zend_Cloud_Infrastructure_Adapter
         */
        public $adapter;
        /**
         * @var array<array-key, mixed>
         */
        public $attributes;
        /**
         * @var array<array-key, mixed>
         */
        public $attributeRequired;
        /**
         * @param Adapter $adapter
         * @param array<array-key, mixed>|null $data
         *
         * @return void
         */
        public function __construct($adapter, $data = null)
        {
        }
        /**
         * @return false|misc
         */
        public function getAttribute($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttributes()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getImageId()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return bool|string
         */
        public function getStatus()
        {
        }
        /**
         * @param string $status
         * @param int $timeout
         *
         * @return bool
         */
        public function waitStatus($status, $timeout)
        {
        }
        /**
         * @return string
         */
        public function getPublicDns()
        {
        }
        /**
         * @return string
         */
        public function getCpu()
        {
        }
        /**
         * @return string
         */
        public function getRamSize()
        {
        }
        /**
         * @return string
         */
        public function getStorageSize()
        {
        }
        /**
         * @return string
         */
        public function getZone()
        {
        }
        /**
         * @return string
         */
        public function getLaunchTime()
        {
        }
        /**
         * @return bool
         */
        public function reboot()
        {
        }
        /**
         * @return bool
         */
        public function stop()
        {
        }
        /**
         * @return bool
         */
        public function start()
        {
        }
        /**
         * @return bool
         */
        public function destroy()
        {
        }
        /**
         * @param string $metric
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>|bool
         */
        public function monitor($metric, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $cmd
         *
         * @return array<array-key, mixed>|string
         */
        public function deploy($params, $cmd)
        {
        }
    }
    class Zend_Cloud_Infrastructure_InstanceList implements \Countable, \Iterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $instances;
        /**
         * @var int
         */
        public $iteratorKey;
        /**
         * @var Zend_Cloud_Infrastructure_Adapter
         */
        public $adapter;
        /**
         * @param Adapter $adapter
         * @param array<array-key, mixed>|null $instances
         *
         * @return void
         */
        public function __construct($adapter, ?array $instances = null)
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function constructFromArray(array $list)
        {
        }
        public function addInstance(\Zend_Cloud_Infrastructure_Instance $instance)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Instance
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return Instance
         *
         * @throws Zend_Cloud_Infrastructure_Exception
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $value
         *
         * @throws Zend_Cloud_Infrastructure_Exception
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Cloud_Infrastructure_Exception
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Cloud_OperationNotAvailableException extends \Zend_Exception
    {
    }
    interface Zend_Cloud_QueueService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const VISIBILITY_TIMEOUT = 'visibility_timeout';
        public const DEFAULT_TIMEOUT = 30;
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function createQueue($name, $options = null);
        /**
         * @param string $queueId
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function deleteQueue($queueId, $options = null);
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listQueues($options = null);
        /**
         * @param string $queueId
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchQueueMetadata($queueId, $options = null);
        /**
         * @param string $queueId
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function storeQueueMetadata($queueId, $metadata, $options = null);
        /**
         * @param string $queueId
         * @param string $message
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function sendMessage($queueId, $message, $options = null);
        /**
         * @param string $queueId
         * @param int $max
         * @param array<array-key, mixed>|null $options
         */
        public function receiveMessages($queueId, $max = 1, $options = null);
        /**
         * @param string $queueId
         * @param int $num
         * @param array<array-key, mixed>|null $options
         */
        public function peekMessages($queueId, $num = 1, $options = null);
        /**
         * @param string $queueId
         * @param Zend_Cloud_QueueService_Message $message
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteMessage($queueId, $message, $options = null);
        public function getClient();
    }
    class Zend_Cloud_QueueService_Adapter_AbstractAdapter implements \Zend_Cloud_QueueService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const VISIBILITY_TIMEOUT = 'visibility_timeout';
        public const DEFAULT_TIMEOUT = 30;
        public const MESSAGE_CLASS = 'message_class';
        public const MESSAGESET_CLASS = 'messageset_class';
        /**
         * @var string
         */
        public $_messageClass;
        /**
         * @var string
         */
        public $_messageSetClass;
        /**
         * @param string $class
         *
         * @return Zend_Cloud_QueueService_Adapter_AbstractAdapter
         */
        public function setMessageClass($class)
        {
        }
        /**
         * @return string
         */
        public function getMessageClass()
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Cloud_QueueService_Adapter_AbstractAdapter
         */
        public function setMessageSetClass($class)
        {
        }
        /**
         * @return string
         */
        public function getMessageSetClass()
        {
        }
    }
    class Zend_Cloud_QueueService_Adapter_Sqs extends \Zend_Cloud_QueueService_Adapter_AbstractAdapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const VISIBILITY_TIMEOUT = 'visibility_timeout';
        public const DEFAULT_TIMEOUT = 30;
        public const MESSAGE_CLASS = 'message_class';
        public const MESSAGESET_CLASS = 'messageset_class';
        public const AWS_ACCESS_KEY = 'aws_accesskey';
        public const AWS_SECRET_KEY = 'aws_secretkey';
        public const CREATE_TIMEOUT = 30;
        /**
         * @var Zend_Service_Amazon_Sqs
         */
        public $_sqs;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function createQueue($name, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function deleteQueue($queueId, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listQueues($options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchQueueMetadata($queueId, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function storeQueueMetadata($queueId, $metadata, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param string $message
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function sendMessage($queueId, $message, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param int $max
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function receiveMessages($queueId, $max = 1, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return array<array-key, Zend_Cloud_QueueService_Message>
         */
        public function _makeMessages($messages)
        {
        }
        /**
         * @param string $queueId
         * @param Zend_Cloud_QueueService_Message $message
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteMessage($queueId, $message, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param int $num
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, Zend_Cloud_QueueService_Message>
         */
        public function peekMessages($queueId, $num = 1, $options = null)
        {
        }
        /**
         * @return Zend_Service_Amazon_Sqs
         */
        public function getClient()
        {
        }
    }
    class Zend_Cloud_QueueService_Adapter_WindowsAzure extends \Zend_Cloud_QueueService_Adapter_AbstractAdapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const VISIBILITY_TIMEOUT = 'visibility_timeout';
        public const DEFAULT_TIMEOUT = 30;
        public const MESSAGE_CLASS = 'message_class';
        public const MESSAGESET_CLASS = 'messageset_class';
        public const ACCOUNT_NAME = 'storage_accountname';
        public const ACCOUNT_KEY = 'storage_accountkey';
        public const HOST = 'storage_host';
        public const PROXY_HOST = 'storage_proxy_host';
        public const PROXY_PORT = 'storage_proxy_port';
        public const PROXY_CREDENTIALS = 'storage_proxy_credentials';
        public const LIST_PREFIX = 'prefix';
        public const LIST_MAX_RESULTS = 'max_results';
        public const MESSAGE_TTL = 'ttl';
        /**
         * @var Zend_Service_WindowsAzure_Storage_Queue
         */
        public $_storageClient;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function createQueue($name, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function deleteQueue($queueId, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listQueues($options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchQueueMetadata($queueId, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function storeQueueMetadata($queueId, $metadata, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param string $message
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function sendMessage($queueId, $message, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param int $max
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, Zend_Cloud_QueueService_Message>
         */
        public function receiveMessages($queueId, $max = 1, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return array<array-key, Zend_Cloud_QueueService_Message>
         */
        public function _makeMessages($messages)
        {
        }
        /**
         * @param string $queueId
         * @param Zend_Cloud_QueueService_Message $message
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteMessage($queueId, $message, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param int $num
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, Zend_Cloud_QueueService_Message>
         */
        public function peekMessages($queueId, $num = 1, $options = null)
        {
        }
        /**
         * @return Zend_Service_Azure_Storage_Queue
         */
        public function getClient()
        {
        }
    }
    class Zend_Cloud_QueueService_Adapter_ZendQueue extends \Zend_Cloud_QueueService_Adapter_AbstractAdapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const VISIBILITY_TIMEOUT = 'visibility_timeout';
        public const DEFAULT_TIMEOUT = 30;
        public const MESSAGE_CLASS = 'message_class';
        public const MESSAGESET_CLASS = 'messageset_class';
        public const ADAPTER = 'adapter';
        /**
         * @var Zend_Queue
         */
        public $_queue;
        /**
         * @var array<array-key, mixed>
         */
        public $_queues;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function createQueue($name, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function deleteQueue($queueId, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listQueues($options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchQueueMetadata($queueId, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function storeQueueMetadata($queueId, $metadata, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param string $message
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function sendMessage($queueId, $message, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param int $max
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function receiveMessages($queueId, $max = 1, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return array<array-key, Zend_Cloud_QueueService_Message>
         */
        public function _makeMessages($messages)
        {
        }
        /**
         * @param string $queueId
         * @param Zend_Cloud_QueueService_Message $message
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteMessage($queueId, $message, $options = null)
        {
        }
        /**
         * @param string $queueId
         * @param int $num
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, Zend_Cloud_QueueService_Message>
         */
        public function peekMessages($queueId, $num = 1, $options = null)
        {
        }
        /**
         * @return Zend_Queue
         */
        public function getClient()
        {
        }
    }
    class Zend_Cloud_QueueService_Exception extends \Zend_Cloud_Exception
    {
    }
    class Zend_Cloud_QueueService_Factory extends \Zend_Cloud_AbstractFactory
    {
        public const QUEUE_ADAPTER_KEY = 'queue_adapter';
        /**
         * @var string
         */
        public static $_adapterInterface;
        public function __construct()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Cloud_DocumentService_Adapter|Zend_Cloud_QueueService_Adapter|Zend_Cloud_StorageService_Adapter|null
         *
         * @throws Zend_Cloud_QueueService_Exception
         */
        public static function getAdapter($options = array())
        {
        }
    }
    class Zend_Cloud_QueueService_Message
    {
        public $_body;
        public $_clientMessage;
        /**
         * @param string $body
         * @param string $message
         */
        public function __construct($body, $message)
        {
        }
        /**
         * @return string
         */
        public function getBody()
        {
        }
        public function getMessage()
        {
        }
    }
    class Zend_Cloud_QueueService_MessageSet implements \Countable, \IteratorAggregate
    {
        /**
         * @var int
         */
        public $_messageCount;
        /**
         * @var ArrayAccess
         */
        public $_messages;
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return void
         */
        public function __construct(array $messages)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Traversable
         */
        public function getIterator()
        {
        }
    }
    interface Zend_Cloud_StorageService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return mixed
         */
        public function fetchItem($path, $options = null);
        /**
         * @param string $destinationPath
         * @param mixed $data
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function storeItem($destinationPath, $data, $options = null);
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteItem($path, $options = null);
        /**
         * @param string $sourcePath
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function copyItem($sourcePath, $destinationPath, $options = null);
        /**
         * @param string $sourcePath
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function moveItem($sourcePath, $destinationPath, $options = null);
        /**
         * @param string $path
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function renameItem($path, $name, $options = null);
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listItems($path, $options = null);
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchMetadata($path, $options = null);
        /**
         * @param string $destinationPath
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function storeMetadata($destinationPath, $metadata, $options = null);
        /**
         * @param string $path
         *
         * @return void
         */
        public function deleteMetadata($path);
        public function getClient();
    }
    class Zend_Cloud_StorageService_Adapter_FileSystem implements \Zend_Cloud_StorageService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const LOCAL_DIRECTORY = 'local_directory';
        /**
         * @var string
         */
        public $_directory;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $options
         *
         * @return false|string
         */
        public function fetchItem($path, $options = array())
        {
        }
        /**
         * @param string $destinationPath
         * @param mixed $data
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function storeItem($destinationPath, $data, $options = array())
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function deleteItem($path, $options = array())
        {
        }
        /**
         * @param string $sourcePath
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function copyItem($sourcePath, $destinationPath, $options = array())
        {
        }
        /**
         * @param string $sourcePath
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function moveItem($sourcePath, $destinationPath, $options = array())
        {
        }
        /**
         * @param string $path
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function renameItem($path, $name, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listItems($path, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchMetadata($path, $options = array())
        {
        }
        /**
         * @param string $destinationPath
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function storeMetadata($destinationPath, $metadata, $options = array())
        {
        }
        /**
         * @param string $path
         *
         * @return void
         */
        public function deleteMetadata($path)
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        public function _getFullPath($path)
        {
        }
        /**
         * @return strings
         */
        public function getClient()
        {
        }
    }
    class Zend_Cloud_StorageService_Adapter_Rackspace implements \Zend_Cloud_StorageService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const USER = 'user';
        public const API_KEY = 'key';
        public const REMOTE_CONTAINER = 'container';
        public const DELETE_METADATA_KEY = 'ZF_metadata_deleted';
        /**
         * @var Zend_Service_Rackspace_Files
         */
        public $_rackspace;
        /**
         * @var string
         */
        public $_container;
        /**
         * @param Traversable|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return mixed
         */
        public function fetchItem($path, $options = null)
        {
        }
        /**
         * @param string $destinationPath
         * @param mixed $data
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function storeItem($destinationPath, $data, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteItem($path, $options = null)
        {
        }
        /**
         * @param string $sourcePath
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function copyItem($sourcePath, $destinationPath, $options = null)
        {
        }
        /**
         * @param string $sourcePath
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function moveItem($sourcePath, $destinationPath, $options = null)
        {
        }
        /**
         * @param string $path
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function renameItem($path, $name, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchMetadata($path, $options = null)
        {
        }
        /**
         * @param string $destinationPath
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function storeMetadata($destinationPath, $metadata, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $metadata
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteMetadata($path, $metadata = null, $options = null)
        {
        }
        public function getAllFolders($path, &$resultArray)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listItems($path, $options = null)
        {
        }
        /**
         * @return Zend_Service_Rackspace_File
         */
        public function getClient()
        {
        }
    }
    class Zend_Cloud_StorageService_Adapter_S3 implements \Zend_Cloud_StorageService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const BUCKET_NAME = 'bucket_name';
        public const BUCKET_AS_DOMAIN = 'bucket_as_domain?';
        public const FETCH_STREAM = 'fetch_stream';
        public const METADATA = 'metadata';
        public const AWS_ACCESS_KEY = 'aws_accesskey';
        public const AWS_SECRET_KEY = 'aws_secretkey';
        /**
         * @var Zend_Service_Amazon_S3
         */
        public $_s3;
        public $_defaultBucketName = null;
        public $_defaultBucketAsDomain = false;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public function fetchItem($path, $options = array())
        {
        }
        /**
         * @param string $destinationPath
         * @param resource|string $data
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function storeItem($destinationPath, $data, $options = array())
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function deleteItem($path, $options = array())
        {
        }
        /**
         * @param string $sourcePath
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function copyItem($sourcePath, $destinationPath, $options = array())
        {
        }
        /**
         * @param string $sourcePath
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function moveItem($sourcePath, $destinationPath, $options = array())
        {
        }
        /**
         * @param string $path
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function renameItem($path, $name, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listItems($path, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchMetadata($path, $options = array())
        {
        }
        /**
         * @param string $destinationPath
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function storeMetadata($destinationPath, $metadata, $options = array())
        {
        }
        /**
         * @param string $path
         *
         * @return void
         */
        public function deleteMetadata($path)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function _getFullPath($path, $options)
        {
        }
        /**
         * @return Zend_Service_Amazon_S3
         */
        public function getClient()
        {
        }
    }
    class Zend_Cloud_StorageService_Adapter_WindowsAzure implements \Zend_Cloud_StorageService_Adapter
    {
        public const HTTP_ADAPTER = 'http_adapter';
        public const ACCOUNT_NAME = 'storage_accountname';
        public const ACCOUNT_KEY = 'storage_accountkey';
        public const HOST = 'storage_host';
        public const PROXY_HOST = 'storage_proxy_host';
        public const PROXY_PORT = 'storage_proxy_port';
        public const PROXY_CREDENTIALS = 'storage_proxy_credentials';
        public const CONTAINER = 'storage_container';
        public const RETURN_TYPE = 'return_type';
        public const RETURN_PATHNAME = 'return_path';
        public const RETURN_OPENMODE = 'return_openmode';
        public const RETURN_PATH = 1;
        public const RETURN_STRING = 2;
        public const RETURN_STREAM = 3;
        public const RETURN_LIST = 1;
        public const RETURN_NAMES = 2;
        /**
         * @var string
         */
        public $_container;
        /**
         * @var Zend_Service_WindowsAzure_Storage_Blob
         */
        public $_storageClient;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return mixed
         */
        public function fetchItem($path, $options = null)
        {
        }
        /**
         * @param string $destinationPath
         * @param mixed $data
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function storeItem($destinationPath, $data, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteItem($path, $options = null)
        {
        }
        /**
         * @param string $sourcePath
         * @param string $destinationPath
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function copyItem($sourcePath, $destinationPath, $options = null)
        {
        }
        /**
         * @param string $sourcePath
         * @param string $destinationPath
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function moveItem($sourcePath, $destinationPath, $options = null)
        {
        }
        /**
         * @param string $path
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function renameItem($path, $name, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function listItems($path, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return array<array-key, mixed>
         */
        public function fetchMetadata($path, $options = null)
        {
        }
        /**
         * @param string $destinationPath
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function storeMetadata($destinationPath, $metadata, $options = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function deleteMetadata($path, $options = null)
        {
        }
        /**
         * @return void
         */
        public function deleteContainer()
        {
        }
        /**
         * @return Zend_Service_Azure_Storage_Blob
         */
        public function getClient()
        {
        }
    }
    class Zend_Cloud_StorageService_Exception extends \Zend_Cloud_Exception
    {
    }
    class Zend_Cloud_StorageService_Factory extends \Zend_Cloud_AbstractFactory
    {
        public const STORAGE_ADAPTER_KEY = 'storage_adapter';
        /**
         * @var string
         */
        public static $_adapterInterface;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Cloud_StorageService_Adapter
         */
        public static function getAdapter($options = array())
        {
        }
    }
    class Zend_CodeGenerator_Abstract
    {
        /**
         * @var string
         */
        public $_sourceContent;
        /**
         * @var bool
         */
        public $_isSourceDirty;
        /**
         * @param array<array-key, mixed> $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_CodeGenerator_Abstract
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_CodeGenerator_Abstract
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $sourceContent
         */
        public function setSourceContent($sourceContent)
        {
        }
        /**
         * @return string
         */
        public function getSourceContent()
        {
        }
        public function _init()
        {
        }
        public function _prepare()
        {
        }
        public abstract function generate();
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_CodeGenerator_Exception extends \Zend_Exception
    {
    }
    class Zend_CodeGenerator_Php_Abstract extends \Zend_CodeGenerator_Abstract
    {
        public const LINE_FEED = '
';
        /**
         * @var bool
         */
        public $_isSourceDirty;
        /**
         * @var int|string
         */
        public $_indentation;
        /**
         * @param bool $isSourceDirty
         *
         * @return Zend_CodeGenerator_Php_Abstract
         */
        public function setSourceDirty($isSourceDirty = true)
        {
        }
        /**
         * @return bool
         */
        public function isSourceDirty()
        {
        }
        /**
         * @param int|string $indentation
         *
         * @return Zend_CodeGenerator_Php_Abstract
         */
        public function setIndentation($indentation)
        {
        }
        /**
         * @return int|string
         */
        public function getIndentation()
        {
        }
    }
    class Zend_CodeGenerator_Php_Body extends \Zend_CodeGenerator_Abstract
    {
        /**
         * @var string
         */
        public $_content;
        /**
         * @param string $content
         *
         * @return Zend_CodeGenerator_Php_Body
         */
        public function setContent($content)
        {
        }
        /**
         * @return string
         */
        public function getContent()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_CodeGenerator_Php_Class extends \Zend_CodeGenerator_Php_Abstract
    {
        public const LINE_FEED = '
';
        /**
         * @var Zend_CodeGenerator_Php_Docblock
         */
        public $_docblock;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var bool
         */
        public $_isAbstract;
        /**
         * @var string
         */
        public $_extendedClass;
        /**
         * @var array<array-key, mixed>
         */
        public $_implementedInterfaces;
        /**
         * @var array<array-key, mixed>
         */
        public $_properties;
        /**
         * @var array<array-key, mixed>
         */
        public $_constants;
        /**
         * @var array<array-key, mixed>
         */
        public $_methods;
        /**
         * @param Zend_Reflection_Class $reflectionClass
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public static function fromReflection(\Zend_Reflection_Class $reflectionClass)
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Docblock|array<array-key, mixed>|string $docblock
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public function setDocblock($docblock)
        {
        }
        /**
         * @return Zend_CodeGenerator_Php_Docblock
         */
        public function getDocblock()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param bool $isAbstract
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setAbstract($isAbstract)
        {
        }
        /**
         * @return bool
         */
        public function isAbstract()
        {
        }
        /**
         * @param string $extendedClass
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setExtendedClass($extendedClass)
        {
        }
        /**
         * @return string
         */
        public function getExtendedClass()
        {
        }
        /**
         * @param array<array-key, mixed> $implementedInterfaces
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setImplementedInterfaces(array $implementedInterfaces)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImplementedInterfaces()
        {
        }
        /**
         * @param array<array-key, mixed> $properties
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setProperties(array $properties)
        {
        }
        /**
         * @param array<array-key, mixed> $constants
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setConstants(array $constants)
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Property|array<array-key, mixed> $property
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setProperty($property)
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Property|array<array-key, mixed> $const
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setConstant($const)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getProperties()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getConstants()
        {
        }
        /**
         * @param string $propertyName
         *
         * @return Zend_CodeGenerator_Php_Property
         */
        public function getProperty($propertyName)
        {
        }
        /**
         * @param string $constName
         *
         * @return Zend_CodeGenerator_Php_Property
         */
        public function getConstant($constName)
        {
        }
        /**
         * @param string $propertyName
         *
         * @return bool
         */
        public function hasProperty($propertyName)
        {
        }
        /**
         * @param string $constName
         *
         * @return bool
         */
        public function hasConstant($constName)
        {
        }
        /**
         * @param array<array-key, mixed> $methods
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setMethods(array $methods)
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Method|array<array-key, mixed> $method
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function setMethod($method)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMethods()
        {
        }
        /**
         * @param string $methodName
         *
         * @return Zend_CodeGenerator_Php_Method
         */
        public function getMethod($methodName)
        {
        }
        /**
         * @param string $methodName
         *
         * @return bool
         */
        public function hasMethod($methodName)
        {
        }
        /**
         * @return bool
         */
        public function isSourceDirty()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
        public function _init()
        {
        }
    }
    class Zend_CodeGenerator_Php_Docblock extends \Zend_CodeGenerator_Php_Abstract
    {
        public const LINE_FEED = '
';
        /**
         * @var string
         */
        public $_shortDescription;
        /**
         * @var string
         */
        public $_longDescription;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        /**
         * @var string
         */
        public $_indentation;
        /**
         * @param Zend_Reflection_Docblock $reflectionDocblock
         *
         * @return Zend_CodeGenerator_Php_Docblock
         */
        public static function fromReflection(\Zend_Reflection_Docblock $reflectionDocblock)
        {
        }
        /**
         * @param string $shortDescription
         *
         * @return Zend_CodeGenerator_Php_Docblock
         */
        public function setShortDescription($shortDescription)
        {
        }
        /**
         * @return string
         */
        public function getShortDescription()
        {
        }
        /**
         * @param string $longDescription
         *
         * @return Zend_CodeGenerator_Php_Docblock
         */
        public function setLongDescription($longDescription)
        {
        }
        /**
         * @return string
         */
        public function getLongDescription()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return Zend_CodeGenerator_Php_Docblock
         */
        public function setTags(array $tags)
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Docblock_Tag|array<array-key, mixed> $tag
         *
         * @return Zend_CodeGenerator_Php_Docblock
         */
        public function setTag($tag)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function _docCommentize($content)
        {
        }
    }
    class Zend_CodeGenerator_Php_Docblock_Tag extends \Zend_CodeGenerator_Php_Abstract
    {
        public const LINE_FEED = '
';
        /**
         * @var Zend_Loader_PluginLoader
         */
        public static $_pluginLoader;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var string
         */
        public $_description;
        /**
         * @param Zend_Reflection_Docblock_Tag $reflectionTag
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag
         */
        public static function fromReflection(\Zend_Reflection_Docblock_Tag $reflectionTag)
        {
        }
        /**
         * @param Zend_Loader_PluginLoader $pluginLoader
         */
        public static function setPluginLoader(\Zend_Loader_PluginLoader $pluginLoader)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function getPluginLoader()
        {
        }
        public static function factory($tagName)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $description
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag
         */
        public function setDescription($description)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_CodeGenerator_Php_Docblock_Tag_License extends \Zend_CodeGenerator_Php_Docblock_Tag
    {
        public const LINE_FEED = '
';
        /**
         * @var string
         */
        public $_url;
        /**
         * @var string
         */
        public $_description;
        /**
         * @return Zend_CodeGenerator_Php_Docblock_Tag_License
         */
        public static function fromReflection(\Zend_Reflection_Docblock_Tag $reflectionTagLicense)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag_License
         */
        public function setUrl($url)
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_CodeGenerator_Php_Docblock_Tag_Param extends \Zend_CodeGenerator_Php_Docblock_Tag
    {
        public const LINE_FEED = '
';
        /**
         * @var string
         */
        public $_datatype;
        /**
         * @var string
         */
        public $_paramName;
        /**
         * @var string
         */
        public $_description;
        /**
         * @param Zend_Reflection_Docblock_Tag $reflectionTagParam
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag
         */
        public static function fromReflection(\Zend_Reflection_Docblock_Tag $reflectionTagParam)
        {
        }
        /**
         * @param string $datatype
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag_Param
         */
        public function setDatatype($datatype)
        {
        }
        /**
         * @return string
         */
        public function getDatatype()
        {
        }
        /**
         * @param string $paramName
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag_Param
         */
        public function setParamName($paramName)
        {
        }
        /**
         * @return string
         */
        public function getParamName()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_CodeGenerator_Php_Docblock_Tag_Return extends \Zend_CodeGenerator_Php_Docblock_Tag
    {
        public const LINE_FEED = '
';
        /**
         * @var string
         */
        public $_datatype;
        /**
         * @var string
         */
        public $_description;
        /**
         * @param Zend_Reflection_Docblock_Tag $reflectionTagReturn
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag_Return
         */
        public static function fromReflection(\Zend_Reflection_Docblock_Tag $reflectionTagReturn)
        {
        }
        /**
         * @param string $datatype
         *
         * @return Zend_CodeGenerator_Php_Docblock_Tag_Return
         */
        public function setDatatype($datatype)
        {
        }
        /**
         * @return string
         */
        public function getDatatype()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_CodeGenerator_Php_Exception extends \Zend_CodeGenerator_Exception
    {
    }
    class Zend_CodeGenerator_Php_File extends \Zend_CodeGenerator_Php_Abstract
    {
        public const LINE_FEED = '
';
        /**
         * @var array<array-key, mixed>
         */
        public static $_fileCodeGenerators;
        public static $_markerDocblock = '/* Zend_CodeGenerator_Php_File-DocblockMarker */';
        public static $_markerRequire = '/* Zend_CodeGenerator_Php_File-RequireMarker: {?} */';
        public static $_markerClass = '/* Zend_CodeGenerator_Php_File-ClassMarker: {?} */';
        /**
         * @var string
         */
        public $_filename;
        /**
         * @var Zend_CodeGenerator_Php_Docblock
         */
        public $_docblock;
        /**
         * @var array<array-key, mixed>
         */
        public $_requiredFiles;
        /**
         * @var array<array-key, mixed>
         */
        public $_classes;
        /**
         * @var string
         */
        public $_body;
        public static function registerFileCodeGenerator(\Zend_CodeGenerator_Php_File $fileCodeGenerator, $fileName = null)
        {
        }
        /**
         * @param string $filePath
         * @param bool $usePreviousCodeGeneratorIfItExists
         * @param bool $includeIfNotAlreadyIncluded
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public static function fromReflectedFileName($filePath, $usePreviousCodeGeneratorIfItExists = true, $includeIfNotAlreadyIncluded = true)
        {
        }
        /**
         * @param Zend_Reflection_File $reflectionFile
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public static function fromReflection(\Zend_Reflection_File $reflectionFile)
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Docblock|array<array-key, mixed>|string $docblock
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public function setDocblock($docblock)
        {
        }
        /**
         * @return Zend_CodeGenerator_Php_Docblock
         */
        public function getDocblock()
        {
        }
        /**
         * @param array<array-key, mixed> $requiredFiles
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public function setRequiredFiles($requiredFiles)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRequiredFiles()
        {
        }
        /**
         * @param array<array-key, mixed> $classes
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public function setClasses(array $classes)
        {
        }
        /**
         * @param null|string $name
         *
         * @return Zend_CodeGenerator_Php_Class
         */
        public function getClass($name = null)
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Class|array<array-key, mixed> $class
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public function setClass($class)
        {
        }
        /**
         * @param string $filename
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public function setFilename($filename)
        {
        }
        /**
         * @return string
         */
        public function getFilename()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getClasses()
        {
        }
        /**
         * @param string $body
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public function setBody($body)
        {
        }
        /**
         * @return string
         */
        public function getBody()
        {
        }
        /**
         * @return bool
         */
        public function isSourceDirty()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
        public function write()
        {
        }
    }
    class Zend_CodeGenerator_Php_Member_Abstract extends \Zend_CodeGenerator_Php_Abstract
    {
        public const LINE_FEED = '
';
        public const VISIBILITY_PUBLIC = 'public';
        public const VISIBILITY_PROTECTED = 'protected';
        public const VISIBILITY_PRIVATE = 'private';
        /**
         * @var Zend_CodeGenerator_Php_Docblock
         */
        public $_docblock;
        /**
         * @var bool
         */
        public $_isAbstract;
        /**
         * @var bool
         */
        public $_isFinal;
        /**
         * @var bool
         */
        public $_isStatic;
        /**
         * @var const
         */
        public $_visibility;
        /**
         * @var string
         */
        public $_name;
        /**
         * @param Zend_CodeGenerator_Php_Docblock|array<array-key, mixed>|string $docblock
         *
         * @return Zend_CodeGenerator_Php_File
         */
        public function setDocblock($docblock)
        {
        }
        /**
         * @return Zend_CodeGenerator_Php_Docblock
         */
        public function getDocblock()
        {
        }
        /**
         * @param bool $isAbstract
         *
         * @return Zend_CodeGenerator_Php_Member_Abstract
         */
        public function setAbstract($isAbstract)
        {
        }
        /**
         * @return bool
         */
        public function isAbstract()
        {
        }
        /**
         * @param bool $isFinal
         *
         * @return Zend_CodeGenerator_Php_Member_Abstract
         */
        public function setFinal($isFinal)
        {
        }
        /**
         * @return bool
         */
        public function isFinal()
        {
        }
        /**
         * @param bool $isStatic
         *
         * @return Zend_CodeGenerator_Php_Member_Abstract
         */
        public function setStatic($isStatic)
        {
        }
        /**
         * @return bool
         */
        public function isStatic()
        {
        }
        /**
         * @param const $visibility
         *
         * @return Zend_CodeGenerator_Php_Member_Abstract
         */
        public function setVisibility($visibility)
        {
        }
        /**
         * @return const
         */
        public function getVisibility()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_CodeGenerator_Php_Member_Abstract
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_CodeGenerator_Php_Member_Container extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        public const TYPE_PROPERTY = 'property';
        public const TYPE_METHOD = 'method';
        /**
         * @var const|string
         */
        public $_type;
        /**
         * @param const|string $type
         */
        public function __construct($type)
        {
        }
    }
    class Zend_CodeGenerator_Php_Method extends \Zend_CodeGenerator_Php_Member_Abstract
    {
        public const LINE_FEED = '
';
        public const VISIBILITY_PUBLIC = 'public';
        public const VISIBILITY_PROTECTED = 'protected';
        public const VISIBILITY_PRIVATE = 'private';
        /**
         * @var Zend_CodeGenerator_Php_Docblock
         */
        public $_docblock;
        /**
         * @var bool
         */
        public $_isFinal;
        /**
         * @var array<array-key, mixed>
         */
        public $_parameters;
        /**
         * @var string
         */
        public $_body;
        /**
         * @param Zend_Reflection_Method $reflectionMethod
         *
         * @return Zend_CodeGenerator_Php_Method
         */
        public static function fromReflection(\Zend_Reflection_Method $reflectionMethod)
        {
        }
        /**
         * @param bool $isFinal
         */
        public function setFinal($isFinal)
        {
        }
        /**
         * @param array<array-key, mixed> $parameters
         *
         * @return Zend_CodeGenerator_Php_Method
         */
        public function setParameters(array $parameters)
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Parameter|array<array-key, mixed> $parameter
         *
         * @return Zend_CodeGenerator_Php_Method
         */
        public function setParameter($parameter)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParameters()
        {
        }
        /**
         * @param string $body
         *
         * @return Zend_CodeGenerator_Php_Method
         */
        public function setBody($body)
        {
        }
        /**
         * @return string
         */
        public function getBody()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_CodeGenerator_Php_Parameter extends \Zend_CodeGenerator_Php_Abstract
    {
        public const LINE_FEED = '
';
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var string
         */
        public $_defaultValue;
        /**
         * @var int
         */
        public $_position;
        /**
         * @var bool
         */
        public $_passedByReference;
        /**
         * @param Zend_Reflection_Parameter $reflectionParameter
         *
         * @return Zend_CodeGenerator_Php_Parameter
         */
        public static function fromReflection(\Zend_Reflection_Parameter $reflectionParameter)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_CodeGenerator_Php_Parameter
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_CodeGenerator_Php_Parameter
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Parameter_DefaultValue|null|scalar $defaultValue
         *
         * @return Zend_CodeGenerator_Php_Parameter
         */
        public function setDefaultValue($defaultValue)
        {
        }
        /**
         * @return string
         */
        public function getDefaultValue()
        {
        }
        /**
         * @param int $position
         *
         * @return Zend_CodeGenerator_Php_Parameter
         */
        public function setPosition($position)
        {
        }
        /**
         * @return int
         */
        public function getPosition()
        {
        }
        /**
         * @return bool
         */
        public function getPassedByReference()
        {
        }
        /**
         * @param bool $passedByReference
         *
         * @return Zend_CodeGenerator_Php_Parameter
         */
        public function setPassedByReference($passedByReference)
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_CodeGenerator_Php_Parameter_DefaultValue
    {
        /**
         * @var string
         */
        public $_defaultValue;
        /**
         * @param string $defaultValue
         *
         * @throws Zend_CodeGenerator_Php_Exception
         */
        public function __construct($defaultValue)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_CodeGenerator_Php_Property extends \Zend_CodeGenerator_Php_Member_Abstract
    {
        public const LINE_FEED = '
';
        public const VISIBILITY_PUBLIC = 'public';
        public const VISIBILITY_PROTECTED = 'protected';
        public const VISIBILITY_PRIVATE = 'private';
        /**
         * @var bool
         */
        public $_isConst;
        /**
         * @var string
         */
        public $_defaultValue;
        /**
         * @param Zend_Reflection_Property $reflectionProperty
         *
         * @return Zend_CodeGenerator_Php_Property
         */
        public static function fromReflection(\Zend_Reflection_Property $reflectionProperty)
        {
        }
        /**
         * @param bool $const
         *
         * @return Zend_CodeGenerator_Php_Property
         */
        public function setConst($const)
        {
        }
        /**
         * @return bool
         */
        public function isConst()
        {
        }
        /**
         * @param Zend_CodeGenerator_Php_Property_DefaultValue|array<array-key, mixed>|string $defaultValue
         *
         * @return Zend_CodeGenerator_Php_Property
         */
        public function setDefaultValue($defaultValue)
        {
        }
        /**
         * @return Zend_CodeGenerator_Php_Property_DefaultValue
         */
        public function getDefaultValue()
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_CodeGenerator_Php_Property_DefaultValue extends \Zend_CodeGenerator_Php_Abstract
    {
        public const LINE_FEED = '
';
        public const TYPE_AUTO = 'auto';
        public const TYPE_BOOLEAN = 'boolean';
        public const TYPE_BOOL = 'bool';
        public const TYPE_NUMBER = 'number';
        public const TYPE_INTEGER = 'integer';
        public const TYPE_INT = 'int';
        public const TYPE_FLOAT = 'float';
        public const TYPE_DOUBLE = 'double';
        public const TYPE_STRING = 'string';
        public const TYPE_ARRAY = 'array';
        public const TYPE_CONSTANT = 'constant';
        public const TYPE_NULL = 'null';
        public const TYPE_OTHER = 'other';
        /**
         * @var array<array-key, mixed>
         */
        public static $_constants;
        /**
         * @var mixed
         */
        public $_value;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var int
         */
        public $_arrayDepth;
        public function _init()
        {
        }
        /**
         * @return bool
         */
        public function isValidConstantType()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_CodeGenerator_Php_Property_DefaultValue
         */
        public function setValue($value)
        {
        }
        /**
         * @return mixed
         */
        public function getValue()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_CodeGenerator_Php_Property_DefaultValue
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param int $arrayDepth
         *
         * @return Zend_CodeGenerator_Php_Property_DefaultValue
         */
        public function setArrayDepth($arrayDepth)
        {
        }
        /**
         * @return int
         */
        public function getArrayDepth()
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function _getValidatedType($type)
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         */
        public function _getAutoDeterminedType($value)
        {
        }
        /**
         * @return string
         */
        public function generate()
        {
        }
    }
    class Zend_Config implements \Countable, \Iterator
    {
        /**
         * @var bool
         */
        public $_allowModifications;
        /**
         * @var int
         */
        public $_index;
        /**
         * @var int
         */
        public $_count;
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var bool
         */
        public $_skipNextIteration;
        /**
         * @var mixed
         */
        public $_loadedSection;
        /**
         * @var array<array-key, mixed>
         */
        public $_extends;
        /**
         * @var string
         */
        public $_loadFileErrorStr;
        /**
         * @param array<array-key, mixed> $array
         * @param bool $allowModifications
         *
         * @return void
         */
        public function __construct(array $array, $allowModifications = false)
        {
        }
        /**
         * @param string $name
         * @param mixed|null $default
         *
         * @return mixed
         */
        public function get($name, $default = null)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Config_Exception
         */
        public function __set($name, $value)
        {
        }
        /**
         * @return void
         */
        public function __clone()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         *
         * @throws Zend_Config_Exception
         */
        public function __unset($name)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
        /**
         * @return mixed
         */
        public function key()
        {
        }
        public function next()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return mixed
         */
        public function getSectionName()
        {
        }
        /**
         * @return bool
         */
        public function areAllSectionsLoaded()
        {
        }
        /**
         * @param Zend_Config $merge
         *
         * @return Zend_Config
         */
        public function merge(\Zend_Config $merge)
        {
        }
        public function setReadOnly()
        {
        }
        /**
         * @return bool
         */
        public function readOnly()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getExtends()
        {
        }
        /**
         * @param string $extendingSection
         * @param null|string $extendedSection
         *
         * @return void
         */
        public function setExtend($extendingSection, $extendedSection = null)
        {
        }
        /**
         * @param string $extendingSection
         * @param string $extendedSection
         *
         * @return void
         *
         * @throws Zend_Config_Exception
         */
        public function _assertValidExtend($extendingSection, $extendedSection)
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param string $errfile
         * @param int $errline
         */
        public function _loadFileErrorHandler($errno, $errstr, $errfile, $errline)
        {
        }
        /**
         * @param mixed $firstArray
         * @param mixed $secondArray
         *
         * @return array<array-key, mixed>
         */
        public function _arrayMergeRecursive($firstArray, $secondArray)
        {
        }
    }
    class Zend_Config_Exception extends \Zend_Exception
    {
    }
    class Zend_Config_Ini extends \Zend_Config
    {
        /**
         * @var string
         */
        public $_nestSeparator;
        /**
         * @var string
         */
        public $_sectionSeparator;
        /**
         * @var bool
         */
        public $_skipExtends;
        /**
         * @param string $filename
         * @param mixed|null $section
         * @param array<array-key, mixed>|bool $options
         *
         * @return void
         *
         * @throws Zend_Config_Exception
         */
        public function __construct($filename, $section = null, $options = false)
        {
        }
        /**
         * @param string $filename
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Config_Exception
         */
        public function _parseIniFile($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Config_Exception
         */
        public function _loadIniFile($filename)
        {
        }
        /**
         * @param array<array-key, mixed> $iniArray
         * @param string $section
         * @param array<array-key, mixed> $config
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Config_Exception
         */
        public function _processSection($iniArray, $section, $config = array())
        {
        }
        /**
         * @param array<array-key, mixed> $config
         * @param string $key
         * @param string $value
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Config_Exception
         */
        public function _processKey($config, $key, $value)
        {
        }
    }
    class Zend_Config_Json extends \Zend_Config
    {
        public const EXTENDS_NAME = '_extends';
        /**
         * @var bool
         */
        public $_ignoreConstants;
        /**
         * @var bool
         */
        public $_skipExtends;
        /**
         * @param string $json
         * @param mixed|null $section
         * @param bool $options
         *
         * @throws Zend_Config_Exception
         */
        public function __construct($json, $section = null, $options = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $section
         * @param array<array-key, mixed> $config
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Config_Exception
         */
        public function _processExtends(array $data, $section, array $config = array())
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _replaceConstants($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getConstants()
        {
        }
    }
    class Zend_Config_Writer
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @var Zend_Config
         */
        public $_config;
        /**
         * @param array<array-key, mixed>|null $options
         */
        public function __construct(?array $options = null)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Config_Writer
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Config_Writer
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return void
         */
        public abstract function write();
    }
    class Zend_Config_Writer_Array extends \Zend_Config_Writer_FileAbstract
    {
        /**
         * @return string
         */
        public function render()
        {
        }
    }
    class Zend_Config_Writer_FileAbstract extends \Zend_Config_Writer
    {
        /**
         * @var string
         */
        public $_filename;
        /**
         * @var bool
         */
        public $_exclusiveLock;
        /**
         * @param string $filename
         *
         * @return Zend_Config_Writer_Array
         */
        public function setFilename($filename)
        {
        }
        /**
         * @param bool $exclusiveLock
         *
         * @return Zend_Config_Writer_Array
         */
        public function setExclusiveLock($exclusiveLock)
        {
        }
        /**
         * @param null|string $filename
         * @param Zend_Config|null $config
         * @param bool|null $exclusiveLock
         *
         * @return void
         */
        public function write($filename = null, ?\Zend_Config $config = null, $exclusiveLock = null)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
    }
    class Zend_Config_Writer_Ini extends \Zend_Config_Writer_FileAbstract
    {
        /**
         * @var string
         */
        public $_nestSeparator;
        /**
         * @var bool
         */
        public $_renderWithoutSections;
        /**
         * @return Zend_Config_Writer_Ini
         */
        public function setNestSeparator($separator)
        {
        }
        /**
         * @param bool $withoutSections
         *
         * @return Zend_Config_Writer_Ini
         */
        public function setRenderWithoutSections($withoutSections = true)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return void
         */
        public function _addBranch(\Zend_Config $config, $parents = array())
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         */
        public function _prepareValue($value)
        {
        }
        public function _sortRootElements(\Zend_Config $config)
        {
        }
    }
    class Zend_Config_Writer_Json extends \Zend_Config_Writer_FileAbstract
    {
        /**
         * @var bool
         */
        public $_prettyPrint;
        /**
         * @return the
         */
        public function prettyPrint()
        {
        }
        /**
         * @return Zend_Config_Writer_Json
         */
        public function setPrettyPrint($flag)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
    }
    class Zend_Config_Writer_Xml extends \Zend_Config_Writer_FileAbstract
    {
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @param Zend_Config $config
         * @param SimpleXMLElement $xml
         * @param SimpleXMLElement $parent
         *
         * @return void
         */
        public function _addBranch(\Zend_Config $config, \SimpleXMLElement $xml, \SimpleXMLElement $parent)
        {
        }
    }
    class Zend_Config_Writer_Yaml extends \Zend_Config_Writer_FileAbstract
    {
        /**
         * @var callable
         */
        public $_yamlEncoder;
        /**
         * @return callable
         */
        public function getYamlEncoder()
        {
        }
        /**
         * @param callable $yamlEncoder
         *
         * @return Zend_Config_Yaml
         */
        public function setYamlEncoder($yamlEncoder)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return string
         */
        public static function encode($data)
        {
        }
        /**
         * @param int $indent
         * @param array<array-key, mixed> $data
         *
         * @return string
         */
        public static function _encodeYaml($indent, $data)
        {
        }
    }
    class Zend_Config_Xml extends \Zend_Config
    {
        public const XML_NAMESPACE = 'http://framework.zend.com/xml/zend-config-xml/1.0/';
        /**
         * @var bool
         */
        public $_skipExtends;
        /**
         * @param string $xml
         * @param mixed|null $section
         * @param array<array-key, mixed>|bool $options
         *
         * @throws Zend_Config_Exception
         */
        public function __construct($xml, $section = null, $options = false)
        {
        }
        /**
         * @param SimpleXMLElement $element
         * @param string $section
         * @param array<array-key, mixed> $config
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Config_Exception
         */
        public function _processExtends(\SimpleXMLElement $element, $section, array $config = array())
        {
        }
        /**
         * @param SimpleXMLElement $xmlObject
         *
         * @return array<array-key, mixed>|string
         */
        public function _toArray(\SimpleXMLElement $xmlObject)
        {
        }
    }
    class Zend_Config_Yaml extends \Zend_Config
    {
        public const EXTENDS_NAME = '_extends';
        /**
         * @var bool
         */
        public $_skipExtends;
        /**
         * @var callable
         */
        public $_yamlDecoder;
        /**
         * @var bool
         */
        public static $_ignoreConstants;
        /**
         * @param bool $flag
         *
         * @return void
         */
        public static function setIgnoreConstants($flag)
        {
        }
        /**
         * @return bool
         */
        public static function ignoreConstants()
        {
        }
        /**
         * @return callable
         */
        public function getYamlDecoder()
        {
        }
        /**
         * @param callable $yamlDecoder
         *
         * @return Zend_Config_Yaml
         */
        public function setYamlDecoder($yamlDecoder)
        {
        }
        /**
         * @param string $yaml
         * @param mixed|null $section
         * @param array<array-key, mixed>|bool $options
         */
        public function __construct($yaml, $section = null, $options = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $section
         * @param array<array-key, mixed> $config
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Config_Exception
         */
        public function _processExtends(array $data, $section, array $config = array())
        {
        }
        /**
         * @param string $yaml
         *
         * @return array<array-key, mixed>
         */
        public static function decode($yaml)
        {
        }
        /**
         * @param int $currentIndent
         * @param array<array-key, mixed> $lines
         *
         * @return array<array-key, mixed>|string
         */
        public static function _decodeYaml($currentIndent, &$lines)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function _parseValue($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function _replaceConstants($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function _getConstants()
        {
        }
    }
    class Zend_Console_Getopt
    {
        public const MODE_ZEND = 'zend';
        public const MODE_GNU = 'gnu';
        public const PARAM_REQUIRED = '=';
        public const PARAM_OPTIONAL = '-';
        public const TYPE_STRING = 's';
        public const TYPE_WORD = 'w';
        public const TYPE_INTEGER = 'i';
        public const CONFIG_RULEMODE = 'ruleMode';
        public const CONFIG_DASHDASH = 'dashDash';
        public const CONFIG_IGNORECASE = 'ignoreCase';
        public const CONFIG_PARSEALL = 'parseAll';
        public $_getoptConfig = 'Psalm could not infer this type';
        /**
         * @var array<array-key, mixed>
         */
        public $_argv;
        /**
         * @var string
         */
        public $_progname;
        /**
         * @var array<array-key, mixed>
         */
        public $_rules;
        /**
         * @var array<array-key, mixed>
         */
        public $_ruleMap;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_remainingArgs;
        /**
         * @var bool
         */
        public $_parsed;
        /**
         * @param array<array-key, mixed> $rules
         * @param array<array-key, mixed>|null $argv
         * @param array<array-key, mixed> $getoptConfig
         *
         * @return void
         */
        public function __construct($rules, $argv = null, $getoptConfig = array())
        {
        }
        /**
         * @param string $key
         *
         * @return string
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return void
         */
        public function __set($key, $value)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function __unset($key)
        {
        }
        /**
         * @param array<array-key, mixed> $argv
         *
         * @return Zend_Console_Getopt
         *
         * @throws Zend_Console_Getopt_Exception
         */
        public function addArguments($argv)
        {
        }
        /**
         * @param array<array-key, mixed> $argv
         *
         * @return Zend_Console_Getopt
         *
         * @throws Zend_Console_Getopt_Exception
         */
        public function setArguments($argv)
        {
        }
        /**
         * @param array<array-key, mixed> $getoptConfig
         *
         * @return Zend_Console_Getopt
         */
        public function setOptions($getoptConfig)
        {
        }
        /**
         * @param string $configKey
         * @param string $configValue
         *
         * @return Zend_Console_Getopt
         */
        public function setOption($configKey, $configValue)
        {
        }
        /**
         * @param array<array-key, mixed> $rules
         *
         * @return Zend_Console_Getopt
         */
        public function addRules($rules)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return string
         */
        public function toXml()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $flag
         *
         * @return mixed
         */
        public function getOption($flag)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRemainingArgs()
        {
        }
        /**
         * @return string
         */
        public function getUsageMessage()
        {
        }
        /**
         * @param array<array-key, mixed> $aliasMap
         *
         * @return Zend_Console_Getopt
         *
         * @throws Zend_Console_Getopt_Exception
         */
        public function setAliases($aliasMap)
        {
        }
        /**
         * @param array<array-key, mixed> $helpMap
         *
         * @return Zend_Console_Getopt
         */
        public function setHelp($helpMap)
        {
        }
        /**
         * @return Zend_Console_Getopt|null
         */
        public function parse()
        {
        }
        /**
         * @throws Zend_Console_Getopt_Exception
         */
        public function checkRequiredArguments()
        {
        }
        /**
         * @param mixed $argv
         *
         * @return void
         */
        public function _parseLongOption(&$argv)
        {
        }
        /**
         * @param mixed $argv
         *
         * @return void
         */
        public function _parseShortOptionCluster(&$argv)
        {
        }
        /**
         * @param string $flag
         * @param mixed $argv
         *
         * @return void
         *
         * @throws Zend_Console_Getopt_Exception
         */
        public function _parseSingleOption($flag, &$argv)
        {
        }
        /**
         * @param string $flag
         * @param string $param
         *
         * @return bool
         *
         * @throws Zend_Console_Getopt_Exception
         */
        public function _checkParameterType($flag, $param)
        {
        }
        /**
         * @param string $rules
         *
         * @return void
         */
        public function _addRulesModeGnu($rules)
        {
        }
        /**
         * @param array<array-key, mixed> $rules
         *
         * @return void
         *
         * @throws Zend_Console_Getopt_Exception
         */
        public function _addRulesModeZend($rules)
        {
        }
    }
    class Zend_Console_Getopt_Exception extends \Zend_Exception
    {
        /**
         * @var string
         */
        public $usage;
        /**
         * @param string $message
         * @param string $usage
         *
         * @return void
         */
        public function __construct($message, $usage = '')
        {
        }
        /**
         * @return string
         */
        public function getUsageMessage()
        {
        }
    }
    class Zend_Controller_Action implements \Zend_Controller_Action_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_classMethods;
        /**
         * @var array<array-key, mixed>
         */
        public $_delimiters;
        /**
         * @var array<array-key, mixed>
         */
        public $_invokeArgs;
        /**
         * @var Zend_Controller_Front
         */
        public $_frontController;
        /**
         * @var Zend_Controller_Request_Abstract
         */
        public $_request;
        /**
         * @var Zend_Controller_Response_Abstract
         */
        public $_response;
        /**
         * @var string
         */
        public $viewSuffix;
        /**
         * @var Zend_View_Interface
         */
        public $view;
        /**
         * @var Zend_Controller_Action_HelperBroker
         */
        public $_helper;
        /**
         * @param Zend_Controller_Request_Abstract $request
         * @param Zend_Controller_Response_Abstract $response
         * @param array<array-key, mixed> $invokeArgs
         *
         * @return void
         */
        public function __construct(\Zend_Controller_Request_Abstract $request, \Zend_Controller_Response_Abstract $response, array $invokeArgs = array())
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @return Zend_View_Interface
         *
         * @throws Zend_Controller_Exception
         */
        public function initView()
        {
        }
        /**
         * @param null|string $action
         * @param null|string $name
         * @param bool $noController
         *
         * @return void
         */
        public function render($action = null, $name = null, $noController = false)
        {
        }
        /**
         * @param string $script
         * @param null|string $name
         *
         * @return void
         */
        public function renderScript($script, $name = null)
        {
        }
        /**
         * @param null|string $action
         * @param bool|null $noController
         *
         * @return string
         *
         * @throws Zend_Controller_Exception
         */
        public function getViewScript($action = null, $noController = null)
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return Zend_Controller_Action
         */
        public function setRequest(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         */
        public function getResponse()
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         *
         * @return Zend_Controller_Action
         */
        public function setResponse(\Zend_Controller_Response_Abstract $response)
        {
        }
        /**
         * @param array<array-key, mixed> $args
         *
         * @return Zend_Controller_Action
         */
        public function _setInvokeArgs(array $args = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getInvokeArgs()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getInvokeArg($key)
        {
        }
        /**
         * @param string $helperName
         *
         * @return Zend_Controller_Action_Helper_Abstract
         */
        public function getHelper($helperName)
        {
        }
        /**
         * @param string $helperName
         *
         * @return Zend_Controller_Action_Helper_Abstract
         */
        public function getHelperCopy($helperName)
        {
        }
        /**
         * @param Zend_Controller_Front $front
         *
         * @return Zend_Controller_Action
         */
        public function setFrontController(\Zend_Controller_Front $front)
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public function getFrontController()
        {
        }
        /**
         * @return void
         */
        public function preDispatch()
        {
        }
        /**
         * @return void
         */
        public function postDispatch()
        {
        }
        /**
         * @param string $methodName
         * @param array<array-key, mixed> $args
         *
         * @return void
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function __call($methodName, $args)
        {
        }
        /**
         * @param string $action
         *
         * @return void
         */
        public function dispatch($action)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract|null $request
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function run(?\Zend_Controller_Request_Abstract $request = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @param string $paramName
         * @param mixed|null $default
         *
         * @return mixed
         */
        public function _getParam($paramName, $default = null)
        {
        }
        /**
         * @param string $paramName
         * @param mixed|null $default
         *
         * @return mixed
         */
        public function getParam($paramName, $default = null)
        {
        }
        /**
         * @param string $paramName
         * @param mixed $value
         *
         * @return Zend_Controller_Action
         */
        public function _setParam($paramName, $value)
        {
        }
        /**
         * @param string $paramName
         * @param mixed $value
         *
         * @return Zend_Controller_Action
         */
        public function setParam($paramName, $value)
        {
        }
        /**
         * @param string $paramName
         *
         * @return bool
         */
        public function _hasParam($paramName)
        {
        }
        /**
         * @param string $paramName
         *
         * @return bool
         */
        public function hasParam($paramName)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getAllParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAllParams()
        {
        }
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed>|null $params
         *
         * @return void
         */
        public function _forward($action, $controller = null, $module = null, ?array $params = null)
        {
        }
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed>|null $params
         *
         * @return void
         */
        public function forward($action, $controller = null, $module = null, ?array $params = null)
        {
        }
        /**
         * @param string $url
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function _redirect($url, array $options = array())
        {
        }
        /**
         * @param string $url
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function redirect($url, array $options = array())
        {
        }
    }
    class Zend_Controller_Action_Exception extends \Zend_Controller_Exception
    {
    }
    class Zend_Controller_Action_HelperBroker
    {
        /**
         * @var Zend_Controller_Action
         */
        public $_actionController;
        /**
         * @var Zend_Loader_PluginLoader_Interface
         */
        public static $_pluginLoader;
        /**
         * @var Zend_Controller_Action_HelperBroker_PriorityStack
         */
        public static $_stack;
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         *
         * @return void
         */
        public static function setPluginLoader($loader)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function getPluginLoader()
        {
        }
        /**
         * @param string $prefix
         */
        public static function addPrefix($prefix)
        {
        }
        /**
         * @param string $path
         * @param string $prefix
         *
         * @return void
         */
        public static function addPath($path, $prefix = 'Zend_Controller_Action_Helper')
        {
        }
        /**
         * @param Zend_Controller_Action_Helper_Abstract $helper
         *
         * @return void
         */
        public static function addHelper(\Zend_Controller_Action_Helper_Abstract $helper)
        {
        }
        /**
         * @return void
         */
        public static function resetHelpers()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Action_Helper_Abstract
         */
        public static function getStaticHelper($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Action_Helper_Abstract
         *
         * @throws Zend_Controller_Action_Exception
         */
        public static function getExistingHelper($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getExistingHelpers()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public static function hasHelper($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public static function removeHelper($name)
        {
        }
        /**
         * @return Zend_Controller_Action_HelperBroker_PriorityStack
         */
        public static function getStack()
        {
        }
        /**
         * @param Zend_Controller_Action $actionController
         *
         * @return void
         */
        public function __construct(\Zend_Controller_Action $actionController)
        {
        }
        /**
         * @return void
         */
        public function notifyPreDispatch()
        {
        }
        /**
         * @return void
         */
        public function notifyPostDispatch()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Action_Helper_Abstract
         */
        public function getHelper($name)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Action_Helper_Abstract
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public static function _normalizeHelperName($name)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public static function _loadHelper($name)
        {
        }
    }
    class Zend_Controller_Action_HelperBroker_PriorityStack implements \IteratorAggregate, \ArrayAccess, \Countable
    {
        public $_helpersByPriority = array();
        public $_helpersByNameRef = array();
        public $_nextDefaultPriority = 1;
        /**
         * @param string $helperName
         *
         * @return Zend_Controller_Action_Helper_Abstract
         */
        public function __get($helperName)
        {
        }
        /**
         * @param string $helperName
         *
         * @return Zend_Controller_Action_Helper_Abstract
         */
        public function __isset($helperName)
        {
        }
        /**
         * @param string $helperName
         *
         * @return Zend_Controller_Action_Helper_Abstract
         */
        public function __unset($helperName)
        {
        }
        /**
         * @param Zend_Controller_Action_Helper_Abstract $helper
         *
         * @return Zend_Controller_Action_HelperBroker_PriorityStack
         */
        public function push(\Zend_Controller_Action_Helper_Abstract $helper)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIterator()
        {
        }
        /**
         * @param int|string $priorityOrHelperName
         *
         * @return Zend_Controller_Action_HelperBroker_PriorityStack
         */
        public function offsetExists($priorityOrHelperName)
        {
        }
        /**
         * @param int|string $priorityOrHelperName
         *
         * @return Zend_Controller_Action_HelperBroker_PriorityStack
         */
        public function offsetGet($priorityOrHelperName)
        {
        }
        /**
         * @param int $priority
         * @param Zend_Controller_Action_Helper_Abstract $helper
         *
         * @return Zend_Controller_Action_HelperBroker_PriorityStack
         */
        public function offsetSet($priority, $helper)
        {
        }
        /**
         * @param int|string $priorityOrHelperName
         *
         * @return Zend_Controller_Action_HelperBroker_PriorityStack
         */
        public function offsetUnset($priorityOrHelperName)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @param int|null $indexPriority
         *
         * @return int
         */
        public function getNextFreeHigherPriority($indexPriority = null)
        {
        }
        /**
         * @param int|null $indexPriority
         *
         * @return int
         */
        public function getNextFreeLowerPriority($indexPriority = null)
        {
        }
        /**
         * @return int
         */
        public function getHighestPriority()
        {
        }
        /**
         * @return int
         */
        public function getLowestPriority()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHelpersByName()
        {
        }
    }
    class Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var Zend_Controller_Action
         */
        public $_actionController;
        /**
         * @var mixed
         */
        public $_frontController;
        /**
         * @param Zend_Controller_Action|null $actionController
         *
         * @return Zend_Controller_ActionHelper_Abstract
         */
        public function setActionController(?\Zend_Controller_Action $actionController = null)
        {
        }
        /**
         * @return Zend_Controller_Action
         */
        public function getActionController()
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public function getFrontController()
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @return void
         */
        public function preDispatch()
        {
        }
        /**
         * @return void
         */
        public function postDispatch()
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract
         */
        public function getRequest()
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         */
        public function getResponse()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Controller_Action_Helper_ActionStack extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var Zend_Controller_Plugin_ActionStack
         */
        public $_actionStack;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $next
         *
         * @return Zend_Controller_Action_Helper_ActionStack
         */
        public function pushStack(\Zend_Controller_Request_Abstract $next)
        {
        }
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Controller_Action_Helper_ActionStack
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function actionToStack($action, $controller = null, $module = null, array $params = array())
        {
        }
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function direct($action, $controller = null, $module = null, array $params = array())
        {
        }
    }
    class Zend_Controller_Action_Helper_AjaxContext extends \Zend_Controller_Action_Helper_ContextSwitch
    {
        public const TRIGGER_INIT = 'TRIGGER_INIT';
        public const TRIGGER_POST = 'TRIGGER_POST';
        /**
         * @var string
         */
        public $_contextKey;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param null|string $format
         *
         * @return void
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function initContext($format = null)
        {
        }
    }
    class Zend_Controller_Action_Helper_AutoCompleteDojo extends \Zend_Controller_Action_Helper_AutoComplete_Abstract
    {
        /**
         * @param mixed $data
         *
         * @return bool
         */
        public function validateData($data)
        {
        }
        /**
         * @param mixed $data
         * @param bool $keepLayouts
         *
         * @return string
         */
        public function prepareAutoCompletion($data, $keepLayouts = false)
        {
        }
    }
    class Zend_Controller_Action_Helper_AutoCompleteScriptaculous extends \Zend_Controller_Action_Helper_AutoComplete_Abstract
    {
        /**
         * @param mixed $data
         *
         * @return bool
         */
        public function validateData($data)
        {
        }
        /**
         * @param mixed $data
         * @param bool $keepLayouts
         *
         * @return string
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function prepareAutoCompletion($data, $keepLayouts = false)
        {
        }
    }
    class Zend_Controller_Action_Helper_AutoComplete_Abstract extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var bool
         */
        public $suppressExit;
        /**
         * @param mixed $data
         *
         * @return bool
         */
        public abstract function validateData($data);
        /**
         * @param mixed $data
         * @param bool $keepLayouts
         *
         * @return mixed
         */
        public abstract function prepareAutoCompletion($data, $keepLayouts = false);
        /**
         * @return Zend_Controller_Action_Helper_AutoComplete_Abstract
         */
        public function disableLayouts()
        {
        }
        /**
         * @param mixed $data
         * @param bool $keepLayouts
         *
         * @return string
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function encodeJson($data, $keepLayouts = false)
        {
        }
        /**
         * @param mixed $data
         * @param bool $keepLayouts
         *
         * @return null|string
         */
        public function sendAutoCompletion($data, $keepLayouts = false)
        {
        }
        /**
         * @param mixed $data
         * @param bool $sendNow
         * @param bool $keepLayouts
         *
         * @return null|string
         */
        public function direct($data, $sendNow = true, $keepLayouts = false)
        {
        }
    }
    class Zend_Controller_Action_Helper_Cache extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var Zend_Cache_Manager
         */
        public $_manager;
        /**
         * @var array<array-key, mixed>
         */
        public $_caching;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        /**
         * @var array<array-key, mixed>
         */
        public $_extensions;
        public $_obStarted = false;
        /**
         * @param array<array-key, mixed> $actions
         * @param array<array-key, mixed> $tags
         *
         * @return void
         */
        public function direct(array $actions, array $tags = array(), $extension = null)
        {
        }
        /**
         * @param string $relativeUrl
         * @param bool $recursive
         *
         * @return mixed
         */
        public function removePage($relativeUrl, $recursive = false)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return mixed
         */
        public function removePagesTagged(array $tags)
        {
        }
        /**
         * @return void
         */
        public function preDispatch()
        {
        }
        /**
         * @param string $requestUri
         *
         * @return string
         */
        public function _encodeCacheId($requestUri)
        {
        }
        /**
         * @param Zend_Cache_Manager $manager
         *
         * @return void
         */
        public function setManager(\Zend_Cache_Manager $manager)
        {
        }
        /**
         * @return Zend_Cache_Manager
         */
        public function getManager()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCacheableActions()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCacheableTags()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
    }
    class Zend_Controller_Action_Helper_ContextSwitch extends \Zend_Controller_Action_Helper_Abstract
    {
        public const TRIGGER_INIT = 'TRIGGER_INIT';
        public const TRIGGER_POST = 'TRIGGER_POST';
        /**
         * @var array<array-key, mixed>
         */
        public $_contexts;
        /**
         * @var bool
         */
        public $_autoJsonSerialization;
        /**
         * @var string
         */
        public $_contextKey;
        /**
         * @var string
         */
        public $_contextParam;
        /**
         * @var string
         */
        public $_currentContext;
        /**
         * @var string
         */
        public $_defaultContext;
        /**
         * @var bool
         */
        public $_disableLayout;
        /**
         * @var array<array-key, mixed>
         */
        public $_specialConfig;
        /**
         * @var array<array-key, mixed>
         */
        public $_unconfigurable;
        /**
         * @var Zend_Controller_Action_Helper_ViewRenderer
         */
        public $_viewRenderer;
        /**
         * @var string
         */
        public $_viewSuffixOrig;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function direct()
        {
        }
        /**
         * @param mixed|null $format
         *
         * @return void
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function initContext($format = null)
        {
        }
        /**
         * @return void
         */
        public function initJsonContext()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setAutoJsonSerialization($flag)
        {
        }
        /**
         * @return bool
         */
        public function getAutoJsonSerialization()
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function _setSuffix(array $spec)
        {
        }
        /**
         * @param string $context
         * @param string $suffix
         * @param bool $prependViewRendererSuffix
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function setSuffix($context, $suffix, $prependViewRendererSuffix = true)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function getSuffix($type)
        {
        }
        /**
         * @param string $context
         * @param bool $throwException
         *
         * @return bool
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function hasContext($context, $throwException = false)
        {
        }
        /**
         * @param string $context
         * @param string $header
         * @param string $content
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function addHeader($context, $header, $content)
        {
        }
        /**
         * @param string $header
         * @param string $content
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setHeader($context, $header, $content)
        {
        }
        /**
         * @param string $context
         * @param array<array-key, mixed> $headers
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function addHeaders($context, array $headers)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function _setHeaders(array $options)
        {
        }
        /**
         * @param string $context
         * @param array<array-key, mixed> $headers
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setHeaders($context, array $headers)
        {
        }
        /**
         * @param string $context
         * @param string $header
         *
         * @return null|string
         */
        public function getHeader($context, $header)
        {
        }
        /**
         * @param string $context
         *
         * @return array<array-key, mixed>
         */
        public function getHeaders($context)
        {
        }
        /**
         * @param string $context
         * @param string $header
         *
         * @return bool
         */
        public function removeHeader($context, $header)
        {
        }
        /**
         * @param string $context
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function clearHeaders($context)
        {
        }
        /**
         * @param string $trigger
         *
         * @return string
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function _validateTrigger($trigger)
        {
        }
        /**
         * @param string $context
         * @param string $trigger
         * @param array<array-key, mixed>|string $callback
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function setCallback($context, $trigger, $callback)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function _setCallbacks(array $options)
        {
        }
        /**
         * @param string $context
         * @param array<array-key, mixed> $callbacks
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setCallbacks($context, array $callbacks)
        {
        }
        /**
         * @param string $context
         * @param string $trigger
         *
         * @return array<array-key, mixed>|null|string
         */
        public function getCallback($context, $trigger)
        {
        }
        /**
         * @param string $context
         *
         * @return array<array-key, mixed>
         */
        public function getCallbacks($context)
        {
        }
        /**
         * @param string $context
         * @param string $trigger
         *
         * @return bool
         */
        public function removeCallback($context, $trigger)
        {
        }
        /**
         * @param string $context
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function clearCallbacks($context)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setContextParam($name)
        {
        }
        /**
         * @return string
         */
        public function getContextParam()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function setDefaultContext($type)
        {
        }
        /**
         * @return string
         */
        public function getDefaultContext()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setAutoDisableLayout($flag)
        {
        }
        /**
         * @return bool
         */
        public function getAutoDisableLayout()
        {
        }
        /**
         * @param string $context
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function addContext($context, array $spec)
        {
        }
        /**
         * @param string $context
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setContext($context, array $spec)
        {
        }
        /**
         * @param array<array-key, mixed> $contexts
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function addContexts(array $contexts)
        {
        }
        /**
         * @param array<array-key, mixed> $contexts
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setContexts(array $contexts)
        {
        }
        /**
         * @param string $context
         *
         * @return array<array-key, mixed>|null
         */
        public function getContext($context)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getContexts()
        {
        }
        /**
         * @param string $context
         *
         * @return bool
         */
        public function removeContext($context)
        {
        }
        /**
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function clearContexts()
        {
        }
        /**
         * @return null|string
         */
        public function getCurrentContext()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function postDispatch()
        {
        }
        /**
         * @return void
         */
        public function postJsonContext()
        {
        }
        /**
         * @param string $action
         * @param array<array-key, mixed>|string $context
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch|null
         */
        public function addActionContext($action, $context)
        {
        }
        /**
         * @param string $action
         * @param array<array-key, mixed>|string $context
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch|null
         */
        public function setActionContext($action, $context)
        {
        }
        /**
         * @param array<array-key, mixed> $contexts
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function addActionContexts(array $contexts)
        {
        }
        /**
         * @param array<array-key, mixed> $contexts
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function setActionContexts(array $contexts)
        {
        }
        /**
         * @param string $action
         * @param array<array-key, mixed>|string $context
         *
         * @return bool
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function hasActionContext($action, $context)
        {
        }
        /**
         * @param null|string $action
         *
         * @return array<array-key, mixed>
         */
        public function getActionContexts($action = null)
        {
        }
        /**
         * @param string $action
         * @param array<array-key, mixed>|string $context
         *
         * @return bool
         */
        public function removeActionContext($action, $context)
        {
        }
        /**
         * @param null|string $action
         *
         * @return Zend_Controller_Action_Helper_ContextSwitch
         */
        public function clearActionContexts($action = null)
        {
        }
        /**
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function _getViewRenderer()
        {
        }
    }
    class Zend_Controller_Action_Helper_FlashMessenger extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_messages;
        /**
         * @var Zend_Session
         */
        public static $_session;
        /**
         * @var bool
         */
        public static $_messageAdded;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return Zend_Controller_Action_Helper_FlashMessenger
         */
        public function postDispatch()
        {
        }
        /**
         * @param string $namespace
         *
         * @return Zend_Controller_Action_Helper_FlashMessenger
         */
        public function setNamespace($namespace = 'default')
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @return Zend_Controller_Action_Helper_FlashMessenger
         */
        public function resetNamespace()
        {
        }
        /**
         * @param string $message
         *
         * @return Zend_Controller_Action_Helper_FlashMessenger
         */
        public function addMessage($message, $namespace = null)
        {
        }
        /**
         * @return bool
         */
        public function hasMessages($namespace = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages($namespace = null)
        {
        }
        /**
         * @return bool
         */
        public function clearMessages($namespace = null)
        {
        }
        /**
         * @return bool
         */
        public function hasCurrentMessages($namespace = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCurrentMessages($namespace = null)
        {
        }
        /**
         * @return bool
         */
        public function clearCurrentMessages($namespace = null)
        {
        }
        /**
         * @return ArrayObject
         */
        public function getIterator($namespace = null)
        {
        }
        /**
         * @return int
         */
        public function count($namespace = null)
        {
        }
        /**
         * @param string $message
         *
         * @return void
         */
        public function direct($message, $namespace = null)
        {
        }
    }
    class Zend_Controller_Action_Helper_Json extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var bool
         */
        public $suppressExit;
        public function encodeJson($data, $keepLayouts = false, $encodeData = true)
        {
        }
        /**
         * @param mixed $data
         * @param array<array-key, mixed>|bool $keepLayouts
         *
         * @return null|string
         */
        public function sendJson($data, $keepLayouts = false, $encodeData = true)
        {
        }
        /**
         * @param mixed $data
         * @param bool $sendNow
         * @param bool $keepLayouts
         * @param bool $encodeData
         *
         * @return null|string
         */
        public function direct($data, $sendNow = true, $keepLayouts = false, $encodeData = true)
        {
        }
    }
    class Zend_Controller_Action_Helper_Redirector extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var int
         */
        public $_code;
        /**
         * @var bool
         */
        public $_exit;
        /**
         * @var bool
         */
        public $_prependBase;
        /**
         * @var string
         */
        public $_redirectUrl;
        /**
         * @var bool
         */
        public $_useAbsoluteUri;
        /**
         * @var bool
         */
        public $_closeSessionOnExit;
        /**
         * @return int
         */
        public function getCode()
        {
        }
        /**
         * @param int $code
         *
         * @return true
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function _checkCode($code)
        {
        }
        /**
         * @param int $code
         *
         * @return Zend_Controller_Action_Helper_Redirector
         */
        public function setCode($code)
        {
        }
        /**
         * @return bool
         */
        public function getExit()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_Redirector
         */
        public function setExit($flag)
        {
        }
        /**
         * @return bool
         */
        public function getPrependBase()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_Redirector
         */
        public function setPrependBase($flag)
        {
        }
        /**
         * @return bool
         */
        public function getCloseSessionOnExit()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_Redirector
         */
        public function setCloseSessionOnExit($flag)
        {
        }
        /**
         * @return bool
         */
        public function getUseAbsoluteUri()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_Redirector
         */
        public function setUseAbsoluteUri($flag = true)
        {
        }
        /**
         * @return void
         */
        public function _redirect($url)
        {
        }
        /**
         * @return string
         */
        public function getRedirectUrl()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function _prependBase($url)
        {
        }
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed> $params
         *
         * @return void
         */
        public function setGotoSimple($action, $controller = null, $module = null, array $params = array())
        {
        }
        /**
         * @param array<array-key, mixed> $urlOptions
         * @param null|string $name
         * @param bool $reset
         * @param bool $encode
         *
         * @return void
         */
        public function setGotoRoute(array $urlOptions = array(), $name = null, $reset = false, $encode = true)
        {
        }
        /**
         * @param string $url
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function setGotoUrl($url, array $options = array())
        {
        }
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed> $params
         *
         * @return void
         */
        public function gotoSimple($action, $controller = null, $module = null, array $params = array())
        {
        }
        /**
         * @param mixed $action
         * @param mixed|null $controller
         * @param mixed|null $module
         * @param array<array-key, mixed> $params
         *
         * @return void
         */
        public function gotoSimpleAndExit($action, $controller = null, $module = null, array $params = array())
        {
        }
        /**
         * @param array<array-key, mixed> $urlOptions
         * @param null|string $name
         * @param bool $reset
         * @param bool $encode
         *
         * @return void
         */
        public function gotoRoute(array $urlOptions = array(), $name = null, $reset = false, $encode = true)
        {
        }
        /**
         * @param array<array-key, mixed> $urlOptions
         * @param null|string $name
         * @param bool $reset
         *
         * @return void
         */
        public function gotoRouteAndExit(array $urlOptions = array(), $name = null, $reset = false)
        {
        }
        /**
         * @param string $url
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function gotoUrl($url, array $options = array())
        {
        }
        /**
         * @param string $url
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function gotoUrlAndExit($url, array $options = array())
        {
        }
        /**
         * @return void
         */
        public function redirectAndExit()
        {
        }
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed> $params
         *
         * @return void
         */
        public function direct($action, $controller = null, $module = null, array $params = array())
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function __call($method, $args)
        {
        }
    }
    class Zend_Controller_Action_Helper_Url extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         */
        public function simple($action, $controller = null, $module = null, ?array $params = null)
        {
        }
        /**
         * @param array<array-key, mixed> $urlOptions
         * @param mixed|null $name
         * @param bool $reset
         * @param bool $encode
         *
         * @return string
         */
        public function url($urlOptions = array(), $name = null, $reset = false, $encode = true)
        {
        }
        /**
         * @param string $action
         * @param null|string $controller
         * @param null|string $module
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         */
        public function direct($action, $controller = null, $module = null, ?array $params = null)
        {
        }
    }
    class Zend_Controller_Action_Helper_ViewRenderer extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var Zend_View_Interface
         */
        public $view;
        /**
         * @var array<array-key, mixed>
         */
        public $_delimiters;
        /**
         * @var Zend_Filter_Inflector
         */
        public $_inflector;
        /**
         * @var string
         */
        public $_inflectorTarget;
        /**
         * @var string
         */
        public $_moduleDir;
        /**
         * @var bool
         */
        public $_neverController;
        /**
         * @var bool
         */
        public $_neverRender;
        /**
         * @var bool
         */
        public $_noController;
        /**
         * @var bool
         */
        public $_noRender;
        /**
         * @var array<array-key, mixed>|string
         */
        public $_pathDelimiters;
        /**
         * @var string
         */
        public $_responseSegment;
        /**
         * @var string
         */
        public $_scriptAction;
        /**
         * @var string
         */
        public $_viewBasePathSpec;
        /**
         * @var string
         */
        public $_viewScriptPathSpec;
        /**
         * @var string
         */
        public $_viewScriptPathNoControllerSpec;
        /**
         * @var string
         */
        public $_viewSuffix;
        /**
         * @param Zend_View_Interface|null $view
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct(?\Zend_View_Interface $view = null, array $options = array())
        {
        }
        /**
         * @return void
         */
        public function __clone()
        {
        }
        /**
         * @param Zend_View_Interface $view
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setView(\Zend_View_Interface $view)
        {
        }
        /**
         * @return string
         */
        public function getModule()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function getModuleDirectory()
        {
        }
        /**
         * @return Zend_Filter_Inflector
         */
        public function getInflector()
        {
        }
        /**
         * @param Zend_Filter_Inflector $inflector
         * @param bool $reference
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setInflector(\Zend_Filter_Inflector $inflector, $reference = false)
        {
        }
        /**
         * @param string $target
         *
         * @return void
         */
        public function _setInflectorTarget($target)
        {
        }
        /**
         * @param string $dir
         *
         * @return void
         */
        public function _setModuleDir($dir)
        {
        }
        /**
         * @return string
         */
        public function _getModuleDir()
        {
        }
        /**
         * @return string
         */
        public function _generateDefaultPrefix()
        {
        }
        /**
         * @return string
         */
        public function _getBasePath()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function _setOptions(array $options)
        {
        }
        /**
         * @param null|string $path
         * @param null|string $prefix
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Controller_Action_Exception
         */
        public function initView($path = null, $prefix = null, array $options = array())
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setViewBasePathSpec($path)
        {
        }
        /**
         * @return string
         */
        public function getViewBasePathSpec()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setViewScriptPathSpec($path)
        {
        }
        /**
         * @return string
         */
        public function getViewScriptPathSpec()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setViewScriptPathNoControllerSpec($path)
        {
        }
        /**
         * @return string
         */
        public function getViewScriptPathNoControllerSpec()
        {
        }
        /**
         * @param null|string $action
         * @param array<array-key, mixed> $vars
         *
         * @return string
         */
        public function getViewScript($action = null, array $vars = array())
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setNeverRender($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getNeverRender()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setNoRender($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getNoRender()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setScriptAction($name)
        {
        }
        /**
         * @return string
         */
        public function getScriptAction()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setResponseSegment($name)
        {
        }
        /**
         * @return string
         */
        public function getResponseSegment()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setNoController($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getNoController()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setNeverController($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getNeverController()
        {
        }
        /**
         * @param string $suffix
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setViewSuffix($suffix)
        {
        }
        /**
         * @return string
         */
        public function getViewSuffix()
        {
        }
        /**
         * @param null|string $action
         * @param null|string $name
         * @param bool|null $noController
         *
         * @return Zend_Controller_Action_Helper_ViewRenderer
         */
        public function setRender($action = null, $name = null, $noController = null)
        {
        }
        /**
         * @param array<array-key, mixed> $vars
         *
         * @return string
         */
        public function _translateSpec(array $vars = array())
        {
        }
        /**
         * @param string $script
         * @param null|string $name
         *
         * @return void
         */
        public function renderScript($script, $name = null)
        {
        }
        /**
         * @param null|string $action
         * @param null|string $name
         * @param bool|null $noController
         *
         * @return void
         */
        public function render($action = null, $name = null, $noController = null)
        {
        }
        /**
         * @param null|string $action
         * @param array<array-key, mixed> $vars
         * @param null|string $name
         *
         * @return void
         */
        public function renderBySpec($action = null, array $vars = array(), $name = null)
        {
        }
        /**
         * @return void
         */
        public function postDispatch()
        {
        }
        /**
         * @return bool
         */
        public function _shouldRender()
        {
        }
        /**
         * @param null|string $action
         * @param null|string $name
         * @param bool|null $noController
         *
         * @return void
         */
        public function direct($action = null, $name = null, $noController = null)
        {
        }
    }
    interface Zend_Controller_Action_Interface
    {
        /**
         * @param Zend_Controller_Request_Abstract $request
         * @param Zend_Controller_Response_Abstract $response
         * @param array<array-key, mixed> $invokeArgs
         *
         * @return void
         */
        public function __construct(\Zend_Controller_Request_Abstract $request, \Zend_Controller_Response_Abstract $response, array $invokeArgs = array());
        /**
         * @param string $action
         *
         * @return void
         */
        public function dispatch($action);
    }
    class Zend_Controller_Dispatcher_Abstract implements \Zend_Controller_Dispatcher_Interface
    {
        /**
         * @var string
         */
        public $_defaultAction;
        /**
         * @var string
         */
        public $_defaultController;
        /**
         * @var string
         */
        public $_defaultModule;
        /**
         * @var Zend_Controller_Front
         */
        public $_frontController;
        /**
         * @var array<array-key, mixed>
         */
        public $_invokeParams;
        /**
         * @var string
         */
        public $_pathDelimiter;
        /**
         * @var Zend_Controller_Response_Abstract|null
         */
        public $_response;
        /**
         * @var array<array-key, mixed>
         */
        public $_wordDelimiter;
        /**
         * @return void
         */
        public function __construct(array $params = array())
        {
        }
        /**
         * @param string $unformatted
         *
         * @return string
         */
        public function formatControllerName($unformatted)
        {
        }
        /**
         * @param string $unformatted
         *
         * @return string
         */
        public function formatActionName($unformatted)
        {
        }
        /**
         * @param array<array-key, mixed>|string $spec
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Controller_Dispatcher_Exception
         */
        public function _verifyDelimiter($spec)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getWordDelimiter()
        {
        }
        /**
         * @param array<array-key, mixed>|string $spec
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setWordDelimiter($spec)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPathDelimiter()
        {
        }
        /**
         * @param string $spec
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setPathDelimiter($spec)
        {
        }
        /**
         * @param string $unformatted
         * @param bool $isAction
         *
         * @return string
         */
        public function _formatName($unformatted, $isAction = false)
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public function getFrontController()
        {
        }
        /**
         * @param Zend_Controller_Front $controller
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setFrontController(\Zend_Controller_Front $controller)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setParam($name, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setParams(array $params)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getParam($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function clearParams($name = null)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setResponse(?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract|null
         */
        public function getResponse()
        {
        }
        /**
         * @param string $controller
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setDefaultControllerName($controller)
        {
        }
        /**
         * @return string
         */
        public function getDefaultControllerName()
        {
        }
        /**
         * @param string $action
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setDefaultAction($action)
        {
        }
        /**
         * @return string
         */
        public function getDefaultAction()
        {
        }
        /**
         * @param string $module
         *
         * @return Zend_Controller_Dispatcher_Abstract
         */
        public function setDefaultModule($module)
        {
        }
        /**
         * @return string
         */
        public function getDefaultModule()
        {
        }
    }
    class Zend_Controller_Dispatcher_Exception extends \Zend_Controller_Exception
    {
    }
    interface Zend_Controller_Dispatcher_Interface
    {
        /**
         * @param string $unformatted
         *
         * @return string
         */
        public function formatControllerName($unformatted);
        /**
         * @param string $unformatted
         *
         * @return string
         */
        public function formatModuleName($unformatted);
        /**
         * @param string $unformatted
         *
         * @return string
         */
        public function formatActionName($unformatted);
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return bool
         */
        public function isDispatchable(\Zend_Controller_Request_Abstract $request);
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Controller_Dispatcher_Interface
         */
        public function setParam($name, $value);
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Controller_Dispatcher_Interface
         */
        public function setParams(array $params);
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getParam($name);
        /**
         * @return array<array-key, mixed>
         */
        public function getParams();
        /**
         * @return Zend_Controller_Dispatcher_Interface
         */
        public function clearParams($name = null);
        /**
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return void
         */
        public function setResponse(?\Zend_Controller_Response_Abstract $response = null);
        /**
         * @return Zend_Controller_Response_Abstract|null
         */
        public function getResponse();
        /**
         * @param string $path
         * @param null|string $args
         *
         * @return Zend_Controller_Dispatcher_Interface
         */
        public function addControllerDirectory($path, $args = null);
        /**
         * @return Zend_Controller_Dispatcher_Interface
         */
        public function setControllerDirectory($path);
        /**
         * @return array<array-key, mixed>
         */
        public function getControllerDirectory();
        /**
         * @param Zend_Controller_Request_Abstract $request
         * @param Zend_Controller_Response_Abstract $response
         *
         * @return void
         */
        public function dispatch(\Zend_Controller_Request_Abstract $request, \Zend_Controller_Response_Abstract $response);
        /**
         * @param string $module
         *
         * @return bool
         */
        public function isValidModule($module);
        /**
         * @return string
         */
        public function getDefaultModule();
        /**
         * @return string
         */
        public function getDefaultControllerName();
        /**
         * @return string
         */
        public function getDefaultAction();
    }
    class Zend_Controller_Dispatcher_Standard extends \Zend_Controller_Dispatcher_Abstract
    {
        /**
         * @var string
         */
        public $_curDirectory;
        /**
         * @var string
         */
        public $_curModule;
        /**
         * @var array<array-key, mixed>
         */
        public $_controllerDirectory;
        /**
         * @param array<array-key, mixed> $params
         *
         * @return void
         */
        public function __construct(array $params = array())
        {
        }
        /**
         * @param string $path
         * @param null|string $module
         *
         * @return Zend_Controller_Dispatcher_Standard
         */
        public function addControllerDirectory($path, $module = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $directory
         *
         * @return Zend_Controller_Dispatcher_Standard
         */
        public function setControllerDirectory($directory, $module = null)
        {
        }
        /**
         * @param null|string $module
         *
         * @return array<array-key, mixed>|string
         */
        public function getControllerDirectory($module = null)
        {
        }
        /**
         * @param string $module
         *
         * @return bool
         */
        public function removeControllerDirectory($module)
        {
        }
        /**
         * @param string $unformatted
         *
         * @return string
         */
        public function formatModuleName($unformatted)
        {
        }
        /**
         * @param string $moduleName
         * @param string $className
         *
         * @return string
         */
        public function formatClassName($moduleName, $className)
        {
        }
        /**
         * @param string $class
         *
         * @return string
         */
        public function classToFilename($class)
        {
        }
        /**
         * @return bool
         */
        public function isDispatchable(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         * @param Zend_Controller_Response_Abstract $response
         *
         * @return void
         *
         * @throws Zend_Controller_Dispatcher_Exception
         */
        public function dispatch(\Zend_Controller_Request_Abstract $request, \Zend_Controller_Response_Abstract $response)
        {
        }
        /**
         * @param string $className
         *
         * @return string
         *
         * @throws Zend_Controller_Dispatcher_Exception
         */
        public function loadClass($className)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return false|string
         */
        public function getControllerClass(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param string $module
         *
         * @return bool
         */
        public function isValidModule($module)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return string
         */
        public function getDefaultControllerClass(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @return string
         */
        public function getDispatchDirectory()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return string
         */
        public function getActionMethod(\Zend_Controller_Request_Abstract $request)
        {
        }
    }
    class Zend_Controller_Exception extends \Zend_Exception
    {
    }
    class Zend_Controller_Front
    {
        /**
         * @var string
         */
        public $_baseUrl;
        /**
         * @var array<array-key, mixed>|string
         */
        public $_controllerDir;
        /**
         * @var Zend_Controller_Dispatcher_Interface
         */
        public $_dispatcher;
        /**
         * @var Zend_Controller_Front
         */
        public static $_instance;
        /**
         * @var array<array-key, mixed>
         */
        public $_invokeParams;
        /**
         * @var string
         */
        public $_moduleControllerDirectoryName;
        /**
         * @var Zend_Controller_Plugin_Broker
         */
        public $_plugins;
        /**
         * @var Zend_Controller_Request_Abstract
         */
        public $_request;
        /**
         * @var Zend_Controller_Response_Abstract
         */
        public $_response;
        /**
         * @var bool
         */
        public $_returnResponse;
        /**
         * @var Zend_Controller_Router_Interface
         */
        public $_router;
        /**
         * @var bool
         */
        public $_throwExceptions;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return void
         */
        public function __clone()
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public static function getInstance()
        {
        }
        /**
         * @return void
         */
        public function resetInstance()
        {
        }
        /**
         * @param array<array-key, mixed>|string $controllerDirectory
         *
         * @return void
         *
         * @throws Zend_Controller_Exception
         */
        public static function run($controllerDirectory)
        {
        }
        /**
         * @param string $directory
         * @param null|string $module
         *
         * @return Zend_Controller_Front
         *
         * @throws Zend_Controller_Exception
         */
        public function addControllerDirectory($directory, $module = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $directory
         * @param null|string $module
         *
         * @return Zend_Controller_Front
         */
        public function setControllerDirectory($directory, $module = null)
        {
        }
        /**
         * @param null|string $name
         *
         * @return array<array-key, mixed>|null|string
         */
        public function getControllerDirectory($name = null)
        {
        }
        /**
         * @param string $module
         *
         * @return bool
         */
        public function removeControllerDirectory($module)
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Controller_Front
         */
        public function addModuleDirectory($path)
        {
        }
        /**
         * @param null|string $module
         *
         * @return null|string
         */
        public function getModuleDirectory($module = null)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Front
         */
        public function setModuleControllerDirectoryName($name = 'controllers')
        {
        }
        /**
         * @return string
         */
        public function getModuleControllerDirectoryName()
        {
        }
        /**
         * @param string $controller
         *
         * @return Zend_Controller_Front
         */
        public function setDefaultControllerName($controller)
        {
        }
        /**
         * @return string
         */
        public function getDefaultControllerName()
        {
        }
        /**
         * @param string $action
         *
         * @return Zend_Controller_Front
         */
        public function setDefaultAction($action)
        {
        }
        /**
         * @return string
         */
        public function getDefaultAction()
        {
        }
        /**
         * @param string $module
         *
         * @return Zend_Controller_Front
         */
        public function setDefaultModule($module)
        {
        }
        /**
         * @return string
         */
        public function getDefaultModule()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract|string $request
         *
         * @return Zend_Controller_Front
         *
         * @throws Zend_Controller_Exception
         */
        public function setRequest($request)
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract|null
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Controller_Router_Interface|string $router
         *
         * @return Zend_Controller_Front
         *
         * @throws Zend_Controller_Exception
         */
        public function setRouter($router)
        {
        }
        /**
         * @return Zend_Controller_Router_Interface
         */
        public function getRouter()
        {
        }
        /**
         * @param null|string $base
         *
         * @return Zend_Controller_Front
         *
         * @throws Zend_Controller_Exception
         */
        public function setBaseUrl($base = null)
        {
        }
        /**
         * @return string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @param Zend_Controller_Dispatcher_Interface $dispatcher
         *
         * @return Zend_Controller_Front
         */
        public function setDispatcher(\Zend_Controller_Dispatcher_Interface $dispatcher)
        {
        }
        /**
         * @return Zend_Controller_Dispatcher_Interface
         */
        public function getDispatcher()
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract|string $response
         *
         * @return Zend_Controller_Front
         *
         * @throws Zend_Controller_Exception
         */
        public function setResponse($response)
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract|null
         */
        public function getResponse()
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Controller_Front
         */
        public function setParam($name, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Controller_Front
         */
        public function setParams(array $params)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getParam($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public function clearParams($name = null)
        {
        }
        /**
         * @param Zend_Controller_Plugin_Abstract $plugin
         * @param int|null $stackIndex
         *
         * @return Zend_Controller_Front
         */
        public function registerPlugin(\Zend_Controller_Plugin_Abstract $plugin, $stackIndex = null)
        {
        }
        /**
         * @param Zend_Controller_Plugin_Abstract|string $plugin
         *
         * @return Zend_Controller_Front
         */
        public function unregisterPlugin($plugin)
        {
        }
        /**
         * @param string $class
         *
         * @return bool
         */
        public function hasPlugin($class)
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Controller_Plugin_Abstract|array<array-key, mixed>|false
         */
        public function getPlugin($class)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPlugins()
        {
        }
        /**
         * @param bool|null $flag
         *
         * @return Zend_Controller_Front|bool
         */
        public function throwExceptions($flag = null)
        {
        }
        /**
         * @param bool|null $flag
         *
         * @return Zend_Controller_Front|bool
         */
        public function returnResponse($flag = null)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract|null $request
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return Zend_Controller_Response_Abstract|null
         */
        public function dispatch(?\Zend_Controller_Request_Abstract $request = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
    }
    class Zend_Controller_Plugin_Abstract
    {
        /**
         * @var Zend_Controller_Request_Abstract
         */
        public $_request;
        /**
         * @var Zend_Controller_Response_Abstract
         */
        public $_response;
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return Zend_Controller_Plugin_Abstract
         */
        public function setRequest(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         *
         * @return Zend_Controller_Plugin_Abstract
         */
        public function setResponse(\Zend_Controller_Response_Abstract $response)
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         */
        public function getResponse()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function routeStartup(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function routeShutdown(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function dispatchLoopStartup(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function preDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function postDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @return void
         */
        public function dispatchLoopShutdown()
        {
        }
    }
    class Zend_Controller_Plugin_ActionStack extends \Zend_Controller_Plugin_Abstract
    {
        /**
         * @var Zend_Registry
         */
        public $_registry;
        /**
         * @var string
         */
        public $_registryKey;
        /**
         * @var array<array-key, mixed>
         */
        public $_validKeys;
        /**
         * @var bool
         */
        public $_clearRequestParams;
        /**
         * @param Zend_Registry|null $registry
         * @param null|string $key
         *
         * @return void
         */
        public function __construct(?\Zend_Registry $registry = null, $key = null)
        {
        }
        /**
         * @param Zend_Registry $registry
         *
         * @return Zend_Controller_Plugin_ActionStack
         */
        public function setRegistry(\Zend_Registry $registry)
        {
        }
        /**
         * @return Zend_Registry
         */
        public function getRegistry()
        {
        }
        /**
         * @return string
         */
        public function getRegistryKey()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Controller_Plugin_ActionStack
         */
        public function setRegistryKey($key)
        {
        }
        /**
         * @param bool $clearRequestParams
         *
         * @return Zend_Controller_Plugin_ActionStack
         */
        public function setClearRequestParams($clearRequestParams)
        {
        }
        /**
         * @return bool
         */
        public function getClearRequestParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getStack()
        {
        }
        /**
         * @param array<array-key, mixed> $stack
         *
         * @return Zend_Controller_Plugin_ActionStack
         */
        public function _saveStack(array $stack)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $next
         *
         * @return Zend_Controller_Plugin_ActionStack
         */
        public function pushStack(\Zend_Controller_Request_Abstract $next)
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract|false
         */
        public function popStack()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function postDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param array<array-key, mixed> $next
         *
         * @return void
         */
        public function forward(\Zend_Controller_Request_Abstract $next)
        {
        }
    }
    class Zend_Controller_Plugin_Broker extends \Zend_Controller_Plugin_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_plugins;
        /**
         * @param Zend_Controller_Plugin_Abstract $plugin
         * @param int|null $stackIndex
         *
         * @return Zend_Controller_Plugin_Broker
         */
        public function registerPlugin(\Zend_Controller_Plugin_Abstract $plugin, $stackIndex = null)
        {
        }
        /**
         * @param Zend_Controller_Plugin_Abstract|string $plugin
         *
         * @return Zend_Controller_Plugin_Broker
         */
        public function unregisterPlugin($plugin)
        {
        }
        /**
         * @param string $class
         *
         * @return bool
         */
        public function hasPlugin($class)
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Controller_Plugin_Abstract|array<array-key, mixed>|false
         */
        public function getPlugin($class)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPlugins()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return Zend_Controller_Plugin_Broker
         */
        public function setRequest(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         *
         * @return Zend_Controller_Plugin_Broker
         */
        public function setResponse(\Zend_Controller_Response_Abstract $response)
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         */
        public function getResponse()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function routeStartup(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function routeShutdown(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function dispatchLoopStartup(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function preDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function postDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @return void
         */
        public function dispatchLoopShutdown()
        {
        }
    }
    class Zend_Controller_Plugin_ErrorHandler extends \Zend_Controller_Plugin_Abstract
    {
        public const EXCEPTION_NO_CONTROLLER = 'EXCEPTION_NO_CONTROLLER';
        public const EXCEPTION_NO_ACTION = 'EXCEPTION_NO_ACTION';
        public const EXCEPTION_NO_ROUTE = 'EXCEPTION_NO_ROUTE';
        public const EXCEPTION_OTHER = 'EXCEPTION_OTHER';
        /**
         * @var string
         */
        public $_errorModule;
        /**
         * @var string
         */
        public $_errorController;
        /**
         * @var string
         */
        public $_errorAction;
        /**
         * @var bool
         */
        public $_isInsideErrorHandlerLoop;
        /**
         * @var int
         */
        public $_exceptionCountAtFirstEncounter;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Controller_Plugin_ErrorHandler
         */
        public function setErrorHandler(array $options = array())
        {
        }
        /**
         * @param string $module
         *
         * @return Zend_Controller_Plugin_ErrorHandler
         */
        public function setErrorHandlerModule($module)
        {
        }
        /**
         * @return string
         */
        public function getErrorHandlerModule()
        {
        }
        /**
         * @param string $controller
         *
         * @return Zend_Controller_Plugin_ErrorHandler
         */
        public function setErrorHandlerController($controller)
        {
        }
        /**
         * @return string
         */
        public function getErrorHandlerController()
        {
        }
        /**
         * @param string $action
         *
         * @return Zend_Controller_Plugin_ErrorHandler
         */
        public function setErrorHandlerAction($action)
        {
        }
        /**
         * @return string
         */
        public function getErrorHandlerAction()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         */
        public function routeShutdown(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         */
        public function preDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         */
        public function postDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function _handleError(\Zend_Controller_Request_Abstract $request)
        {
        }
    }
    class Zend_Controller_Plugin_PutHandler extends \Zend_Controller_Plugin_Abstract
    {
        /**
         * @param Zend_Controller_Request_Abstract $request
         */
        public function preDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
    }
    class Zend_Controller_Request_Abstract
    {
        /**
         * @var bool
         */
        public $_dispatched;
        /**
         * @var string
         */
        public $_module;
        /**
         * @var string
         */
        public $_moduleKey;
        /**
         * @var string
         */
        public $_controller;
        /**
         * @var string
         */
        public $_controllerKey;
        /**
         * @var string
         */
        public $_action;
        /**
         * @var string
         */
        public $_actionKey;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @return string
         */
        public function getModuleName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setModuleName($value)
        {
        }
        /**
         * @return string
         */
        public function getControllerName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setControllerName($value)
        {
        }
        /**
         * @return string
         */
        public function getActionName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setActionName($value)
        {
        }
        /**
         * @return string
         */
        public function getModuleKey()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setModuleKey($key)
        {
        }
        /**
         * @return string
         */
        public function getControllerKey()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setControllerKey($key)
        {
        }
        /**
         * @return string
         */
        public function getActionKey()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setActionKey($key)
        {
        }
        /**
         * @param string $key
         * @param mixed|null $default
         *
         * @return mixed
         * @psalm-taint-source input
         */
        public function getParam($key, $default = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         * @psalm-taint-source input
         */
        public function getUserParams()
        {
        }
        /**
         * @param string $key
         * @param null|string $default
         *
         * @return mixed
         * @psalm-taint-source input
         */
        public function getUserParam($key, $default = null)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setParam($key, $value)
        {
        }
        /**
         * @return array<array-key, mixed>
         * @psalm-taint-source input
         */
        public function getParams()
        {
        }
        /**
         * @param array<array-key, mixed> $array
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setParams(array $array)
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract
         */
        public function clearParams()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Controller_Request_Abstract
         */
        public function setDispatched($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function isDispatched()
        {
        }
    }
    class Zend_Controller_Request_Apache404 extends \Zend_Controller_Request_Http
    {
        public const SCHEME_HTTP = 'http';
        public const SCHEME_HTTPS = 'https';
        public function setRequestUri($requestUri = null)
        {
        }
    }
    class Zend_Controller_Request_Exception extends \Zend_Controller_Exception
    {
    }
    class Zend_Controller_Request_Http extends \Zend_Controller_Request_Abstract
    {
        public const SCHEME_HTTP = 'http';
        public const SCHEME_HTTPS = 'https';
        /**
         * @var array<array-key, mixed>
         */
        public $_paramSources;
        public $_requestUri;
        /**
         * @var string
         */
        public $_baseUrl;
        /**
         * @var string
         */
        public $_basePath;
        /**
         * @var string
         */
        public $_pathInfo;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var false|string
         */
        public $_rawBody;
        /**
         * @var array<array-key, mixed>
         */
        public $_aliases;
        /**
         * @param Zend_Uri|null|string $uri
         *
         * @return void
         *
         * @throws Zend_Controller_Request_Exception
         */
        public function __construct($uri = null)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         * @psalm-taint-source input
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         * @psalm-taint-source input
         */
        public function get($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Controller_Request_Exception
         */
        public function __set($key, $value)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return void
         */
        public function set($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function has($key)
        {
        }
        /**
         * @param array<array-key, mixed>|string $spec
         * @param mixed|null $value
         *
         * @return Zend_Controller_Request_Http
         */
        public function setQuery($spec, $value = null)
        {
        }
        /**
         * @param null|string $key
         * @param mixed|null $default
         *
         * @return mixed
         * @psalm-taint-source input
         */
        public function getQuery($key = null, $default = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $spec
         * @param mixed|null $value
         *
         * @return Zend_Controller_Request_Http
         */
        public function setPost($spec, $value = null)
        {
        }
        /**
         * @param null|string $key
         * @param mixed|null $default
         *
         * @return mixed
         * @psalm-taint-source input
         */
        public function getPost($key = null, $default = null)
        {
        }
        /**
         * @param null|string $key
         * @param mixed|null $default
         *
         * @return mixed
         * @psalm-taint-source cookie
         */
        public function getCookie($key = null, $default = null)
        {
        }
        /**
         * @param null|string $key
         * @param mixed|null $default
         *
         * @return mixed
         * @psalm-taint-source header
         */
        public function getServer($key = null, $default = null)
        {
        }
        /**
         * @param null|string $key
         * @param mixed|null $default
         *
         * @return mixed
         * @psalm-taint-source system_secret
         */
        public function getEnv($key = null, $default = null)
        {
        }
        /**
         * @param null|string $requestUri
         *
         * @return Zend_Controller_Request_Http
         */
        public function setRequestUri($requestUri = null)
        {
        }
        /**
         * @return string
         * @psalm-taint-source input
         */
        public function getRequestUri()
        {
        }
        /**
         * @param mixed|null $baseUrl
         *
         * @return Zend_Controller_Request_Http
         */
        public function setBaseUrl($baseUrl = null)
        {
        }
        /**
         * @return string
         */
        public function getBaseUrl($raw = false)
        {
        }
        /**
         * @param null|string $basePath
         *
         * @return Zend_Controller_Request_Http
         */
        public function setBasePath($basePath = null)
        {
        }
        /**
         * @return string
         */
        public function getBasePath()
        {
        }
        /**
         * @param null|string $pathInfo
         *
         * @return Zend_Controller_Request_Http
         */
        public function setPathInfo($pathInfo = null)
        {
        }
        /**
         * @return string
         * @psalm-taint-source file
         */
        public function getPathInfo()
        {
        }
        /**
         * @return Zend_Controller_Request_Http
         */
        public function setParamSources(array $paramSources = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParamSources()
        {
        }
        /**
         * @param mixed $key
         * @param mixed $value
         *
         * @return Zend_Controller_Request_Http
         */
        public function setParam($key, $value)
        {
        }
        /**
         * @param mixed $key
         * @param mixed|null $default
         *
         * @return mixed
         * @psalm-taint-source input
         */
        public function getParam($key, $default = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         * @psalm-taint-source input
         */
        public function getParams()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Controller_Request_Http
         */
        public function setParams(array $params)
        {
        }
        /**
         * @param string $name
         * @param string $target
         *
         * @return Zend_Controller_Request_Http
         */
        public function setAlias($name, $target)
        {
        }
        /**
         * @param string $name
         *
         * @return null|string
         */
        public function getAlias($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAliases()
        {
        }
        /**
         * @return string
         */
        public function getMethod()
        {
        }
        /**
         * @return bool
         */
        public function isPost()
        {
        }
        /**
         * @return bool
         */
        public function isGet()
        {
        }
        /**
         * @return bool
         */
        public function isPut()
        {
        }
        /**
         * @return bool
         */
        public function isDelete()
        {
        }
        /**
         * @return bool
         */
        public function isHead()
        {
        }
        /**
         * @return bool
         */
        public function isOptions()
        {
        }
        /**
         * @return bool
         */
        public function isPatch()
        {
        }
        /**
         * @return bool
         */
        public function isXmlHttpRequest()
        {
        }
        /**
         * @return bool
         */
        public function isFlashRequest()
        {
        }
        /**
         * @return bool
         */
        public function isSecure()
        {
        }
        /**
         * @return false|string
         * @psalm-taint-source input
         */
        public function getRawBody()
        {
        }
        /**
         * @param string $header
         *
         * @return false|string
         *
         * @throws Zend_Controller_Request_Exception
         * @psalm-taint-source header
         */
        public function getHeader($header)
        {
        }
        /**
         * @return string
         */
        public function getScheme()
        {
        }
        /**
         * @return string
         */
        public function getHttpHost()
        {
        }
        /**
         * @param bool $checkProxy
         *
         * @return string
         */
        public function getClientIp($checkProxy = true)
        {
        }
    }
    class Zend_Controller_Request_HttpTestCase extends \Zend_Controller_Request_Http
    {
        public const SCHEME_HTTP = 'http';
        public const SCHEME_HTTPS = 'https';
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var string
         */
        public $_method;
        /**
         * @var null|string
         */
        public $_rawBody;
        /**
         * @var array<array-key, mixed>
         */
        public $_validMethodTypes;
        /**
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function clearQuery()
        {
        }
        /**
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function clearPost()
        {
        }
        /**
         * @param string $content
         *
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function setRawBody($content)
        {
        }
        /**
         * @return null|string
         */
        public function getRawBody()
        {
        }
        /**
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function clearRawBody()
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function setCookie($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $cookies
         *
         * @return void
         */
        public function setCookies(array $cookies)
        {
        }
        /**
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function clearCookies()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function setMethod($type)
        {
        }
        /**
         * @return null|string
         */
        public function getMethod()
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function setHeader($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $headers
         *
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function setHeaders(array $headers)
        {
        }
        /**
         * @param string $header
         * @param mixed|null $default
         *
         * @return null|string
         *
         * @throws Zend_Controller_Request_Exception
         */
        public function getHeader($header, $default = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        /**
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function clearHeaders()
        {
        }
        /**
         * @return null|string
         */
        public function getRequestUri()
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _normalizeHeaderName($name)
        {
        }
    }
    class Zend_Controller_Request_Simple extends \Zend_Controller_Request_Abstract
    {
        public function __construct($action = null, $controller = null, $module = null, array $params = array())
        {
        }
    }
    class Zend_Controller_Response_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_body;
        /**
         * @var Exception
         */
        public $_exceptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var array<array-key, mixed>
         */
        public $_headersRaw;
        /**
         * @var int
         */
        public $_httpResponseCode;
        /**
         * @var bool
         */
        public $_isRedirect;
        /**
         * @var bool
         */
        public $_renderExceptions;
        /**
         * @var bool
         */
        public $headersSentThrowsException;
        /**
         * @param string $name
         *
         * @return string
         */
        public function _normalizeHeader($name)
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param bool $replace
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function setHeader($name, $value, $replace = false)
        {
        }
        /**
         * @param string $url
         * @param int $code
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function setRedirect($url, $code = 302)
        {
        }
        /**
         * @return bool
         */
        public function isRedirect()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         */
        public function clearHeaders()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function clearHeader($name)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function setRawHeader($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRawHeaders()
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         */
        public function clearRawHeaders()
        {
        }
        /**
         * @param string $headerRaw
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function clearRawHeader($headerRaw)
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         */
        public function clearAllHeaders()
        {
        }
        /**
         * @param int $code
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function setHttpResponseCode($code)
        {
        }
        /**
         * @return int
         */
        public function getHttpResponseCode()
        {
        }
        /**
         * @param bool $throw
         *
         * @return bool
         *
         * @throws Zend_Controller_Response_Exception
         */
        public function canSendHeaders($throw = false)
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         */
        public function sendHeaders()
        {
        }
        /**
         * @param string $content
         * @param null|string $name
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function setBody($content, $name = null)
        {
        }
        /**
         * @param string $content
         * @param null|string $name
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function appendBody($content, $name = null)
        {
        }
        /**
         * @param null|string $name
         *
         * @return bool
         */
        public function clearBody($name = null)
        {
        }
        /**
         * @param bool $spec
         *
         * @return array<array-key, mixed>|null|string
         */
        public function getBody($spec = false)
        {
        }
        /**
         * @param string $name
         * @param string $content
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function append($name, $content)
        {
        }
        /**
         * @param string $name
         * @param string $content
         *
         * @return void
         */
        public function prepend($name, $content)
        {
        }
        /**
         * @param string $name
         * @param string $content
         * @param null|string $parent
         * @param bool $before
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function insert($name, $content, $parent = null, $before = false)
        {
        }
        /**
         * @return void
         */
        public function outputBody()
        {
        }
        /**
         * @param Exception $e
         *
         * @return Zend_Controller_Response_Abstract
         */
        public function setException(\Exception $e)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getException()
        {
        }
        /**
         * @return bool
         */
        public function isException()
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function hasExceptionOfType($type)
        {
        }
        /**
         * @param string $message
         *
         * @return bool
         */
        public function hasExceptionOfMessage($message)
        {
        }
        /**
         * @param int $code
         *
         * @return bool
         */
        public function hasExceptionOfCode($code)
        {
        }
        /**
         * @param string $type
         *
         * @return array<array-key, mixed>|false
         */
        public function getExceptionByType($type)
        {
        }
        /**
         * @param string $message
         *
         * @return array<array-key, mixed>|false
         */
        public function getExceptionByMessage($message)
        {
        }
        /**
         * @param mixed $code
         *
         * @return void
         */
        public function getExceptionByCode($code)
        {
        }
        /**
         * @param bool|null $flag
         *
         * @return bool
         */
        public function renderExceptions($flag = null)
        {
        }
        /**
         * @return void
         */
        public function sendResponse()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Controller_Response_Cli extends \Zend_Controller_Response_Abstract
    {
        /**
         * @var bool
         */
        public $headersSentThrowsException;
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Controller_Response_Exception extends \Zend_Controller_Exception
    {
    }
    class Zend_Controller_Response_Http extends \Zend_Controller_Response_Abstract
    {
    }
    class Zend_Controller_Response_HttpTestCase extends \Zend_Controller_Response_Http
    {
        /**
         * @return array<array-key, mixed>
         */
        public function sendHeaders()
        {
        }
        /**
         * @param bool $throw
         *
         * @return void
         *
         * @throws Zend_Controller_Response_Exception
         */
        public function canSendHeaders($throw = false)
        {
        }
        /**
         * @return string
         */
        public function outputBody()
        {
        }
        /**
         * @param bool|string $spec
         *
         * @return array<array-key, mixed>|null|string
         */
        public function getBody($spec = false)
        {
        }
        /**
         * @return string
         */
        public function sendResponse()
        {
        }
    }
    class Zend_Controller_Router_Abstract implements \Zend_Controller_Router_Interface
    {
        public const URI_DELIMITER = '/';
        /**
         * @var Zend_Controller_Front
         */
        public $_frontController;
        /**
         * @var array<array-key, mixed>
         */
        public $_invokeParams;
        /**
         * @param array<array-key, mixed> $params
         */
        public function __construct(array $params = array())
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Controller_Router_Abstract
         */
        public function setParam($name, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Controller_Router_Abstract
         */
        public function setParams(array $params)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getParam($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @return Zend_Controller_Router_Abstract
         */
        public function clearParams($name = null)
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public function getFrontController()
        {
        }
        /**
         * @param Zend_Controller_Front $controller
         *
         * @return Zend_Controller_Router_Interface
         */
        public function setFrontController(\Zend_Controller_Front $controller)
        {
        }
    }
    class Zend_Controller_Router_Exception extends \Zend_Controller_Exception
    {
    }
    interface Zend_Controller_Router_Interface
    {
        public function route(\Zend_Controller_Request_Abstract $dispatcher);
        /**
         * @param array<array-key, mixed> $userParams
         * @param mixed|null $name
         * @param bool $reset
         * @param bool $encode
         *
         * @return string
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function assemble($userParams, $name = null, $reset = false, $encode = true);
        /**
         * @return Zend_Controller_Front
         */
        public function getFrontController();
        /**
         * @param Zend_Controller_Front $controller
         *
         * @return Zend_Controller_Router_Interface
         */
        public function setFrontController(\Zend_Controller_Front $controller);
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Controller_Router_Interface
         */
        public function setParam($name, $value);
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Controller_Router_Interface
         */
        public function setParams(array $params);
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getParam($name);
        /**
         * @return array<array-key, mixed>
         */
        public function getParams();
        /**
         * @return Zend_Controller_Router_Interface
         */
        public function clearParams($name = null);
    }
    class Zend_Controller_Router_Rewrite extends \Zend_Controller_Router_Abstract
    {
        public const URI_DELIMITER = '/';
        /**
         * @var bool
         */
        public $_useDefaultRoutes;
        /**
         * @var array<array-key, mixed>
         */
        public $_routes;
        /**
         * @var string
         */
        public $_currentRoute;
        /**
         * @var array<array-key, mixed>
         */
        public $_globalParams;
        /**
         * @var string
         */
        public $_chainNameSeparator;
        /**
         * @var bool
         */
        public $_useCurrentParamsAsGlobal;
        /**
         * @return Zend_Controller_Router_Rewrite
         */
        public function addDefaultRoutes()
        {
        }
        /**
         * @param string $name
         * @param Zend_Controller_Router_Route_Interface $route
         *
         * @return Zend_Controller_Router_Rewrite
         */
        public function addRoute($name, \Zend_Controller_Router_Route_Interface $route)
        {
        }
        /**
         * @param array<array-key, mixed> $routes
         *
         * @return Zend_Controller_Router_Rewrite
         */
        public function addRoutes($routes)
        {
        }
        /**
         * @param Zend_Config $config
         * @param null|string $section
         *
         * @return Zend_Controller_Router_Rewrite
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function addConfig(\Zend_Config $config, $section = null)
        {
        }
        /**
         * @param Zend_Config $info
         *
         * @return Zend_Controller_Router_Route_Interface
         */
        public function _getRouteFromConfig(\Zend_Config $info)
        {
        }
        /**
         * @param string $name
         * @param Zend_Controller_Router_Route_Interface $route
         * @param Zend_Config $childRoutesInfo
         *
         * @return void
         */
        public function _addChainRoutesFromConfig($name, \Zend_Controller_Router_Route_Interface $route, \Zend_Config $childRoutesInfo)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Router_Rewrite
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function removeRoute($name)
        {
        }
        /**
         * @return Zend_Controller_Router_Rewrite
         */
        public function removeDefaultRoutes()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasRoute($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Controller_Router_Route_Interface
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function getRoute($name)
        {
        }
        /**
         * @return Zend_Controller_Router_Route_Interface
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function getCurrentRoute()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function getCurrentRouteName()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRoutes()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return Zend_Controller_Request_Abstract
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function route(\Zend_Controller_Request_Abstract $request)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         * @param array<array-key, mixed> $params
         */
        public function _setRequestParams($request, $params)
        {
        }
        /**
         * @param array<array-key, mixed> $userParams
         * @param mixed|null $name
         * @param bool $reset
         * @param bool $encode
         *
         * @return string
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function assemble($userParams, $name = null, $reset = false, $encode = true)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Controller_Router_Rewrite
         */
        public function setGlobalParam($name, $value)
        {
        }
        /**
         * @param string $separator
         *
         * @return Zend_Controller_Router_Rewrite
         */
        public function setChainNameSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getChainNameSeparator()
        {
        }
        /**
         * @param bool|null $use
         *
         * @return Zend_Controller_Router_Rewrite|bool
         */
        public function useRequestParametersAsGlobal($use = null)
        {
        }
    }
    class Zend_Controller_Router_Route extends \Zend_Controller_Router_Route_Abstract
    {
        public const URI_DELIMITER = '/';
        /**
         * @var Zend_Translate
         */
        public static $_defaultTranslator;
        /**
         * @var Zend_Translate
         */
        public $_translator;
        /**
         * @var mixed
         */
        public static $_defaultLocale;
        /**
         * @var mixed
         */
        public $_locale;
        /**
         * @var bool
         */
        public $_isTranslated;
        /**
         * @var array<array-key, mixed>
         */
        public $_translatable;
        public $_urlVariable = ':';
        public $_urlDelimiter;
        public $_regexDelimiter = '#';
        public $_defaultRegex = null;
        /**
         * @var array<array-key, mixed>
         */
        public $_variables;
        /**
         * @var array<array-key, mixed>
         */
        public $_parts;
        /**
         * @var array<array-key, mixed>
         */
        public $_defaults;
        /**
         * @var array<array-key, mixed>
         */
        public $_requirements;
        /**
         * @var array<array-key, mixed>
         */
        public $_values;
        /**
         * @var array<array-key, mixed>
         */
        public $_wildcardData;
        /**
         * @var int
         */
        public $_staticCount;
        public function getVersion()
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Controller_Router_Route
         */
        public static function getInstance(\Zend_Config $config)
        {
        }
        /**
         * @param string $route
         * @param array<array-key, mixed> $defaults
         * @param array<array-key, mixed> $reqs
         * @param Zend_Translate|null $translator
         * @param mixed|null $locale
         */
        public function __construct($route, $defaults = array(), $reqs = array(), ?\Zend_Translate $translator = null, $locale = null)
        {
        }
        /**
         * @param string $path
         * @param bool $partial
         *
         * @return array<array-key, mixed>|false
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function match($path, $partial = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $reset
         * @param bool $encode
         * @param bool $partial
         *
         * @return string
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function assemble($data = array(), $reset = false, $encode = false, $partial = false)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getDefault($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefaults()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getVariables()
        {
        }
        /**
         * @param Zend_Translate|null $translator
         *
         * @return void
         */
        public static function setDefaultTranslator(?\Zend_Translate $translator = null)
        {
        }
        /**
         * @return Zend_Translate
         */
        public static function getDefaultTranslator()
        {
        }
        /**
         * @param Zend_Translate $translator
         *
         * @return void
         */
        public function setTranslator(\Zend_Translate $translator)
        {
        }
        /**
         * @return Zend_Translate
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function getTranslator()
        {
        }
        /**
         * @param mixed|null $locale
         *
         * @return void
         */
        public static function setDefaultLocale($locale = null)
        {
        }
        /**
         * @return mixed
         */
        public static function getDefaultLocale()
        {
        }
        /**
         * @param mixed $locale
         *
         * @return void
         */
        public function setLocale($locale)
        {
        }
        /**
         * @return mixed
         */
        public function getLocale()
        {
        }
    }
    class Zend_Controller_Router_Route_Abstract implements \Zend_Controller_Router_Route_Interface
    {
        public const URI_DELIMITER = '/';
        /**
         * @var bool
         */
        public $_isAbstract;
        /**
         * @var string
         */
        public $_matchedPath;
        /**
         * @return int
         */
        public function getVersion()
        {
        }
        /**
         * @param string $path
         *
         * @return void
         */
        public function setMatchedPath($path)
        {
        }
        /**
         * @return string
         */
        public function getMatchedPath()
        {
        }
        /**
         * @param bool|null $flag
         *
         * @return bool
         */
        public function isAbstract($flag = null)
        {
        }
        /**
         * @param Zend_Controller_Router_Route_Abstract $route
         * @param string $separator
         *
         * @return Zend_Controller_Router_Route_Chain
         */
        public function chain(\Zend_Controller_Router_Route_Abstract $route, $separator = '/')
        {
        }
    }
    class Zend_Controller_Router_Route_Chain extends \Zend_Controller_Router_Route_Abstract
    {
        public const URI_DELIMITER = '/';
        /**
         * @var array<array-key, mixed>
         */
        public $_routes;
        /**
         * @var array<array-key, mixed>
         */
        public $_separators;
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Controller_Router_Route_Chain
         */
        public static function getInstance(\Zend_Config $config)
        {
        }
        /**
         * @param Zend_Controller_Router_Route_Abstract $route
         * @param string $separator
         *
         * @return Zend_Controller_Router_Route_Chain
         */
        public function chain(\Zend_Controller_Router_Route_Abstract $route, $separator)
        {
        }
        /**
         * @param Zend_Controller_Request_Http $request
         * @param null $partial
         *
         * @return array<array-key, mixed>|false
         */
        public function match($request, $partial = null)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $reset
         * @param bool $encode
         *
         * @return string
         */
        public function assemble($data = array(), $reset = false, $encode = false)
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract|null $request
         *
         * @return void
         */
        public function setRequest(?\Zend_Controller_Request_Abstract $request = null)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getDefault($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefaults()
        {
        }
    }
    class Zend_Controller_Router_Route_Hostname extends \Zend_Controller_Router_Route_Abstract
    {
        public const URI_DELIMITER = '/';
        /**
         * @var string
         */
        public $_hostVariable;
        /**
         * @var string
         */
        public $_regexDelimiter;
        /**
         * @var null|string
         */
        public $_defaultRegex;
        /**
         * @var array<array-key, mixed>
         */
        public $_variables;
        /**
         * @var array<array-key, mixed>
         */
        public $_parts;
        /**
         * @var array<array-key, mixed>
         */
        public $_defaults;
        /**
         * @var array<array-key, mixed>
         */
        public $_requirements;
        /**
         * @var string
         */
        public $_scheme;
        /**
         * @var array<array-key, mixed>
         */
        public $_values;
        /**
         * @var Zend_Controller_Request_Abstract
         */
        public $_request;
        /**
         * @var int
         */
        public $_staticCount;
        /**
         * @param Zend_Controller_Request_Abstract|null $request
         */
        public function setRequest(?\Zend_Controller_Request_Abstract $request = null)
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Controller_Router_Route_Hostname
         */
        public static function getInstance(\Zend_Config $config)
        {
        }
        /**
         * @param string $route
         * @param array<array-key, mixed> $defaults
         * @param array<array-key, mixed> $reqs
         * @param null|string $scheme
         */
        public function __construct($route, $defaults = array(), $reqs = array(), $scheme = null)
        {
        }
        /**
         * @param Zend_Controller_Request_Http $request
         *
         * @return array<array-key, mixed>|false
         */
        public function match($request)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $reset
         * @param bool $encode
         * @param bool $partial
         *
         * @return string
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function assemble($data = array(), $reset = false, $encode = false, $partial = false)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getDefault($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefaults()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getVariables()
        {
        }
    }
    interface Zend_Controller_Router_Route_Interface
    {
        public function match($path);
        public function assemble($data = array(), $reset = false, $encode = false);
        public static function getInstance(\Zend_Config $config);
    }
    class Zend_Controller_Router_Route_Module extends \Zend_Controller_Router_Route_Abstract
    {
        public const URI_DELIMITER = '/';
        /**
         * @var array<array-key, mixed>
         */
        public $_defaults;
        /**
         * @var array<array-key, mixed>
         */
        public $_values;
        /**
         * @var bool
         */
        public $_moduleValid;
        /**
         * @var bool
         */
        public $_keysSet;
        public $_moduleKey = 'module';
        public $_controllerKey = 'controller';
        public $_actionKey = 'action';
        /**
         * @var Zend_Controller_Dispatcher_Interface
         */
        public $_dispatcher;
        /**
         * @var Zend_Controller_Request_Abstract
         */
        public $_request;
        /**
         * @return int
         */
        public function getVersion()
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Controller_Router_Route_Module
         */
        public static function getInstance(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $defaults
         * @param Zend_Controller_Dispatcher_Interface|null $dispatcher
         * @param Zend_Controller_Request_Abstract|null $request
         */
        public function __construct(array $defaults = array(), ?\Zend_Controller_Dispatcher_Interface $dispatcher = null, ?\Zend_Controller_Request_Abstract $request = null)
        {
        }
        /**
         * @return void
         */
        public function _setRequestKeys()
        {
        }
        /**
         * @param string $path
         * @param bool $partial
         *
         * @return array<array-key, mixed>
         */
        public function match($path, $partial = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $reset
         * @param bool $encode
         * @param bool $partial
         *
         * @return string
         */
        public function assemble($data = array(), $reset = false, $encode = true, $partial = false)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getDefault($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefaults()
        {
        }
    }
    class Zend_Controller_Router_Route_Regex extends \Zend_Controller_Router_Route_Abstract
    {
        public const URI_DELIMITER = '/';
        /**
         * @var null|string
         */
        public $_regex;
        /**
         * @var array<array-key, mixed>
         */
        public $_defaults;
        /**
         * @var null|string
         */
        public $_reverse;
        /**
         * @var array<array-key, mixed>
         */
        public $_map;
        /**
         * @var array<array-key, mixed>
         */
        public $_values;
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Controller_Router_Route_Regex
         */
        public static function getInstance(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $defaults
         * @param array<array-key, mixed> $map
         * @param null $reverse
         */
        public function __construct($route, $defaults = array(), $map = array(), $reverse = null)
        {
        }
        /**
         * @return int
         */
        public function getVersion()
        {
        }
        /**
         * @param string $path
         *
         * @return array<array-key, mixed>|false
         */
        public function match($path, $partial = false)
        {
        }
        /**
         * @param array<array-key, mixed> $values
         * @param bool $reversed
         * @param bool $preserve
         *
         * @return array<array-key, mixed>
         */
        public function _getMappedValues($values, $reversed = false, $preserve = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $reset
         * @param bool $encode
         * @param bool $partial
         *
         * @return string
         *
         * @throws Zend_Controller_Router_Exception
         */
        public function assemble($data = array(), $reset = false, $encode = false, $partial = false)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getDefault($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefaults()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getVariables()
        {
        }
        /**
         * @param array<array-key, mixed> $array1
         * @param array<array-key, mixed> $array2
         *
         * @return array<array-key, mixed>
         */
        public function _arrayMergeNumericKeys(array $array1, array $array2)
        {
        }
    }
    class Zend_Controller_Router_Route_Static extends \Zend_Controller_Router_Route_Abstract
    {
        public const URI_DELIMITER = '/';
        /**
         * @var null|string
         */
        public $_route;
        /**
         * @var array<array-key, mixed>
         */
        public $_defaults;
        /**
         * @return int
         */
        public function getVersion()
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Controller_Router_Route_Static
         */
        public static function getInstance(\Zend_Config $config)
        {
        }
        /**
         * @param string $route
         * @param array<array-key, mixed> $defaults
         */
        public function __construct($route, $defaults = array())
        {
        }
        /**
         * @param string $path
         *
         * @return array<array-key, mixed>|false
         */
        public function match($path, $partial = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return string
         */
        public function assemble($data = array(), $reset = false, $encode = false, $partial = false)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getDefault($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefaults()
        {
        }
    }
    class Zend_Crypt
    {
        public const TYPE_OPENSSL = 'openssl';
        public const TYPE_HASH = 'hash';
        public const TYPE_MHASH = 'mhash';
        public static $_type = null;
        /**
         * @var array<array-key, mixed>
         */
        public static $_supportedAlgosOpenssl;
        /**
         * @var array<array-key, mixed>
         */
        public static $_supportedAlgosMhash;
        /**
         * @param string $algorithm
         * @param string $data
         * @param bool $binaryOutput
         *
         * @return unknown
         */
        public static function hash($algorithm, $data, $binaryOutput = false)
        {
        }
        /**
         * @param string $algorithm
         *
         * @throws Zend_Crypt_Exception
         */
        public static function _detectHashSupport($algorithm)
        {
        }
        /**
         * @param string $algorithm
         * @param string $data
         * @param bool $binaryOutput
         *
         * @return string
         */
        public static function _digestHash($algorithm, $data, $binaryOutput)
        {
        }
        /**
         * @param string $algorithm
         * @param string $data
         * @param bool $binaryOutput
         *
         * @return string
         */
        public static function _digestMhash($algorithm, $data, $binaryOutput)
        {
        }
        /**
         * @param string $algorithm
         * @param string $data
         * @param bool $binaryOutput
         *
         * @return string
         */
        public static function _digestOpenssl($algorithm, $data, $binaryOutput)
        {
        }
    }
    class Zend_Crypt_DiffieHellman
    {
        public const BINARY = 'binary';
        public const NUMBER = 'number';
        public const BTWOC = 'btwoc';
        /**
         * @var bool
         */
        public static $useOpenssl;
        /**
         * @var string
         */
        public $_prime;
        /**
         * @var string
         */
        public $_generator;
        /**
         * @var string
         */
        public $_privateKey;
        /**
         * @var Zend_Crypt_Math_BigInteger
         */
        public $_math;
        /**
         * @var string
         */
        public $_publicKey;
        /**
         * @var string
         */
        public $_secretKey;
        /**
         * @param string $prime
         * @param string $generator
         * @param null|string $privateKey
         * @param string $privateKeyType
         */
        public function __construct($prime, $generator, $privateKey = null, $privateKeyType)
        {
        }
        /**
         * @return Zend_Crypt_DiffieHellman
         */
        public function generateKeys()
        {
        }
        /**
         * @param string $number
         * @param string $type
         *
         * @return Zend_Crypt_DiffieHellman
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function setPublicKey($number, $type)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function getPublicKey($type)
        {
        }
        /**
         * @param string $publicKey
         * @param string $type
         * @param string $output
         *
         * @return mixed
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function computeSecretKey($publicKey, $type, $output)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function getSharedSecretKey($type)
        {
        }
        /**
         * @param string $number
         *
         * @return Zend_Crypt_DiffieHellman
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function setPrime($number)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function getPrime()
        {
        }
        /**
         * @param string $number
         *
         * @return Zend_Crypt_DiffieHellman
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function setGenerator($number)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function getGenerator()
        {
        }
        /**
         * @param string $number
         * @param string $type
         *
         * @return Zend_Crypt_DiffieHellman
         *
         * @throws Zend_Crypt_DiffieHellman_Exception
         */
        public function setPrivateKey($number, $type)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function getPrivateKey($type)
        {
        }
        /**
         * @return bool
         */
        public function hasPrivateKey()
        {
        }
        /**
         * @param null|string $extension
         *
         * @return void
         */
        public function setBigIntegerMath($extension = null)
        {
        }
        /**
         * @return string
         */
        public function _generatePrivateKey()
        {
        }
    }
    class Zend_Crypt_DiffieHellman_Exception extends \Zend_Crypt_Exception
    {
    }
    class Zend_Crypt_Exception extends \Zend_Exception
    {
    }
    class Zend_Crypt_Hmac extends \Zend_Crypt
    {
        public const TYPE_OPENSSL = 'openssl';
        public const TYPE_HASH = 'hash';
        public const TYPE_MHASH = 'mhash';
        public const STRING = 'string';
        public const BINARY = 'binary';
        /**
         * @var string
         */
        public static $_key;
        /**
         * @var string
         */
        public static $_packFormat;
        /**
         * @var string
         */
        public static $_hashAlgorithm;
        /**
         * @var array<array-key, mixed>
         */
        public static $_supportedMhashAlgorithms;
        /**
         * @param string $key
         * @param string $hash
         * @param string $data
         * @param string $output
         *
         * @return string
         *
         * @throws Zend_Crypt_Hmac_Exception
         */
        public static function compute($key, $hash, $data, $output)
        {
        }
        /**
         * @param string $hash
         *
         * @return Zend_Crypt_Hmac
         *
         * @throws Zend_Crypt_Hmac_Exception
         */
        public static function _setHashAlgorithm($hash)
        {
        }
        /**
         * @param string $data
         * @param string $output
         * @param bool $internal
         *
         * @return string
         */
        public static function _hash($data, $output, $internal = false)
        {
        }
        /**
         * @param string $hashAlgorithm
         *
         * @return int
         */
        public static function _getMhashDefinition($hashAlgorithm)
        {
        }
    }
    class Zend_Crypt_Hmac_Exception extends \Zend_Crypt_Exception
    {
    }
    class Zend_Crypt_Math extends \Zend_Crypt_Math_BigInteger
    {
        /**
         * @param int|string $minimum
         * @param int|string $maximum
         *
         * @return string
         */
        public function rand($minimum, $maximum)
        {
        }
        /**
         * @param int $length
         * @param bool $strong
         *
         * @return string
         */
        public static function randBytes($length, $strong = false)
        {
        }
        /**
         * @param int $min
         * @param int $max
         * @param bool $strong
         *
         * @return int
         */
        public static function randInteger($min, $max, $strong = false)
        {
        }
        /**
         * @param string $long
         *
         * @return string
         */
        public function btwoc($long)
        {
        }
        /**
         * @param string $binary
         *
         * @return string
         */
        public function fromBinary($binary)
        {
        }
        /**
         * @param string $integer
         *
         * @return string
         */
        public function toBinary($integer)
        {
        }
    }
    class Zend_Crypt_Math_BigInteger
    {
        /**
         * @var Zend_Crypt_Math_BigInteger_Interface
         */
        public $_math;
        /**
         * @param null|string $extension
         *
         * @throws Zend_Crypt_Math_BigInteger_Exception
         */
        public function __construct($extension = null)
        {
        }
        /**
         * @param string $methodName
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Crypt_Math_BigInteger_Exception
         */
        public function __call($methodName, $args)
        {
        }
        /**
         * @param null|string $extension
         *
         * @throws Zend_Crypt_Math_BigInteger_Exception
         */
        public function _loadAdapter($extension = null)
        {
        }
    }
    class Zend_Crypt_Math_BigInteger_Bcmath implements \Zend_Crypt_Math_BigInteger_Interface
    {
        /**
         * @param string $operand
         * @param int $base
         *
         * @return string
         */
        public function init($operand, $base = 10)
        {
        }
        /**
         * @param string $left_operand
         * @param string $right_operand
         *
         * @return string
         */
        public function add($left_operand, $right_operand)
        {
        }
        /**
         * @param string $left_operand
         * @param string $right_operand
         *
         * @return string
         */
        public function subtract($left_operand, $right_operand)
        {
        }
        /**
         * @param string $left_operand
         * @param string $right_operand
         *
         * @return int
         */
        public function compare($left_operand, $right_operand)
        {
        }
        /**
         * @param string $left_operand
         * @param string $right_operand
         *
         * @return null|string
         */
        public function divide($left_operand, $right_operand)
        {
        }
        /**
         * @param string $left_operand
         * @param string $modulus
         *
         * @return string
         */
        public function modulus($left_operand, $modulus)
        {
        }
        /**
         * @param string $left_operand
         * @param string $right_operand
         *
         * @return string
         */
        public function multiply($left_operand, $right_operand)
        {
        }
        /**
         * @param string $left_operand
         * @param string $right_operand
         *
         * @return string
         */
        public function pow($left_operand, $right_operand)
        {
        }
        /**
         * @param string $left_operand
         * @param string $right_operand
         * @param string $modulus
         *
         * @return string
         */
        public function powmod($left_operand, $right_operand, $modulus)
        {
        }
        /**
         * @param string $operand
         *
         * @return string
         */
        public function sqrt($operand)
        {
        }
        /**
         * @param string $operand
         *
         * @return string
         */
        public function binaryToInteger($operand)
        {
        }
        /**
         * @param string $operand
         *
         * @return string
         */
        public function integerToBinary($operand)
        {
        }
        /**
         * @param string $operand
         *
         * @return string
         */
        public function hexToDecimal($operand)
        {
        }
    }
    class Zend_Crypt_Math_BigInteger_Exception extends \Zend_Crypt_Math_Exception
    {
    }
    class Zend_Crypt_Math_BigInteger_Gmp implements \Zend_Crypt_Math_BigInteger_Interface
    {
        /**
         * @param string $operand
         * @param int $base
         *
         * @return string
         */
        public function init($operand, $base = 10)
        {
        }
        /**
         * @param resource $left_operand
         * @param resource $right_operand
         *
         * @return string
         */
        public function add($left_operand, $right_operand)
        {
        }
        /**
         * @param resource $left_operand
         * @param resource $right_operand
         *
         * @return string
         */
        public function subtract($left_operand, $right_operand)
        {
        }
        /**
         * @param resource $left_operand
         * @param resource $right_operand
         *
         * @return int
         */
        public function compare($left_operand, $right_operand)
        {
        }
        /**
         * @param resource $left_operand
         * @param resource $right_operand
         *
         * @return null|string
         */
        public function divide($left_operand, $right_operand)
        {
        }
        /**
         * @param resource $left_operand
         * @param resource $modulus
         *
         * @return string
         */
        public function modulus($left_operand, $modulus)
        {
        }
        /**
         * @param resource $left_operand
         * @param resource $right_operand
         *
         * @return string
         */
        public function multiply($left_operand, $right_operand)
        {
        }
        /**
         * @param resource $left_operand
         * @param int $right_operand
         *
         * @return string
         */
        public function pow($left_operand, $right_operand)
        {
        }
        /**
         * @param resource $left_operand
         * @param resource $right_operand
         * @param resource $modulus
         *
         * @return string
         */
        public function powmod($left_operand, $right_operand, $modulus)
        {
        }
        /**
         * @return string
         */
        public function sqrt($operand)
        {
        }
        /**
         * @param string $operand
         *
         * @return string
         */
        public function binaryToInteger($operand)
        {
        }
        /**
         * @param resource $operand
         *
         * @return string
         */
        public function integerToBinary($operand)
        {
        }
        /**
         * @param string $operand
         *
         * @return string
         */
        public function hexToDecimal($operand)
        {
        }
    }
    interface Zend_Crypt_Math_BigInteger_Interface
    {
        public function init($operand, $base = 10);
        public function add($left_operand, $right_operand);
        public function subtract($left_operand, $right_operand);
        public function compare($left_operand, $right_operand);
        public function divide($left_operand, $right_operand);
        public function modulus($left_operand, $modulus);
        public function multiply($left_operand, $right_operand);
        public function pow($left_operand, $right_operand);
        public function powmod($left_operand, $right_operand, $modulus);
        public function sqrt($operand);
        public function binaryToInteger($operand);
        public function integerToBinary($operand);
        public function hexToDecimal($operand);
    }
    class Zend_Crypt_Math_Exception extends \Zend_Crypt_Exception
    {
    }
    class Zend_Crypt_Rsa
    {
        public const BINARY = 'binary';
        public const BASE64 = 'base64';
        public $_privateKey;
        public $_publicKey;
        /**
         * @var string
         */
        public $_pemString;
        public $_pemPath;
        public $_certificateString;
        public $_certificatePath;
        public $_hashAlgorithm;
        public $_passPhrase;
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @throws Zend_Crypt_Rsa_Exception
         */
        public function __construct(?array $options = null)
        {
        }
        public function setOptions(array $options)
        {
        }
        public function getPrivateKey()
        {
        }
        public function getPublicKey()
        {
        }
        /**
         * @param string $data
         * @param Zend_Crypt_Rsa_Key_Private|null $privateKey
         * @param null|string $format
         *
         * @return string
         */
        public function sign($data, ?\Zend_Crypt_Rsa_Key_Private $privateKey = null, $format = null)
        {
        }
        /**
         * @param string $data
         * @param string $signature
         * @param null|string $format
         *
         * @return string
         */
        public function verifySignature($data, $signature, $format = null)
        {
        }
        /**
         * @param string $data
         * @param Zend_Crypt_Rsa_Key $key
         * @param null|string $format
         *
         * @return string
         */
        public function encrypt($data, \Zend_Crypt_Rsa_Key $key, $format = null)
        {
        }
        /**
         * @param string $data
         * @param Zend_Crypt_Rsa_Key $key
         * @param null|string $format
         *
         * @return string
         */
        public function decrypt($data, \Zend_Crypt_Rsa_Key $key, $format = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $configargs
         *
         * @return ArrayObject
         *
         * @throws Zend_Crypt_Rsa_Exception
         */
        public function generateKeys(?array $configargs = null)
        {
        }
        /**
         * @param string $value
         */
        public function setPemString($value)
        {
        }
        public function setPemPath($value)
        {
        }
        public function setCertificateString($value)
        {
        }
        public function setCertificatePath($value)
        {
        }
        public function setHashAlgorithm($name)
        {
        }
        /**
         * @return string
         */
        public function getPemString()
        {
        }
        public function getPemPath()
        {
        }
        public function getCertificateString()
        {
        }
        public function getCertificatePath()
        {
        }
        public function getHashAlgorithm()
        {
        }
        public function _parseConfigArgs(?array $config = null)
        {
        }
    }
    class Zend_Crypt_Rsa_Exception extends \Zend_Crypt_Exception
    {
    }
    class Zend_Crypt_Rsa_Key implements \Countable
    {
        /**
         * @var string
         */
        public $_pemString;
        /**
         * @var array<array-key, mixed>
         */
        public $_details;
        /**
         * @var resource
         */
        public $_opensslKeyResource;
        /**
         * @return resource
         */
        public function getOpensslKeyResource()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Crypt_Exception
         */
        public function toString()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        public function count()
        {
        }
        public function getType()
        {
        }
    }
    class Zend_Crypt_Rsa_Key_Private extends \Zend_Crypt_Rsa_Key
    {
        public $_publicKey = null;
        public function __construct($pemString, $passPhrase = null)
        {
        }
        /**
         * @param string $passPhrase
         *
         * @throws Zend_Crypt_Exception
         */
        public function _parse($passPhrase)
        {
        }
        public function getPublicKey()
        {
        }
    }
    class Zend_Crypt_Rsa_Key_Public extends \Zend_Crypt_Rsa_Key
    {
        public $_certificateString = null;
        public function __construct($string)
        {
        }
        /**
         * @param string $string
         *
         * @throws Zend_Crypt_Exception
         */
        public function _parse($string)
        {
        }
        public function getCertificate()
        {
        }
    }
    class Zend_Currency
    {
        public const NO_SYMBOL = 1;
        public const USE_SYMBOL = 2;
        public const USE_SHORTNAME = 3;
        public const USE_NAME = 4;
        public const STANDARD = 8;
        public const RIGHT = 16;
        public const LEFT = 32;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param array<array-key, mixed>|null|string $options
         * @param Zend_Locale|null|string $locale
         *
         * @throws Zend_Currency_Exception
         */
        public function __construct($options = null, $locale = null)
        {
        }
        /**
         * @param float|int|null $value
         * @param array<array-key, mixed> $options
         *
         * @return string
         *
         * @throws Zend_Currency_Exception
         */
        public function toCurrency($value = null, array $options = array())
        {
        }
        /**
         * @param string $pattern
         * @param float|int $value
         *
         * @return string
         */
        public function _extractPattern($pattern, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Currency
         */
        public function setFormat(array $options = array())
        {
        }
        /**
         * @param null|string $currency
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         *
         * @throws Zend_Currency_Exception
         */
        public function _checkParams($currency = null, $locale = null)
        {
        }
        /**
         * @param null|string $currency
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function getSymbol($currency = null, $locale = null)
        {
        }
        /**
         * @param null|string $currency
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function getShortName($currency = null, $locale = null)
        {
        }
        /**
         * @param null|string $currency
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function getName($currency = null, $locale = null)
        {
        }
        /**
         * @param null|string $currency
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Currency_Exception
         */
        public function getRegionList($currency = null)
        {
        }
        /**
         * @param null|string $region
         *
         * @return array<array-key, mixed>
         */
        public function getCurrencyList($region = null)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public static function getCache()
        {
        }
        /**
         * @param Zend_Cache_Core $cache
         *
         * @return void
         */
        public static function setCache(\Zend_Cache_Core $cache)
        {
        }
        /**
         * @return bool
         */
        public static function hasCache()
        {
        }
        /**
         * @return void
         */
        public static function removeCache()
        {
        }
        /**
         * @param null|string $tag
         *
         * @return void
         */
        public static function clearCache($tag = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Currency
         *
         * @throws Zend_Currency_Exception
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @return string
         */
        public function getLocale()
        {
        }
        /**
         * @return float
         */
        public function getValue()
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return Zend_Currency
         */
        public function setValue($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return Zend_Currency
         */
        public function add($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return Zend_Currency
         */
        public function sub($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return Zend_Currency
         */
        public function div($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return Zend_Currency
         */
        public function mul($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return Zend_Currency
         */
        public function mod($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return Zend_Currency
         */
        public function compare($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return bool
         */
        public function equals($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return bool
         */
        public function isMore($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|null|string $currency
         *
         * @return bool
         */
        public function isLess($value, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|float|int $value
         * @param Zend_Currency|string $currency
         *
         * @return unknown
         */
        public function _exchangeCurrency($value, $currency)
        {
        }
        /**
         * @return Zend_Service
         */
        public function getService()
        {
        }
        /**
         * @param Zend_Currency_CurrencyInterface|string $service
         *
         * @return Zend_Currency
         */
        public function setService($service)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Currency_Exception
         */
        public function _checkOptions(array $options = array())
        {
        }
    }
    interface Zend_Currency_CurrencyInterface
    {
        /**
         * @param string $from
         * @param string $to
         */
        public function getRate($from, $to);
    }
    class Zend_Currency_Exception extends \Zend_Exception
    {
    }
    class Zend_Date extends \Zend_Date_DateObject
    {
        public const DAY = 'dd';
        public const DAY_SHORT = 'd';
        public const DAY_SUFFIX = 'SS';
        public const DAY_OF_YEAR = 'D';
        public const WEEKDAY = 'EEEE';
        public const WEEKDAY_SHORT = 'EEE';
        public const WEEKDAY_NARROW = 'E';
        public const WEEKDAY_NAME = 'EE';
        public const WEEKDAY_8601 = 'eee';
        public const WEEKDAY_DIGIT = 'e';
        public const WEEK = 'ww';
        public const MONTH = 'MM';
        public const MONTH_SHORT = 'M';
        public const MONTH_DAYS = 'ddd';
        public const MONTH_NAME = 'MMMM';
        public const MONTH_NAME_SHORT = 'MMM';
        public const MONTH_NAME_NARROW = 'MMMMM';
        public const YEAR = 'y';
        public const YEAR_SHORT = 'yy';
        public const YEAR_8601 = 'Y';
        public const YEAR_SHORT_8601 = 'YY';
        public const LEAPYEAR = 'l';
        public const MERIDIEM = 'a';
        public const SWATCH = 'B';
        public const HOUR = 'HH';
        public const HOUR_SHORT = 'H';
        public const HOUR_AM = 'hh';
        public const HOUR_SHORT_AM = 'h';
        public const MINUTE = 'mm';
        public const MINUTE_SHORT = 'm';
        public const SECOND = 'ss';
        public const SECOND_SHORT = 's';
        public const MILLISECOND = 'S';
        public const TIMEZONE_NAME = 'zzzz';
        public const DAYLIGHT = 'I';
        public const GMT_DIFF = 'Z';
        public const GMT_DIFF_SEP = 'ZZZZ';
        public const TIMEZONE = 'z';
        public const TIMEZONE_SECS = 'X';
        public const ISO_8601 = 'c';
        public const RFC_2822 = 'r';
        public const TIMESTAMP = 'U';
        public const ERA = 'G';
        public const ERA_NAME = 'GGGG';
        public const ERA_NARROW = 'GGGGG';
        public const DATES = 'F';
        public const DATE_FULL = 'FFFFF';
        public const DATE_LONG = 'FFFF';
        public const DATE_MEDIUM = 'FFF';
        public const DATE_SHORT = 'FF';
        public const TIMES = 'WW';
        public const TIME_FULL = 'TTTTT';
        public const TIME_LONG = 'TTTT';
        public const TIME_MEDIUM = 'TTT';
        public const TIME_SHORT = 'TT';
        public const DATETIME = 'K';
        public const DATETIME_FULL = 'KKKKK';
        public const DATETIME_LONG = 'KKKK';
        public const DATETIME_MEDIUM = 'KKK';
        public const DATETIME_SHORT = 'KK';
        public const ATOM = 'OOO';
        public const COOKIE = 'CCC';
        public const RFC_822 = 'R';
        public const RFC_850 = 'RR';
        public const RFC_1036 = 'RRR';
        public const RFC_1123 = 'RRRR';
        public const RFC_3339 = 'RRRRR';
        public const RSS = 'SSS';
        public const W3C = 'WWW';
        public $_locale = null;
        public $_fractional = 0;
        public $_precision = 3;
        public static $_options = 'Psalm could not infer this type';
        /**
         * @param Zend_Date|array<array-key, mixed>|int|null|string $date
         * @param null|string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function __construct($date = null, $part = null, $locale = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Options
         *
         * @throws Zend_Date_Exception
         */
        public static function setOptions(array $options = array())
        {
        }
        /**
         * @return int|string
         */
        public function getTimestamp()
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date|array<array-key, mixed>|int|string $stamp
         *
         * @return Zend_Date|int
         *
         * @throws Zend_Date_Exception
         */
        public function _timestamp($calc, $stamp)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $timestamp
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setTimestamp($timestamp)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $timestamp
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addTimestamp($timestamp)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $timestamp
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subTimestamp($timestamp)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $timestamp
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareTimestamp($timestamp)
        {
        }
        /**
         * @param null|string $format
         * @param null|string $type
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function toString($format = null, $type = null, $locale = null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param Zend_Date|int|null|string $part
         *
         * @return false|int
         */
        public function toValue($part = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @param null|string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function get($part = null, $locale = null)
        {
        }
        /**
         * @param string $part
         * @param string $locale
         *
         * @return string
         */
        public function _toToken($part, $locale)
        {
        }
        /**
         * @param string $token
         * @param string $locale
         *
         * @return string
         */
        public function _parseIsoToDate($token, $locale)
        {
        }
        /**
         * @param string $token
         *
         * @return string
         */
        public function _toComment($token)
        {
        }
        /**
         * @param string $name
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function _getDigitFromName($name)
        {
        }
        /**
         * @param int $value
         *
         * @return int
         */
        public static function getFullYear($value)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param null|string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function set($date, $part = null, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function add($date, $part, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function sub($date, $part, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compare($date, $part, $locale = null)
        {
        }
        /**
         * @param string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function copyPart($part, $locale = null)
        {
        }
        /**
         * @param string $zone
         *
         * @return int
         */
        public function getTimezoneFromString($zone)
        {
        }
        /**
         * @param string $calc
         * @param int|string $date
         * @param int|string $comp
         * @param bool|int $dst
         *
         * @return Zend_Date|int|string
         */
        public function _assign($calc, $date, $comp = 0, $dst = false)
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param string $part
         * @param Zend_Locale|string $locale
         *
         * @return Zend_Date|int|string
         *
         * @throws Zend_Date_Exception
         */
        public function _calculate($calc, $date, $part, $locale)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return bool
         *
         * @throws Zend_Date_Exception
         */
        public function equals($date, $part, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param null|string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return bool
         *
         * @throws Zend_Date_Exception
         */
        public function isEarlier($date, $part = null, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param null|string $part
         * @param Zend_Locale|null|string $locale
         *
         * @return bool
         *
         * @throws Zend_Date_Exception
         */
        public function isLater($date, $part = null, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function getTime($locale = null)
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date|array<array-key, mixed>|int|string $time
         * @param string $format
         * @param Zend_Locale|string $locale
         *
         * @return Zend_Date|int
         *
         * @throws Zend_Date_Exception
         */
        public function _time($calc, $time, $format, $locale)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $time
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setTime($time, $format = null, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $time
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addTime($time, $format = null, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $time
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subTime($time, $format = null, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $time
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareTime($time, $format = null, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function getDate($locale = null)
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param string $format
         * @param Zend_Locale|string $locale
         *
         * @return Zend_Date|int
         *
         * @throws Zend_Date_Exception
         */
        public function _date($calc, $date, $format, $locale)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setDate($date, $format = null, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addDate($date, $format = null, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subDate($date, $format = null, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareDate($date, $format = null, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function getIso($locale = null)
        {
        }
        /**
         * @param Zend_Date|int|string $date
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setIso($date, $locale = null)
        {
        }
        /**
         * @param Zend_Date|int|string $date
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addIso($date, $locale = null)
        {
        }
        /**
         * @param Zend_Date|int|string $date
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subIso($date, $locale = null)
        {
        }
        /**
         * @param Zend_Date|int|string $date
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareIso($date, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function getArpa($locale = null)
        {
        }
        /**
         * @param Zend_Date|int|string $date
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setArpa($date, $locale = null)
        {
        }
        /**
         * @param Zend_Date|int|string $date
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addArpa($date, $locale = null)
        {
        }
        /**
         * @param Zend_Date|int|string $date
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subArpa($date, $locale = null)
        {
        }
        /**
         * @param Zend_Date|int|string $date
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareArpa($date, $locale = null)
        {
        }
        /**
         * @param array<array-key, mixed> $location
         *
         * @return float
         *
         * @throws Zend_Date_Exception
         */
        public function _checkLocation($location)
        {
        }
        /**
         * @param array<array-key, mixed> $location
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function getSunrise($location)
        {
        }
        /**
         * @param array<array-key, mixed> $location
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function getSunset($location)
        {
        }
        /**
         * @param array<array-key, mixed> $location
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Date_Exception
         */
        public function getSunInfo($location)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int $year
         *
         * @return bool
         *
         * @throws Zend_Date_Exception
         */
        public static function checkLeapYear($year)
        {
        }
        /**
         * @return bool
         */
        public function isLeapYear()
        {
        }
        /**
         * @return bool
         */
        public function isToday()
        {
        }
        /**
         * @return bool
         */
        public function isYesterday()
        {
        }
        /**
         * @return bool
         */
        public function isTomorrow()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public static function now($locale = null)
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date|array<array-key, mixed>|int|string $date
         * @param string $type
         * @param Zend_Locale|string $locale
         *
         * @return int|string
         *
         * @throws Zend_Date_Exception
         */
        public function _calcdetail($calc, $date, $type, $locale)
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date|int|string $value
         * @param string $type
         * @param string $parameter
         * @param Zend_Locale|string $locale
         *
         * @return Zend_Date|int
         *
         * @throws Zend_Date_Exception
         */
        public function _calcvalue($calc, $value, $type, $parameter, $locale)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function getYear($locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $year
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setYear($year, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $year
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addYear($year, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $year
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subYear($year, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $year
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareYear($year, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function getMonth($locale = null)
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date|array<array-key, mixed>|int|string $month
         * @param Zend_Locale|string $locale
         *
         * @return Zend_Date|int
         *
         * @throws Zend_Date_Exception
         */
        public function _month($calc, $month, $locale)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $month
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setMonth($month, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $month
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addMonth($month, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $month
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subMonth($month, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $month
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareMonth($month, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null $locale
         *
         * @return Zend_Date
         */
        public function getDay($locale = null)
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date $day
         * @param Zend_Locale $locale
         *
         * @return Zend_Date|int
         *
         * @throws Zend_Date_Exception
         */
        public function _day($calc, $day, $locale)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $day
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setDay($day, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $day
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addDay($day, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $day
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subDay($day, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $day
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareDay($day, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null $locale
         *
         * @return Zend_Date
         */
        public function getWeekday($locale = null)
        {
        }
        /**
         * @param string $calc
         * @param Zend_Date $weekday
         * @param Zend_Locale $locale
         *
         * @return Zend_Date|int
         *
         * @throws Zend_Date_Exception
         */
        public function _weekday($calc, $weekday, $locale)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $weekday
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setWeekday($weekday, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $weekday
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addWeekday($weekday, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $weekday
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subWeekday($weekday, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $weekday
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareWeekday($weekday, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function getDayOfYear($locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $day
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setDayOfYear($day, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $day
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addDayOfYear($day, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $day
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subDayOfYear($day, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $day
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareDayOfYear($day, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null $locale
         *
         * @return Zend_Date
         */
        public function getHour($locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $hour
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setHour($hour, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $hour
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addHour($hour, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $hour
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subHour($hour, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $hour
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareHour($hour, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function getMinute($locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $minute
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setMinute($minute, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $minute
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addMinute($minute, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $minute
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subMinute($minute, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $minute
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareMinute($minute, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function getSecond($locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $second
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setSecond($second, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $second
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addSecond($second, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $second
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subSecond($second, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $second
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareSecond($second, $locale = null)
        {
        }
        /**
         * @return int
         */
        public function getFractionalPrecision()
        {
        }
        /**
         * @param int $precision
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setFractionalPrecision($precision)
        {
        }
        /**
         * @return string
         */
        public function getMilliSecond()
        {
        }
        /**
         * @param Zend_Date|int|null $milli
         * @param int|null $precision
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setMilliSecond($milli = null, $precision = null)
        {
        }
        /**
         * @param Zend_Date|int|null $milli
         * @param int|null $precision
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addMilliSecond($milli = null, $precision = null)
        {
        }
        /**
         * @param Zend_Date|int|null $milli
         * @param int|null $precision
         *
         * @return Zend_Date
         */
        public function subMilliSecond($milli = null, $precision = null)
        {
        }
        /**
         * @param Zend_Date|int|null $milli
         * @param int|null $precision
         *
         * @return int
         *
         * @throws Zend_Date_Exception
         */
        public function compareMilliSecond($milli = null, $precision = null)
        {
        }
        /**
         * @param Zend_Locale|null $locale
         *
         * @return Zend_Date
         */
        public function getWeek($locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $week
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setWeek($week, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $week
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function addWeek($week, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $week
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function subWeek($week, $locale = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|int|string $week
         * @param Zend_Locale|null|string $locale
         *
         * @return int
         */
        public function compareWeek($week, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         *
         * @throws Zend_Date_Exception
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @return string
         */
        public function getLocale()
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|string $date
         * @param null|string $format
         * @param Zend_Locale|null|string $locale
         *
         * @return bool
         */
        public static function isDate($date, $format = null, $locale = null)
        {
        }
        /**
         * @param string $token
         * @param string $locale
         *
         * @return string
         */
        public static function _getLocalizedToken($token, $locale)
        {
        }
    }
    class Zend_Date_Cities
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $cities;
        /**
         * @param string $city
         * @param string $horizon
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Date_Exception
         */
        public static function City($city, $horizon = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getCityList()
        {
        }
    }
    class Zend_Date_DateObject
    {
        public $_unixTimestamp;
        public static $_cache = null;
        public static $_cacheTags = false;
        public static $_defaultOffset = 0;
        public $_timezone = 'UTC';
        public $_offset = 0;
        public $_syncronised = 0;
        public $_dst = true;
        public static $_monthTable = 'Psalm could not infer this type';
        public static $_yearTable = 'Psalm could not infer this type';
        /**
         * @param int|null|string $timestamp
         *
         * @return int|string
         *
         * @throws Zend_Date_Exception
         */
        public function setUnixTimestamp($timestamp = null)
        {
        }
        /**
         * @return int|string
         */
        public function getUnixTimestamp()
        {
        }
        /**
         * @param int|null $sync
         *
         * @return int
         */
        public function _getTime($sync = null)
        {
        }
        /**
         * @param int $hour
         * @param int $minute
         * @param int $second
         * @param int $month
         * @param int $day
         * @param int $year
         * @param bool $gmt
         *
         * @return float|int
         */
        public function mktime($hour, $minute, $second, $month, $day, $year, $gmt = false)
        {
        }
        /**
         * @param int $year
         *
         * @return bool
         */
        public static function isYearLeapYear($year)
        {
        }
        /**
         * @param string $format
         * @param mixed|null $timestamp
         * @param bool $gmt
         *
         * @return string
         */
        public function date($format, $timestamp = null, $gmt = false)
        {
        }
        /**
         * @param int $year
         * @param int $month
         * @param int $day
         *
         * @return int
         */
        public static function dayOfWeek($year, $month, $day)
        {
        }
        /**
         * @param mixed|null $timestamp
         * @param bool|null $fast
         *
         * @return array<array-key, mixed>
         */
        public function getDateParts($timestamp = null, $fast = null)
        {
        }
        /**
         * @param int $year
         * @param int $month
         * @param int $day
         *
         * @return int
         */
        public function weekNumber($year, $month, $day)
        {
        }
        /**
         * @param float $a
         * @param float $b
         */
        public function _range($a, $b)
        {
        }
        /**
         * @param array<array-key, mixed> $location
         * @param bool $horizon
         *
         * @return mixed
         */
        public function calcSun($location, $horizon, $rise = false)
        {
        }
        /**
         * @param null|string $zone
         *
         * @return Zend_Date_DateObject
         *
         * @throws Zend_Date_Exception
         */
        public function setTimezone($zone = null)
        {
        }
        /**
         * @return string
         */
        public function getTimezone()
        {
        }
        /**
         * @return int
         */
        public function getGmtOffset()
        {
        }
        public static function _getTagSupportForCache()
        {
        }
    }
    class Zend_Date_Exception extends \Zend_Exception
    {
        public $operand = null;
        public function __construct($message, $code = 0, $e = null, $op = null)
        {
        }
        public function getOperand()
        {
        }
    }
    class Zend_Db
    {
        public const PROFILER = 'profiler';
        public const CASE_FOLDING = 'caseFolding';
        public const FETCH_MODE = 'fetchMode';
        public const AUTO_QUOTE_IDENTIFIERS = 'autoQuoteIdentifiers';
        public const ALLOW_SERIALIZATION = 'allowSerialization';
        public const AUTO_RECONNECT_ON_UNSERIALIZE = 'autoReconnectOnUnserialize';
        public const INT_TYPE = 0;
        public const BIGINT_TYPE = 1;
        public const FLOAT_TYPE = 2;
        public const ATTR_AUTOCOMMIT = 0;
        public const ATTR_CASE = 8;
        public const ATTR_CLIENT_VERSION = 5;
        public const ATTR_CONNECTION_STATUS = 7;
        public const ATTR_CURSOR = 10;
        public const ATTR_CURSOR_NAME = 9;
        public const ATTR_DRIVER_NAME = 16;
        public const ATTR_ERRMODE = 3;
        public const ATTR_FETCH_CATALOG_NAMES = 15;
        public const ATTR_FETCH_TABLE_NAMES = 14;
        public const ATTR_MAX_COLUMN_LEN = 18;
        public const ATTR_ORACLE_NULLS = 11;
        public const ATTR_PERSISTENT = 12;
        public const ATTR_PREFETCH = 1;
        public const ATTR_SERVER_INFO = 6;
        public const ATTR_SERVER_VERSION = 4;
        public const ATTR_STATEMENT_CLASS = 13;
        public const ATTR_STRINGIFY_FETCHES = 17;
        public const ATTR_TIMEOUT = 2;
        public const CASE_LOWER = 2;
        public const CASE_NATURAL = 0;
        public const CASE_UPPER = 1;
        public const CURSOR_FWDONLY = 0;
        public const CURSOR_SCROLL = 1;
        public const ERR_ALREADY_EXISTS = null;
        public const ERR_CANT_MAP = null;
        public const ERR_CONSTRAINT = null;
        public const ERR_DISCONNECTED = null;
        public const ERR_MISMATCH = null;
        public const ERR_NO_PERM = null;
        public const ERR_NONE = '00000';
        public const ERR_NOT_FOUND = null;
        public const ERR_NOT_IMPLEMENTED = null;
        public const ERR_SYNTAX = null;
        public const ERR_TRUNCATED = null;
        public const ERRMODE_EXCEPTION = 2;
        public const ERRMODE_SILENT = 0;
        public const ERRMODE_WARNING = 1;
        public const FETCH_ASSOC = 2;
        public const FETCH_BOTH = 4;
        public const FETCH_BOUND = 6;
        public const FETCH_CLASS = 8;
        public const FETCH_CLASSTYPE = 262144;
        public const FETCH_COLUMN = 7;
        public const FETCH_FUNC = 10;
        public const FETCH_GROUP = 65536;
        public const FETCH_INTO = 9;
        public const FETCH_LAZY = 1;
        public const FETCH_NAMED = 11;
        public const FETCH_NUM = 3;
        public const FETCH_OBJ = 5;
        public const FETCH_ORI_ABS = 4;
        public const FETCH_ORI_FIRST = 2;
        public const FETCH_ORI_LAST = 3;
        public const FETCH_ORI_NEXT = 0;
        public const FETCH_ORI_PRIOR = 1;
        public const FETCH_ORI_REL = 5;
        public const FETCH_SERIALIZE = 524288;
        public const FETCH_UNIQUE = 196608;
        public const NULL_EMPTY_STRING = 1;
        public const NULL_NATURAL = 0;
        public const NULL_TO_STRING = null;
        public const PARAM_BOOL = 5;
        public const PARAM_INPUT_OUTPUT = -2147483648;
        public const PARAM_INT = 1;
        public const PARAM_LOB = 3;
        public const PARAM_NULL = 0;
        public const PARAM_STMT = 4;
        public const PARAM_STR = 2;
        /**
         * @param mixed $adapter
         * @param mixed $config
         *
         * @return Zend_Db_Adapter_Abstract
         *
         * @throws Zend_Db_Exception
         */
        public static function factory($adapter, $config = array())
        {
        }
    }
    class Zend_Db_Adapter_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var int
         */
        public $_fetchMode;
        /**
         * @var Zend_Db_Profiler
         */
        public $_profiler;
        /**
         * @var string
         */
        public $_defaultStmtClass;
        /**
         * @var string
         */
        public $_defaultProfilerClass;
        /**
         * @var null|object|resource
         */
        public $_connection;
        /**
         * @var int
         */
        public $_caseFolding;
        /**
         * @var bool
         */
        public $_autoQuoteIdentifiers;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @var bool
         */
        public $_allowSerialization;
        /**
         * @var bool
         */
        public $_autoReconnectOnUnserialize;
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function __construct($config)
        {
        }
        /**
         * @param array<array-key, mixed> $config
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _checkRequiredOptions(array $config)
        {
        }
        /**
         * @return null|object|resource
         */
        public function getConnection()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getConfig()
        {
        }
        /**
         * @param Zend_Config|Zend_Db_Profiler|array<array-key, mixed>|bool $profiler
         *
         * @return Zend_Db_Adapter_Abstract
         *
         * @throws Zend_Db_Profiler_Exception
         */
        public function setProfiler($profiler)
        {
        }
        /**
         * @return Zend_Db_Profiler
         */
        public function getProfiler()
        {
        }
        /**
         * @return string
         */
        public function getStatementClass()
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function setStatementClass($class)
        {
        }
        /**
         * @param mixed $sql
         * @param mixed $bind
         *
         * @return Zend_Db_Statement_Interface
         * @psalm-taint sink sql $sql
         * @psalm-taint sink sql $bind
         */
        public function query($sql, $bind = array())
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function beginTransaction()
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function commit()
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function rollBack()
        {
        }
        /**
         * @param mixed $table
         * @param array<array-key, mixed> $bind
         *
         * @return int
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $table
         * @psalm-taint-sink sql $bind
         */
        public function insert($table, array $bind)
        {
        }
        /**
         * @param mixed $table
         * @param array<array-key, mixed> $bind
         * @param mixed $where
         *
         * @return int
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $table
         * @psalm-taint-sink sql $bind
         * @psalm-taint-sink sql $where
         */
        public function update($table, array $bind, $where = '')
        {
        }
        /**
         * @param mixed $table
         * @param mixed $where
         *
         * @return int
         * @psalm-taint-sink sql $table
         * @psalm-taint-sink sql $where
         */
        public function delete($table, $where = '')
        {
        }
        /**
         * @param mixed $where
         *
         * @return string
         * @psalm-taint-sink sql $where
         */
        public function _whereExpr($where)
        {
        }
        /**
         * @return Zend_Db_Select
         */
        public function select()
        {
        }
        /**
         * @return int
         */
        public function getFetchMode()
        {
        }
        /**
         * @param Zend_Db_Select|string $sql
         * @param mixed $bind
         * @param mixed|null $fetchMode
         *
         * @return array<array-key, mixed>
         * @psalm-taint-sink sql $sql
         */
        public function fetchAll($sql, $bind = array(), $fetchMode = null)
        {
        }
        /**
         * @param Zend_Db_Select|string $sql
         * @param mixed $bind
         * @param mixed|null $fetchMode
         *
         * @return mixed
         * @psalm-taint-sink sql $sql
         */
        public function fetchRow($sql, $bind = array(), $fetchMode = null)
        {
        }
        /**
         * @param Zend_Db_Select|string $sql
         * @param mixed $bind
         *
         * @return array<array-key, mixed>
         * @psalm-taint-sink sql $sql
         */
        public function fetchAssoc($sql, $bind = array())
        {
        }
        /**
         * @param Zend_Db_Select|string $sql
         * @param mixed $bind
         *
         * @return array<array-key, mixed>
         * @psalm-taint-sink sql $sql
         */
        public function fetchCol($sql, $bind = array())
        {
        }
        /**
         * @param Zend_Db_Select|string $sql
         * @param mixed $bind
         *
         * @return array<array-key, mixed>
         * @psalm-taint-sink sql $sql
         */
        public function fetchPairs($sql, $bind = array())
        {
        }
        /**
         * @param Zend_Db_Select|string $sql
         * @param mixed $bind
         *
         * @return string
         * @psalm-taint-sink sql $sql
         */
        public function fetchOne($sql, $bind = array())
        {
        }
        /**
         * @param string $value
         *
         * @return string
         * @psalm-taint-escape sql
         */
        public function _quote($value)
        {
        }
        /**
         * @param mixed $value
         * @param mixed|null $type
         *
         * @return mixed
         * @psalm-taint-escape sql
         */
        public function quote($value, $type = null)
        {
        }
        /**
         * @param string $text
         * @param mixed $value
         * @param null|string $type
         * @param int|null $count
         *
         * @return string
         * @psalm-taint-escape sql
         */
        public function quoteInto($text, $value, $type = null, $count = null)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $ident
         * @param bool $auto
         *
         * @return string
         */
        public function quoteIdentifier($ident, $auto = false)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $ident
         * @param string $alias
         * @param bool $auto
         *
         * @return string
         */
        public function quoteColumnAs($ident, $alias, $auto = false)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $ident
         * @param null|string $alias
         * @param bool $auto
         *
         * @return string
         */
        public function quoteTableAs($ident, $alias = null, $auto = false)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $ident
         * @param null|string $alias
         * @param bool $auto
         * @param string $as
         *
         * @return string
         */
        public function _quoteIdentifierAs($ident, $alias = null, $auto = false, $as = ' AS ')
        {
        }
        /**
         * @param string $value
         * @param bool $auto
         *
         * @return string
         */
        public function _quoteIdentifier($value, $auto = false)
        {
        }
        /**
         * @return string
         */
        public function getQuoteIdentifierSymbol()
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return string
         */
        public function lastSequenceId($sequenceName)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return string
         */
        public function nextSequenceId($sequenceName)
        {
        }
        /**
         * @param string $key
         *
         * @return string
         */
        public function foldCase($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function __sleep()
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public abstract function listTables();
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public abstract function describeTable($tableName, $schemaName = null);
        /**
         * @return void
         */
        public abstract function _connect();
        /**
         * @return bool
         */
        public abstract function isConnected();
        /**
         * @return void
         */
        public abstract function closeConnection();
        /**
         * @param Zend_Db_Select|string $sql
         *
         * @return PDOStatement|Zend_Db_Statement
         * @psalm-taint-escape sql
         */
        public abstract function prepare($sql);
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         */
        public abstract function lastInsertId($tableName = null, $primaryKey = null);
        public abstract function _beginTransaction();
        public abstract function _commit();
        public abstract function _rollBack();
        /**
         * @param int $mode
         *
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public abstract function setFetchMode($mode);
        /**
         * @param mixed $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         * @psalm-taint-sink sql $sql
         */
        public abstract function limit($sql, $count, $offset = 0);
        /**
         * @param string $type
         *
         * @return bool
         */
        public abstract function supportsParameters($type);
        /**
         * @return string
         */
        public abstract function getServerVersion();
    }
    class Zend_Db_Adapter_Db2 extends \Zend_Db_Adapter_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var int
         */
        public $_execute_mode;
        /**
         * @var string
         */
        public $_defaultStmtClass;
        public $_isI5 = false;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @return void
         */
        public function _connect()
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @return void
         */
        public function closeConnection()
        {
        }
        /**
         * @param string $sql
         *
         * @return Zend_Db_Statement_Db2
         * @psalm-taint-escape sql
         */
        public function prepare($sql)
        {
        }
        /**
         * @return int
         */
        public function _getExecuteMode()
        {
        }
        /**
         * @param int $mode
         *
         * @return void
         */
        public function _setExecuteMode($mode)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         * @psalm-taint-escape sql
         */
        public function _quote($value)
        {
        }
        /**
         * @return string
         */
        public function getQuoteIdentifierSymbol()
        {
        }
        /**
         * @param null|string $schema
         *
         * @return array<array-key, mixed>
         */
        public function listTables($schema = null)
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return string
         */
        public function lastSequenceId($sequenceName)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return string
         */
        public function nextSequenceId($sequenceName)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         * @param null|string $idType
         *
         * @return string
         */
        public function lastInsertId($tableName = null, $primaryKey = null, $idType = null)
        {
        }
        /**
         * @return void
         */
        public function _beginTransaction()
        {
        }
        /**
         * @return void
         */
        public function _commit()
        {
        }
        /**
         * @return void
         */
        public function _rollBack()
        {
        }
        /**
         * @param int $mode
         *
         * @return void
         *
         * @throws Zend_Db_Adapter_Db2_Exception
         */
        public function setFetchMode($mode)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function supportsParameters($type)
        {
        }
        /**
         * @return string
         */
        public function getServerVersion()
        {
        }
        /**
         * @return bool
         */
        public function isI5()
        {
        }
        /**
         * @return void
         */
        public function _determineI5()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _i5listTables($schema = null)
        {
        }
        public function _i5LastInsertId($objectName = null, $idType = null)
        {
        }
    }
    class Zend_Db_Adapter_Db2_Exception extends \Zend_Db_Adapter_Exception
    {
        public $code = '00000';
        public $message = 'unknown exception';
        public function __construct($message = 'unknown exception', $code = '00000', ?\Exception $e = null)
        {
        }
    }
    class Zend_Db_Adapter_Exception extends \Zend_Db_Exception
    {
        public $_chainedException = null;
        public function __construct($message = '', $code = 0, ?\Exception $e = null)
        {
        }
        public function hasChainedException()
        {
        }
        public function getChainedException()
        {
        }
    }
    class Zend_Db_Adapter_Mysqli extends \Zend_Db_Adapter_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @var Zend_Db_Statement_Mysqli
         */
        public $_stmt;
        /**
         * @var string
         */
        public $_defaultStmtClass;
        /**
         * @param mixed $value
         *
         * @return string
         * @psalm-taint-escape sql
         */
        public function _quote($value)
        {
        }
        /**
         * @return string
         */
        public function getQuoteIdentifierSymbol()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Mysqli_Exception
         */
        public function _connect()
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @return void
         */
        public function closeConnection()
        {
        }
        /**
         * @param string $sql
         *
         * @return Zend_Db_Statement_Mysqli
         * @psalm-taint-escape sql
         */
        public function prepare($sql)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
        /**
         * @return void
         */
        public function _beginTransaction()
        {
        }
        /**
         * @return void
         */
        public function _commit()
        {
        }
        /**
         * @return void
         */
        public function _rollBack()
        {
        }
        /**
         * @param int $mode
         *
         * @return void
         *
         * @throws Zend_Db_Adapter_Mysqli_Exception
         */
        public function setFetchMode($mode)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function supportsParameters($type)
        {
        }
        /**
         * @return string
         */
        public function getServerVersion()
        {
        }
    }
    class Zend_Db_Adapter_Mysqli_Exception extends \Zend_Db_Adapter_Exception
    {
    }
    class Zend_Db_Adapter_Oracle extends \Zend_Db_Adapter_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @var int
         */
        public $_execute_mode;
        /**
         * @var string
         */
        public $_defaultStmtClass;
        /**
         * @var bool
         */
        public $_lobAsString;
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Oracle_Exception
         */
        public function _connect()
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @return void
         */
        public function closeConnection()
        {
        }
        /**
         * @return Zend_Db_Adapter_Oracle
         */
        public function setLobAsString($lobAsString)
        {
        }
        /**
         * @return bool
         */
        public function getLobAsString()
        {
        }
        /**
         * @param string $sql
         *
         * @return Zend_Db_Statement_Oracle
         * @psalm-taint-escape sql
         */
        public function prepare($sql)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         * @psalm-taint-escape $value
         */
        public function _quote($value)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $ident
         * @param null|string $alias
         * @param bool $auto
         *
         * @return string
         */
        public function quoteTableAs($ident, $alias = null, $auto = false)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return string
         */
        public function lastSequenceId($sequenceName)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return string
         */
        public function nextSequenceId($sequenceName)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @return void
         */
        public function _beginTransaction()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Oracle_Exception
         */
        public function _commit()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Oracle_Exception
         */
        public function _rollBack()
        {
        }
        /**
         * @param int $mode
         *
         * @return void
         *
         * @throws Zend_Db_Adapter_Oracle_Exception
         */
        public function setFetchMode($mode)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Oracle_Exception
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param int $mode
         *
         * @throws Zend_Db_Adapter_Oracle_Exception
         */
        public function _setExecuteMode($mode)
        {
        }
        /**
         * @return int
         */
        public function _getExecuteMode()
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function supportsParameters($type)
        {
        }
        /**
         * @return string
         */
        public function getServerVersion()
        {
        }
    }
    class Zend_Db_Adapter_Oracle_Exception extends \Zend_Db_Adapter_Exception
    {
        public $message = 'Unknown exception';
        public $code = 0;
        public function __construct($error = null, $code = 0)
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Abstract extends \Zend_Db_Adapter_Abstract
    {
        /**
         * @var string
         */
        public $_defaultStmtClass;
        /**
         * @return string
         */
        public function _dsn()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _connect()
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @return void
         */
        public function closeConnection()
        {
        }
        /**
         * @param string $sql
         *
         * @return PDOStatement
         * @psalm-taint-escape sql
         */
        public function prepare($sql)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
        /**
         * @param Zend_Db_Select|string $sql
         * @param array<array-key, mixed> $bind
         *
         * @return Zend_Db_Statement_Pdo
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $sql
         * @psalm-taint sink sql $bind
         */
        public function query($sql, $bind = array())
        {
        }
        /**
         * @param mixed $sql
         *
         * @return int
         * @psalm-taint-sink sql $sql
         */
        public function exec($sql)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         * @psalm-taint-escape sql
         */
        public function _quote($value)
        {
        }
        public function _beginTransaction()
        {
        }
        public function _commit()
        {
        }
        public function _rollBack()
        {
        }
        /**
         * @param int $mode
         *
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function setFetchMode($mode)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function supportsParameters($type)
        {
        }
        /**
         * @return string
         */
        public function getServerVersion()
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Ibm extends \Zend_Db_Adapter_Pdo_Abstract
    {
        /**
         * @var string
         */
        public $_pdoType;
        /**
         * @var string
         */
        public $_serverType;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _connect()
        {
        }
        /**
         * @return string
         */
        public function _dsn()
        {
        }
        /**
         * @param array<array-key, mixed> $config
         *
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _checkRequiredOptions(array $config)
        {
        }
        /**
         * @param string $sql
         *
         * @return PDOStatement
         * @psalm-taint-escape sql
         */
        public function prepare($sql)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param mixed $table
         * @param array<array-key, mixed> $bind
         *
         * @return int
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $table
         * @psalm-taint-sink sql $bind
         */
        public function insert($table, array $bind)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return int
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return int
         */
        public function lastSequenceId($sequenceName)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return int
         */
        public function nextSequenceId($sequenceName)
        {
        }
        /**
         * @return string
         */
        public function getServerVersion()
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Ibm_Db2
    {
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_adapter;
        /**
         * @param Zend_Db_Adapter_Abstract $adapter
         */
        public function __construct($adapter)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return int
         */
        public function lastSequenceId($sequenceName)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return int
         */
        public function nextSequenceId($sequenceName)
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Ibm_Ids
    {
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_adapter;
        /**
         * @param Zend_Db_Adapter_Abstract $adapter
         */
        public function __construct($adapter)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param int $typeNo
         *
         * @return string
         */
        public function _getDataType($typeNo)
        {
        }
        /**
         * @param int $tabid
         *
         * @return array<array-key, mixed>
         */
        public function _getPrimaryInfo($tabid)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return int
         */
        public function lastSequenceId($sequenceName)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return int
         */
        public function nextSequenceId($sequenceName)
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Mssql extends \Zend_Db_Adapter_Pdo_Abstract
    {
        /**
         * @var string
         */
        public $_pdoType;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @return string
         */
        public function _dsn()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _connect()
        {
        }
        public function _beginTransaction()
        {
        }
        public function _commit()
        {
        }
        public function _rollBack()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
        /**
         * @return string
         */
        public function getServerVersion()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         * @psalm-taint-escape sql
         */
        public function _quote($value)
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Mysql extends \Zend_Db_Adapter_Pdo_Abstract
    {
        /**
         * @var string
         */
        public $_pdoType;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        public function _dsn()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _connect()
        {
        }
        /**
         * @return string
         */
        public function getQuoteIdentifierSymbol()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Oci extends \Zend_Db_Adapter_Pdo_Abstract
    {
        /**
         * @var string
         */
        public $_pdoType;
        /**
         * @var string
         */
        public $_defaultStmtClass;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @return string
         */
        public function _dsn()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _quote($value)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $ident
         * @param null|string $alias
         *
         * @return string
         */
        public function quoteTableAs($ident, $alias = null, $auto = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return int
         */
        public function lastSequenceId($sequenceName)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return int
         */
        public function nextSequenceId($sequenceName)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Oracle_Exception
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Pgsql extends \Zend_Db_Adapter_Pdo_Abstract
    {
        /**
         * @var string
         */
        public $_pdoType;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _connect()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return string
         */
        public function lastSequenceId($sequenceName)
        {
        }
        /**
         * @param string $sequenceName
         *
         * @return string
         */
        public function nextSequenceId($sequenceName)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
    }
    class Zend_Db_Adapter_Pdo_Sqlite extends \Zend_Db_Adapter_Pdo_Abstract
    {
        /**
         * @var string
         */
        public $_pdoType;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @param array<array-key, mixed> $config
         */
        public function __construct(array $config = array())
        {
        }
        /**
         * @param array<array-key, mixed> $config
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _checkRequiredOptions(array $config)
        {
        }
        public function _dsn()
        {
        }
        /**
         * @throws Zend_Db_Adapter_Exception
         */
        public function _connect()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         * @psalm-taint-escape sql
         */
        public function _quote($value)
        {
        }
    }
    class Zend_Db_Adapter_Sqlsrv extends \Zend_Db_Adapter_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var int
         */
        public $_lastInsertId;
        /**
         * @var string
         */
        public $_lastInsertSQL;
        /**
         * @var array<array-key, mixed>
         */
        public $_numericDataTypes;
        /**
         * @var string
         */
        public $_defaultStmtClass;
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Sqlsrv_Exception
         */
        public function _connect()
        {
        }
        /**
         * @param array<array-key, mixed> $config
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function _checkRequiredOptions(array $config)
        {
        }
        /**
         * @param int|null $level
         *
         * @return true
         *
         * @throws Zend_Db_Adapter_Sqlsrv_Exception
         */
        public function setTransactionIsolationLevel($level = null)
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @return void
         */
        public function closeConnection()
        {
        }
        /**
         * @param string $sql
         *
         * @return Zend_Db_Statement_Sqlsrv
         * @psalm-taint-escape sql
         */
        public function prepare($sql)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         * @psalm-taint-escape sql
         */
        public function _quote($value)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
        /**
         * @param mixed $table
         * @param array<array-key, mixed> $bind
         *
         * @return int
         *
         * @throws Zend_Db_Adapter_Exception
         * @psalm-taint-sink sql $table
         * @psalm-taint-sink sql $bind
         */
        public function insert($table, array $bind)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Sqlsrv_Exception
         */
        public function _beginTransaction()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Sqlsrv_Exception
         */
        public function _commit()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Adapter_Sqlsrv_Exception
         */
        public function _rollBack()
        {
        }
        /**
         * @param int $mode
         *
         * @return void
         *
         * @throws Zend_Db_Adapter_Sqlsrv_Exception
         */
        public function setFetchMode($mode)
        {
        }
        /**
         * @param string $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         *
         * @throws Zend_Db_Adapter_Sqlsrv_Exception
         * @psalm-taint-sink sql $sql
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function supportsParameters($type)
        {
        }
        /**
         * @return string
         */
        public function getServerVersion()
        {
        }
    }
    class Zend_Db_Adapter_Sqlsrv_Exception extends \Zend_Db_Adapter_Exception
    {
        /**
         * @param array<array-key, mixed>|null|string $message
         * @param int|null $code
         */
        public function __construct($message = null, $code = 0)
        {
        }
    }
    class Zend_Db_Exception extends \Zend_Exception
    {
    }
    class Zend_Db_Expr
    {
        /**
         * @var string
         */
        public $_expression;
        /**
         * @param string $expression
         */
        public function __construct($expression)
        {
        }
        /**
         * @return string
         * @psalm-taint-escape sql
         */
        public function __toString()
        {
        }
    }
    class Zend_Db_Profiler
    {
        public const CONNECT = 1;
        public const QUERY = 2;
        public const INSERT = 4;
        public const UPDATE = 8;
        public const DELETE = 16;
        public const SELECT = 32;
        public const TRANSACTION = 64;
        public const STORED = 'stored';
        public const IGNORED = 'ignored';
        /**
         * @var array<array-key, mixed>
         */
        public $_queryProfiles;
        /**
         * @var bool
         */
        public $_enabled;
        /**
         * @var int
         */
        public $_filterElapsedSecs;
        /**
         * @var int
         */
        public $_filterTypes;
        /**
         * @param bool $enabled
         *
         * @return void
         */
        public function __construct($enabled = false)
        {
        }
        /**
         * @param bool $enable
         *
         * @return Zend_Db_Profiler
         */
        public function setEnabled($enable)
        {
        }
        /**
         * @return bool
         */
        public function getEnabled()
        {
        }
        /**
         * @param int|null $minimumSeconds
         *
         * @return Zend_Db_Profiler
         */
        public function setFilterElapsedSecs($minimumSeconds = null)
        {
        }
        /**
         * @return int|null
         */
        public function getFilterElapsedSecs()
        {
        }
        /**
         * @param int|null $queryTypes
         *
         * @return Zend_Db_Profiler
         */
        public function setFilterQueryType($queryTypes = null)
        {
        }
        /**
         * @return int|null
         */
        public function getFilterQueryType()
        {
        }
        /**
         * @return Zend_Db_Profiler
         */
        public function clear()
        {
        }
        /**
         * @param Zend_Db_Profiler_Query $query
         *
         * @return int
         */
        public function queryClone(\Zend_Db_Profiler_Query $query)
        {
        }
        /**
         * @param string $queryText
         * @param int|null $queryType
         *
         * @return int|null
         */
        public function queryStart($queryText, $queryType = null)
        {
        }
        /**
         * @param int $queryId
         *
         * @return string
         *
         * @throws Zend_Db_Profiler_Exception
         */
        public function queryEnd($queryId)
        {
        }
        /**
         * @param int $queryId
         *
         * @return Zend_Db_Profiler_Query
         *
         * @throws Zend_Db_Profiler_Exception
         */
        public function getQueryProfile($queryId)
        {
        }
        /**
         * @param int|null $queryType
         * @param bool $showUnfinished
         *
         * @return array<array-key, mixed>|false
         */
        public function getQueryProfiles($queryType = null, $showUnfinished = false)
        {
        }
        /**
         * @param int|null $queryType
         *
         * @return float
         */
        public function getTotalElapsedSecs($queryType = null)
        {
        }
        /**
         * @param int|null $queryType
         *
         * @return int
         */
        public function getTotalNumQueries($queryType = null)
        {
        }
        /**
         * @return Zend_Db_Profiler_Query|false
         */
        public function getLastQueryProfile()
        {
        }
    }
    class Zend_Db_Profiler_Exception extends \Zend_Db_Exception
    {
    }
    class Zend_Db_Profiler_Firebug extends \Zend_Db_Profiler
    {
        public const CONNECT = 1;
        public const QUERY = 2;
        public const INSERT = 4;
        public const UPDATE = 8;
        public const DELETE = 16;
        public const SELECT = 32;
        public const TRANSACTION = 64;
        public const STORED = 'stored';
        public const IGNORED = 'ignored';
        /**
         * @var string
         */
        public $_label;
        /**
         * @var string
         */
        public $_label_template;
        /**
         * @var Zend_Wildfire_Plugin_FirePhp_TableMessage
         */
        public $_message;
        /**
         * @var float
         */
        public $_totalElapsedTime;
        /**
         * @param null|string $label
         *
         * @return void
         */
        public function __construct($label = null)
        {
        }
        /**
         * @param bool $enable
         *
         * @return Zend_Db_Profiler
         */
        public function setEnabled($enable)
        {
        }
        /**
         * @param int $queryId
         *
         * @return void
         *
         * @throws Zend_Db_Profiler_Exception
         */
        public function queryEnd($queryId)
        {
        }
        /**
         * @return void
         */
        public function updateMessageLabel()
        {
        }
    }
    class Zend_Db_Profiler_Query
    {
        /**
         * @var string
         */
        public $_query;
        /**
         * @var int
         */
        public $_queryType;
        /**
         * @var float
         */
        public $_startedMicrotime;
        /**
         * @var int
         */
        public $_endedMicrotime;
        /**
         * @var array<array-key, mixed>
         */
        public $_boundParams;
        /**
         * @param string $query
         * @param int $queryType
         *
         * @return void
         */
        public function __construct($query, $queryType)
        {
        }
        /**
         * @return void
         */
        public function __clone()
        {
        }
        /**
         * @return void
         */
        public function start()
        {
        }
        /**
         * @return void
         */
        public function end()
        {
        }
        /**
         * @return bool
         */
        public function hasEnded()
        {
        }
        /**
         * @return string
         */
        public function getQuery()
        {
        }
        /**
         * @return int
         */
        public function getQueryType()
        {
        }
        /**
         * @param string $param
         * @param mixed $variable
         *
         * @return void
         */
        public function bindParam($param, $variable)
        {
        }
        /**
         * @return void
         */
        public function bindParams(array $params)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryParams()
        {
        }
        /**
         * @return false|float
         */
        public function getElapsedSecs()
        {
        }
        /**
         * @return bool|float
         */
        public function getStartedMicrotime()
        {
        }
    }
    class Zend_Db_Select
    {
        public const DISTINCT = 'distinct';
        public const COLUMNS = 'columns';
        public const FROM = 'from';
        public const UNION = 'union';
        public const WHERE = 'where';
        public const GROUP = 'group';
        public const HAVING = 'having';
        public const ORDER = 'order';
        public const LIMIT_COUNT = 'limitcount';
        public const LIMIT_OFFSET = 'limitoffset';
        public const FOR_UPDATE = 'forupdate';
        public const INNER_JOIN = 'inner join';
        public const LEFT_JOIN = 'left join';
        public const RIGHT_JOIN = 'right join';
        public const FULL_JOIN = 'full join';
        public const CROSS_JOIN = 'cross join';
        public const NATURAL_JOIN = 'natural join';
        public const SQL_WILDCARD = '*';
        public const SQL_SELECT = 'SELECT';
        public const SQL_UNION = 'UNION';
        public const SQL_UNION_ALL = 'UNION ALL';
        public const SQL_FROM = 'FROM';
        public const SQL_WHERE = 'WHERE';
        public const SQL_DISTINCT = 'DISTINCT';
        public const SQL_GROUP_BY = 'GROUP BY';
        public const SQL_ORDER_BY = 'ORDER BY';
        public const SQL_HAVING = 'HAVING';
        public const SQL_FOR_UPDATE = 'FOR UPDATE';
        public const SQL_AND = 'AND';
        public const SQL_AS = 'AS';
        public const SQL_OR = 'OR';
        public const SQL_ON = 'ON';
        public const SQL_ASC = 'ASC';
        public const SQL_DESC = 'DESC';
        public const REGEX_COLUMN_EXPR = '/^([\\w]*\\s*\\(([^\\(\\)]|(?1))*\\))$/';
        public const REGEX_COLUMN_EXPR_ORDER = '/^([\\w]+\\s*\\(([^\\(\\)]|(?1))*\\))$/';
        public const REGEX_COLUMN_EXPR_GROUP = '/^([\\w]+\\s*\\(([^\\(\\)]|(?1))*\\))$/';
        public const REGEX_SQL_COMMENTS = '@
    (([\'"]).*?[^\\\\]\\2) # $1 : Skip single & double quoted expressions
    |(                   # $3 : Match comments
        (?:\\#|--).*?$    # - Single line comments
        |                # - Multi line (nested) comments
         /\\*             #   . comment open marker
            (?: [^/*]    #   . non comment-marker characters
                |/(?!\\*) #   . ! not a comment open
                |\\*(?!/) #   . ! not a comment close
                |(?R)    #   . recursive case
            )*           #   . repeat eventually
        \\*\\/             #   . comment close marker
    )\\s*                 # Trim after comments
    |(?<=;)\\s+           # Trim after semi-colon
    @msx';
        /**
         * @var array<array-key, mixed>
         */
        public $_bind;
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_adapter;
        /**
         * @var array<array-key, mixed>
         */
        public static $_partsInit;
        /**
         * @var array<array-key, mixed>
         */
        public static $_joinTypes;
        /**
         * @var array<array-key, mixed>
         */
        public static $_unionTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_parts;
        /**
         * @var array<array-key, mixed>
         */
        public $_tableCols;
        /**
         * @param Zend_Db_Adapter_Abstract $adapter
         */
        public function __construct(\Zend_Db_Adapter_Abstract $adapter)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getBind()
        {
        }
        /**
         * @param mixed $bind
         *
         * @return Zend_Db_Select
         */
        public function bind($bind)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Db_Select
         */
        public function distinct($flag = true)
        {
        }
        /**
         * @param Zend_Db_Expr|Zend_Db_Select|array<array-key, mixed>|string $name
         * @param Zend_Db_Expr|array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function from($name, $cols = '*', $schema = null)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $cols
         * @param null|string $correlationName
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $correlationName
         */
        public function columns($cols = '*', $correlationName = null)
        {
        }
        /**
         * @param array<array-key, mixed> $select
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $select
         * @psalm-taint-sink sql $type
         */
        public function union($select = array(), $type)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $name
         * @param string $cond
         * @param array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function join($name, $cond, $cols, $schema = null)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $name
         * @param string $cond
         * @param array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function joinInner($name, $cond, $cols, $schema = null)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $name
         * @param string $cond
         * @param array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function joinLeft($name, $cond, $cols, $schema = null)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $name
         * @param string $cond
         * @param array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function joinRight($name, $cond, $cols, $schema = null)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $name
         * @param string $cond
         * @param array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function joinFull($name, $cond, $cols, $schema = null)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $name
         * @param array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function joinCross($name, $cols, $schema = null)
        {
        }
        /**
         * @param Zend_Db_Expr|array<array-key, mixed>|string $name
         * @param array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function joinNatural($name, $cols, $schema = null)
        {
        }
        /**
         * @param string|Zend_Db_Expr $cond
         * @param mixed|null $value
         * @param int|null $type
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $value
         * @psalm-taint-sink sql $type
         */
        public function where($cond, $value = null, $type = null)
        {
        }
        /**
         * @param string|Zend_Db_Expr $cond
         * @param mixed|null $value
         * @param int|null $type
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $value
         * @psalm-taint-sink sql $type
         */
        public function orWhere($cond, $value = null, $type = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $spec
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $spec
         */
        public function group($spec)
        {
        }
        /**
         * @param string $cond
         * @param mixed|null $value
         * @param int|null $type
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $value
         * @psalm-taint-sink sql $type
         */
        public function having($cond, $value = null, $type = null)
        {
        }
        /**
         * @param string $cond
         * @param mixed|null $value
         * @param int|null $type
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $value
         * @psalm-taint-sink sql $type
         */
        public function orHaving($cond, $value = null, $type = null)
        {
        }
        /**
         * @param mixed $spec
         *
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $spec
         */
        public function order($spec)
        {
        }
        /**
         * @param int|null $count
         * @param int|null $offset
         *
         * @return Zend_Db_Select
         */
        public function limit($count = null, $offset = null)
        {
        }
        /**
         * @param int $page
         * @param int $rowCount
         *
         * @return Zend_Db_Select
         */
        public function limitPage($page, $rowCount)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Db_Select
         */
        public function forUpdate($flag = true)
        {
        }
        /**
         * @param string $part
         *
         * @return mixed
         *
         * @throws Zend_Db_Select_Exception
         */
        public function getPart($part)
        {
        }
        /**
         * @param int|null $fetchMode
         * @param mixed $bind
         *
         * @return PDOStatement|Zend_Db_Statement
         */
        public function query($fetchMode = null, $bind = array())
        {
        }
        /**
         * @return null|string
         */
        public function assemble()
        {
        }
        /**
         * @param null|string $part
         *
         * @return Zend_Db_Select
         */
        public function reset($part = null)
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function getAdapter()
        {
        }
        /**
         * @param null|string $type
         * @param Zend_Db_Expr|array<array-key, mixed>|string $name
         * @param string $cond
         * @param array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Select
         *
         * @throws Zend_Db_Select_Exception
         * @psalm-taint-sink sql $type
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function _join($type, $name, $cond, $cols, $schema = null)
        {
        }
        /**
         * @return Zend_Db_Select
         * @psalm-taint-sink sql $type
         * @psalm-taint-sink sql $name
         * @psalm-taint-sink sql $cond
         * @psalm-taint-sink sql $cols
         * @psalm-taint-sink sql $schema
         */
        public function _joinUsing($type, $name, $cond, $cols = '*', $schema = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $name
         *
         * @return string
         */
        public function _uniqueCorrelation($name)
        {
        }
        /**
         * @param array<array-key, mixed>|string $cols
         *
         * @return void
         */
        public function _tableCols($correlationName, $cols, $afterCorrelationName = null)
        {
        }
        /**
         * @param string $condition
         * @param mixed|null $value
         * @param null|string $type
         * @param bool $bool
         *
         * @return string
         * @psalm-taint-sink sql $condition
         * @psalm-taint-sink sql $value
         * @psalm-taint-sink sql $type
         */
        public function _where($condition, $value = null, $type = null, $bool = true)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getDummyTable()
        {
        }
        /**
         * @param null|string $schema
         *
         * @return null|string
         */
        public function _getQuotedSchema($schema = null)
        {
        }
        /**
         * @param string $tableName
         * @param null|string $correlationName
         *
         * @return string
         */
        public function _getQuotedTable($tableName, $correlationName = null)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderDistinct($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return null|string
         */
        public function _renderColumns($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderFrom($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderUnion($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderWhere($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderGroup($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderHaving($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderOrder($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderLimitoffset($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _renderForupdate($sql)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return Zend_Db_Select
         *
         * @throws Zend_Db_Select_Exception
         */
        public function __call($method, array $args)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Db_Select_Exception extends \Zend_Db_Exception
    {
    }
    class Zend_Db_Statement implements \Zend_Db_Statement_Interface
    {
        /**
         * @var object|resource
         */
        public $_stmt;
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_adapter;
        /**
         * @var int
         */
        public $_fetchMode;
        /**
         * @var array<array-key, mixed>
         */
        public $_attribute;
        /**
         * @var array<array-key, mixed>
         */
        public $_bindColumn;
        /**
         * @var array<array-key, mixed>
         */
        public $_bindParam;
        /**
         * @var array<array-key, mixed>
         */
        public $_sqlSplit;
        /**
         * @var array<array-key, mixed>
         */
        public $_sqlParam;
        /**
         * @var Zend_Db_Profiler_Query
         */
        public $_queryId;
        /**
         * @param Zend_Db_Adapter_Abstract $adapter
         * @param mixed $sql
         * @psalm-taint-sink sql $sql
         */
        public function __construct($adapter, $sql)
        {
        }
        /**
         * @return void
         * @psalm-taint-escape sql
         */
        public function _prepare($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return void
         */
        public function _parseParameters($sql)
        {
        }
        /**
         * @param string $sql
         *
         * @return string
         */
        public function _stripQuoted($sql)
        {
        }
        /**
         * @param string $column
         * @param mixed $param
         * @param mixed|null $type
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindColumn($column, &$param, $type = null)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindParam($parameter, &$variable, $type = null, $length = null, $options = null)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $value
         * @param mixed|null $type
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindValue($parameter, $value, $type = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $params
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function execute(?array $params = null)
        {
        }
        /**
         * @param int|null $style
         * @param int|null $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = null)
        {
        }
        /**
         * @param int $col
         *
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchColumn($col = 0)
        {
        }
        /**
         * @param string $class
         * @param array<array-key, mixed> $config
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchObject($class = 'stdClass', array $config = array())
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function getAttribute($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $val
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function setAttribute($key, $val)
        {
        }
        /**
         * @param int $mode
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function setFetchMode($mode)
        {
        }
        /**
         * @param array<array-key, mixed> $row
         *
         * @return bool
         */
        public function _fetchBound($row)
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function getAdapter()
        {
        }
        /**
         * @return unknown_type
         */
        public function getDriverStatement()
        {
        }
    }
    class Zend_Db_Statement_Db2 extends \Zend_Db_Statement
    {
        public $_keys;
        public $_values;
        /**
         * @param string $sql
         *
         * @return void
         *
         * @throws Zend_Db_Statement_Db2_Exception
         * @psalm-taint-escape sql
         */
        public function _prepare($sql)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Db2_Exception
         */
        public function _bindParam($parameter, &$variable, $type = null, $length = null, $options = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function closeCursor()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function columnCount()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorCode()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorInfo()
        {
        }
        /**
         * @param array<array-key, mixed>|null $params
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Db2_Exception
         */
        public function _execute(?array $params = null)
        {
        }
        /**
         * @param int|null $style
         * @param int|null $cursor
         * @param int|null $offset
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Db2_Exception
         */
        public function fetch($style = null, $cursor = null, $offset = null)
        {
        }
        /**
         * @param string $class
         * @param array<array-key, mixed> $config
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchObject($class = 'stdClass', array $config = array())
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Db2_Exception
         */
        public function nextRowset()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function rowCount()
        {
        }
        /**
         * @param int|null $style
         * @param int|null $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = null)
        {
        }
    }
    class Zend_Db_Statement_Db2_Exception extends \Zend_Db_Statement_Exception
    {
        /**
         * @var string
         */
        public $code;
        /**
         * @var string
         */
        public $message;
        /**
         * @param string $msg
         * @param string $state
         */
        public function __construct($msg = 'unknown exception', $state = '00000')
        {
        }
    }
    class Zend_Db_Statement_Exception extends \Zend_Db_Exception
    {
        /**
         * @return bool
         */
        public function hasChainedException()
        {
        }
        /**
         * @return Exception|null
         */
        public function getChainedException()
        {
        }
    }
    interface Zend_Db_Statement_Interface
    {
        /**
         * @param string $column
         * @param mixed $param
         * @param mixed|null $type
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindColumn($column, &$param, $type = null);
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindParam($parameter, &$variable, $type = null, $length = null, $options = null);
        /**
         * @param mixed $parameter
         * @param mixed $value
         * @param mixed|null $type
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindValue($parameter, $value, $type = null);
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function closeCursor();
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function columnCount();
        /**
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorCode();
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorInfo();
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function execute(array $params = array());
        /**
         * @param int|null $style
         * @param int|null $cursor
         * @param int|null $offset
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetch($style = null, $cursor = null, $offset = null);
        /**
         * @param int|null $style
         * @param int|null $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = null);
        /**
         * @param int $col
         *
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchColumn($col = 0);
        /**
         * @param string $class
         * @param array<array-key, mixed> $config
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchObject($class = 'stdClass', array $config = array());
        /**
         * @param string $key
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function getAttribute($key);
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function nextRowset();
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function rowCount();
        /**
         * @param string $key
         * @param mixed $val
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function setAttribute($key, $val);
        /**
         * @param int $mode
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function setFetchMode($mode);
    }
    class Zend_Db_Statement_Mysqli extends \Zend_Db_Statement
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_keys;
        /**
         * @var array<array-key, mixed>
         */
        public $_values;
        /**
         * @var array<array-key, mixed>
         */
        public $_meta;
        /**
         * @param string $sql
         *
         * @return void
         *
         * @throws Zend_Db_Statement_Mysqli_Exception
         * @psalm-taint-escape sql
         */
        public function _prepare($sql)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Mysqli_Exception
         */
        public function _bindParam($parameter, &$variable, $type = null, $length = null, $options = null)
        {
        }
        /**
         * @return bool
         */
        public function close()
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function closeCursor()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function columnCount()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorCode()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorInfo()
        {
        }
        /**
         * @param array<array-key, mixed>|null $params
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Mysqli_Exception
         */
        public function _execute(?array $params = null)
        {
        }
        /**
         * @param int|null $style
         * @param int|null $cursor
         * @param int|null $offset
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Mysqli_Exception
         */
        public function fetch($style = null, $cursor = null, $offset = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Mysqli_Exception
         */
        public function nextRowset()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function rowCount()
        {
        }
    }
    class Zend_Db_Statement_Mysqli_Exception extends \Zend_Db_Statement_Exception
    {
    }
    class Zend_Db_Statement_Oracle extends \Zend_Db_Statement
    {
        public $_keys;
        public $_values;
        /**
         * @var bool
         */
        public $_lobAsString;
        /**
         * @param string $lob_as_string
         *
         * @return Zend_Db_Statement_Oracle
         */
        public function setLobAsString($lob_as_string)
        {
        }
        /**
         * @return bool
         */
        public function getLobAsString()
        {
        }
        /**
         * @param string $sql
         *
         * @return void
         *
         * @throws Zend_Db_Statement_Oracle_Exception
         */
        public function _prepare($sql)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function _bindParam($parameter, &$variable, $type = null, $length = null, $options = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function closeCursor()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function columnCount()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorCode()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorInfo()
        {
        }
        /**
         * @param array<array-key, mixed>|null $params
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function _execute(?array $params = null)
        {
        }
        /**
         * @param int|null $style
         * @param int|null $cursor
         * @param int|null $offset
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetch($style = null, $cursor = null, $offset = null)
        {
        }
        /**
         * @param int|null $style
         * @param int $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = 0)
        {
        }
        /**
         * @param int $col
         *
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchColumn($col = 0)
        {
        }
        /**
         * @param string $class
         * @param array<array-key, mixed> $config
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchObject($class = 'stdClass', array $config = array())
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function nextRowset()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function rowCount()
        {
        }
    }
    class Zend_Db_Statement_Oracle_Exception extends \Zend_Db_Statement_Exception
    {
        public $message = 'Unknown exception';
        public $code = 0;
        public function __construct($error = null, $code = 0)
        {
        }
    }
    class Zend_Db_Statement_Pdo extends \Zend_Db_Statement
    {
        /**
         * @var int
         */
        public $_fetchMode;
        /**
         * @param string $sql
         *
         * @return void
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function _prepare($sql)
        {
        }
        /**
         * @param string $column
         * @param mixed $param
         * @param mixed|null $type
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindColumn($column, &$param, $type = null)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function _bindParam($parameter, &$variable, $type = null, $length = null, $options = null)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $value
         * @param mixed|null $type
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindValue($parameter, $value, $type = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function closeCursor()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function columnCount()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorCode()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorInfo()
        {
        }
        /**
         * @param array<array-key, mixed>|null $params
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function _execute(?array $params = null)
        {
        }
        /**
         * @param int|null $style
         * @param int|null $cursor
         * @param int|null $offset
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetch($style = null, $cursor = null, $offset = null)
        {
        }
        /**
         * @return IteratorIterator
         */
        public function getIterator()
        {
        }
        /**
         * @param int|null $style
         * @param int|null $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = null)
        {
        }
        /**
         * @param int $col
         *
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchColumn($col = 0)
        {
        }
        /**
         * @param string $class
         * @param array<array-key, mixed> $config
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchObject($class = 'stdClass', array $config = array())
        {
        }
        /**
         * @param int $key
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function getAttribute($key)
        {
        }
        /**
         * @param int $column
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function getColumnMeta($column)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function nextRowset()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function rowCount()
        {
        }
        /**
         * @param string $key
         * @param mixed $val
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function setAttribute($key, $val)
        {
        }
        /**
         * @param int $mode
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function setFetchMode($mode)
        {
        }
    }
    class Zend_Db_Statement_Pdo_Ibm extends \Zend_Db_Statement_Pdo
    {
        /**
         * @param int|null $style
         * @param int|null $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = null)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function _bindParam($parameter, &$variable, $type = null, $length = null, $options = null)
        {
        }
    }
    class Zend_Db_Statement_Pdo_Oci extends \Zend_Db_Statement_Pdo
    {
        /**
         * @param int|null $style
         * @param int|null $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = null)
        {
        }
        /**
         * @param int|null $style
         * @param int|null $cursor
         * @param int|null $offset
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetch($style = null, $cursor = null, $offset = null)
        {
        }
    }
    class Zend_Db_Statement_Sqlsrv extends \Zend_Db_Statement
    {
        public $_originalSQL;
        public $_keys;
        public $_executed = false;
        /**
         * @param string $sql
         *
         * @return void
         *
         * @throws Zend_Db_Statement_Sqlsrv_Exception
         * @psalm-taint-escape sql
         */
        public function _prepare($sql)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function _bindParam($parameter, &$variable, $type = null, $length = null, $options = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function closeCursor()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function columnCount()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorCode()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorInfo()
        {
        }
        /**
         * @param array<array-key, mixed>|null $params
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function _execute(?array $params = null)
        {
        }
        /**
         * @param int|null $style
         * @param int|null $cursor
         * @param int|null $offset
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetch($style = null, $cursor = null, $offset = null)
        {
        }
        /**
         * @param int $col
         *
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchColumn($col = 0)
        {
        }
        /**
         * @param string $class
         * @param array<array-key, mixed> $config
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchObject($class = 'stdClass', array $config = array())
        {
        }
        /**
         * @param int $column
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Sqlsrv_Exception
         */
        public function getColumnMeta($column)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function nextRowset()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function rowCount()
        {
        }
        /**
         * @param int|null $style
         * @param int|null $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = null)
        {
        }
    }
    class Zend_Db_Statement_Sqlsrv_Exception extends \Zend_Db_Statement_Exception
    {
        /**
         * @param array<array-key, mixed>|null|string $message
         * @param int|null $code
         */
        public function __construct($message = null, $code = 0)
        {
        }
    }
    class Zend_Db_Table extends \Zend_Db_Table_Abstract
    {
        public const ADAPTER = 'db';
        public const DEFINITION = 'definition';
        public const DEFINITION_CONFIG_NAME = 'definitionConfigName';
        public const SCHEMA = 'schema';
        public const NAME = 'name';
        public const PRIMARY = 'primary';
        public const COLS = 'cols';
        public const METADATA = 'metadata';
        public const METADATA_CACHE = 'metadataCache';
        public const METADATA_CACHE_IN_CLASS = 'metadataCacheInClass';
        public const ROW_CLASS = 'rowClass';
        public const ROWSET_CLASS = 'rowsetClass';
        public const REFERENCE_MAP = 'referenceMap';
        public const DEPENDENT_TABLES = 'dependentTables';
        public const SEQUENCE = 'sequence';
        public const COLUMNS = 'columns';
        public const REF_TABLE_CLASS = 'refTableClass';
        public const REF_COLUMNS = 'refColumns';
        public const ON_DELETE = 'onDelete';
        public const ON_UPDATE = 'onUpdate';
        public const CASCADE = 'cascade';
        public const CASCADE_RECURSE = 'cascadeRecurse';
        public const RESTRICT = 'restrict';
        public const SET_NULL = 'setNull';
        public const DEFAULT_NONE = 'defaultNone';
        public const DEFAULT_CLASS = 'defaultClass';
        public const DEFAULT_DB = 'defaultDb';
        public const SELECT_WITH_FROM_PART = true;
        public const SELECT_WITHOUT_FROM_PART = false;
        /**
         * @param array<array-key, mixed>|string $config
         * @param Zend_Db_Table_Definition|array<array-key, mixed>|null $definition
         */
        public function __construct($config = array(), $definition = null)
        {
        }
    }
    class Zend_Db_Table_Abstract
    {
        public const ADAPTER = 'db';
        public const DEFINITION = 'definition';
        public const DEFINITION_CONFIG_NAME = 'definitionConfigName';
        public const SCHEMA = 'schema';
        public const NAME = 'name';
        public const PRIMARY = 'primary';
        public const COLS = 'cols';
        public const METADATA = 'metadata';
        public const METADATA_CACHE = 'metadataCache';
        public const METADATA_CACHE_IN_CLASS = 'metadataCacheInClass';
        public const ROW_CLASS = 'rowClass';
        public const ROWSET_CLASS = 'rowsetClass';
        public const REFERENCE_MAP = 'referenceMap';
        public const DEPENDENT_TABLES = 'dependentTables';
        public const SEQUENCE = 'sequence';
        public const COLUMNS = 'columns';
        public const REF_TABLE_CLASS = 'refTableClass';
        public const REF_COLUMNS = 'refColumns';
        public const ON_DELETE = 'onDelete';
        public const ON_UPDATE = 'onUpdate';
        public const CASCADE = 'cascade';
        public const CASCADE_RECURSE = 'cascadeRecurse';
        public const RESTRICT = 'restrict';
        public const SET_NULL = 'setNull';
        public const DEFAULT_NONE = 'defaultNone';
        public const DEFAULT_CLASS = 'defaultClass';
        public const DEFAULT_DB = 'defaultDb';
        public const SELECT_WITH_FROM_PART = true;
        public const SELECT_WITHOUT_FROM_PART = false;
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public static $_defaultDb;
        /**
         * @var unknown_type
         */
        public $_definition;
        /**
         * @var string
         */
        public $_definitionConfigName;
        /**
         * @var Zend_Cache_Core
         */
        public static $_defaultMetadataCache;
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_db;
        /**
         * @var array<array-key, mixed>
         */
        public $_schema;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var array<array-key, mixed>
         */
        public $_cols;
        /**
         * @var mixed
         */
        public $_primary;
        /**
         * @var int
         */
        public $_identity;
        /**
         * @var mixed
         */
        public $_sequence;
        /**
         * @var array<array-key, mixed>
         */
        public $_metadata;
        /**
         * @var Zend_Cache_Core
         */
        public $_metadataCache;
        /**
         * @var bool
         */
        public $_metadataCacheInClass;
        /**
         * @var string
         */
        public $_rowClass;
        /**
         * @var string
         */
        public $_rowsetClass;
        /**
         * @var array<array-key, mixed>
         */
        public $_referenceMap;
        /**
         * @var array<array-key, mixed>
         */
        public $_dependentTables;
        public $_defaultSource = 'defaultNone';
        public $_defaultValues = array();
        /**
         * @param mixed $config
         *
         * @return void
         */
        public function __construct($config = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Db_Table_Definition $definition
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setDefinition(\Zend_Db_Table_Definition $definition)
        {
        }
        /**
         * @return Zend_Db_Table_Definition|null
         */
        public function getDefinition()
        {
        }
        /**
         * @return Zend_Db_Table_Abstract
         */
        public function setDefinitionConfigName($definitionConfigName)
        {
        }
        /**
         * @return string
         */
        public function getDefinitionConfigName()
        {
        }
        /**
         * @param string $classname
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setRowClass($classname)
        {
        }
        /**
         * @return string
         */
        public function getRowClass()
        {
        }
        /**
         * @param string $classname
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setRowsetClass($classname)
        {
        }
        /**
         * @return string
         */
        public function getRowsetClass()
        {
        }
        /**
         * @param string $ruleKey
         * @param array<array-key, mixed>|string $columns
         * @param string $refTableClass
         * @param array<array-key, mixed>|string $refColumns
         * @param null|string $onDelete
         * @param null|string $onUpdate
         *
         * @return Zend_Db_Table_Abstract
         */
        public function addReference($ruleKey, $columns, $refTableClass, $refColumns, $onDelete = null, $onUpdate = null)
        {
        }
        /**
         * @param array<array-key, mixed> $referenceMap
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setReferences(array $referenceMap)
        {
        }
        /**
         * @param string $tableClassname
         * @param null|string $ruleKey
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Table_Exception
         */
        public function getReference($tableClassname, $ruleKey = null)
        {
        }
        /**
         * @param array<array-key, mixed> $dependentTables
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setDependentTables(array $dependentTables)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDependentTables()
        {
        }
        /**
         * @param string $defaultSource
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setDefaultSource($defaultSource)
        {
        }
        /**
         * @return unknown
         */
        public function getDefaultSource()
        {
        }
        /**
         * @param array<array-key, mixed> $defaultValues
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setDefaultValues(array $defaultValues)
        {
        }
        public function getDefaultValues()
        {
        }
        /**
         * @param mixed|null $db
         *
         * @return void
         */
        public static function setDefaultAdapter($db = null)
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public static function getDefaultAdapter()
        {
        }
        /**
         * @param mixed $db
         *
         * @return Zend_Db_Table_Abstract
         */
        public function _setAdapter($db)
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function getAdapter()
        {
        }
        /**
         * @param mixed $db
         *
         * @return Zend_Db_Adapter_Abstract
         *
         * @throws Zend_Db_Table_Exception
         */
        public static function _setupAdapter($db)
        {
        }
        /**
         * @param mixed|null $metadataCache
         *
         * @return void
         */
        public static function setDefaultMetadataCache($metadataCache = null)
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public static function getDefaultMetadataCache()
        {
        }
        /**
         * @param mixed $metadataCache
         *
         * @return Zend_Db_Table_Abstract
         */
        public function _setMetadataCache($metadataCache)
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public function getMetadataCache()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Db_Table_Abstract
         */
        public function setMetadataCacheInClass($flag)
        {
        }
        /**
         * @return bool
         */
        public function metadataCacheInClass()
        {
        }
        /**
         * @param mixed $metadataCache
         *
         * @return Zend_Cache_Core
         *
         * @throws Zend_Db_Table_Exception
         */
        public static function _setupMetadataCache($metadataCache)
        {
        }
        /**
         * @param mixed $sequence
         *
         * @return Zend_Db_Table_Adapter_Abstract
         */
        public function _setSequence($sequence)
        {
        }
        /**
         * @return void
         */
        public function _setup()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Table_Exception
         */
        public function _setupDatabaseAdapter()
        {
        }
        /**
         * @return void
         */
        public function _setupTableName()
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Table_Exception
         */
        public function _setupMetadata()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getCols()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Db_Table_Exception
         */
        public function _setupPrimaryKey()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getReferenceMapNormalized()
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param null|string $key
         *
         * @return mixed
         *
         * @throws Zend_Db_Table_Exception
         */
        public function info($key = null)
        {
        }
        /**
         * @param bool $withFromPart
         *
         * @return Zend_Db_Table_Select
         */
        public function select($withFromPart)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return mixed
         */
        public function insert(array $data)
        {
        }
        /**
         * @param string $column
         *
         * @return bool
         *
         * @throws Zend_Db_Table_Exception
         */
        public function isIdentity($column)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param array<array-key, mixed>|string $where
         *
         * @return int
         */
        public function update(array $data, $where)
        {
        }
        /**
         * @param string $parentTableClassname
         * @param array<array-key, mixed> $oldPrimaryKey
         * @param array<array-key, mixed> $newPrimaryKey
         *
         * @return int
         */
        public function _cascadeUpdate($parentTableClassname, array $oldPrimaryKey, array $newPrimaryKey)
        {
        }
        /**
         * @param array<array-key, mixed>|string $where
         *
         * @return int
         */
        public function delete($where)
        {
        }
        /**
         * @param string $parentTableClassname
         * @param array<array-key, mixed> $primaryKey
         *
         * @return int
         */
        public function _cascadeDelete($parentTableClassname, array $primaryKey)
        {
        }
        /**
         * @return Zend_Db_Table_Rowset_Abstract
         *
         * @throws Zend_Db_Table_Exception
         */
        public function find()
        {
        }
        /**
         * @param Zend_Db_Table_Select|array<array-key, mixed>|null|string $where
         * @param array<array-key, mixed>|null|string $order
         * @param int|null $count
         * @param int|null $offset
         *
         * @return Zend_Db_Table_Rowset_Abstract
         */
        public function fetchAll($where = null, $order = null, $count = null, $offset = null)
        {
        }
        /**
         * @param Zend_Db_Table_Select|array<array-key, mixed>|null|string $where
         * @param array<array-key, mixed>|null|string $order
         * @param int|null $offset
         *
         * @return Zend_Db_Table_Row_Abstract|null
         */
        public function fetchRow($where = null, $order = null, $offset = null)
        {
        }
        /**
         * @return Zend_Db_Table_Row_Abstract
         */
        public function fetchNew()
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param null|string $defaultSource
         *
         * @return Zend_Db_Table_Row_Abstract
         */
        public function createRow(array $data = array(), $defaultSource = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $where
         *
         * @return Zend_Db_Table_Select
         */
        public function _where(\Zend_Db_Table_Select $select, $where)
        {
        }
        /**
         * @param array<array-key, mixed>|string $order
         *
         * @return Zend_Db_Table_Select
         */
        public function _order(\Zend_Db_Table_Select $select, $order)
        {
        }
        /**
         * @param Zend_Db_Table_Select $select
         *
         * @return array<array-key, mixed>
         */
        public function _fetch(\Zend_Db_Table_Select $select)
        {
        }
        /**
         * @param string $tableName
         * @param Zend_Db_Table_Abstract|null $referenceTable
         *
         * @return Zend_Db_Table_Abstract
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public static function getTableFromString($tableName, ?\Zend_Db_Table_Abstract $referenceTable = null)
        {
        }
    }
    class Zend_Db_Table_Definition
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_tableConfigs;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Db_Table_Definition
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Db_Table_Definition
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $tableName
         * @param array<array-key, mixed> $tableConfig
         *
         * @return Zend_Db_Table_Definition
         */
        public function setTableConfig($tableName, array $tableConfig)
        {
        }
        /**
         * @param string $tableName
         *
         * @return array<array-key, mixed>
         */
        public function getTableConfig($tableName)
        {
        }
        /**
         * @param string $tableName
         */
        public function removeTableConfig($tableName)
        {
        }
        /**
         * @param string $tableName
         *
         * @return bool
         */
        public function hasTableConfig($tableName)
        {
        }
    }
    class Zend_Db_Table_Exception extends \Zend_Db_Exception
    {
    }
    class Zend_Db_Table_Row extends \Zend_Db_Table_Row_Abstract
    {
    }
    class Zend_Db_Table_Row_Abstract implements \ArrayAccess, \IteratorAggregate
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var array<array-key, mixed>
         */
        public $_cleanData;
        /**
         * @var array<array-key, mixed>
         */
        public $_modifiedFields;
        /**
         * @var Zend_Db_Table_Abstract
         */
        public $_table;
        /**
         * @var bool
         */
        public $_connected;
        /**
         * @var bool
         */
        public $_readOnly;
        /**
         * @var string
         */
        public $_tableClass;
        /**
         * @var array<array-key, mixed>
         */
        public $_primary;
        /**
         * @param array<array-key, mixed> $config
         *
         * @return void
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function __construct(array $config = array())
        {
        }
        /**
         * @param string $columnName
         *
         * @return string
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function _transformColumn($columnName)
        {
        }
        /**
         * @param string $columnName
         *
         * @return string
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function __get($columnName)
        {
        }
        /**
         * @param string $columnName
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function __set($columnName, $value)
        {
        }
        /**
         * @param string $columnName
         *
         * @return Zend_Db_Table_Row_Abstract
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function __unset($columnName)
        {
        }
        /**
         * @param string $columnName
         *
         * @return bool
         */
        public function __isset($columnName)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
        /**
         * @param string $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param string $offset
         *
         * @return string
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param mixed $value
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @return Zend_Db_Table_Abstract|null
         */
        public function getTable()
        {
        }
        /**
         * @param Zend_Db_Table_Abstract|null $table
         *
         * @return bool
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function setTable(?\Zend_Db_Table_Abstract $table = null)
        {
        }
        /**
         * @return string
         */
        public function getTableClass()
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @return bool
         */
        public function isReadOnly()
        {
        }
        /**
         * @param bool $flag
         *
         * @return bool
         */
        public function setReadOnly($flag)
        {
        }
        /**
         * @return Zend_Db_Table_Select
         */
        public function select()
        {
        }
        /**
         * @return mixed
         */
        public function save()
        {
        }
        /**
         * @return mixed
         */
        public function _doInsert()
        {
        }
        /**
         * @return mixed
         */
        public function _doUpdate()
        {
        }
        /**
         * @return int
         */
        public function delete()
        {
        }
        public function getIterator()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return Zend_Db_Table_Row_Abstract
         */
        public function setFromArray(array $data)
        {
        }
        /**
         * @return void
         */
        public function refresh()
        {
        }
        /**
         * @return Zend_Db_Table_Abstract
         */
        public function _getTable()
        {
        }
        /**
         * @param bool $useDirty
         *
         * @return array<array-key, mixed>
         */
        public function _getPrimaryKey($useDirty = true)
        {
        }
        /**
         * @param bool $useDirty
         *
         * @return array<array-key, mixed>
         */
        public function getPrimaryKey($useDirty = true)
        {
        }
        /**
         * @param bool $useDirty
         *
         * @return array<array-key, mixed>
         */
        public function _getWhereQuery($useDirty = true)
        {
        }
        /**
         * @return void
         */
        public function _refresh()
        {
        }
        /**
         * @return void
         */
        public function _insert()
        {
        }
        /**
         * @return void
         */
        public function _postInsert()
        {
        }
        /**
         * @return void
         */
        public function _update()
        {
        }
        /**
         * @return void
         */
        public function _postUpdate()
        {
        }
        /**
         * @return void
         */
        public function _delete()
        {
        }
        /**
         * @return void
         */
        public function _postDelete()
        {
        }
        /**
         * @param Zend_Db_Table_Abstract $dependentTable
         * @param Zend_Db_Table_Abstract $parentTable
         * @param string $ruleKey
         *
         * @return array<array-key, mixed>
         */
        public function _prepareReference(\Zend_Db_Table_Abstract $dependentTable, \Zend_Db_Table_Abstract $parentTable, $ruleKey)
        {
        }
        /**
         * @param Zend_Db_Table_Abstract|string $dependentTable
         *
         * @return Zend_Db_Table_Rowset_Abstract
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function findDependentRowset($dependentTable, $ruleKey = null, ?\Zend_Db_Table_Select $select = null)
        {
        }
        /**
         * @param Zend_Db_Table_Abstract|string $parentTable
         *
         * @return Zend_Db_Table_Row_Abstract
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function findParentRow($parentTable, $ruleKey = null, ?\Zend_Db_Table_Select $select = null)
        {
        }
        /**
         * @param Zend_Db_Table_Abstract|string $matchTable
         * @param Zend_Db_Table_Abstract|string $intersectionTable
         *
         * @return Zend_Db_Table_Rowset_Abstract
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function findManyToManyRowset($matchTable, $intersectionTable, $callerRefRule = null, $matchRefRule = null, ?\Zend_Db_Table_Select $select = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return Zend_Db_Table_Row_Abstract|Zend_Db_Table_Rowset_Abstract
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function __call($method, array $args)
        {
        }
        /**
         * @param string $tableName
         *
         * @return Zend_Db_Table_Abstract
         */
        public function _getTableFromString($tableName)
        {
        }
    }
    class Zend_Db_Table_Row_Exception extends \Zend_Db_Table_Exception
    {
    }
    class Zend_Db_Table_Rowset extends \Zend_Db_Table_Rowset_Abstract
    {
    }
    class Zend_Db_Table_Rowset_Abstract implements \SeekableIterator, \Countable, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var Zend_Db_Table_Abstract
         */
        public $_table;
        /**
         * @var bool
         */
        public $_connected;
        /**
         * @var string
         */
        public $_tableClass;
        /**
         * @var string
         */
        public $_rowClass;
        /**
         * @var int
         */
        public $_pointer;
        /**
         * @var int
         */
        public $_count;
        /**
         * @var array<array-key, mixed>
         */
        public $_rows;
        /**
         * @var bool
         */
        public $_stored;
        /**
         * @var bool
         */
        public $_readOnly;
        /**
         * @param array<array-key, mixed> $config
         */
        public function __construct(array $config)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @return Zend_Db_Table_Abstract
         */
        public function getTable()
        {
        }
        /**
         * @param Zend_Db_Table_Abstract $table
         *
         * @return bool
         *
         * @throws Zend_Db_Table_Row_Exception
         */
        public function setTable(\Zend_Db_Table_Abstract $table)
        {
        }
        /**
         * @return string
         */
        public function getTableClass()
        {
        }
        /**
         * @return Zend_Db_Table_Rowset_Abstract
         */
        public function rewind()
        {
        }
        /**
         * @return Zend_Db_Table_Row_Abstract
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @param int $position
         *
         * @return Zend_Db_Table_Rowset_Abstract
         *
         * @throws Zend_Db_Table_Rowset_Exception
         */
        public function seek($position)
        {
        }
        /**
         * @param string $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param string $offset
         *
         * @return Zend_Db_Table_Row_Abstract
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param mixed $value
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * @param int $position
         * @param bool $seek
         *
         * @return Zend_Db_Table_Row
         *
         * @throws Zend_Db_Table_Rowset_Exception
         */
        public function getRow($position, $seek = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        public function _loadAndReturnRow($position)
        {
        }
    }
    class Zend_Db_Table_Rowset_Exception extends \Zend_Db_Table_Exception
    {
    }
    class Zend_Db_Table_Select extends \Zend_Db_Select
    {
        public const DISTINCT = 'distinct';
        public const COLUMNS = 'columns';
        public const FROM = 'from';
        public const UNION = 'union';
        public const WHERE = 'where';
        public const GROUP = 'group';
        public const HAVING = 'having';
        public const ORDER = 'order';
        public const LIMIT_COUNT = 'limitcount';
        public const LIMIT_OFFSET = 'limitoffset';
        public const FOR_UPDATE = 'forupdate';
        public const INNER_JOIN = 'inner join';
        public const LEFT_JOIN = 'left join';
        public const RIGHT_JOIN = 'right join';
        public const FULL_JOIN = 'full join';
        public const CROSS_JOIN = 'cross join';
        public const NATURAL_JOIN = 'natural join';
        public const SQL_WILDCARD = '*';
        public const SQL_SELECT = 'SELECT';
        public const SQL_UNION = 'UNION';
        public const SQL_UNION_ALL = 'UNION ALL';
        public const SQL_FROM = 'FROM';
        public const SQL_WHERE = 'WHERE';
        public const SQL_DISTINCT = 'DISTINCT';
        public const SQL_GROUP_BY = 'GROUP BY';
        public const SQL_ORDER_BY = 'ORDER BY';
        public const SQL_HAVING = 'HAVING';
        public const SQL_FOR_UPDATE = 'FOR UPDATE';
        public const SQL_AND = 'AND';
        public const SQL_AS = 'AS';
        public const SQL_OR = 'OR';
        public const SQL_ON = 'ON';
        public const SQL_ASC = 'ASC';
        public const SQL_DESC = 'DESC';
        public const REGEX_COLUMN_EXPR = '/^([\\w]*\\s*\\(([^\\(\\)]|(?1))*\\))$/';
        public const REGEX_COLUMN_EXPR_ORDER = '/^([\\w]+\\s*\\(([^\\(\\)]|(?1))*\\))$/';
        public const REGEX_COLUMN_EXPR_GROUP = '/^([\\w]+\\s*\\(([^\\(\\)]|(?1))*\\))$/';
        public const REGEX_SQL_COMMENTS = '@
    (([\'"]).*?[^\\\\]\\2) # $1 : Skip single & double quoted expressions
    |(                   # $3 : Match comments
        (?:\\#|--).*?$    # - Single line comments
        |                # - Multi line (nested) comments
         /\\*             #   . comment open marker
            (?: [^/*]    #   . non comment-marker characters
                |/(?!\\*) #   . ! not a comment open
                |\\*(?!/) #   . ! not a comment close
                |(?R)    #   . recursive case
            )*           #   . repeat eventually
        \\*\\/             #   . comment close marker
    )\\s*                 # Trim after comments
    |(?<=;)\\s+           # Trim after semi-colon
    @msx';
        /**
         * @var array<array-key, mixed>
         */
        public $_info;
        /**
         * @var array<array-key, mixed>
         */
        public $_integrityCheck;
        /**
         * @var Zend_Db_Table_Abstract
         */
        public $_table;
        public function __construct(\Zend_Db_Table_Abstract $table)
        {
        }
        /**
         * @return Zend_Db_Table_Abstract
         */
        public function getTable()
        {
        }
        /**
         * @return Zend_Db_Select
         */
        public function setTable(\Zend_Db_Table_Abstract $table)
        {
        }
        /**
         * @return Zend_Db_Select
         */
        public function setIntegrityCheck($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function isReadOnly()
        {
        }
        /**
         * @param Zend_Db_Expr|Zend_Db_Table_Abstract|array<array-key, mixed>|string $name
         * @param Zend_Db_Expr|array<array-key, mixed>|string $cols
         * @param null|string $schema
         *
         * @return Zend_Db_Table_Select
         */
        public function from($name, $cols, $schema = null)
        {
        }
        /**
         * @return null|string
         */
        public function assemble()
        {
        }
    }
    class Zend_Db_Table_Select_Exception extends \Zend_Db_Select_Exception
    {
    }
    class Zend_Debug
    {
        /**
         * @var string
         */
        public static $_sapi;
        public static function getSapi()
        {
        }
        /**
         * @param string $sapi
         */
        public static function setSapi($sapi)
        {
        }
        /**
         * @param mixed $var
         * @param null|string $label
         * @param bool $echo
         *
         * @return string
         */
        public static function dump($var, $label = null, $echo = true)
        {
        }
    }
    class Zend_Dojo
    {
        public const CDN_BASE_AOL = 'http://o.aolcdn.com/dojo/';
        public const CDN_DOJO_PATH_AOL = '/dojo/dojo.xd.js';
        public const CDN_BASE_GOOGLE = 'http://ajax.googleapis.com/ajax/libs/dojo/';
        public const CDN_DOJO_PATH_GOOGLE = '/dojo/dojo.xd.js';
        /**
         * @param Zend_Form $form
         *
         * @return void
         */
        public static function enableForm(\Zend_Form $form)
        {
        }
        /**
         * @param Zend_View_Interface $view
         *
         * @return void
         */
        public static function enableView(\Zend_View_Interface $view)
        {
        }
    }
    class Zend_Dojo_BuildLayer
    {
        /**
         * @var bool
         */
        public $_consumeJavascript;
        /**
         * @var bool
         */
        public $_consumeOnLoad;
        /**
         * @var Zend_Dojo_View_Helper_Dojo_Container
         */
        public $_dojo;
        /**
         * @var string
         */
        public $_layerName;
        /**
         * @var string
         */
        public $_layerScriptPath;
        /**
         * @var array<array-key, mixed>
         */
        public $_profileOptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_profilePrefixes;
        /**
         * @var Zend_View_Interface
         */
        public $_view;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         *
         * @throws Zend_Dojo_Exception
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_View_Interface $view
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setView(\Zend_View_Interface $view)
        {
        }
        /**
         * @return Zend_View_Interface|null
         */
        public function getView()
        {
        }
        /**
         * @param Zend_Dojo_View_Helper_Dojo_Container $helper
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setDojoHelper(\Zend_Dojo_View_Helper_Dojo_Container $helper)
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         *
         * @throws Zend_Dojo_Exception
         */
        public function getDojoHelper()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setLayerName($name)
        {
        }
        /**
         * @return null|string
         */
        public function getLayerName()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setLayerScriptPath($path)
        {
        }
        /**
         * @return null|string
         */
        public function getLayerScriptPath()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setConsumeJavascript($flag)
        {
        }
        /**
         * @return bool
         */
        public function consumeJavascript()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setConsumeOnLoad($flag)
        {
        }
        /**
         * @return bool
         */
        public function consumeOnLoad()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setProfileOptions(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function addProfileOptions(array $options)
        {
        }
        /**
         * @param string $key
         * @param value $value
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function addProfileOption($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function hasProfileOption($key)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getProfileOption($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getProfileOptions()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function removeProfileOption($name)
        {
        }
        /**
         * @return Zend_Dojo_BuildLayer
         */
        public function clearProfileOptions()
        {
        }
        /**
         * @param string $prefix
         * @param null|string $path
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function addProfilePrefix($prefix, $path = null)
        {
        }
        /**
         * @param array<array-key, mixed> $prefixes
         *
         * @return Zend_Dojo_BuildLayer
         */
        public function setProfilePrefixes(array $prefixes)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getProfilePrefixes()
        {
        }
        /**
         * @return string
         */
        public function generateLayerScript()
        {
        }
        /**
         * @return string
         */
        public function generateBuildProfile()
        {
        }
        /**
         * @param string $module
         *
         * @return void
         */
        public function _getPrefix($module)
        {
        }
        /**
         * @param string $profile
         *
         * @return string
         */
        public function _filterJsonProfileToJavascript($profile)
        {
        }
    }
    class Zend_Dojo_Data implements \ArrayAccess, \Iterator, \Countable
    {
        /**
         * @var int|string
         */
        public $_identifier;
        /**
         * @var array<array-key, mixed>
         */
        public $_items;
        /**
         * @var string
         */
        public $_label;
        /**
         * @var array<array-key, mixed>
         */
        public $_metadata;
        /**
         * @param null|string $identifier
         * @param Traversable|array<array-key, mixed>|null $items
         * @param null|string $label
         *
         * @return void
         */
        public function __construct($identifier = null, $items = null, $label = null)
        {
        }
        /**
         * @param Traversable|array<array-key, mixed> $items
         *
         * @return Zend_Dojo_Data
         */
        public function setItems($items)
        {
        }
        /**
         * @param array<array-key, mixed>|object $item
         *
         * @return Zend_Dojo_Data
         */
        public function setItem($item, $id = null)
        {
        }
        /**
         * @param array<array-key, mixed>|object $item
         * @param null|string $id
         *
         * @return Zend_Dojo_Data
         */
        public function addItem($item, $id = null)
        {
        }
        /**
         * @param Traversable|array<array-key, mixed> $items
         *
         * @return Zend_Dojo_Data
         */
        public function addItems($items)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getItems()
        {
        }
        /**
         * @param int|string $id
         *
         * @return bool
         */
        public function hasItem($id)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getItem($id)
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Dojo_Data
         */
        public function removeItem($id)
        {
        }
        /**
         * @return Zend_Dojo_Data
         */
        public function clearItems()
        {
        }
        /**
         * @param int|null|string $identifier
         *
         * @return Zend_Dojo_Data
         */
        public function setIdentifier($identifier)
        {
        }
        /**
         * @return int|null|string
         */
        public function getIdentifier()
        {
        }
        /**
         * @param null|string $label
         *
         * @return Zend_Dojo_Data
         */
        public function setLabel($label)
        {
        }
        /**
         * @return null|string
         */
        public function getLabel()
        {
        }
        /**
         * @param array<array-key, mixed>|string $spec
         * @param mixed|null $value
         *
         * @return Zend_Dojo_Data
         */
        public function setMetadata($spec, $value = null)
        {
        }
        /**
         * @param null|string $key
         *
         * @return mixed
         */
        public function getMetadata($key = null)
        {
        }
        /**
         * @param null|string $key
         *
         * @return Zend_Dojo_Data
         */
        public function clearMetadata($key = null)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return Zend_Dojo_Data
         */
        public function fromArray(array $data)
        {
        }
        /**
         * @param string $json
         *
         * @return Zend_Dojo_Data
         */
        public function fromJson($json)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param int|string $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int|string $offset
         *
         * @return array<array-key, mixed>
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param array<array-key, mixed>|null|object $value
         *
         * @return void
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         *
         * @return void
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function current()
        {
        }
        /**
         * @return int|string
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @param array<array-key, mixed>|object $item
         * @param int|null|string $id
         *
         * @return array<array-key, mixed>
         */
        public function _normalizeItem($item, $id)
        {
        }
    }
    class Zend_Dojo_Exception extends \Zend_Exception
    {
    }
    class Zend_Dojo_Form extends \Zend_Form
    {
        public const DECORATOR = 'DECORATOR';
        public const ELEMENT = 'ELEMENT';
        public const METHOD_DELETE = 'delete';
        public const METHOD_GET = 'get';
        public const METHOD_POST = 'post';
        public const METHOD_PUT = 'put';
        public const ENCTYPE_URLENCODED = 'application/x-www-form-urlencoded';
        public const ENCTYPE_MULTIPART = 'multipart/form-data';
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return void
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return Zend_Dojo_Form_Element_Dijit
         */
        public function setView(?\Zend_View_Interface $view = null)
        {
        }
    }
    class Zend_Dojo_Form_Decorator_AccordionContainer extends \Zend_Dojo_Form_Decorator_DijitContainer
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
    }
    class Zend_Dojo_Form_Decorator_AccordionPane extends \Zend_Dojo_Form_Decorator_DijitContainer
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
    }
    class Zend_Dojo_Form_Decorator_BorderContainer extends \Zend_Dojo_Form_Decorator_DijitContainer
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
    }
    class Zend_Dojo_Form_Decorator_ContentPane extends \Zend_Dojo_Form_Decorator_DijitContainer
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
    }
    class Zend_Dojo_Form_Decorator_DijitContainer extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
        /**
         * @var array<array-key, mixed>
         */
        public $_attribs;
        /**
         * @var array<array-key, mixed>
         */
        public $_dijitParams;
        /**
         * @var string
         */
        public $_title;
        /**
         * @return string
         */
        public function getHelper()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttribs()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDijitParams()
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Dojo_Form_Decorator_DijitElement extends \Zend_Form_Decorator_ViewHelper
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var array<array-key, mixed>
         */
        public $_attribs;
        /**
         * @var array<array-key, mixed>
         */
        public $_buttonTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_dijitParams;
        /**
         * @return array<array-key, mixed>
         */
        public function getElementAttribs()
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Dojo_Form_Decorator_DijitContainer
         */
        public function setDijitParam($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_Form_Decorator_DijitContainer
         */
        public function setDijitParams(array $params)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|null
         */
        public function getDijitParam($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDijitParams()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Dojo_Form_Decorator_DijitForm extends \Zend_Dojo_Form_Decorator_DijitContainer
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Dojo_Form_Decorator_SplitContainer extends \Zend_Dojo_Form_Decorator_DijitContainer
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
    }
    class Zend_Dojo_Form_Decorator_StackContainer extends \Zend_Dojo_Form_Decorator_DijitContainer
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
    }
    class Zend_Dojo_Form_Decorator_TabContainer extends \Zend_Dojo_Form_Decorator_DijitContainer
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
    }
    class Zend_Dojo_Form_DisplayGroup extends \Zend_Form_DisplayGroup
    {
        /**
         * @param string $name
         * @param Zend_Loader_PluginLoader $loader
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($name, \Zend_Loader_PluginLoader $loader, $options = null)
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return Zend_Dojo_Form_Element_Dijit
         */
        public function setView(?\Zend_View_Interface $view = null)
        {
        }
    }
    class Zend_Dojo_Form_Element_Button extends \Zend_Dojo_Form_Element_Dijit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $spec
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         *
         * @return void
         */
        public function __construct($spec, $options = null)
        {
        }
        /**
         * @return string
         */
        public function getLabel()
        {
        }
        /**
         * @return bool
         */
        public function isChecked()
        {
        }
        /**
         * @return void
         */
        public function loadDefaultDecorators()
        {
        }
    }
    class Zend_Dojo_Form_Element_CheckBox extends \Zend_Dojo_Form_Element_Dijit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var bool
         */
        public $checked;
        /**
         * @var string
         */
        public $helper;
        /**
         * @var array<array-key, mixed>
         */
        public $options;
        /**
         * @var string
         */
        public $_checkedValue;
        /**
         * @var string
         */
        public $_uncheckedValue;
        /**
         * @var string
         */
        public $_value;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setValue($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setCheckedValue($value)
        {
        }
        /**
         * @return string
         */
        public function getCheckedValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setUncheckedValue($value)
        {
        }
        /**
         * @return string
         */
        public function getUncheckedValue()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setChecked($flag)
        {
        }
        /**
         * @return bool
         */
        public function isChecked()
        {
        }
    }
    class Zend_Dojo_Form_Element_ComboBox extends \Zend_Dojo_Form_Element_DijitMulti
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var bool
         */
        public $_registerInArrayValidator;
        /**
         * @return array<array-key, mixed>
         */
        public function getStoreInfo()
        {
        }
        /**
         * @param string $identifier
         *
         * @return Zend_Dojo_Form_Element_ComboBox
         */
        public function setStoreId($identifier)
        {
        }
        /**
         * @return null|string
         */
        public function getStoreId()
        {
        }
        /**
         * @param string $dojoType
         *
         * @return Zend_Dojo_Form_Element_ComboBox
         */
        public function setStoreType($dojoType)
        {
        }
        /**
         * @return null|string
         */
        public function getStoreType()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_Form_Element_ComboBox
         */
        public function setStoreParams(array $params)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getStoreParams()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Dojo_Form_Element_ComboBox
         */
        public function setAutocomplete($flag)
        {
        }
        /**
         * @return bool
         */
        public function getAutocomplete()
        {
        }
        /**
         * @param string $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
    }
    class Zend_Dojo_Form_Element_CurrencyTextBox extends \Zend_Dojo_Form_Element_NumberTextBox
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @param string $currency
         *
         * @return Zend_Dojo_Form_Element_CurrencyTextBox
         */
        public function setCurrency($currency)
        {
        }
        /**
         * @return null|string
         */
        public function getCurrency()
        {
        }
        /**
         * @param string $symbol
         *
         * @return Zend_Dojo_Form_Element_CurrencyTextBox
         */
        public function setSymbol($symbol)
        {
        }
        /**
         * @return null|string
         */
        public function getSymbol()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Dojo_Form_Element_CurrencyTextBox
         */
        public function setFractional($flag)
        {
        }
        /**
         * @return bool
         */
        public function getFractional()
        {
        }
    }
    class Zend_Dojo_Form_Element_DateTextBox extends \Zend_Dojo_Form_Element_ValidationTextBox
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var array<array-key, mixed>
         */
        public $_allowedFormatTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_allowedSelectorTypes;
        /**
         * @return Zend_Dojo_Form_Element_DateTextBox
         */
        public function setAmPm($flag)
        {
        }
        /**
         * @return bool
         */
        public function getAmPm()
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_DateTextBox
         */
        public function setStrict($flag)
        {
        }
        /**
         * @return bool
         */
        public function getStrict()
        {
        }
        /**
         * @param string $locale
         *
         * @return Zend_Dojo_Form_Element_DateTextBox
         */
        public function setLocale($locale)
        {
        }
        /**
         * @return null|string
         */
        public function getLocale()
        {
        }
        /**
         * @param string $pattern
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setDatePattern($pattern)
        {
        }
        /**
         * @return null|string
         */
        public function getDatePattern()
        {
        }
        /**
         * @param string $formatLength
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setFormatLength($formatLength)
        {
        }
        /**
         * @return null|string
         */
        public function getFormatLength()
        {
        }
        /**
         * @param string $selector
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setSelector($selector)
        {
        }
        /**
         * @return null|string
         */
        public function getSelector()
        {
        }
    }
    class Zend_Dojo_Form_Element_Dijit extends \Zend_Form_Element
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var array<array-key, mixed>
         */
        public $dijitParams;
        /**
         * @var string
         */
        public $helper;
        /**
         * @param mixed $spec
         * @param mixed|null $options
         *
         * @return void
         */
        public function __construct($spec, $options = null)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Dojo_Form_Element_Dijit
         */
        public function setDijitParam($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_Form_Element_Dijit
         */
        public function setDijitParams(array $params)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function hasDijitParam($key)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getDijitParam($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDijitParams()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Dojo_Form_Element_Dijit
         */
        public function removeDijitParam($key)
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_Dijit
         */
        public function clearDijitParams()
        {
        }
        /**
         * @return void
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return Zend_Dojo_Form_Element_Dijit
         */
        public function setView(?\Zend_View_Interface $view = null)
        {
        }
    }
    class Zend_Dojo_Form_Element_DijitMulti extends \Zend_Dojo_Form_Element_Dijit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var array<array-key, mixed>
         */
        public $options;
        /**
         * @var bool
         */
        public $_registerInArrayValidator;
        /**
         * @var string
         */
        public $_separator;
        /**
         * @var array<array-key, mixed>
         */
        public $_translated;
        /**
         * @return mixed
         */
        public function getSeparator()
        {
        }
        /**
         * @param mixed $separator
         *
         * @return Zend_Dojo_Form_Element_DijitMulti
         */
        public function setSeparator($separator)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getMultiOptions()
        {
        }
        /**
         * @param string $option
         * @param string $value
         *
         * @return $this
         */
        public function addMultiOption($option, $value = '')
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return $this
         */
        public function addMultiOptions(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_Element_Multi
         */
        public function setMultiOptions(array $options)
        {
        }
        /**
         * @param string $option
         *
         * @return mixed
         */
        public function getMultiOption($option)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMultiOptions()
        {
        }
        /**
         * @param string $option
         *
         * @return bool
         */
        public function removeMultiOption($option)
        {
        }
        /**
         * @return Zend_Form_Element_Multi
         */
        public function clearMultiOptions()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element_Multi
         */
        public function setRegisterInArrayValidator($flag)
        {
        }
        /**
         * @return bool
         */
        public function registerInArrayValidator()
        {
        }
        /**
         * @param string $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
        /**
         * @param string $option
         * @param string $value
         *
         * @return bool
         */
        public function _translateOption($option, $value)
        {
        }
        /**
         * @param array<array-key, mixed>|string $value
         *
         * @return array<array-key, mixed>|string
         */
        public function _translateValue($value)
        {
        }
    }
    class Zend_Dojo_Form_Element_Editor extends \Zend_Dojo_Form_Element_Dijit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @param string $event
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addCaptureEvent($event)
        {
        }
        /**
         * @param array<array-key, mixed> $events
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addCaptureEvents(array $events)
        {
        }
        /**
         * @param array<array-key, mixed> $events
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setCaptureEvents(array $events)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCaptureEvents()
        {
        }
        /**
         * @param string $event
         *
         * @return bool
         */
        public function hasCaptureEvent($event)
        {
        }
        /**
         * @param string $event
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function removeCaptureEvent($event)
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function clearCaptureEvents()
        {
        }
        /**
         * @param string $event
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addEvent($event)
        {
        }
        /**
         * @param array<array-key, mixed> $events
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addEvents(array $events)
        {
        }
        /**
         * @param array<array-key, mixed> $events
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setEvents(array $events)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEvents()
        {
        }
        /**
         * @param string $event
         *
         * @return bool
         */
        public function hasEvent($event)
        {
        }
        /**
         * @param string $event
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function removeEvent($event)
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function clearEvents()
        {
        }
        /**
         * @param string $plugin
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addPlugin($plugin)
        {
        }
        /**
         * @param array<array-key, mixed> $plugins
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addPlugins(array $plugins)
        {
        }
        /**
         * @param array<array-key, mixed> $plugins
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setPlugins(array $plugins)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPlugins()
        {
        }
        /**
         * @param string $plugin
         *
         * @return bool
         */
        public function hasPlugin($plugin)
        {
        }
        /**
         * @param string $plugin
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function removePlugin($plugin)
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function clearPlugins()
        {
        }
        /**
         * @param int $interval
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setEditActionInterval($interval)
        {
        }
        /**
         * @return int
         */
        public function getEditActionInterval()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setFocusOnLoad($flag)
        {
        }
        /**
         * @return bool
         */
        public function getFocusOnLoad()
        {
        }
        /**
         * @param int|string $height
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setHeight($height)
        {
        }
        /**
         * @return string
         */
        public function getHeight()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setInheritWidth($flag)
        {
        }
        /**
         * @return bool
         */
        public function getInheritWidth()
        {
        }
        /**
         * @param int|string $minHeight
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setMinHeight($minHeight)
        {
        }
        /**
         * @return string
         */
        public function getMinHeight()
        {
        }
        /**
         * @param string $styleSheet
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addStyleSheet($styleSheet)
        {
        }
        /**
         * @param array<array-key, mixed> $styleSheets
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addStyleSheets(array $styleSheets)
        {
        }
        /**
         * @param array<array-key, mixed> $styleSheets
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setStyleSheets(array $styleSheets)
        {
        }
        /**
         * @return string
         */
        public function getStyleSheets()
        {
        }
        /**
         * @param string $styleSheet
         *
         * @return bool
         */
        public function hasStyleSheet($styleSheet)
        {
        }
        /**
         * @param string $styleSheet
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function removeStyleSheet($styleSheet)
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function clearStyleSheets()
        {
        }
        /**
         * @param int $interval
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setUpdateInterval($interval)
        {
        }
        /**
         * @return int
         */
        public function getUpdateInterval()
        {
        }
        /**
         * @param string $plugin
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addExtraPlugin($plugin)
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function addExtraPlugins(array $plugins)
        {
        }
        /**
         * @param array<array-key, mixed> $plugins
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function setExtraPlugins(array $plugins)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getExtraPlugins()
        {
        }
        /**
         * @param string $plugin
         *
         * @return bool
         */
        public function hasExtraPlugin($plugin)
        {
        }
        /**
         * @param string $plugin
         *
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function removeExtraPlugin($plugin)
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_Editor
         */
        public function clearExtraPlugins()
        {
        }
    }
    class Zend_Dojo_Form_Element_FilteringSelect extends \Zend_Dojo_Form_Element_ComboBox
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var bool
         */
        public $_registerInArrayValidator;
    }
    class Zend_Dojo_Form_Element_HorizontalSlider extends \Zend_Dojo_Form_Element_Slider
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @return array<array-key, mixed>
         */
        public function getTopDecoration()
        {
        }
        /**
         * @param mixed $dijit
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setTopDecorationDijit($dijit)
        {
        }
        /**
         * @param mixed $container
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setTopDecorationContainer($container)
        {
        }
        /**
         * @param array<array-key, mixed> $labels
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setTopDecorationLabels(array $labels)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setTopDecorationParams(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setTopDecorationAttribs(array $attribs)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getBottomDecoration()
        {
        }
        /**
         * @param mixed $dijit
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setBottomDecorationDijit($dijit)
        {
        }
        /**
         * @param mixed $container
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setBottomDecorationContainer($container)
        {
        }
        /**
         * @param array<array-key, mixed> $labels
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setBottomDecorationLabels(array $labels)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setBottomDecorationParams(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setBottomDecorationAttribs(array $attribs)
        {
        }
    }
    class Zend_Dojo_Form_Element_NumberSpinner extends \Zend_Dojo_Form_Element_ValidationTextBox
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @param int $timeout
         *
         * @return Zend_Dojo_Form_Element_NumberSpinner
         */
        public function setDefaultTimeout($timeout)
        {
        }
        /**
         * @return int|null
         */
        public function getDefaultTimeout()
        {
        }
        /**
         * @param int $rate
         *
         * @return Zend_Dojo_Form_Element_NumberSpinner
         */
        public function setTimeoutChangeRate($rate)
        {
        }
        /**
         * @return int|null
         */
        public function getTimeoutChangeRate()
        {
        }
        /**
         * @param int $delta
         *
         * @return Zend_Dojo_Form_Element_NumberSpinner
         */
        public function setLargeDelta($delta)
        {
        }
        /**
         * @return int|null
         */
        public function getLargeDelta()
        {
        }
        /**
         * @param int $delta
         *
         * @return Zend_Dojo_Form_Element_NumberSpinner
         */
        public function setSmallDelta($delta)
        {
        }
        /**
         * @return int|null
         */
        public function getSmallDelta()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setIntermediateChanges($flag)
        {
        }
        /**
         * @return bool
         */
        public function getIntermediateChanges()
        {
        }
        /**
         * @param string $message
         *
         * @return Zend_Dojo_Form_Element_NumberSpinner
         */
        public function setRangeMessage($message)
        {
        }
        /**
         * @return null|string
         */
        public function getRangeMessage()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Dojo_Form_Element_NumberSpinner
         */
        public function setMin($value)
        {
        }
        /**
         * @return int|null
         */
        public function getMin()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Dojo_Form_Element_NumberSpinner
         */
        public function setMax($value)
        {
        }
        /**
         * @return int|null
         */
        public function getMax()
        {
        }
    }
    class Zend_Dojo_Form_Element_NumberTextBox extends \Zend_Dojo_Form_Element_ValidationTextBox
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var array<array-key, mixed>
         */
        public $_allowedTypes;
        /**
         * @param string $locale
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setLocale($locale)
        {
        }
        /**
         * @return null|string
         */
        public function getLocale()
        {
        }
        /**
         * @param string $pattern
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setPattern($pattern)
        {
        }
        /**
         * @return null|string
         */
        public function getPattern()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setType($type)
        {
        }
        /**
         * @return null|string
         */
        public function getType()
        {
        }
        /**
         * @param int $places
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setPlaces($places)
        {
        }
        /**
         * @return int|null
         */
        public function getPlaces()
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setStrict($flag)
        {
        }
        /**
         * @return bool
         */
        public function getStrict()
        {
        }
    }
    class Zend_Dojo_Form_Element_PasswordTextBox extends \Zend_Dojo_Form_Element_ValidationTextBox
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Dojo_Form_Element_RadioButton extends \Zend_Dojo_Form_Element_DijitMulti
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Dojo_Form_Element_SimpleTextarea extends \Zend_Dojo_Form_Element_Dijit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Dojo_Form_Element_Slider extends \Zend_Dojo_Form_Element_Dijit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setClickSelect($flag)
        {
        }
        /**
         * @return bool
         */
        public function getClickSelect()
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setIntermediateChanges($flag)
        {
        }
        /**
         * @return bool
         */
        public function getIntermediateChanges()
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setShowButtons($flag)
        {
        }
        /**
         * @return bool
         */
        public function getShowButtons()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setDiscreteValues($value)
        {
        }
        /**
         * @return int|null
         */
        public function getDiscreteValues()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setMaximum($value)
        {
        }
        /**
         * @return int|null
         */
        public function getMaximum()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setMinimum($value)
        {
        }
        /**
         * @return int|null
         */
        public function getMinimum()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setPageIncrement($value)
        {
        }
        /**
         * @return int|null
         */
        public function getPageIncrement()
        {
        }
    }
    class Zend_Dojo_Form_Element_SubmitButton extends \Zend_Dojo_Form_Element_Button
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Dojo_Form_Element_TextBox extends \Zend_Dojo_Form_Element_Dijit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setLowercase($flag)
        {
        }
        /**
         * @return bool
         */
        public function getLowercase()
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setPropercase($flag)
        {
        }
        /**
         * @return bool
         */
        public function getPropercase()
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setUppercase($flag)
        {
        }
        /**
         * @return bool
         */
        public function getUppercase()
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setTrim($flag)
        {
        }
        /**
         * @return bool
         */
        public function getTrim()
        {
        }
        /**
         * @param int $length
         *
         * @return Zend_Dojo_Form_Element_TextBox
         */
        public function setMaxLength($length)
        {
        }
        /**
         * @return int|null
         */
        public function getMaxLength()
        {
        }
    }
    class Zend_Dojo_Form_Element_Textarea extends \Zend_Dojo_Form_Element_Dijit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Dojo_Form_Element_TimeTextBox extends \Zend_Dojo_Form_Element_DateTextBox
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @param string $format
         *
         * @return true
         *
         * @throws Zend_Form_Element_Exception
         */
        public function _validateIso8601($format)
        {
        }
        /**
         * @param string $pattern
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setTimePattern($pattern)
        {
        }
        /**
         * @return null|string
         */
        public function getTimePattern()
        {
        }
        /**
         * @param string $format
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setClickableIncrement($format)
        {
        }
        /**
         * @return null|string
         */
        public function getClickableIncrement()
        {
        }
        /**
         * @param string $format
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setVisibleIncrement($format)
        {
        }
        /**
         * @return null|string
         */
        public function getVisibleIncrement()
        {
        }
        /**
         * @param string $format
         *
         * @return Zend_Dojo_Form_Element_NumberTextBox
         */
        public function setVisibleRange($format)
        {
        }
        /**
         * @return null|string
         */
        public function getVisibleRange()
        {
        }
    }
    class Zend_Dojo_Form_Element_ValidationTextBox extends \Zend_Dojo_Form_Element_TextBox
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @param string $message
         *
         * @return Zend_Dojo_Form_Element_ValidationTextBox
         */
        public function setInvalidMessage($message)
        {
        }
        /**
         * @return null|string
         */
        public function getInvalidMessage()
        {
        }
        /**
         * @param string $message
         *
         * @return Zend_Dojo_Form_Element_ValidationTextBox
         */
        public function setPromptMessage($message)
        {
        }
        /**
         * @return null|string
         */
        public function getPromptMessage()
        {
        }
        /**
         * @param string $regexp
         *
         * @return Zend_Dojo_Form_Element_ValidationTextBox
         */
        public function setRegExp($regexp)
        {
        }
        /**
         * @return null|string
         */
        public function getRegExp()
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Dojo_Form_Element_ValidationTextBox
         */
        public function setConstraint($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $constraints
         *
         * @return Zend_Dojo_Form_Element_ValidationTextBox
         */
        public function setConstraints(array $constraints)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function hasConstraint($key)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getConstraint($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getConstraints()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Dojo_Form_Element_ValidationTextBox
         */
        public function removeConstraint($key)
        {
        }
        /**
         * @return Zend_Dojo_Form_Element_ValidationTextBox
         */
        public function clearConstraints()
        {
        }
        /**
         * @param mixed $item
         * @param string $key
         *
         * @return void
         */
        public function _castBoolToString(&$item, $key)
        {
        }
    }
    class Zend_Dojo_Form_Element_VerticalSlider extends \Zend_Dojo_Form_Element_Slider
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @return array<array-key, mixed>
         */
        public function getLeftDecoration()
        {
        }
        /**
         * @param mixed $dijit
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setLeftDecorationDijit($dijit)
        {
        }
        /**
         * @param mixed $container
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setLeftDecorationContainer($container)
        {
        }
        /**
         * @param array<array-key, mixed> $labels
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setLeftDecorationLabels(array $labels)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setLeftDecorationParams(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setLeftDecorationAttribs(array $attribs)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRightDecoration()
        {
        }
        /**
         * @param mixed $dijit
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setRightDecorationDijit($dijit)
        {
        }
        /**
         * @param mixed $container
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setRightDecorationContainer($container)
        {
        }
        /**
         * @param array<array-key, mixed> $labels
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setRightDecorationLabels(array $labels)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setRightDecorationParams(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_Dojo_Form_Element_HorizontalSlider
         */
        public function setRightDecorationAttribs(array $attribs)
        {
        }
    }
    class Zend_Dojo_Form_SubForm extends \Zend_Form_SubForm
    {
        public const DECORATOR = 'DECORATOR';
        public const ELEMENT = 'ELEMENT';
        public const METHOD_DELETE = 'delete';
        public const METHOD_GET = 'get';
        public const METHOD_POST = 'post';
        public const METHOD_PUT = 'put';
        public const ENCTYPE_URLENCODED = 'application/x-www-form-urlencoded';
        public const ENCTYPE_MULTIPART = 'multipart/form-data';
        /**
         * @var bool
         */
        public $_dojoViewPathRegistered;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return void
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @return Zend_View_Interface
         */
        public function getView()
        {
        }
    }
    class Zend_Dojo_View_Exception extends \Zend_Dojo_Exception
    {
    }
    class Zend_Dojo_View_Helper_AccordionContainer extends \Zend_Dojo_View_Helper_DijitContainer
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param null|string $id
         * @param string $content
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function accordionContainer($id = null, $content = '', array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_AccordionPane extends \Zend_Dojo_View_Helper_DijitContainer
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int|null $id
         * @param string $content
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function accordionPane($id = null, $content = '', array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_BorderContainer extends \Zend_Dojo_View_Helper_DijitContainer
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @var bool
         */
        public $_styleIsRegistered;
        /**
         * @param null|string $id
         * @param string $content
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function borderContainer($id = null, $content = '', array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_Button extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param string $id
         * @param null|string $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function button($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_CheckBox extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed>|null $checkedOptions
         *
         * @return string
         */
        public function checkBox($id, $value = null, array $params = array(), array $attribs = array(), ?array $checkedOptions = null)
        {
        }
    }
    class Zend_Dojo_View_Helper_ComboBox extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function comboBox($id, $value = null, array $params = array(), array $attribs = array(), ?array $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return false|string
         */
        public function _renderStore(array $params, $id)
        {
        }
    }
    class Zend_Dojo_View_Helper_ContentPane extends \Zend_Dojo_View_Helper_DijitContainer
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param null|string $id
         * @param string $content
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function contentPane($id = null, $content = '', array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_CurrencyTextBox extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function currencyTextBox($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_CustomDijit extends \Zend_Dojo_View_Helper_DijitContainer
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_defaultDojoType;
        /**
         * @param null|string $id
         * @param null|string $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_Dojo_View_Helper_CustomDijit|string
         */
        public function customDijit($id = null, $value = null, array $params = array(), array $attribs = array())
        {
        }
        /**
         * @param string $id
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return void
         */
        public function captureStart($id, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_DateTextBox extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function dateTextBox($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_Dijit extends \Zend_View_Helper_HtmlElement
    {
        public const EOL = '
';
        /**
         * @var Zend_Dojo_View_Helper_Dojo_Container
         */
        public $dojo;
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var array<array-key, mixed>
         */
        public $_jsonParams;
        /**
         * @var string
         */
        public $_module;
        /**
         * @var string
         */
        public $_rootNode;
        /**
         * @param Zend_View_Interface $view
         *
         * @return Zend_Dojo_View_Helper_Dijit
         */
        public function setView(\Zend_View_Interface $view)
        {
        }
        /**
         * @return string
         */
        public function getRootNode()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Dojo_View_Helper_Dijit
         */
        public function setRootNode($value)
        {
        }
        /**
         * @return bool
         */
        public function _useDeclarative()
        {
        }
        /**
         * @return bool
         */
        public function _useProgrammatic()
        {
        }
        /**
         * @return bool
         */
        public function _useProgrammaticNoScript()
        {
        }
        /**
         * @param int $id
         * @param string $content
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         * @param null|string $dijit
         *
         * @return string
         */
        public function _createLayoutContainer($id, $content, array $params, array $attribs, $dijit = null)
        {
        }
        /**
         * @param string $id
         * @param string $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         * @param null|string $dijit
         *
         * @return string
         */
        public function _createFormElement($id, $value, array $params, array $attribs, $dijit = null)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed> $params
         * @param string $type
         * @param null|string $dijit
         *
         * @return array<array-key, mixed>
         */
        public function _prepareDijit(array $attribs, array $params, $type, $dijit = null)
        {
        }
        /**
         * @param string $dijit
         * @param string $id
         * @param array<array-key, mixed> $params
         *
         * @return void
         */
        public function _createDijit($dijit, $id, array $params)
        {
        }
        /**
         * @param mixed $item
         * @param string $key
         *
         * @return void
         */
        public function _castBoolToString(&$item, $key)
        {
        }
        /**
         * @param string $id
         * @param float|int|string $value
         *
         * @return string
         */
        public function _renderHiddenElement($id, $value)
        {
        }
        /**
         * @return void
         */
        public function _createGetParentFormFunction()
        {
        }
    }
    class Zend_Dojo_View_Helper_DijitContainer extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var array<array-key, mixed>
         */
        public $_captureLock;
        /**
         * @var array<array-key, mixed>
         */
        public $_captureInfo;
        /**
         * @param string $id
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return void
         */
        public function captureStart($id, array $params = array(), array $attribs = array())
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function captureEnd($id)
        {
        }
    }
    class Zend_Dojo_View_Helper_Dojo
    {
        public const PROGRAMMATIC_SCRIPT = 1;
        public const PROGRAMMATIC_NOSCRIPT = -1;
        /**
         * @var Zend_View_Interface
         */
        public $view;
        /**
         * @var Zend_Dojo_View_Helper_Dojo_Container
         */
        public $_container;
        /**
         * @var bool
         */
        public static $_useProgrammatic;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param Zend_Dojo_View_Interface $view
         *
         * @return void
         */
        public function setView(\Zend_View_Interface $view)
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function dojo()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Dojo_View_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return void
         */
        public static function setUseDeclarative()
        {
        }
        /**
         * @param int $style
         *
         * @return void
         */
        public static function setUseProgrammatic($style)
        {
        }
        /**
         * @return bool
         */
        public static function useDeclarative()
        {
        }
        /**
         * @return bool
         */
        public static function useProgrammatic()
        {
        }
        /**
         * @return bool
         */
        public static function useProgrammaticNoScript()
        {
        }
    }
    class Zend_Dojo_View_Helper_Dojo_Container
    {
        /**
         * @var Zend_View_Interface
         */
        public $view;
        /**
         * @var bool
         */
        public $_captureLock;
        /**
         * @var string
         */
        public $_captureObj;
        /**
         * @var string
         */
        public $_cdnBase;
        /**
         * @var string
         */
        public $_cdnDojoPath;
        /**
         * @var string
         */
        public $_cdnVersion;
        /**
         * @var bool
         */
        public $_dijitLoaderRegistered;
        /**
         * @var array<array-key, mixed>
         */
        public $_dijits;
        /**
         * @var array<array-key, mixed>
         */
        public $_djConfig;
        /**
         * @var bool
         */
        public $_enabled;
        /**
         * @var bool
         */
        public $_isXhtml;
        /**
         * @var array<array-key, mixed>
         */
        public $_javascriptStatements;
        /**
         * @var array<array-key, mixed>
         */
        public $_layers;
        /**
         * @var string
         */
        public $_localPath;
        /**
         * @var string
         */
        public $_localRelativePath;
        /**
         * @var array<array-key, mixed>
         */
        public $_modules;
        /**
         * @var array<array-key, mixed>
         */
        public $_modulePaths;
        /**
         * @var array<array-key, mixed>
         */
        public $_onLoadActions;
        /**
         * @var bool
         */
        public $_registerDojoStylesheet;
        /**
         * @var array<array-key, mixed>
         */
        public $_stylesheetModules;
        /**
         * @var array<array-key, mixed>
         */
        public $_stylesheets;
        /**
         * @var array<array-key, mixed>
         */
        public $_zendLoadActions;
        /**
         * @param Zend_Dojo_View_Interface $view
         *
         * @return void
         */
        public function setView(\Zend_View_Interface $view)
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function enable()
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function disable()
        {
        }
        /**
         * @return bool
         */
        public function isEnabled()
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setOptions($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $modules
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function requireModule($modules)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getModules()
        {
        }
        /**
         * @param string $module
         * @param string $path
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function registerModulePath($module, $path)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getModulePaths()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function addLayer($path)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLayers()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function removeLayer($path)
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function clearLayers()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setCdnBase($url)
        {
        }
        /**
         * @return string
         */
        public function getCdnBase()
        {
        }
        /**
         * @param null|string $version
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setCdnVersion($version = null)
        {
        }
        /**
         * @return string
         */
        public function getCdnVersion()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setCdnDojoPath($path)
        {
        }
        /**
         * @return string
         */
        public function getCdnDojoPath()
        {
        }
        /**
         * @return bool
         */
        public function useCdn()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setLocalPath($path)
        {
        }
        /**
         * @return string
         */
        public function getLocalPath()
        {
        }
        /**
         * @return bool
         */
        public function useLocalPath()
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setDjConfig(array $config)
        {
        }
        /**
         * @param string $option
         * @param mixed $value
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setDjConfigOption($option, $value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDjConfig()
        {
        }
        /**
         * @param string $option
         * @param mixed|null $default
         *
         * @return mixed
         */
        public function getDjConfigOption($option, $default = null)
        {
        }
        /**
         * @param string $module
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function addStylesheetModule($module)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getStylesheetModules()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function addStylesheet($path)
        {
        }
        /**
         * @param bool|null $flag
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container|bool
         */
        public function registerDojoStylesheet($flag = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getStylesheets()
        {
        }
        /**
         * @param string $callback
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function addOnLoad($callback)
        {
        }
        /**
         * @param string $callback
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function prependOnLoad($callback)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOnLoadActions()
        {
        }
        /**
         * @return bool
         */
        public function onLoadCaptureStart()
        {
        }
        /**
         * @return bool
         */
        public function onLoadCaptureEnd()
        {
        }
        /**
         * @param string $id
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function addDijit($id, array $params)
        {
        }
        /**
         * @param string $id
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setDijit($id, array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $dijits
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function addDijits(array $dijits)
        {
        }
        /**
         * @param array<array-key, mixed> $dijits
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function setDijits(array $dijits)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function hasDijit($id)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>|null
         */
        public function getDijit($id)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDijits()
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function removeDijit($id)
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function clearDijits()
        {
        }
        /**
         * @return string
         */
        public function dijitsToJson()
        {
        }
        /**
         * @return void
         */
        public function registerDijitLoader()
        {
        }
        /**
         * @param string $js
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function addJavascript($js)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getJavascript()
        {
        }
        /**
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function clearJavascript()
        {
        }
        /**
         * @return void
         */
        public function javascriptCaptureStart()
        {
        }
        /**
         * @return true
         */
        public function javascriptCaptureEnd()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function _getLocalRelativePath()
        {
        }
        /**
         * @return string
         */
        public function _renderStylesheets()
        {
        }
        /**
         * @return string
         */
        public function _renderDjConfig()
        {
        }
        /**
         * @return string
         */
        public function _renderDojoScriptTag()
        {
        }
        /**
         * @return string
         */
        public function _renderLayers()
        {
        }
        /**
         * @return string
         */
        public function _renderExtras()
        {
        }
        /**
         * @param string $callback
         *
         * @return Zend_Dojo_View_Helper_Dojo_Container
         */
        public function _addZendLoad($callback)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getZendLoadActions()
        {
        }
    }
    class Zend_Dojo_View_Helper_Editor extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        public $_dijit = 'dijit.Editor';
        /**
         * @var string
         */
        public $_module;
        /**
         * @var array<array-key, mixed>
         */
        public $_pluginsModules;
        /**
         * @var array<array-key, mixed>
         */
        public $_jsonParams;
        /**
         * @param string $id
         * @param null|string $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function editor($id, $value = null, $params = array(), $attribs = array())
        {
        }
        /**
         * @param array<array-key, mixed> $plugins
         *
         * @return array<array-key, mixed>
         */
        public function _getRequiredModules(array $plugins)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _normalizeEditorName($name)
        {
        }
        /**
         * @param string $hiddenId
         * @param string $editorId
         *
         * @return void
         */
        public function _createEditorOnSubmit($hiddenId, $editorId)
        {
        }
    }
    class Zend_Dojo_View_Helper_FilteringSelect extends \Zend_Dojo_View_Helper_ComboBox
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function filteringSelect($id, $value = null, array $params = array(), array $attribs = array(), ?array $options = null)
        {
        }
    }
    class Zend_Dojo_View_Helper_Form extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @var Zend_View_Helper_Form
         */
        public $_helper;
        /**
         * @param string $id
         * @param array<array-key, mixed>|null $attribs
         * @param false|string $content
         *
         * @return string
         */
        public function form($id, $attribs = null, $content = false)
        {
        }
        /**
         * @return Zend_View_Helper_Form
         */
        public function getFormHelper()
        {
        }
    }
    class Zend_Dojo_View_Helper_HorizontalSlider extends \Zend_Dojo_View_Helper_Slider
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_sliderType;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function horizontalSlider($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_NumberSpinner extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function numberSpinner($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_NumberTextBox extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function numberTextBox($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_PasswordTextBox extends \Zend_Dojo_View_Helper_ValidationTextBox
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @param string $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function passwordTextBox($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_RadioButton extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param string $id
         * @param null|string $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed>|null $options
         * @param string $listsep
         *
         * @return string
         */
        public function radioButton($id, $value = null, array $params = array(), array $attribs = array(), ?array $options = null, $listsep = '<br />
')
        {
        }
    }
    class Zend_Dojo_View_Helper_SimpleTextarea extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param string $id
         * @param null|string $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function simpleTextarea($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_Slider extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_module;
        /**
         * @var array<array-key, mixed>
         */
        public $_requiredParams;
        /**
         * @var string
         */
        public $_sliderType;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function prepareSlider($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
        /**
         * @param string $position
         * @param string $id
         * @param array<array-key, mixed> $decInfo
         *
         * @return string
         */
        public function _prepareDecoration($position, $id, $decInfo)
        {
        }
        /**
         * @param string $id
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed> $labels
         *
         * @return string
         */
        public function _prepareLabelsList($id, array $params, array $attribs, array $labels)
        {
        }
    }
    class Zend_Dojo_View_Helper_SplitContainer extends \Zend_Dojo_View_Helper_DijitContainer
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param null|string $id
         * @param string $content
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function splitContainer($id = null, $content = '', array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_StackContainer extends \Zend_Dojo_View_Helper_DijitContainer
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param null|string $id
         * @param string $content
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function stackContainer($id = null, $content = '', array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_SubmitButton extends \Zend_Dojo_View_Helper_Button
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @param string $id
         * @param null|string $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function submitButton($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_TabContainer extends \Zend_Dojo_View_Helper_DijitContainer
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param null|string $id
         * @param string $content
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function tabContainer($id = null, $content = '', array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_TextBox extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function textBox($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_Textarea extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function textarea($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_TimeTextBox extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function timeTextBox($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_ValidationTextBox extends \Zend_Dojo_View_Helper_Dijit
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_elementType;
        /**
         * @var string
         */
        public $_module;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function validationTextBox($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dojo_View_Helper_VerticalSlider extends \Zend_Dojo_View_Helper_Slider
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_dijit;
        /**
         * @var string
         */
        public $_sliderType;
        /**
         * @param int $id
         * @param mixed|null $value
         * @param array<array-key, mixed> $params
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function verticalSlider($id, $value = null, array $params = array(), array $attribs = array())
        {
        }
    }
    class Zend_Dom_Exception extends \Zend_Exception
    {
    }
    class Zend_Dom_Query
    {
        public const DOC_DOM = 'docDom';
        public const DOC_XML = 'docXml';
        public const DOC_HTML = 'docHtml';
        public const DOC_XHTML = 'docXhtml';
        /**
         * @var DOMDocument|string
         */
        public $_document;
        /**
         * @var array<array-key, mixed>|false
         */
        public $_documentErrors;
        /**
         * @var string
         */
        public $_docType;
        /**
         * @var null|string
         */
        public $_encoding;
        /**
         * @var array<array-key, mixed>
         */
        public $_xpathNamespaces;
        /**
         * @param DOMDocument|null|string $document
         * @param null|string $encoding
         */
        public function __construct($document = null, $encoding = null)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Dom_Query
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return null|string
         */
        public function getEncoding()
        {
        }
        /**
         * @param DOMDocument|string $document
         * @param null|string $encoding
         *
         * @return Zend_Dom_Query
         */
        public function setDocument($document, $encoding = null)
        {
        }
        /**
         * @param DOMDocument $document
         *
         * @return Zend_Dom_Query
         */
        public function setDocumentDom(\DOMDocument $document)
        {
        }
        /**
         * @param string $document
         * @param null|string $encoding
         *
         * @return Zend_Dom_Query
         */
        public function setDocumentHtml($document, $encoding = null)
        {
        }
        /**
         * @param string $document
         * @param null|string $encoding
         *
         * @return Zend_Dom_Query
         */
        public function setDocumentXhtml($document, $encoding = null)
        {
        }
        /**
         * @param string $document
         * @param null|string $encoding
         *
         * @return Zend_Dom_Query
         */
        public function setDocumentXml($document, $encoding = null)
        {
        }
        /**
         * @return DOMDocument|string
         */
        public function getDocument()
        {
        }
        /**
         * @return string
         */
        public function getDocumentType()
        {
        }
        /**
         * @return array<array-key, mixed>|false
         */
        public function getDocumentErrors()
        {
        }
        /**
         * @param string $query
         *
         * @return Zend_Dom_Query_Result
         */
        public function query($query)
        {
        }
        /**
         * @param array<array-key, mixed>|string $xpathQuery
         * @param null|string $query
         *
         * @return Zend_Dom_Query_Result
         *
         * @throws Zend_Dom_Exception
         */
        public function queryXpath($xpathQuery, $query = null)
        {
        }
        /**
         * @param array<array-key, mixed> $xpathNamespaces
         */
        public function registerXpathNamespaces($xpathNamespaces)
        {
        }
        /**
         * @param DOMDocument $document
         * @param array<array-key, mixed>|string $xpathQuery
         *
         * @return array<array-key, mixed>
         */
        public function _getNodeList($document, $xpathQuery)
        {
        }
    }
    class Zend_Dom_Query_Css2Xpath
    {
        /**
         * @param string $path
         *
         * @return string
         */
        public static function transform($path)
        {
        }
        /**
         * @param string $expression
         *
         * @return string
         */
        public static function _tokenize($expression)
        {
        }
        /**
         * @param array<array-key, mixed> $matches
         *
         * @return string
         */
        public static function _createEqualityExpression($matches)
        {
        }
        /**
         * @param array<array-key, mixed> $matches
         *
         * @return string
         */
        public static function _normalizeSpaceAttribute($matches)
        {
        }
        /**
         * @param array<array-key, mixed> $matches
         *
         * @return string
         */
        public static function _createContainsExpression($matches)
        {
        }
    }
    class Zend_Dom_Query_Result implements \Iterator, \Countable
    {
        /**
         * @var int
         */
        public $_count;
        /**
         * @var string
         */
        public $_cssQuery;
        /**
         * @var DOMDocument
         */
        public $_document;
        /**
         * @var DOMNodeList
         */
        public $_nodeList;
        /**
         * @var int
         */
        public $_position;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var string
         */
        public $_xpathQuery;
        /**
         * @param string $cssQuery
         * @param array<array-key, mixed>|string $xpathQuery
         * @param DOMDocument $document
         * @param DOMNodeList $nodeList
         */
        public function __construct($cssQuery, $xpathQuery, \DOMDocument $document, \DOMNodeList $nodeList)
        {
        }
        /**
         * @return string
         */
        public function getCssQuery()
        {
        }
        /**
         * @return string
         */
        public function getXpathQuery()
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDocument()
        {
        }
        /**
         * @return DOMNode|null
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return DOMElement
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return DOMNode|null
         */
        public function next()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_EventManager_Event implements \Zend_EventManager_EventDescription
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var object|string
         */
        public $target;
        /**
         * @var array<array-key, mixed>|object
         */
        public $params;
        /**
         * @var bool
         */
        public $stopPropagation;
        /**
         * @param null|string $name
         * @param null|object|string $target
         * @param ArrayAccess|array<array-key, mixed>|null $params
         *
         * @return void
         */
        public function __construct($name = null, $target = null, $params = null)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return object|string
         */
        public function getTarget()
        {
        }
        /**
         * @param array<array-key, mixed>|object $params
         *
         * @return Event
         */
        public function setParams($params)
        {
        }
        /**
         * @return array<array-key, mixed>|object
         */
        public function getParams()
        {
        }
        /**
         * @param int|string $name
         * @param mixed|null $default
         *
         * @return mixed
         */
        public function getParam($name, $default = null)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_EventManager_Event
         */
        public function setName($name)
        {
        }
        /**
         * @param null|object|string $target
         *
         * @return Zend_EventManager_Event
         */
        public function setTarget($target)
        {
        }
        /**
         * @param int|string $name
         * @param mixed $value
         *
         * @return Zend_EventManager_Event
         */
        public function setParam($name, $value)
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function stopPropagation($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function propagationIsStopped()
        {
        }
    }
    interface Zend_EventManager_EventCollection
    {
        /**
         * @param string $event
         * @param null|object|string $target
         * @param array<array-key, mixed>|object $argv
         * @param callback|null $callback
         *
         * @return Zend_EventManager_ResponseCollection
         */
        public function trigger($event, $target = null, $argv = array(), $callback = null);
        /**
         * @param string $event
         * @param object|string $target
         * @param array<array-key, mixed>|null|object $argv
         * @param callback|null $callback
         *
         * @return Zend_EventManager_ResponseCollection
         */
        public function triggerUntil($event, $target, $argv = null, $callback = null);
        /**
         * @param string $event
         * @param callback|null $callback
         * @param int $priority
         *
         * @return Zend_Stdlib_CallbackHandler
         */
        public function attach($event, $callback = null, $priority = 1);
        /**
         * @param Zend_EventManager_ListenerAggregate|Zend_Stdlib_CallbackHandler $listener
         *
         * @return void
         */
        public function detach($listener);
        /**
         * @return array<array-key, mixed>
         */
        public function getEvents();
        /**
         * @param string $event
         *
         * @return array<array-key, mixed>|object
         */
        public function getListeners($event);
        /**
         * @param string $event
         *
         * @return void
         */
        public function clearListeners($event);
    }
    interface Zend_EventManager_EventDescription
    {
        /**
         * @return string
         */
        public function getName();
        /**
         * @return null|object|string
         */
        public function getTarget();
        /**
         * @return ArrayAccess|array<array-key, mixed>
         */
        public function getParams();
        /**
         * @param string $name
         * @param mixed|null $default
         *
         * @return mixed
         */
        public function getParam($name, $default = null);
        /**
         * @param string $name
         *
         * @return void
         */
        public function setName($name);
        /**
         * @param null|object|string $target
         *
         * @return void
         */
        public function setTarget($target);
        /**
         * @param string $params
         *
         * @return void
         */
        public function setParams($params);
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         */
        public function setParam($name, $value);
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function stopPropagation($flag = true);
        /**
         * @return bool
         */
        public function propagationIsStopped();
    }
    class Zend_EventManager_EventManager implements \Zend_EventManager_EventCollection, \Zend_EventManager_SharedEventCollectionAware
    {
        /**
         * @var array<array-key, mixed>
         */
        public $events;
        /**
         * @var string
         */
        public $eventClass;
        /**
         * @var array<array-key, mixed>
         */
        public $identifiers;
        /**
         * @var Zend_EventManager_StaticEventCollection|false|null
         */
        public $sharedCollections;
        /**
         * @param Traversable|array<array-key, mixed>|int|null|string $identifiers
         *
         * @return void
         */
        public function __construct($identifiers = null)
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_EventManager_EventManager
         */
        public function setEventClass($class)
        {
        }
        /**
         * @param Zend_EventManager_SharedEventCollection $collections
         *
         * @return static
         */
        public function setSharedCollections(\Zend_EventManager_SharedEventCollection $collections)
        {
        }
        /**
         * @return void
         */
        public function unsetSharedCollections()
        {
        }
        /**
         * @return Zend_EventManager_SharedEventCollection|false
         */
        public function getSharedCollections()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIdentifiers()
        {
        }
        /**
         * @param Traversable|array<array-key, mixed>|int|string $identifiers
         *
         * @return Zend_EventManager_EventManager
         */
        public function setIdentifiers($identifiers)
        {
        }
        /**
         * @param Traversable|array<array-key, mixed>|int|string $identifiers
         *
         * @return Zend_EventManager_EventManager
         */
        public function addIdentifiers($identifiers)
        {
        }
        /**
         * @param string $event
         * @param null|object|string $target
         * @param ArrayAccess|array<array-key, mixed> $argv
         * @param callback|null $callback
         *
         * @return Zend_EventManager_ResponseCollection
         */
        public function trigger($event, $target = null, $argv = array(), $callback = null)
        {
        }
        /**
         * @param string $event
         * @param object|string $target
         * @param ArrayAccess|array<array-key, mixed>|null $argv
         * @param callable|null $callback
         *
         * @throws Zend_Stdlib_Exception_InvalidCallbackException
         */
        public function triggerUntil($event, $target, $argv = null, $callback = null)
        {
        }
        /**
         * @param Zend_EventManager_ListenerAggregate|array<array-key, mixed>|string $event
         * @param callback|int|null $callback
         * @param int $priority
         *
         * @return Zend_Stdlib_CallbackHandler|mixed
         */
        public function attach($event, $callback = null, $priority = 1)
        {
        }
        /**
         * @param Zend_EventManager_ListenerAggregate $aggregate
         * @param int $priority
         *
         * @return mixed
         */
        public function attachAggregate(\Zend_EventManager_ListenerAggregate $aggregate, $priority = 1)
        {
        }
        /**
         * @param Zend_EventManager_ListenerAggregate|Zend_Stdlib_CallbackHandler $listener
         *
         * @return bool
         *
         * @throws Zend_EventManager_Exception_InvalidArgumentException
         */
        public function detach($listener)
        {
        }
        /**
         * @param Zend_EventManager_ListenerAggregate $aggregate
         *
         * @return mixed
         */
        public function detachAggregate(\Zend_EventManager_ListenerAggregate $aggregate)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEvents()
        {
        }
        /**
         * @param string $event
         *
         * @return Zend_Stdlib_PriorityQueue
         */
        public function getListeners($event)
        {
        }
        /**
         * @param string $event
         *
         * @return void
         */
        public function clearListeners($event)
        {
        }
        /**
         * @param array<array-key, mixed> $args
         *
         * @return ArrayObject
         */
        public function prepareArgs(array $args)
        {
        }
        /**
         * @param string $event
         * @param EventDescription $e
         * @param callback|null $callback
         *
         * @return ResponseCollection
         */
        public function triggerListeners($event, \Zend_EventManager_EventDescription $e, $callback = null)
        {
        }
        /**
         * @param string $event
         *
         * @return array<array-key, mixed>
         */
        public function getSharedListeners($event)
        {
        }
        /**
         * @param Zend_Stdlib_PriorityQueue $masterListeners
         * @param Zend_Stdlib_PriorityQueue $listeners
         *
         * @return void
         */
        public function insertListeners($masterListeners, $listeners)
        {
        }
    }
    interface Zend_EventManager_EventManagerAware
    {
        /**
         * @param Zend_EventManager_EventCollection $eventManager
         *
         * @return void
         */
        public function setEventManager(\Zend_EventManager_EventCollection $eventManager);
    }
    interface Zend_EventManager_Exception
    {
    }
    class Zend_EventManager_Exception_InvalidArgumentException extends \Zend_Exception
    {
    }
    interface Zend_EventManager_Filter
    {
        /**
         * @param object|string $context
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         */
        public function run($context, array $params = array());
        /**
         * @param callback $callback
         *
         * @return Zend_Stdlib_CallbackHandler
         */
        public function attach($callback);
        /**
         * @param Zend_Stdlib_CallbackHandler $filter
         *
         * @return bool
         */
        public function detach(\Zend_Stdlib_CallbackHandler $filter);
        /**
         * @return array<array-key, mixed>
         */
        public function getFilters();
        /**
         * @return void
         */
        public function clearFilters();
        /**
         * @return Zend_EventManager_ResponseCollection
         */
        public function getResponses();
    }
    class Zend_EventManager_FilterChain implements \Zend_EventManager_Filter
    {
        /**
         * @var Zend_EventManager_Filter_FilterIterator
         */
        public $filters;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param mixed $context
         * @param mixed $argv
         *
         * @return mixed
         */
        public function run($context, array $argv = array())
        {
        }
        /**
         * @param callback $callback
         * @param int $priority
         *
         * @return Zend_Stdlib_CallbackHandler
         *
         * @throws Zend_Stdlib_Exception_InvalidCallbackException
         */
        public function attach($callback, $priority = 1)
        {
        }
        /**
         * @param Zend_Stdlib_CallbackHandler $filter
         *
         * @return bool
         */
        public function detach(\Zend_Stdlib_CallbackHandler $filter)
        {
        }
        /**
         * @return Zend_EventManager_Filter_FilterIterator
         */
        public function getFilters()
        {
        }
        /**
         * @return void
         */
        public function clearFilters()
        {
        }
        /**
         * @return Zend_EventManager_ResponseCollection|null
         */
        public function getResponses()
        {
        }
    }
    class Zend_EventManager_Filter_FilterIterator extends \Zend_Stdlib_SplPriorityQueue
    {
        public const EXTR_DATA = 1;
        public const EXTR_PRIORITY = 2;
        public const EXTR_BOTH = 3;
        /**
         * @param mixed $datum
         *
         * @return bool
         */
        public function contains($datum)
        {
        }
        /**
         * @param mixed $datum
         *
         * @return bool
         */
        public function remove($datum)
        {
        }
        /**
         * @param mixed|null $context
         * @param array<array-key, mixed> $params
         * @param Zend_EventManager_Filter_FilterIterator|null $chain
         *
         * @return mixed
         */
        public function next($context = null, array $params = array(), $chain = null)
        {
        }
    }
    class Zend_EventManager_GlobalEventManager
    {
        /**
         * @var Zend_EventManager_EventCollection
         */
        public static $events;
        /**
         * @param Zend_EventManager_EventCollection|null $events
         *
         * @return void
         */
        public static function setEventCollection(?\Zend_EventManager_EventCollection $events = null)
        {
        }
        /**
         * @return Zend_EventManager_EventCollection
         */
        public static function getEventCollection()
        {
        }
        /**
         * @param string $event
         * @param object|string $context
         * @param array<array-key, mixed>|object $argv
         *
         * @return Zend_EventManager_ResponseCollection
         */
        public static function trigger($event, $context, $argv = array())
        {
        }
        /**
         * @param string $event
         * @param object|string $context
         * @param array<array-key, mixed>|object $argv
         * @param callback $callback
         *
         * @return Zend_EventManager_ResponseCollection
         */
        public static function triggerUntil($event, $context, $argv, $callback)
        {
        }
        /**
         * @param string $event
         * @param callback $callback
         * @param int $priority
         *
         * @return Zend_Stdlib_CallbackHandler
         */
        public static function attach($event, $callback, $priority = 1)
        {
        }
        /**
         * @param Zend_Stdlib_CallbackHandler $listener
         *
         * @return bool
         */
        public static function detach(\Zend_Stdlib_CallbackHandler $listener)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getEvents()
        {
        }
        /**
         * @param string $event
         *
         * @return Zend_Stdlib_PriorityQueue|array<array-key, mixed>
         */
        public static function getListeners($event)
        {
        }
        /**
         * @param string $event
         *
         * @return void
         */
        public static function clearListeners($event)
        {
        }
    }
    interface Zend_EventManager_ListenerAggregate
    {
        /**
         * @param Zend_EventManager_EventCollection $events
         */
        public function attach(\Zend_EventManager_EventCollection $events);
        /**
         * @param Zend_EventManager_EventCollection $events
         */
        public function detach(\Zend_EventManager_EventCollection $events);
    }
    class Zend_EventManager_ResponseCollection extends \SplStack
    {
        public const IT_MODE_DELETE = 1;
        public const IT_MODE_KEEP = 0;
        public $stopped = false;
        /**
         * @return bool
         */
        public function stopped()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_EventManager_ResponseCollection
         */
        public function setStopped($flag)
        {
        }
        /**
         * @return mixed
         */
        public function first()
        {
        }
        /**
         * @return mixed
         */
        public function last()
        {
        }
        /**
         * @param mixed $value
         */
        public function contains($value)
        {
        }
    }
    interface Zend_EventManager_SharedEventCollection
    {
        public function getListeners($id, $event);
    }
    interface Zend_EventManager_SharedEventCollectionAware
    {
        /**
         * @param Zend_EventManager_SharedEventCollection $sharedEventCollection
         *
         * @return Zend_EventManager_SharedEventCollectionAware
         */
        public function setSharedCollections(\Zend_EventManager_SharedEventCollection $sharedEventCollection);
    }
    class Zend_EventManager_SharedEventManager implements \Zend_EventManager_SharedEventCollection
    {
        /**
         * @var array<array-key, mixed>
         */
        public $identifiers;
        /**
         * @param array<array-key, mixed>|string $id
         * @param string $event
         * @param callback $callback
         * @param int $priority
         *
         * @return void
         */
        public function attach($id, $event, $callback, $priority = 1)
        {
        }
        /**
         * @param int|string $id
         * @param Zend_Stdlib_CallbackHandler $listener
         *
         * @return bool
         */
        public function detach($id, \Zend_Stdlib_CallbackHandler $listener)
        {
        }
        /**
         * @param int|string $id
         *
         * @return array<array-key, mixed>
         */
        public function getEvents($id)
        {
        }
        /**
         * @param int|string $id
         * @param int|string $event
         *
         * @return Zend_Stdlib_PriorityQueue|false
         */
        public function getListeners($id, $event)
        {
        }
        /**
         * @param int|string $id
         * @param null|string $event
         *
         * @return bool
         */
        public function clearListeners($id, $event = null)
        {
        }
    }
    class Zend_EventManager_StaticEventManager extends \Zend_EventManager_SharedEventManager
    {
        /**
         * @var Zend_EventManager_StaticEventManager
         */
        public static $instance;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return void
         */
        public function __clone()
        {
        }
        /**
         * @return Zend_EventManager_StaticEventManager
         */
        public static function getInstance()
        {
        }
        /**
         * @return void
         */
        public static function resetInstance()
        {
        }
    }
    class Zend_Exception extends \Exception
    {
        /**
         * @var Exception|null
         */
        public $_previous;
        /**
         * @param string $msg
         * @param int $code
         * @param Exception|null $previous
         *
         * @return void
         */
        public function __construct($msg = '', $code = 0, ?\Exception $previous = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, array $args)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return Exception|null
         */
        public function _getPrevious()
        {
        }
    }
    class Zend_Feed
    {
        /**
         * @var Zend_Http_Client
         */
        public static $_httpClient;
        /**
         * @var bool
         */
        public static $_httpMethodOverride;
        /**
         * @var array<array-key, mixed>
         */
        public static $_namespaces;
        /**
         * @param Zend_Http_Client $httpClient
         *
         * @return void
         */
        public static function setHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @return Zend_Http_Client_Abstract
         */
        public static function getHttpClient()
        {
        }
        /**
         * @param bool $override
         *
         * @return void
         */
        public static function setHttpMethodOverride($override = true)
        {
        }
        /**
         * @return bool
         */
        public static function getHttpMethodOverride()
        {
        }
        /**
         * @return string
         */
        public static function lookupNamespace($prefix)
        {
        }
        /**
         * @param string $prefix
         * @param string $namespaceURI
         *
         * @return void
         */
        public static function registerNamespace($prefix, $namespaceURI)
        {
        }
        /**
         * @param string $uri
         *
         * @return Zend_Feed_Abstract
         *
         * @throws Zend_Feed_Exception
         */
        public static function import($uri)
        {
        }
        /**
         * @param string $string
         *
         * @return Zend_Feed_Abstract
         *
         * @throws Zend_Feed_Exception
         */
        public static function importString($string)
        {
        }
        /**
         * @param string $filename
         *
         * @return Zend_Feed_Abstract
         *
         * @throws Zend_Feed_Exception
         */
        public static function importFile($filename)
        {
        }
        /**
         * @param string $uri
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Feed_Exception
         */
        public static function findFeeds($uri)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $format
         *
         * @return Zend_Feed_Abstract
         */
        public static function importArray(array $data, $format = 'atom')
        {
        }
        /**
         * @param Zend_Feed_Builder_Interface $builder
         * @param string $format
         *
         * @return Zend_Feed_Abstract
         */
        public static function importBuilder(\Zend_Feed_Builder_Interface $builder, $format = 'atom')
        {
        }
    }
    class Zend_Feed_Abstract extends \Zend_Feed_Element
    {
        /**
         * @var int
         */
        public $_entryIndex;
        /**
         * @var array<array-key, mixed>
         */
        public $_entries;
        /**
         * @param null|string $uri
         * @param null|string $string
         * @param Zend_Feed_Builder_Interface|null $builder
         *
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function __construct($uri = null, $string = null, ?\Zend_Feed_Builder_Interface $builder = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function __wakeup()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return void
         */
        public function _buildEntryCache()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
        /**
         * @return mixed
         */
        public function key()
        {
        }
        /**
         * @return mixed
         */
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param array<array-key, mixed> $array
         *
         * @return DOMElement
         */
        public abstract function _mapFeedHeaders($array);
        /**
         * @param DOMElement $root
         * @param array<array-key, mixed> $array
         *
         * @return DOMElement
         */
        public abstract function _mapFeedEntries(\DOMElement $root, $array);
        /**
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public abstract function send();
        /**
         * @param string $feed
         *
         * @return string
         *
         * @throws Zend_Feed_Exception
         */
        public function _importFeedFromString($feed)
        {
        }
    }
    class Zend_Feed_Atom extends \Zend_Feed_Abstract
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_entryElementName;
        /**
         * @var string
         */
        public $_defaultNamespace;
        /**
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function __wakeup()
        {
        }
        /**
         * @param null|string $rel
         *
         * @return mixed
         */
        public function link($rel = null)
        {
        }
        /**
         * @param string $var
         *
         * @return mixed
         */
        public function __get($var)
        {
        }
        /**
         * @param array<array-key, mixed> $array
         *
         * @return DOMElement
         */
        public function _mapFeedHeaders($array)
        {
        }
        /**
         * @param DOMElement $root
         * @param array<array-key, mixed> $array
         *
         * @return void
         */
        public function _mapFeedEntries(\DOMElement $root, $array)
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function send()
        {
        }
    }
    class Zend_Feed_Builder implements \Zend_Feed_Builder_Interface
    {
        public $_data;
        public $_header;
        public $_entries = array();
        /**
         * @param array<array-key, mixed> $data
         *
         * @return void
         */
        public function __construct(array $data)
        {
        }
        /**
         * @return Zend_Feed_Builder_Header
         */
        public function getHeader()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEntries()
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return void
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function _createHeader(array $data)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return void
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function _createEntries(array $data)
        {
        }
    }
    class Zend_Feed_Builder_Entry extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        /**
         * @param string $title
         * @param string $link
         * @param string $description
         *
         * @return void
         */
        public function __construct($title, $link, $description)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function __unset($key)
        {
        }
        /**
         * @param string $author
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function setAuthor($author)
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function setId($id)
        {
        }
        /**
         * @param string $content
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function setContent($content)
        {
        }
        /**
         * @param int $lastUpdate
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function setLastUpdate($lastUpdate)
        {
        }
        /**
         * @param string $comments
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function setCommentsUrl($comments)
        {
        }
        /**
         * @param string $commentRss
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function setCommentsRssUrl($commentRss)
        {
        }
        /**
         * @param string $title
         * @param string $url
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function setSource($title, $url)
        {
        }
        /**
         * @param array<array-key, mixed> $categories
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function setCategories(array $categories)
        {
        }
        /**
         * @param array<array-key, mixed> $category
         *
         * @return Zend_Feed_Builder_Entry
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function addCategory(array $category)
        {
        }
        /**
         * @param array<array-key, mixed> $enclosures
         *
         * @return Zend_Feed_Builder_Entry
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setEnclosures(array $enclosures)
        {
        }
        /**
         * @param string $url
         * @param string $type
         * @param string $length
         *
         * @return Zend_Feed_Builder_Entry
         */
        public function addEnclosure($url, $type = '', $length = '')
        {
        }
    }
    class Zend_Feed_Builder_Exception extends \Zend_Feed_Exception
    {
    }
    class Zend_Feed_Builder_Header extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        /**
         * @param string $title
         * @param string $link
         * @param string $charset
         *
         * @return void
         */
        public function __construct($title, $link, $charset = 'utf-8')
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function __unset($key)
        {
        }
        /**
         * @param int $lastUpdate
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setLastUpdate($lastUpdate)
        {
        }
        /**
         * @param int $published
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setPublishedDate($published)
        {
        }
        /**
         * @param string $description
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setDescription($description)
        {
        }
        /**
         * @param string $author
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setAuthor($author)
        {
        }
        /**
         * @param string $email
         *
         * @return Zend_Feed_Builder_Header
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setEmail($email)
        {
        }
        /**
         * @param string $copyright
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setCopyright($copyright)
        {
        }
        /**
         * @param string $image
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setImage($image)
        {
        }
        /**
         * @param string $generator
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setGenerator($generator)
        {
        }
        /**
         * @param string $language
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setLanguage($language)
        {
        }
        /**
         * @param string $webmaster
         *
         * @return Zend_Feed_Builder_Header
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setWebmaster($webmaster)
        {
        }
        /**
         * @param int $ttl
         *
         * @return Zend_Feed_Builder_Header
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setTtl($ttl)
        {
        }
        /**
         * @param string $rating
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setRating($rating)
        {
        }
        /**
         * @param Zend_Uri_Http|string $uri
         * @param string $procedure
         * @param string $protocol
         *
         * @return Zend_Feed_Builder_Header
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setCloud($uri, $procedure, $protocol)
        {
        }
        /**
         * @param string $title
         * @param string $description
         * @param string $name
         * @param string $link
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setTextInput($title, $description, $name, $link)
        {
        }
        /**
         * @param array<array-key, mixed> $hours
         *
         * @return Zend_Feed_Builder_Header
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setSkipHours(array $hours)
        {
        }
        /**
         * @param array<array-key, mixed> $days
         *
         * @return Zend_Feed_Builder_Header
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setSkipDays(array $days)
        {
        }
        /**
         * @param Zend_Feed_Builder_Header_Itunes $itunes
         *
         * @return Zend_Feed_Builder_Header
         */
        public function setITunes(\Zend_Feed_Builder_Header_Itunes $itunes)
        {
        }
    }
    class Zend_Feed_Builder_Header_Itunes extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        /**
         * @param array<array-key, mixed> $categories
         *
         * @return void
         */
        public function __construct(array $categories)
        {
        }
        /**
         * @param array<array-key, mixed> $categories
         *
         * @return Zend_Feed_Builder_Header_Itunes
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setCategories(array $categories)
        {
        }
        /**
         * @param string $author
         *
         * @return Zend_Feed_Builder_Header_Itunes
         */
        public function setAuthor($author)
        {
        }
        /**
         * @param string $name
         * @param string $email
         *
         * @return Zend_Feed_Builder_Header_Itunes
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setOwner($name = '', $email = '')
        {
        }
        /**
         * @param string $image
         *
         * @return Zend_Feed_Builder_Header_Itunes
         */
        public function setImage($image)
        {
        }
        /**
         * @param string $subtitle
         *
         * @return Zend_Feed_Builder_Header_Itunes
         */
        public function setSubtitle($subtitle)
        {
        }
        /**
         * @param string $summary
         *
         * @return Zend_Feed_Builder_Header_Itunes
         */
        public function setSummary($summary)
        {
        }
        /**
         * @param string $block
         *
         * @return Zend_Feed_Builder_Header_Itunes
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setBlock($block)
        {
        }
        /**
         * @param string $explicit
         *
         * @return Zend_Feed_Builder_Header_Itunes
         *
         * @throws Zend_Feed_Builder_Exception
         */
        public function setExplicit($explicit)
        {
        }
        /**
         * @param string $keywords
         *
         * @return Zend_Feed_Builder_Header_Itunes
         */
        public function setKeywords($keywords)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Builder_Header_Itunes
         */
        public function setNewFeedUrl($url)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function __unset($key)
        {
        }
    }
    interface Zend_Feed_Builder_Interface
    {
        /**
         * @return Zend_Feed_Builder_Header
         */
        public function getHeader();
        /**
         * @return array<array-key, mixed>
         */
        public function getEntries();
    }
    class Zend_Feed_Element implements \ArrayAccess
    {
        /**
         * @var DOMElement
         */
        public $_element;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var Zend_Feed_Element
         */
        public $_parentElement;
        /**
         * @var bool
         */
        public $_appended;
        /**
         * @param DOMElement|null $element
         *
         * @return void
         */
        public function __construct($element = null)
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDOM()
        {
        }
        /**
         * @param DOMElement $element
         *
         * @return void
         */
        public function setDOM(\DOMElement $element)
        {
        }
        /**
         * @param Zend_Feed_Element $element
         *
         * @return void
         */
        public function setParent(\Zend_Feed_Element $element)
        {
        }
        /**
         * @return void
         */
        public function ensureAppended()
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return string
         */
        public function saveXmlFragment()
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Element
         */
        public function setEncoding($value)
        {
        }
        /**
         * @param string $var
         *
         * @return mixed
         */
        public function __get($var)
        {
        }
        /**
         * @param string $var
         * @param string $val
         *
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function __set($var, $val)
        {
        }
        /**
         * @param string $var
         *
         * @return bool
         */
        public function __isset($var)
        {
        }
        /**
         * @param string $var
         * @param mixed $unused
         *
         * @return mixed
         */
        public function __call($var, $unused)
        {
        }
        /**
         * @param string $var
         *
         * @return void
         */
        public function __unset($var)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $var
         *
         * @return array<array-key, mixed>
         */
        public function _children($var)
        {
        }
        /**
         * @param string $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param string $offset
         *
         * @return string
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param string $offset
         * @param string $value
         *
         * @return string
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param string $offset
         *
         * @return bool
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Feed_Entry_Abstract extends \Zend_Feed_Element
    {
        /**
         * @var string
         */
        public $_rootElement;
        /**
         * @var string
         */
        public $_rootNamespace;
        /**
         * @param null|string $uri
         * @param DOMNode|SimpleXMLElement|null|string $element
         *
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function __construct($uri = null, $element = null)
        {
        }
    }
    class Zend_Feed_Entry_Atom extends \Zend_Feed_Entry_Abstract
    {
        public const CONTENT_TYPE = 'application/atom+xml';
        /**
         * @var string
         */
        public $_rootElement;
        /**
         * @var string
         */
        public $_rootNamespace;
        /**
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function delete()
        {
        }
        /**
         * @param null|string $postUri
         *
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function save($postUri = null)
        {
        }
        /**
         * @param null|string $rel
         *
         * @return mixed
         */
        public function link($rel = null)
        {
        }
    }
    class Zend_Feed_Entry_Rss extends \Zend_Feed_Entry_Abstract
    {
        /**
         * @var string
         */
        public $_rootElement;
        /**
         * @param string $var
         *
         * @return mixed
         */
        public function __get($var)
        {
        }
        /**
         * @param string $var
         *
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function __set($var, $value)
        {
        }
        /**
         * @param string $var
         *
         * @return bool
         */
        public function __isset($var)
        {
        }
        /**
         * @param string $var
         * @param mixed $unused
         *
         * @return mixed
         */
        public function __call($var, $unused)
        {
        }
    }
    class Zend_Feed_Exception extends \Zend_Exception
    {
    }
    class Zend_Feed_Pubsubhubbub
    {
        public const VERIFICATION_MODE_SYNC = 'sync';
        public const VERIFICATION_MODE_ASYNC = 'async';
        public const SUBSCRIPTION_VERIFIED = 'verified';
        public const SUBSCRIPTION_NOTVERIFIED = 'not_verified';
        public const SUBSCRIPTION_TODELETE = 'to_delete';
        /**
         * @var Zend_Http_Client
         */
        public static $httpClient;
        /**
         * @param Zend_Feed_Abstract|Zend_Feed_Reader_FeedAbstract|string $source
         *
         * @return array<array-key, mixed>
         */
        public static function detectHubs($source)
        {
        }
        /**
         * @param Zend_Http_Client $httpClient
         *
         * @return void
         */
        public static function setHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public static function getHttpClient()
        {
        }
        /**
         * @return void
         */
        public static function clearHttpClient()
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function urlencode($string)
        {
        }
    }
    class Zend_Feed_Pubsubhubbub_CallbackAbstract implements \Zend_Feed_Pubsubhubbub_CallbackInterface
    {
        /**
         * @var Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface
         */
        public $_storage;
        /**
         * @var Zend_Controller_Response_Http|Zend_Feed_Pubsubhubbub_HttpResponse
         */
        public $_httpResponse;
        /**
         * @var int
         */
        public $_subscriberCount;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $config
         */
        public function __construct($config = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Feed_Pubsubhubbub_CallbackAbstract
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setConfig($config)
        {
        }
        /**
         * @return void
         */
        public function sendResponse()
        {
        }
        /**
         * @param Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface $storage
         *
         * @return Zend_Feed_Pubsubhubbub_CallbackAbstract
         */
        public function setStorage(\Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface $storage)
        {
        }
        /**
         * @return Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function getStorage()
        {
        }
        /**
         * @param Zend_Controller_Response_Http|Zend_Feed_Pubsubhubbub_HttpResponse $httpResponse
         *
         * @return Zend_Feed_Pubsubhubbub_CallbackAbstract
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setHttpResponse($httpResponse)
        {
        }
        /**
         * @return Zend_Controller_Response_Http|Zend_Feed_Pubsubhubbub_HttpResponse
         */
        public function getHttpResponse()
        {
        }
        /**
         * @param int|string $count
         *
         * @return Zend_Feed_Pubsubhubbub_CallbackAbstract
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setSubscriberCount($count)
        {
        }
        /**
         * @return int
         */
        public function getSubscriberCount()
        {
        }
        public function _detectCallbackUrl()
        {
        }
        /**
         * @return string
         */
        public function _getHttpHost()
        {
        }
        /**
         * @param string $header
         *
         * @return bool
         */
        public function _getHeader($header)
        {
        }
        /**
         * @return false|string
         */
        public function _getRawBody()
        {
        }
    }
    interface Zend_Feed_Pubsubhubbub_CallbackInterface
    {
        /**
         * @param array<array-key, mixed>|null $httpData
         * @param bool $sendResponseNow
         */
        public function handle(?array $httpData = null, $sendResponseNow = false);
        /**
         * @return void
         */
        public function sendResponse();
        /**
         * @param Zend_Controller_Response_Http|Zend_Feed_Pubsubhubbub_HttpResponse $httpResponse
         */
        public function setHttpResponse($httpResponse);
        /**
         * @return Zend_Controller_Response_Http|Zend_Feed_Pubsubhubbub_HttpResponse
         */
        public function getHttpResponse();
    }
    class Zend_Feed_Pubsubhubbub_Exception extends \Zend_Exception
    {
    }
    class Zend_Feed_Pubsubhubbub_HttpResponse
    {
        /**
         * @var string
         */
        public $_body;
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var int
         */
        public $_httpResponseCode;
        /**
         * @return void
         */
        public function sendResponse()
        {
        }
        /**
         * @return void
         */
        public function sendHeaders()
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param bool $replace
         *
         * @return Zend_Feed_Pubsubhubbub_HttpResponse
         */
        public function setHeader($name, $value, $replace = false)
        {
        }
        /**
         * @param string $name
         *
         * @return null|string
         */
        public function getHeader($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        /**
         * @param bool $throw
         *
         * @return bool
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function canSendHeaders($throw = false)
        {
        }
        /**
         * @param int $code
         *
         * @return Zend_Feed_Pubsubhubbub_HttpResponse
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setHttpResponseCode($code)
        {
        }
        /**
         * @return int
         */
        public function getHttpResponseCode()
        {
        }
        /**
         * @param string $content
         *
         * @return Zend_Feed_Pubsubhubbub_HttpResponse
         */
        public function setBody($content)
        {
        }
        /**
         * @return string
         */
        public function getBody()
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _normalizeHeader($name)
        {
        }
    }
    class Zend_Feed_Pubsubhubbub_Model_ModelAbstract
    {
        /**
         * @var Zend_Db_Table
         */
        public $_db;
        /**
         * @param Zend_Db_Table_Abstract|null $tableGateway
         */
        public function __construct(?\Zend_Db_Table_Abstract $tableGateway = null)
        {
        }
    }
    class Zend_Feed_Pubsubhubbub_Model_Subscription extends \Zend_Feed_Pubsubhubbub_Model_ModelAbstract
    {
        /**
         * @param array<array-key, mixed> $data
         *
         * @return bool
         *
         * @throws Zend_Db_Table_Exception
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setSubscription(array $data)
        {
        }
        /**
         * @param string $key
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Table_Exception
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function getSubscription($key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         *
         * @throws Zend_Db_Table_Exception
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function hasSubscription($key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function deleteSubscription($key)
        {
        }
    }
    interface Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface
    {
        /**
         * @param array<array-key, mixed> $data
         *
         * @return bool
         */
        public function setSubscription(array $data);
        /**
         * @param string $key
         *
         * @return array<array-key, mixed>
         */
        public function getSubscription($key);
        /**
         * @param string $key
         *
         * @return bool
         */
        public function hasSubscription($key);
        /**
         * @param string $key
         *
         * @return bool
         */
        public function deleteSubscription($key);
    }
    class Zend_Feed_Pubsubhubbub_Publisher
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_hubUrls;
        /**
         * @var array<array-key, mixed>
         */
        public $_updatedTopicUrls;
        /**
         * @var array<array-key, mixed>
         */
        public $_errors;
        /**
         * @var array<array-key, mixed>
         */
        public $_parameters;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $config
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function __construct($config = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setConfig($config)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function addHubUrl($url)
        {
        }
        /**
         * @param array<array-key, mixed> $urls
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         */
        public function addHubUrls(array $urls)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         */
        public function removeHubUrl($url)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHubUrls()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function addUpdatedTopicUrl($url)
        {
        }
        /**
         * @param array<array-key, mixed> $urls
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         */
        public function addUpdatedTopicUrls(array $urls)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         */
        public function removeUpdatedTopicUrl($url)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getUpdatedTopicUrls()
        {
        }
        /**
         * @param string $url
         *
         * @return void
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function notifyHub($url)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function notifyAll()
        {
        }
        /**
         * @param string $name
         * @param null|string $value
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setParameter($name, $value = null)
        {
        }
        /**
         * @param array<array-key, mixed> $parameters
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         */
        public function setParameters(array $parameters)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Feed_Pubsubhubbub_Publisher
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function removeParameter($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParameters()
        {
        }
        /**
         * @return bool
         */
        public function isSuccess()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @return Zend_Http_Client
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         * @throws Zend_Http_Client_Exception
         */
        public function _getHttpClient()
        {
        }
    }
    class Zend_Feed_Pubsubhubbub_Subscriber
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_hubUrls;
        /**
         * @var array<array-key, mixed>
         */
        public $_parameters;
        /**
         * @var string
         */
        public $_topicUrl;
        /**
         * @var string
         */
        public $_callbackUrl;
        /**
         * @var int
         */
        public $_leaseSeconds;
        /**
         * @var string
         */
        public $_preferredVerificationMode;
        /**
         * @var array<array-key, mixed>
         */
        public $_errors;
        /**
         * @var array<array-key, mixed>
         */
        public $_asyncHubs;
        /**
         * @var Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface
         */
        public $_storage;
        /**
         * @var array<array-key, mixed>
         */
        public $_authentications;
        /**
         * @var string
         */
        public $_usePathParameter;
        public $_testStaticToken = null;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $config
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function __construct($config = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setConfig($config)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setTopicUrl($url)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function getTopicUrl()
        {
        }
        /**
         * @param int $seconds
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setLeaseSeconds($seconds)
        {
        }
        /**
         * @return int
         */
        public function getLeaseSeconds()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setCallbackUrl($url)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function getCallbackUrl()
        {
        }
        /**
         * @param string $mode
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setPreferredVerificationMode($mode)
        {
        }
        /**
         * @return string
         */
        public function getPreferredVerificationMode()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function addHubUrl($url)
        {
        }
        /**
         * @param array<array-key, mixed> $urls
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         */
        public function addHubUrls(array $urls)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         */
        public function removeHubUrl($url)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHubUrls()
        {
        }
        /**
         * @param string $url
         * @param array<array-key, mixed> $authentication
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function addAuthentication($url, array $authentication)
        {
        }
        /**
         * @param array<array-key, mixed> $authentications
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         */
        public function addAuthentications(array $authentications)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthentications()
        {
        }
        /**
         * @param bool $bool
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         */
        public function usePathParameter($bool = true)
        {
        }
        /**
         * @param string $name
         * @param null|string $value
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setParameter($name, $value = null)
        {
        }
        /**
         * @param array<array-key, mixed> $parameters
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function setParameters(array $parameters)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function removeParameter($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParameters()
        {
        }
        /**
         * @param Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface $storage
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber
         */
        public function setStorage(\Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface $storage)
        {
        }
        /**
         * @return Zend_Feed_Pubsubhubbub_Model_SubscriptionInterface
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function getStorage()
        {
        }
        public function subscribeAll()
        {
        }
        public function unsubscribeAll()
        {
        }
        /**
         * @return bool
         */
        public function isSuccess()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAsyncHubs()
        {
        }
        /**
         * @param string $mode
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         * @throws Zend_Http_Client_Exception
         */
        public function _doRequest($mode)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function _getHttpClient()
        {
        }
        /**
         * @param string $hubUrl
         * @param string $mode
         *
         * @return string
         *
         * @throws Zend_Feed_Pubsubhubbub_Exception
         */
        public function _getRequestParameters($hubUrl, $mode)
        {
        }
        /**
         * @return string
         */
        public function _generateVerifyToken()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param string $hubUrl
         *
         * @return string
         */
        public function _generateSubscriptionKey(array $params, $hubUrl)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>
         */
        public function _urlEncode(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>
         */
        public function _toByteValueOrderedString(array $params)
        {
        }
        public function setTestStaticToken($token)
        {
        }
    }
    class Zend_Feed_Pubsubhubbub_Subscriber_Callback extends \Zend_Feed_Pubsubhubbub_CallbackAbstract
    {
        /**
         * @var string
         */
        public $_feedUpdate;
        /**
         * @var string
         */
        public $_subscriptionKey;
        /**
         * @var array<array-key, mixed>
         */
        public $_currentSubscriptionData;
        /**
         * @param string $key
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber_Callback
         */
        public function setSubscriptionKey($key)
        {
        }
        /**
         * @param array<array-key, mixed>|null $httpGetData
         * @param bool $sendResponseNow
         *
         * @return void
         */
        public function handle(?array $httpGetData = null, $sendResponseNow = false)
        {
        }
        /**
         * @param array<array-key, mixed> $httpGetData
         *
         * @return bool
         */
        public function isValidHubVerification(array $httpGetData)
        {
        }
        /**
         * @param string $feed
         *
         * @return Zend_Feed_Pubsubhubbub_Subscriber_Callback
         */
        public function setFeedUpdate($feed)
        {
        }
        /**
         * @return bool
         */
        public function hasFeedUpdate()
        {
        }
        /**
         * @return string
         */
        public function getFeedUpdate()
        {
        }
        /**
         * @param array<array-key, mixed>|null $httpGetData
         * @param bool $checkValue
         *
         * @return bool
         */
        public function _hasValidVerifyToken(?array $httpGetData = null, $checkValue = true)
        {
        }
        /**
         * @param array<array-key, mixed>|null $httpGetData
         *
         * @return false|string
         */
        public function _detectVerifyTokenKey(?array $httpGetData = null)
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function _parseQueryString()
        {
        }
    }
    class Zend_Feed_Reader
    {
        public const NAMESPACE_ATOM_03 = 'http://purl.org/atom/ns#';
        public const NAMESPACE_ATOM_10 = 'http://www.w3.org/2005/Atom';
        public const NAMESPACE_RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
        public const NAMESPACE_RSS_090 = 'http://my.netscape.com/rdf/simple/0.9/';
        public const NAMESPACE_RSS_10 = 'http://purl.org/rss/1.0/';
        public const TYPE_ANY = 'any';
        public const TYPE_ATOM_03 = 'atom-03';
        public const TYPE_ATOM_10 = 'atom-10';
        public const TYPE_ATOM_10_ENTRY = 'atom-10-entry';
        public const TYPE_ATOM_ANY = 'atom';
        public const TYPE_RSS_090 = 'rss-090';
        public const TYPE_RSS_091 = 'rss-091';
        public const TYPE_RSS_091_NETSCAPE = 'rss-091n';
        public const TYPE_RSS_091_USERLAND = 'rss-091u';
        public const TYPE_RSS_092 = 'rss-092';
        public const TYPE_RSS_093 = 'rss-093';
        public const TYPE_RSS_094 = 'rss-094';
        public const TYPE_RSS_10 = 'rss-10';
        public const TYPE_RSS_20 = 'rss-20';
        public const TYPE_RSS_ANY = 'rss';
        /**
         * @var Zend_Cache_Core
         */
        public static $_cache;
        /**
         * @var Zend_Http_Client
         */
        public static $_httpClient;
        /**
         * @var bool
         */
        public static $_httpMethodOverride;
        public static $_httpConditionalGet = false;
        public static $_pluginLoader = null;
        public static $_prefixPaths = array();
        public static $_extensions = 'Psalm could not infer this type';
        /**
         * @return Zend_Cache_Core
         */
        public static function getCache()
        {
        }
        /**
         * @param Zend_Cache_Core $cache
         *
         * @return void
         */
        public static function setCache(\Zend_Cache_Core $cache)
        {
        }
        /**
         * @param Zend_Http_Client $httpClient
         *
         * @return void
         */
        public static function setHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @return Zend_Http_Client_Abstract
         */
        public static function getHttpClient()
        {
        }
        /**
         * @param bool $override
         *
         * @return void
         */
        public static function setHttpMethodOverride($override = true)
        {
        }
        /**
         * @return bool
         */
        public static function getHttpMethodOverride()
        {
        }
        /**
         * @param bool $bool
         *
         * @return void
         */
        public static function useHttpConditionalGet($bool = true)
        {
        }
        /**
         * @param null|string $etag
         * @param null|string $lastModified
         *
         * @return Zend_Feed_Reader_FeedInterface
         */
        public static function import($uri, $etag = null, $lastModified = null)
        {
        }
        /**
         * @param Zend_Feed_Abstract $feed
         *
         * @return Zend_Feed_Reader_FeedInterface
         */
        public static function importFeed(\Zend_Feed_Abstract $feed)
        {
        }
        /**
         * @param string $string
         *
         * @return Zend_Feed_Reader_FeedInterface
         */
        public static function importString($string)
        {
        }
        /**
         * @param string $filename
         *
         * @return Zend_Feed_Reader_FeedInterface
         *
         * @throws Zend_Feed_Exception
         */
        public static function importFile($filename)
        {
        }
        public static function findFeedLinks($uri)
        {
        }
        /**
         * @param DOMDocument|Zend_Feed_Abstract|string $feed
         * @param bool $specOnly
         *
         * @return string
         *
         * @throws Zend_Feed_Exception
         */
        public static function detectType($feed, $specOnly = false)
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         */
        public static function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader_Interface
         */
        public static function getPluginLoader()
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return void
         */
        public static function addPrefixPath($prefix, $path)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return void
         */
        public static function addPrefixPaths(array $spec)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public static function registerExtension($name)
        {
        }
        /**
         * @param string $extensionName
         *
         * @return bool
         */
        public static function isRegistered($extensionName)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getExtensions()
        {
        }
        /**
         * @return void
         */
        public static function reset()
        {
        }
        /**
         * @return void
         */
        public static function _registerCoreExtensions()
        {
        }
        public static function arrayUnique(array $array)
        {
        }
    }
    class Zend_Feed_Reader_Collection extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
    }
    class Zend_Feed_Reader_Collection_Author extends \Zend_Feed_Reader_Collection_CollectionAbstract
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        /**
         * @return array<array-key, mixed>
         */
        public function getValues()
        {
        }
    }
    class Zend_Feed_Reader_Collection_Category extends \Zend_Feed_Reader_Collection_CollectionAbstract
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        /**
         * @return array<array-key, mixed>
         */
        public function getValues()
        {
        }
    }
    class Zend_Feed_Reader_Collection_CollectionAbstract extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        /**
         * @return array<array-key, mixed>
         */
        public abstract function getValues();
    }
    class Zend_Feed_Reader_EntryAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var DOMDocument
         */
        public $_domDocument;
        /**
         * @var Zend_Feed_Entry_Interface
         */
        public $_entry;
        /**
         * @var int
         */
        public $_entryKey;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var array<array-key, mixed>
         */
        public $_extensions;
        /**
         * @param DOMElement $entry
         * @param int $entryKey
         * @param null|string $type
         *
         * @return void
         */
        public function __construct(\DOMElement $entry, $entryKey, $type = null)
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDomDocument()
        {
        }
        /**
         * @return DOMElement
         */
        public function getElement()
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return DOMXPath
         */
        public function getXpath()
        {
        }
        /**
         * @param DOMXPath $xpath
         *
         * @return Zend_Feed_Reader_Entry_EntryAbstract
         */
        public function setXpath(\DOMXPath $xpath)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getExtensions()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Feed_Reader_Extension_EntryAbstract
         */
        public function getExtension($name)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Feed_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return void
         */
        public function _loadExtensions()
        {
        }
    }
    interface Zend_Feed_Reader_EntryInterface
    {
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0);
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors();
        /**
         * @return string
         */
        public function getContent();
        /**
         * @return string
         */
        public function getDateCreated();
        /**
         * @return string
         */
        public function getDateModified();
        /**
         * @return string
         */
        public function getDescription();
        /**
         * @return stdClass
         */
        public function getEnclosure();
        /**
         * @return string
         */
        public function getId();
        /**
         * @param int $index
         *
         * @return string
         */
        public function getLink($index = 0);
        /**
         * @return array<array-key, mixed>
         */
        public function getLinks();
        /**
         * @return string
         */
        public function getPermalink();
        /**
         * @return string
         */
        public function getTitle();
        /**
         * @return int
         */
        public function getCommentCount();
        /**
         * @return string
         */
        public function getCommentLink();
        /**
         * @return string
         */
        public function getCommentFeedLink();
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories();
    }
    class Zend_Feed_Reader_Entry_Atom extends \Zend_Feed_Reader_EntryAbstract
    {
        /**
         * @var string
         */
        public $_xpathQuery;
        /**
         * @param DOMElement $entry
         * @param int $entryKey
         * @param null|string $type
         *
         * @return void
         */
        public function __construct(\DOMElement $entry, $entryKey, $type = null)
        {
        }
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return string
         */
        public function getContent()
        {
        }
        /**
         * @return string
         */
        public function getDateCreated()
        {
        }
        /**
         * @return string
         */
        public function getDateModified()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return string
         */
        public function getEnclosure()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function getLink($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLinks()
        {
        }
        /**
         * @return string
         */
        public function getPermalink()
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @return int
         */
        public function getCommentCount()
        {
        }
        /**
         * @return string
         */
        public function getCommentLink()
        {
        }
        /**
         * @return string
         */
        public function getCommentFeedLink()
        {
        }
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories()
        {
        }
        /**
         * @return Zend_Feed_Reader_Feed_Atom_Source|null
         */
        public function getSource()
        {
        }
        /**
         * @param DOMXPath $xpath
         */
        public function setXpath(\DOMXPath $xpath)
        {
        }
    }
    class Zend_Feed_Reader_Entry_Rss extends \Zend_Feed_Reader_EntryAbstract
    {
        /**
         * @var string
         */
        public $_xpathQueryRdf;
        /**
         * @var string
         */
        public $_xpathQueryRss;
        /**
         * @param Zend_Feed_Entry_Abstract $entry
         * @param string $entryKey
         * @param null|string $type
         *
         * @return void
         */
        public function __construct(\DOMElement $entry, $entryKey, $type = null)
        {
        }
        /**
         * @return string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return string
         */
        public function getContent()
        {
        }
        /**
         * @return string
         */
        public function getDateCreated()
        {
        }
        /**
         * @return string
         */
        public function getDateModified()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return string
         */
        public function getEnclosure()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function getLink($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLinks()
        {
        }
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories()
        {
        }
        /**
         * @return string
         */
        public function getPermalink()
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @return null|string
         */
        public function getCommentCount()
        {
        }
        /**
         * @return string
         */
        public function getCommentLink()
        {
        }
        /**
         * @return string
         */
        public function getCommentFeedLink()
        {
        }
        /**
         * @param DOMXPath $xpath
         */
        public function setXpath(\DOMXPath $xpath)
        {
        }
    }
    class Zend_Feed_Reader_Extension_Atom_Entry extends \Zend_Feed_Reader_Extension_EntryAbstract
    {
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return string
         */
        public function getContent()
        {
        }
        public function _collectXhtml($xhtml, $prefix)
        {
        }
        /**
         * @return string
         */
        public function getDateCreated()
        {
        }
        /**
         * @return string
         */
        public function getDateModified()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return string
         */
        public function getEnclosure()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return null|string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function getLink($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLinks()
        {
        }
        /**
         * @return string
         */
        public function getPermalink()
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @return int
         */
        public function getCommentCount()
        {
        }
        /**
         * @return string
         */
        public function getCommentLink()
        {
        }
        /**
         * @return string
         */
        public function getCommentFeedLink($type = 'atom')
        {
        }
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories()
        {
        }
        /**
         * @return Zend_Feed_Reader_Feed_Atom_Source|null
         */
        public function getSource()
        {
        }
        public function _absolutiseUri($link)
        {
        }
        /**
         * @param DOMElement $element
         *
         * @return string
         */
        public function _getAuthor(\DOMElement $element)
        {
        }
        public function _registerNamespaces()
        {
        }
        public function _getAtomType()
        {
        }
    }
    class Zend_Feed_Reader_Extension_Atom_Feed extends \Zend_Feed_Reader_Extension_FeedAbstract
    {
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return null|string
         */
        public function getCopyright()
        {
        }
        /**
         * @return Zend_Date|null
         */
        public function getDateCreated()
        {
        }
        /**
         * @return Zend_Date|null
         */
        public function getDateModified()
        {
        }
        /**
         * @return null|string
         */
        public function getDescription()
        {
        }
        /**
         * @return null|string
         */
        public function getGenerator()
        {
        }
        /**
         * @return null|string
         */
        public function getId()
        {
        }
        /**
         * @return null|string
         */
        public function getLanguage()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getImage()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getIcon()
        {
        }
        /**
         * @return null|string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @return null|string
         */
        public function getLink()
        {
        }
        /**
         * @return null|string
         */
        public function getFeedLink()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getHubs()
        {
        }
        /**
         * @return null|string
         */
        public function getTitle()
        {
        }
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories()
        {
        }
        /**
         * @param DOMElement $element
         *
         * @return string
         */
        public function _getAuthor(\DOMElement $element)
        {
        }
        public function _absolutiseUri($link)
        {
        }
        public function _registerNamespaces()
        {
        }
        public function _getAtomType()
        {
        }
    }
    class Zend_Feed_Reader_Extension_Content_Entry extends \Zend_Feed_Reader_Extension_EntryAbstract
    {
        public function getContent()
        {
        }
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_CreativeCommons_Entry extends \Zend_Feed_Reader_Extension_EntryAbstract
    {
        /**
         * @return null|string
         */
        public function getLicense($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLicenses()
        {
        }
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_CreativeCommons_Feed extends \Zend_Feed_Reader_Extension_FeedAbstract
    {
        /**
         * @return null|string
         */
        public function getLicense($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLicenses()
        {
        }
        /**
         * @return void
         */
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_DublinCore_Entry extends \Zend_Feed_Reader_Extension_EntryAbstract
    {
        /**
         * @return string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories()
        {
        }
        /**
         * @return string
         */
        public function getContent()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @return Zend_Date|null
         */
        public function getDate()
        {
        }
        /**
         * @return void
         */
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_DublinCore_Feed extends \Zend_Feed_Reader_Extension_FeedAbstract
    {
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return null|string
         */
        public function getCopyright()
        {
        }
        /**
         * @return null|string
         */
        public function getDescription()
        {
        }
        /**
         * @return null|string
         */
        public function getId()
        {
        }
        /**
         * @return null|string
         */
        public function getLanguage()
        {
        }
        /**
         * @return null|string
         */
        public function getTitle()
        {
        }
        /**
         * @return Zend_Date|null
         */
        public function getDate()
        {
        }
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories()
        {
        }
        /**
         * @return void
         */
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_EntryAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var DOMDocument
         */
        public $_domDocument;
        /**
         * @var Zend_Feed_Entry_Abstract
         */
        public $_entry;
        /**
         * @var int
         */
        public $_entryKey;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var string
         */
        public $_xpathPrefix;
        /**
         * @param Zend_Feed_Entry_Abstract $entry
         * @param int $entryKey
         * @param null|string $type
         *
         * @return void
         */
        public function __construct(\DOMElement $entry, $entryKey, $type = null)
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDomDocument()
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param DOMXPath $xpath
         *
         * @return Zend_Feed_Reader_Extension_EntryAbstract
         */
        public function setXpath(\DOMXPath $xpath)
        {
        }
        /**
         * @return DOMXPath
         */
        public function getXpath()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return string
         */
        public function getXpathPrefix()
        {
        }
        /**
         * @param string $prefix
         *
         * @return Zend_Feed_Reader_Extension_EntryAbstract
         */
        public function setXpathPrefix($prefix)
        {
        }
        /**
         * @return void
         */
        public abstract function _registerNamespaces();
    }
    class Zend_Feed_Reader_Extension_FeedAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var DOMDocument
         */
        public $_domDocument;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var string
         */
        public $_xpathPrefix;
        /**
         * @param null|string $type
         *
         * @return void
         */
        public function __construct(\DomDocument $dom, $type = null, ?\DOMXPath $xpath = null)
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDomDocument()
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @param DOMXPath $xpath
         *
         * @return Zend_Feed_Reader_Extension_EntryAbstract
         */
        public function setXpath(\DOMXPath $xpath)
        {
        }
        /**
         * @return string
         */
        public function getXpath()
        {
        }
        /**
         * @return string
         */
        public function getXpathPrefix()
        {
        }
        /**
         * @return Zend_Feed_Reader_Feed_Atom
         */
        public function setXpathPrefix($prefix)
        {
        }
        public abstract function _registerNamespaces();
    }
    class Zend_Feed_Reader_Extension_Podcast_Entry extends \Zend_Feed_Reader_Extension_EntryAbstract
    {
        /**
         * @return string
         */
        public function getCastAuthor()
        {
        }
        /**
         * @return string
         */
        public function getBlock()
        {
        }
        /**
         * @return string
         */
        public function getDuration()
        {
        }
        /**
         * @return string
         */
        public function getExplicit()
        {
        }
        /**
         * @return string
         */
        public function getKeywords()
        {
        }
        /**
         * @return string
         */
        public function getSubtitle()
        {
        }
        /**
         * @return string
         */
        public function getSummary()
        {
        }
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_Podcast_Feed extends \Zend_Feed_Reader_Extension_FeedAbstract
    {
        /**
         * @return string
         */
        public function getCastAuthor()
        {
        }
        /**
         * @return string
         */
        public function getBlock()
        {
        }
        /**
         * @return string
         */
        public function getCategories()
        {
        }
        /**
         * @return string
         */
        public function getExplicit()
        {
        }
        /**
         * @return string
         */
        public function getImage()
        {
        }
        /**
         * @return string
         */
        public function getKeywords()
        {
        }
        /**
         * @return string
         */
        public function getNewFeedUrl()
        {
        }
        /**
         * @return string
         */
        public function getOwner()
        {
        }
        /**
         * @return string
         */
        public function getSubtitle()
        {
        }
        /**
         * @return string
         */
        public function getSummary()
        {
        }
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_Slash_Entry extends \Zend_Feed_Reader_Extension_EntryAbstract
    {
        /**
         * @return null|string
         */
        public function getSection()
        {
        }
        /**
         * @return null|string
         */
        public function getDepartment()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHitParade()
        {
        }
        /**
         * @return int
         */
        public function getCommentCount()
        {
        }
        /**
         * @param string $name
         * @param string $type
         *
         * @return mixed|null
         */
        public function _getData($name, $type = 'string')
        {
        }
        /**
         * @return void
         */
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_Syndication_Feed extends \Zend_Feed_Reader_Extension_FeedAbstract
    {
        /**
         * @return string
         */
        public function getUpdatePeriod()
        {
        }
        /**
         * @return int
         */
        public function getUpdateFrequency()
        {
        }
        /**
         * @return int
         */
        public function getUpdateFrequencyAsTicks()
        {
        }
        /**
         * @return Zend_Date|null
         */
        public function getUpdateBase()
        {
        }
        /**
         * @param string $name
         * @param string $type
         *
         * @return mixed|null
         */
        public function _getData($name, $type = 'string')
        {
        }
        /**
         * @return void
         */
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_Thread_Entry extends \Zend_Feed_Reader_Extension_EntryAbstract
    {
        /**
         * @return string
         */
        public function getInReplyTo()
        {
        }
        /**
         * @return int|null
         */
        public function getCommentCount()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed|null
         */
        public function _getData($name)
        {
        }
        /**
         * @return void
         */
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Extension_WellFormedWeb_Entry extends \Zend_Feed_Reader_Extension_EntryAbstract
    {
        /**
         * @return null|string
         */
        public function getCommentFeedLink()
        {
        }
        /**
         * @return void
         */
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_FeedAbstract implements \Zend_Feed_Reader_FeedInterface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var DOMDocument
         */
        public $_domDocument;
        /**
         * @var array<array-key, mixed>
         */
        public $_entries;
        /**
         * @var int
         */
        public $_entriesKey;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var array<array-key, mixed>
         */
        public $_extensions;
        /**
         * @var string
         */
        public $_originalSourceUri;
        /**
         * @param null|string $type
         */
        public function __construct(\DomDocument $domDocument, $type = null)
        {
        }
        /**
         * @param string $uri
         */
        public function setOriginalSourceUri($uri)
        {
        }
        /**
         * @return null|string
         */
        public function getOriginalSourceUri()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Feed_Reader_EntryInterface
         */
        public function current()
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDomDocument()
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return DOMElement
         */
        public function getElement()
        {
        }
        /**
         * @return DOMXPath
         */
        public function getXpath()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return unknown
         */
        public function key()
        {
        }
        public function next()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        public function getExtensions()
        {
        }
        public function __call($method, $args)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Feed_Reader_Extension_FeedAbstract
         */
        public function getExtension($name)
        {
        }
        public function _loadExtensions()
        {
        }
        public abstract function _indexEntries();
        public abstract function _registerNamespaces();
    }
    interface Zend_Feed_Reader_FeedInterface extends \Iterator, \Countable
    {
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0);
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors();
        /**
         * @return null|string
         */
        public function getCopyright();
        /**
         * @return null|string
         */
        public function getDateCreated();
        /**
         * @return null|string
         */
        public function getDateModified();
        /**
         * @return null|string
         */
        public function getDescription();
        /**
         * @return null|string
         */
        public function getGenerator();
        /**
         * @return null|string
         */
        public function getId();
        /**
         * @return null|string
         */
        public function getLanguage();
        /**
         * @return null|string
         */
        public function getLink();
        /**
         * @return null|string
         */
        public function getFeedLink();
        /**
         * @return null|string
         */
        public function getTitle();
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories();
    }
    class Zend_Feed_Reader_FeedSet extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        public $rss = null;
        public $rdf = null;
        public $atom = null;
        /**
         * @param DOMNodeList $links
         * @param string $uri
         *
         * @return void
         */
        public function addLinks(\DOMNodeList $links, $uri)
        {
        }
        public function _absolutiseUri($link, $uri = null)
        {
        }
        public function _canonicalizePath($path)
        {
        }
        /**
         * @param string $offset
         *
         * @return mixed
         */
        public function offsetGet($offset)
        {
        }
    }
    class Zend_Feed_Reader_Feed_Atom extends \Zend_Feed_Reader_FeedAbstract
    {
        /**
         * @param DOMDocument $dom
         * @param null|string $type
         */
        public function __construct(\DOMDocument $dom, $type = null)
        {
        }
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return null|string
         */
        public function getCopyright()
        {
        }
        /**
         * @return null|string
         */
        public function getDateCreated()
        {
        }
        /**
         * @return null|string
         */
        public function getDateModified()
        {
        }
        /**
         * @return null|string
         */
        public function getLastBuildDate()
        {
        }
        /**
         * @return null|string
         */
        public function getDescription()
        {
        }
        /**
         * @return null|string
         */
        public function getGenerator()
        {
        }
        /**
         * @return null|string
         */
        public function getId()
        {
        }
        /**
         * @return null|string
         */
        public function getLanguage()
        {
        }
        /**
         * @return null|string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @return null|string
         */
        public function getLink()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getImage()
        {
        }
        /**
         * @return null|string
         */
        public function getFeedLink()
        {
        }
        /**
         * @return null|string
         */
        public function getTitle()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getHubs()
        {
        }
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories()
        {
        }
        /**
         * @return void
         */
        public function _indexEntries()
        {
        }
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Reader_Feed_Atom_Source extends \Zend_Feed_Reader_Feed_Atom
    {
        /**
         * @param DOMElement $source
         * @param string $xpathPrefix
         * @param string $type
         */
        public function __construct(\DOMElement $source, $xpathPrefix, $type)
        {
        }
        /**
         * @return void
         */
        public function count()
        {
        }
        /**
         * @return void
         */
        public function current()
        {
        }
        /**
         * @return void
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return void
         */
        public function valid()
        {
        }
        /**
         * @return void
         */
        public function _indexEntries()
        {
        }
    }
    class Zend_Feed_Reader_Feed_Rss extends \Zend_Feed_Reader_FeedAbstract
    {
        /**
         * @param DOMDocument $dom
         * @param null|string $type
         */
        public function __construct(\DomDocument $dom, $type = null)
        {
        }
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return null|string
         */
        public function getCopyright()
        {
        }
        /**
         * @return null|string
         */
        public function getDateCreated()
        {
        }
        /**
         * @return Zend_Date
         */
        public function getDateModified()
        {
        }
        /**
         * @return Zend_Date
         */
        public function getLastBuildDate()
        {
        }
        /**
         * @return null|string
         */
        public function getDescription()
        {
        }
        /**
         * @return null|string
         */
        public function getId()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getImage()
        {
        }
        /**
         * @return null|string
         */
        public function getLanguage()
        {
        }
        /**
         * @return null|string
         */
        public function getLink()
        {
        }
        /**
         * @return null|string
         */
        public function getFeedLink()
        {
        }
        /**
         * @return null|string
         */
        public function getGenerator()
        {
        }
        /**
         * @return null|string
         */
        public function getTitle()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getHubs()
        {
        }
        /**
         * @return Zend_Feed_Reader_Collection_Category
         */
        public function getCategories()
        {
        }
        public function _indexEntries()
        {
        }
        public function _registerNamespaces()
        {
        }
    }
    class Zend_Feed_Rss extends \Zend_Feed_Abstract
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_entryElementName;
        /**
         * @var string
         */
        public $_defaultNamespace;
        /**
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function __wakeup()
        {
        }
        /**
         * @param string $var
         *
         * @return mixed
         */
        public function __get($var)
        {
        }
        /**
         * @param array<array-key, mixed> $array
         *
         * @return DOMElement
         */
        public function _mapFeedHeaders($array)
        {
        }
        /**
         * @param DOMElement $root
         * @param array<array-key, mixed> $array
         *
         * @return void
         */
        public function _buildiTunes(\DOMElement $root, $array)
        {
        }
        /**
         * @param DOMElement $root
         * @param array<array-key, mixed> $array
         *
         * @return void
         */
        public function _mapFeedEntries(\DOMElement $root, $array)
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public function send()
        {
        }
    }
    class Zend_Feed_Writer
    {
        public const NAMESPACE_ATOM_03 = 'http://purl.org/atom/ns#';
        public const NAMESPACE_ATOM_10 = 'http://www.w3.org/2005/Atom';
        public const NAMESPACE_RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
        public const NAMESPACE_RSS_090 = 'http://my.netscape.com/rdf/simple/0.9/';
        public const NAMESPACE_RSS_10 = 'http://purl.org/rss/1.0/';
        public const TYPE_ANY = 'any';
        public const TYPE_ATOM_03 = 'atom-03';
        public const TYPE_ATOM_10 = 'atom-10';
        public const TYPE_ATOM_ANY = 'atom';
        public const TYPE_RSS_090 = 'rss-090';
        public const TYPE_RSS_091 = 'rss-091';
        public const TYPE_RSS_091_NETSCAPE = 'rss-091n';
        public const TYPE_RSS_091_USERLAND = 'rss-091u';
        public const TYPE_RSS_092 = 'rss-092';
        public const TYPE_RSS_093 = 'rss-093';
        public const TYPE_RSS_094 = 'rss-094';
        public const TYPE_RSS_10 = 'rss-10';
        public const TYPE_RSS_20 = 'rss-20';
        public const TYPE_RSS_ANY = 'rss';
        /**
         * @var Zend_Loader_PluginLoader_Interface
         */
        public static $_pluginLoader;
        /**
         * @var array<array-key, mixed>
         */
        public static $_prefixPaths;
        /**
         * @var array<array-key, mixed>
         */
        public static $_extensions;
        public static function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader_Interface
         */
        public static function getPluginLoader()
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return void
         */
        public static function addPrefixPath($prefix, $path)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return void
         */
        public static function addPrefixPaths(array $spec)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         *
         * @throws Zend_Feed_Exception
         */
        public static function registerExtension($name)
        {
        }
        /**
         * @param string $extensionName
         *
         * @return bool
         */
        public static function isRegistered($extensionName)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getExtensions()
        {
        }
        /**
         * @return void
         */
        public static function reset()
        {
        }
        /**
         * @return void
         */
        public static function registerCoreExtensions()
        {
        }
        public static function lcfirst($str)
        {
        }
    }
    class Zend_Feed_Writer_Deleted
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var string
         */
        public $_type;
        /**
         * @return null|string
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return null|string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $name
         */
        public function remove($name)
        {
        }
        /**
         * @param string $type
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        public function setReference($reference)
        {
        }
        public function getReference()
        {
        }
        public function setWhen($date = null)
        {
        }
        public function getWhen()
        {
        }
        public function setBy(array $by)
        {
        }
        public function getBy()
        {
        }
        public function setComment($comment)
        {
        }
        public function getComment()
        {
        }
    }
    class Zend_Feed_Writer_Entry
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var array<array-key, mixed>
         */
        public $_extensions;
        /**
         * @var string
         */
        public $_type;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return null|string
         */
        public function addAuthor($name, $email = null, $uri = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function addAuthors(array $authors)
        {
        }
        /**
         * @return null|string
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return null|string
         */
        public function getEncoding()
        {
        }
        /**
         * @return null|string
         */
        public function setCopyright($copyright)
        {
        }
        /**
         * @return null|string
         */
        public function setContent($content)
        {
        }
        /**
         * @return null|string
         */
        public function setDateCreated($date = null)
        {
        }
        /**
         * @return null|string
         */
        public function setDateModified($date = null)
        {
        }
        /**
         * @return null|string
         */
        public function setDescription($description)
        {
        }
        /**
         * @return null|string
         */
        public function setId($id)
        {
        }
        /**
         * @return null|string
         */
        public function setLink($link)
        {
        }
        /**
         * @return null|string
         */
        public function setCommentCount($count)
        {
        }
        /**
         * @return null|string
         */
        public function setCommentLink($link)
        {
        }
        /**
         * @return null|string
         */
        public function setCommentFeedLink(array $link)
        {
        }
        /**
         * @return null|string
         */
        public function setCommentFeedLinks(array $links)
        {
        }
        /**
         * @return null|string
         */
        public function setTitle($title)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return string
         */
        public function getContent()
        {
        }
        /**
         * @return string
         */
        public function getCopyright()
        {
        }
        /**
         * @return string
         */
        public function getDateCreated()
        {
        }
        /**
         * @return string
         */
        public function getDateModified()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return null|string
         */
        public function getLink()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLinks()
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @return int
         */
        public function getCommentCount()
        {
        }
        /**
         * @return string
         */
        public function getCommentLink()
        {
        }
        /**
         * @return string
         */
        public function getCommentFeedLinks()
        {
        }
        /**
         * @param string $category
         */
        public function addCategory(array $category)
        {
        }
        /**
         * @param array<array-key, mixed> $categories
         */
        public function addCategories(array $categories)
        {
        }
        /**
         * @return null|string
         */
        public function getCategories()
        {
        }
        public function setEnclosure(array $enclosure)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEnclosure()
        {
        }
        /**
         * @param string $name
         */
        public function remove($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getExtensions()
        {
        }
        /**
         * @param string $name
         *
         * @return object
         */
        public function getExtension($name)
        {
        }
        /**
         * @param string $type
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Feed_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return Zend_Feed_Writer_Source
         */
        public function createSource()
        {
        }
        /**
         * @param Zend_Feed_Writer_Source $source
         */
        public function setSource(\Zend_Feed_Writer_Source $source)
        {
        }
        /**
         * @return Zend_Feed_Writer_Source
         */
        public function getSource()
        {
        }
        /**
         * @return void
         */
        public function _loadExtensions()
        {
        }
    }
    class Zend_Feed_Writer_Exception_InvalidMethodException extends \Zend_Exception
    {
    }
    class Zend_Feed_Writer_Extension_Atom_Renderer_Feed extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setFeedLinks(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setHubs(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Extension_Content_Renderer_Entry extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setContent(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Extension_DublinCore_Renderer_Entry extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setAuthors(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Extension_DublinCore_Renderer_Feed extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setAuthors(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Extension_ITunes_Entry
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param string $enc
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Entry
         */
        public function setEncoding($enc)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        public function setItunesBlock($value)
        {
        }
        /**
         * @param array<array-key, mixed> $values
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Entry
         */
        public function addItunesAuthors(array $values)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Entry
         */
        public function addItunesAuthor($value)
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Entry
         */
        public function setItunesDuration($value)
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Entry
         */
        public function setItunesExplicit($value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Entry
         */
        public function setItunesKeywords(array $value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Entry
         */
        public function setItunesSubtitle($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Entry
         */
        public function setItunesSummary($value)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         */
        public function __call($method, array $params)
        {
        }
    }
    class Zend_Feed_Writer_Extension_ITunes_Feed
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param string $enc
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setEncoding($enc)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        public function setItunesBlock($value)
        {
        }
        /**
         * @param array<array-key, mixed> $values
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function addItunesAuthors(array $values)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function addItunesAuthor($value)
        {
        }
        /**
         * @param array<array-key, mixed> $values
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setItunesCategories(array $values)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setItunesImage($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setItunesDuration($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setItunesExplicit($value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setItunesKeywords(array $value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setItunesNewFeedUrl($value)
        {
        }
        /**
         * @param array<array-key, mixed> $values
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function addItunesOwners(array $values)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function addItunesOwner(array $value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setItunesSubtitle($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Feed_Writer_Extension_ITunes_Feed
         */
        public function setItunesSummary($value)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         */
        public function __call($method, array $params)
        {
        }
    }
    class Zend_Feed_Writer_Extension_ITunes_Renderer_Entry extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setAuthors(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setBlock(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDuration(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setExplicit(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setKeywords(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setSubtitle(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setSummary(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Extension_ITunes_Renderer_Feed extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setAuthors(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setBlock(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCategories(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setImage(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDuration(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setExplicit(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setKeywords(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setNewFeedUrl(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setOwners(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setSubtitle(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setSummary(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Extension_RendererAbstract implements \Zend_Feed_Writer_Extension_RendererInterface
    {
        /**
         * @var DOMDocument
         */
        public $_dom;
        /**
         * @var mixed
         */
        public $_entry;
        /**
         * @var DOMElement
         */
        public $_base;
        /**
         * @var mixed
         */
        public $_container;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var DOMElement
         */
        public $_rootElement;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param mixed $container
         *
         * @return void
         */
        public function __construct($container)
        {
        }
        /**
         * @param string $enc
         *
         * @return Zend_Feed_Writer_Extension_RendererAbstract
         */
        public function setEncoding($enc)
        {
        }
        /**
         * @return void
         */
        public function getEncoding()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $base
         *
         * @return Zend_Feed_Writer_Extension_RendererAbstract
         */
        public function setDomDocument(\DOMDocument $dom, \DOMElement $base)
        {
        }
        /**
         * @return mixed
         */
        public function getDataContainer()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Feed_Writer_Extension_RendererAbstract
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param DOMElement $root
         *
         * @return Zend_Feed_Writer_Extension_RendererAbstract
         */
        public function setRootElement(\DOMElement $root)
        {
        }
        /**
         * @return DOMElement
         */
        public function getRootElement()
        {
        }
        /**
         * @return void
         */
        public abstract function _appendNamespaces();
    }
    interface Zend_Feed_Writer_Extension_RendererInterface
    {
        /**
         * @param mixed $container
         *
         * @return void
         */
        public function __construct($container);
        /**
         * @param DOMDocument $dom
         * @param DOMElement $base
         *
         * @return void
         */
        public function setDomDocument(\DOMDocument $dom, \DOMElement $base);
        /**
         * @return void
         */
        public function render();
        /**
         * @return mixed
         */
        public function getDataContainer();
    }
    class Zend_Feed_Writer_Extension_Slash_Renderer_Entry extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCommentCount(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Extension_Threading_Renderer_Entry extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCommentLink(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCommentFeedLinks(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCommentCount(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Extension_WellFormedWeb_Renderer_Entry extends \Zend_Feed_Writer_Extension_RendererAbstract
    {
        /**
         * @var bool
         */
        public $_called;
        /**
         * @return void
         */
        public function render()
        {
        }
        /**
         * @return void
         */
        public function _appendNamespaces()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCommentFeedLinks(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Feed extends \Zend_Feed_Writer_Feed_FeedAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_entries;
        /**
         * @var int
         */
        public $_entriesKey;
        /**
         * @return Zend_Feed_Writer_Entry
         */
        public function createEntry()
        {
        }
        public function addTombstone(\Zend_Feed_Writer_Deleted $deleted)
        {
        }
        /**
         * @return Zend_Feed_Writer_Deleted
         */
        public function createTombstone()
        {
        }
        /**
         * @param Zend_Feed_Writer_Entry $entry
         */
        public function addEntry(\Zend_Feed_Writer_Entry $entry)
        {
        }
        /**
         * @param int $index
         */
        public function removeEntry($index)
        {
        }
        /**
         * @param int $index
         */
        public function getEntry($index = 0)
        {
        }
        /**
         * @return void
         */
        public function orderByDate()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Feed_Reader_Entry_Interface
         */
        public function current()
        {
        }
        /**
         * @return unknown
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param string $type
         * @param bool $ignoreExceptions
         *
         * @return string
         */
        public function export($type, $ignoreExceptions = false)
        {
        }
    }
    class Zend_Feed_Writer_Feed_FeedAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var string
         */
        public $_type;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return null|string
         */
        public function addAuthor($name, $email = null, $uri = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function addAuthors(array $authors)
        {
        }
        /**
         * @return null|string
         */
        public function setCopyright($copyright)
        {
        }
        public function setDateCreated($date = null)
        {
        }
        public function setDateModified($date = null)
        {
        }
        public function setLastBuildDate($date = null)
        {
        }
        /**
         * @return null|string
         */
        public function setDescription($description)
        {
        }
        /**
         * @return null|string
         */
        public function setGenerator($name, $version = null, $uri = null)
        {
        }
        /**
         * @param string $id
         */
        public function setId($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function _validateTagUri($id)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         */
        public function setImage(array $data)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         */
        public function setIcon(array $data)
        {
        }
        /**
         * @return null|string
         */
        public function setLanguage($language)
        {
        }
        /**
         * @param string $link
         */
        public function setLink($link)
        {
        }
        /**
         * @return null|string
         */
        public function setFeedLink($link, $type)
        {
        }
        /**
         * @return null|string
         */
        public function setTitle($title)
        {
        }
        /**
         * @param string $encoding
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @param string $url
         */
        public function setBaseUrl($url)
        {
        }
        /**
         * @param string $url
         */
        public function addHub($url)
        {
        }
        /**
         * @param array<array-key, mixed> $urls
         */
        public function addHubs(array $urls)
        {
        }
        /**
         * @param string $category
         */
        public function addCategory(array $category)
        {
        }
        /**
         * @param array<array-key, mixed> $categories
         */
        public function addCategories(array $categories)
        {
        }
        /**
         * @param int $index
         *
         * @return null|string
         */
        public function getAuthor($index = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAuthors()
        {
        }
        /**
         * @return null|string
         */
        public function getCopyright()
        {
        }
        /**
         * @return null|string
         */
        public function getDateCreated()
        {
        }
        /**
         * @return null|string
         */
        public function getDateModified()
        {
        }
        /**
         * @return null|string
         */
        public function getLastBuildDate()
        {
        }
        /**
         * @return null|string
         */
        public function getDescription()
        {
        }
        /**
         * @return null|string
         */
        public function getGenerator()
        {
        }
        /**
         * @return null|string
         */
        public function getId()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImage()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIcon()
        {
        }
        /**
         * @return null|string
         */
        public function getLanguage()
        {
        }
        /**
         * @return null|string
         */
        public function getLink()
        {
        }
        /**
         * @return null|string
         */
        public function getFeedLinks()
        {
        }
        /**
         * @return null|string
         */
        public function getTitle()
        {
        }
        /**
         * @return null|string
         */
        public function getEncoding()
        {
        }
        /**
         * @return null|string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @return null|string
         */
        public function getHubs()
        {
        }
        /**
         * @return null|string
         */
        public function getCategories()
        {
        }
        /**
         * @return void
         */
        public function reset()
        {
        }
        /**
         * @param string $type
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $name
         */
        public function remove($name)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Feed_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return void
         */
        public function _loadExtensions()
        {
        }
    }
    class Zend_Feed_Writer_Renderer_Entry_Atom extends \Zend_Feed_Writer_Renderer_RendererAbstract
    {
        /**
         * @param Zend_Feed_Writer_Entry $container
         *
         * @return void
         */
        public function __construct(\Zend_Feed_Writer_Entry $container)
        {
        }
        /**
         * @return Zend_Feed_Writer_Renderer_Entry_Atom
         */
        public function render()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setTitle(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDescription(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDateModified(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDateCreated(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setAuthors(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setEnclosure(\DOMDocument $dom, \DOMElement $root)
        {
        }
        public function _setLink(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setId(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function _validateTagUri($id)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setContent(\DOMDocument $dom, \DOMElement $root)
        {
        }
        public function _loadXhtml($content)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCategories(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setSource(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Renderer_Entry_Atom_Deleted extends \Zend_Feed_Writer_Renderer_RendererAbstract
    {
        /**
         * @param Zend_Feed_Writer_Deleted $container
         *
         * @return void
         */
        public function __construct(\Zend_Feed_Writer_Deleted $container)
        {
        }
        /**
         * @return Zend_Feed_Writer_Renderer_Entry_Atom
         */
        public function render()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setComment(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setBy(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Renderer_Entry_Rss extends \Zend_Feed_Writer_Renderer_RendererAbstract
    {
        /**
         * @param Zend_Feed_Writer_Entry $container
         *
         * @return void
         */
        public function __construct(\Zend_Feed_Writer_Entry $container)
        {
        }
        /**
         * @return Zend_Feed_Writer_Renderer_Entry_Rss
         */
        public function render()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setTitle(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDescription(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDateModified(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDateCreated(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setAuthors(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setEnclosure(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setLink(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setId(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCommentLink(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCategories(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Renderer_Feed_Atom extends \Zend_Feed_Writer_Renderer_Feed_Atom_AtomAbstract
    {
        /**
         * @param Zend_Feed_Writer_Feed $container
         *
         * @return void
         */
        public function __construct(\Zend_Feed_Writer_Feed $container)
        {
        }
        /**
         * @return Zend_Feed_Writer_Renderer_Feed_Atom
         */
        public function render()
        {
        }
    }
    class Zend_Feed_Writer_Renderer_Feed_Atom_AtomAbstract extends \Zend_Feed_Writer_Renderer_RendererAbstract
    {
        /**
         * @param Zend_Feed_Writer_Feed $container
         *
         * @return void
         */
        public function __construct($container)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setLanguage(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setTitle(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDescription(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDateModified(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setGenerator(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setLink(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setFeedLinks(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setAuthors(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setId(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCopyright(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setImage(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setIcon(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDateCreated(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setBaseUrl(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setHubs(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCategories(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Renderer_Feed_Atom_Source extends \Zend_Feed_Writer_Renderer_Feed_Atom_AtomAbstract
    {
        /**
         * @param Zend_Feed_Writer_Feed_Source $container
         *
         * @return void
         */
        public function __construct(\Zend_Feed_Writer_Source $container)
        {
        }
        /**
         * @return Zend_Feed_Writer_Renderer_Feed_Atom
         */
        public function render()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setGenerator(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Renderer_Feed_Rss extends \Zend_Feed_Writer_Renderer_RendererAbstract
    {
        /**
         * @param Zend_Feed_Writer_Feed $container
         *
         * @return void
         */
        public function __construct(\Zend_Feed_Writer_Feed $container)
        {
        }
        /**
         * @return Zend_Feed_Writer_Renderer_Feed_Rss
         */
        public function render()
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setLanguage(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setTitle(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDescription(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDateModified(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setGenerator(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setLink(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setAuthors(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCopyright(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setImage(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setDateCreated(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setLastBuildDate(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setBaseUrl(\DOMDocument $dom, \DOMElement $root)
        {
        }
        /**
         * @param DOMDocument $dom
         * @param DOMElement $root
         *
         * @return void
         */
        public function _setCategories(\DOMDocument $dom, \DOMElement $root)
        {
        }
    }
    class Zend_Feed_Writer_Renderer_RendererAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_extensions;
        /**
         * @var mixed
         */
        public $_container;
        /**
         * @var DOMDocument
         */
        public $_dom;
        /**
         * @var bool
         */
        public $_ignoreExceptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_exceptions;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var DOMElement
         */
        public $_rootElement;
        /**
         * @param mixed $container
         *
         * @return void
         */
        public function __construct($container)
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDomDocument()
        {
        }
        /**
         * @return DOMElement
         */
        public function getElement()
        {
        }
        /**
         * @return mixed
         */
        public function getDataContainer()
        {
        }
        /**
         * @param string $enc
         *
         * @return Zend_Feed_Writer_Renderer_RendererAbstract
         */
        public function setEncoding($enc)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param bool $bool
         *
         * @return Zend_Feed_Writer_Renderer_RendererAbstract
         */
        public function ignoreExceptions($bool = true)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getExceptions()
        {
        }
        /**
         * @param string $type
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param DOMElement $root
         */
        public function setRootElement(\DOMElement $root)
        {
        }
        /**
         * @return DOMElement
         */
        public function getRootElement()
        {
        }
        /**
         * @return void
         */
        public function _loadExtensions()
        {
        }
    }
    interface Zend_Feed_Writer_Renderer_RendererInterface
    {
        /**
         * @return void
         */
        public function render();
        /**
         * @return string
         */
        public function saveXml();
        /**
         * @return DOMDocument
         */
        public function getDomDocument();
        /**
         * @return DOMElement
         */
        public function getElement();
        /**
         * @return mixed
         */
        public function getDataContainer();
        /**
         * @return mixed
         */
        public function ignoreExceptions();
        /**
         * @return array<array-key, mixed>
         */
        public function getExceptions();
        /**
         * @param string $type
         */
        public function setType($type);
        /**
         * @return string
         */
        public function getType();
        /**
         * @param DOMElement $root
         */
        public function setRootElement(\DOMElement $root);
        /**
         * @return DOMElement
         */
        public function getRootElement();
    }
    class Zend_Feed_Writer_Source extends \Zend_Feed_Writer_Feed_FeedAbstract
    {
    }
    class Zend_File_ClassFileLocator extends \FilterIterator
    {
        /**
         * @param DirectoryIterator|string $dirOrIterator
         */
        public function __construct($dirOrIterator = '.')
        {
        }
        /**
         * @return bool
         */
        public function accept()
        {
        }
    }
    class Zend_File_PhpClassFile extends \SplFileInfo
    {
        /**
         * @var array<array-key, mixed>
         */
        public $classes;
        /**
         * @return array<array-key, mixed>
         */
        public function getClasses()
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_File_PhpClassFile
         */
        public function addClass($class)
        {
        }
    }
    class Zend_File_Transfer
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_adapter;
        /**
         * @param string $adapter
         * @param bool $direction
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function __construct($adapter = 'Http', $direction = false, $options = array())
        {
        }
        /**
         * @param string $adapter
         * @param bool $direction
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function setAdapter($adapter, $direction = false, $options = array())
        {
        }
        /**
         * @param bool|null $direction
         *
         * @return Zend_File_Transfer_Adapter|array<array-key, mixed>
         */
        public function getAdapter($direction = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $options
         *
         * @return mixed
         */
        public function __call($method, array $options)
        {
        }
    }
    class Zend_File_Transfer_Adapter_Abstract
    {
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var array<array-key, mixed>
         */
        public $_break;
        /**
         * @var array<array-key, mixed>
         */
        public $_filters;
        /**
         * @var array<array-key, mixed>
         */
        public $_loaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_messages;
        /**
         * @var Zend_Translate
         */
        public $_translator;
        /**
         * @var bool
         */
        public $_translatorDisabled;
        /**
         * @var array<array-key, mixed>
         */
        public $_validators;
        /**
         * @var array<array-key, mixed>
         */
        public $_files;
        /**
         * @var string
         */
        public $_tmpDir;
        public $_options = 'Psalm could not infer this type';
        /**
         * @param mixed|null $options
         *
         * @return bool
         */
        public abstract function send($options = null);
        /**
         * @param mixed|null $options
         *
         * @return bool
         */
        public abstract function receive($options = null);
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public abstract function isSent($files = null);
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public abstract function isReceived($files = null);
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public abstract function isUploaded($files = null);
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public abstract function isFiltered($files = null);
        /**
         * @return float
         */
        public static function getProgress()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         * @param string $type
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader, $type)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_PluginLoader
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function getPluginLoader($type)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         * @param null|string $type
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function addPrefixPath($prefix, $path, $type = null)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_File_Transfer_Exception
         */
        public function addPrefixPaths(array $spec)
        {
        }
        /**
         * @param array<array-key, mixed>|string $validator
         * @param bool $breakChainOnFailure
         * @param array<array-key, mixed>|null|string $options
         * @param array<array-key, mixed>|null|string $files
         *
         * @return Zend_File_Transfer_Adapter
         */
        public function addValidator($validator, $breakChainOnFailure = false, $options = null, $files = null)
        {
        }
        /**
         * @param array<array-key, mixed> $validators
         * @param array<array-key, mixed>|null|string $files
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function addValidators(array $validators, $files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return Zend_File_Transfer_Adapter
         */
        public function setValidators(array $validators, $files = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasValidator($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Validate_Interface|null
         */
        public function getValidator($name)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return array<array-key, mixed>|null
         */
        public function getValidators($files = null)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function removeValidator($name)
        {
        }
        /**
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function clearValidators()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         * @param array<array-key, mixed>|null $files
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function setOptions($options = array(), $files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $files
         *
         * @return array<array-key, mixed>
         */
        public function getOptions($files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public function isValid($files = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @return bool
         */
        public function hasErrors()
        {
        }
        /**
         * @param array<array-key, mixed>|string $filter
         * @param array<array-key, mixed>|null|string $options
         * @param array<array-key, mixed>|null|string $files
         *
         * @return Zend_File_Transfer_Adapter
         */
        public function addFilter($filter, $options = null, $files = null)
        {
        }
        /**
         * @param array<array-key, mixed> $filters
         * @param array<array-key, mixed>|null|string $files
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function addFilters(array $filters, $files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return Zend_File_Transfer_Adapter
         */
        public function setFilters(array $filters, $files = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasFilter($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Filter_Interface|null
         */
        public function getFilter($name)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function getFilters($files = null)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function removeFilter($name)
        {
        }
        /**
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function clearFilters()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function getFile()
        {
        }
        /**
         * @param null|string $file
         * @param bool $path
         *
         * @return array<array-key, mixed>|string
         */
        public function getFileName($file = null, $path = true)
        {
        }
        /**
         * @param null|string $file
         *
         * @return array<array-key, mixed>
         */
        public function getFileInfo($file = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $file
         * @param array<array-key, mixed>|null|string $validator
         * @param array<array-key, mixed>|null|string $filter
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function addFile($file, $validator = null, $filter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function getType()
        {
        }
        /**
         * @param array<array-key, mixed>|string $type
         * @param array<array-key, mixed>|null|string $validator
         * @param array<array-key, mixed>|null|string $filter
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function addType($type, $validator = null, $filter = null)
        {
        }
        /**
         * @param string $destination
         * @param array<array-key, mixed>|null|string $files
         *
         * @return Zend_File_Transfer_Abstract
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function setDestination($destination, $files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return array<array-key, mixed>|null|string
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function getDestination($files = null)
        {
        }
        /**
         * @param Zend_Translate|null $translator
         *
         * @return Zend_File_Transfer_Abstract
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_File_Transfer_Abstract
         */
        public function setDisableTranslator($flag)
        {
        }
        /**
         * @return bool
         */
        public function translatorIsDisabled()
        {
        }
        /**
         * @param string $hash
         * @param array<array-key, mixed>|null|string $files
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function getHash($hash = 'crc32', $files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function getFileSize($files = null)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return string
         */
        public function _detectFileSize($value)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function getMimeType($files = null)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return string
         */
        public function _detectMimeType($value)
        {
        }
        /**
         * @param int $size
         *
         * @return string
         */
        public static function _toByteString($size)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public function _filter($files = null)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function _getTmpDir()
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        public function _isPathWriteable($path)
        {
        }
        /**
         * @param array<array-key, mixed>|string $files
         * @param bool $names
         * @param bool $noexception
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function _getFiles($files, $names = false, $noexception = false)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _getValidatorIdentifier($name)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _getFilterIdentifier($name)
        {
        }
    }
    class Zend_File_Transfer_Adapter_Http extends \Zend_File_Transfer_Adapter_Abstract
    {
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        public static $_callbackApc = 'apc_fetch';
        public static $_callbackUploadProgress = 'uploadprogress_get_info';
        /**
         * @param array<array-key, mixed> $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return Zend_File_Transfer_Adapter
         */
        public function setValidators(array $validators, $files = null)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function removeValidator($name)
        {
        }
        /**
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function clearValidators()
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $options
         *
         * @return void
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function send($options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public function isValid($files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public function receive($files = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_File_Transfer_Exception
         */
        public function isSent($files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public function isReceived($files = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $files
         *
         * @return bool
         */
        public function isFiltered($files = null)
        {
        }
        /**
         * @return bool
         */
        public function isUploaded($files = null)
        {
        }
        /**
         * @param null|string $id
         *
         * @return array<array-key, mixed>|null
         */
        public static function getProgress($id = null)
        {
        }
        /**
         * @return bool
         */
        public static function isApcAvailable()
        {
        }
        /**
         * @return bool
         */
        public static function isUploadProgressAvailable()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareFiles()
        {
        }
    }
    class Zend_File_Transfer_Exception extends \Zend_Exception
    {
        public $_fileerror = null;
        public function __construct($message, $fileerror = 0)
        {
        }
        /**
         * @return int
         */
        public function getFileError()
        {
        }
    }
    class Zend_Filter implements \Zend_Filter_Interface
    {
        public const CHAIN_APPEND = 'append';
        public const CHAIN_PREPEND = 'prepend';
        /**
         * @var array<array-key, mixed>
         */
        public $_filters;
        /**
         * @var array<array-key, mixed>
         */
        public static $_defaultNamespaces;
        /**
         * @param Zend_Filter_Interface $filter
         * @param string $placement
         *
         * @return Zend_Filter
         */
        public function addFilter(\Zend_Filter_Interface $filter, $placement)
        {
        }
        /**
         * @param Zend_Filter_Interface $filter
         *
         * @return Zend_Filter
         */
        public function appendFilter(\Zend_Filter_Interface $filter)
        {
        }
        /**
         * @param Zend_Filter_Interface $filter
         *
         * @return Zend_Filter
         */
        public function prependFilter(\Zend_Filter_Interface $filter)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFilters()
        {
        }
        /**
         * @param mixed $value
         *
         * @return mixed
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getDefaultNamespaces()
        {
        }
        /**
         * @param array<array-key, mixed>|string $namespace
         *
         * @return null
         */
        public static function setDefaultNamespaces($namespace)
        {
        }
        /**
         * @param array<array-key, mixed>|string $namespace
         *
         * @return null
         */
        public static function addDefaultNamespaces($namespace)
        {
        }
        /**
         * @return bool
         */
        public static function hasDefaultNamespaces()
        {
        }
        /**
         * @param mixed $value
         * @param string $classBaseName
         * @param array<array-key, mixed> $args
         * @param array<array-key, mixed>|string $namespaces
         *
         * @return mixed
         *
         * @throws Zend_Filter_Exception
         */
        public static function get($value, $classBaseName, array $args = array(), $namespaces = array())
        {
        }
        /**
         * @param mixed $value
         * @param string $classBaseName
         * @param array<array-key, mixed> $args
         * @param array<array-key, mixed>|string $namespaces
         *
         * @return mixed
         *
         * @throws Zend_Filter_Exception
         */
        public static function filterStatic($value, $classBaseName, array $args = array(), $namespaces = array())
        {
        }
    }
    class Zend_Filter_Alnum implements \Zend_Filter_Interface
    {
        /**
         * @var bool
         */
        public $allowWhiteSpace;
        /**
         * @var mixed
         */
        public static $_unicodeEnabled;
        /**
         * @var Zend_Locale
         */
        public $_locale;
        /**
         * @var bool
         */
        public static $_meansEnglishAlphabet;
        /**
         * @param bool $allowWhiteSpace
         *
         * @return void
         */
        public function __construct($allowWhiteSpace = false)
        {
        }
        /**
         * @return bool
         */
        public function getAllowWhiteSpace()
        {
        }
        /**
         * @param bool $allowWhiteSpace
         *
         * @return Zend_Filter_Alnum
         */
        public function setAllowWhiteSpace($allowWhiteSpace)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Alpha implements \Zend_Filter_Interface
    {
        /**
         * @var bool
         */
        public $allowWhiteSpace;
        /**
         * @var mixed
         */
        public static $_unicodeEnabled;
        /**
         * @var Zend_Locale
         */
        public $_locale;
        /**
         * @var bool
         */
        public static $_meansEnglishAlphabet;
        /**
         * @param bool $allowWhiteSpace
         *
         * @return void
         */
        public function __construct($allowWhiteSpace = false)
        {
        }
        /**
         * @return bool
         */
        public function getAllowWhiteSpace()
        {
        }
        /**
         * @param bool $allowWhiteSpace
         *
         * @return Zend_Filter_Alpha
         */
        public function setAllowWhiteSpace($allowWhiteSpace)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_BaseName implements \Zend_Filter_Interface
    {
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Boolean implements \Zend_Filter_Interface
    {
        public const BOOLEAN = 1;
        public const INTEGER = 2;
        public const FLOAT = 4;
        public const STRING = 8;
        public const ZERO = 16;
        public const EMPTY_ARRAY = 32;
        public const NULL = 64;
        public const PHP = 127;
        public const FALSE_STRING = 128;
        public const YES = 256;
        public const ALL = 511;
        public $_constants = 'Psalm could not infer this type';
        /**
         * @var int
         */
        public $_type;
        /**
         * @var array<array-key, mixed>
         */
        public $_locale;
        /**
         * @var bool
         */
        public $_casting;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param array<array-key, mixed>|int|null $type
         *
         * @return Zend_Filter_Boolean
         *
         * @throws Zend_Filter_Exception
         */
        public function setType($type = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLocale()
        {
        }
        /**
         * @param Zend_Locale|array<array-key, mixed>|null|string $locale
         *
         * @return Zend_Filter_Boolean
         *
         * @throws Zend_Filter_Exception
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @return bool
         */
        public function getCasting()
        {
        }
        /**
         * @return Zend_Filter_Boolean
         *
         * @throws Zend_Filter_Exception
         */
        public function setCasting($casting = true)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
        /**
         * @param string $value
         * @param bool $yes
         * @param array<array-key, mixed> $locale
         *
         * @return bool
         */
        public function _getLocalizedQuestion($value, $yes, $locale)
        {
        }
    }
    class Zend_Filter_Callback implements \Zend_Filter_Interface
    {
        /**
         * @var array<array-key, mixed>|string
         */
        public $_callback;
        /**
         * @var mixed
         */
        public $_options;
        /**
         * @param mixed $options
         */
        public function __construct($options)
        {
        }
        /**
         * @return array<array-key, mixed>|string
         */
        public function getCallback()
        {
        }
        /**
         * @param unknown_type $callback
         *
         * @return unknown
         */
        public function setCallback($callback, $options = null)
        {
        }
        /**
         * @return mixed
         */
        public function getOptions()
        {
        }
        /**
         * @param mixed $options
         *
         * @return Zend_Filter_Callback
         */
        public function setOptions($options)
        {
        }
        /**
         * @param mixed $value
         *
         * @return mixed
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Compress implements \Zend_Filter_Interface
    {
        public $_adapter = 'Gz';
        public $_adapterOptions = array();
        /**
         * @param array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Filter_Compress
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return string
         */
        public function getAdapter()
        {
        }
        /**
         * @return string
         */
        public function getAdapterName()
        {
        }
        /**
         * @param Zend_Filter_Compress_CompressInterface|string $adapter
         *
         * @return Zend_Filter_Compress
         */
        public function setAdapter($adapter)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAdapterOptions()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function setAdapterOptions(array $options)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed>|string $options
         */
        public function __call($method, $options)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Compress_Bz2 extends \Zend_Filter_Compress_CompressAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return int
         */
        public function getBlocksize()
        {
        }
        /**
         * @return Zend_Filter_Compress_Bz2
         */
        public function setBlocksize($blocksize)
        {
        }
        /**
         * @return string
         */
        public function getArchive()
        {
        }
        /**
         * @param string $archive
         *
         * @return Zend_Filter_Compress_Bz2
         */
        public function setArchive($archive)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function compress($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function decompress($content)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Filter_Compress_CompressAbstract implements \Zend_Filter_Compress_CompressInterface
    {
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param null|string $option
         *
         * @return mixed
         */
        public function getOptions($option = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Filter_Compress_Bz2
         */
        public function setOptions(array $options)
        {
        }
    }
    interface Zend_Filter_Compress_CompressInterface
    {
        /**
         * @param string $value
         *
         * @return string
         */
        public function compress($value);
        /**
         * @param string $value
         *
         * @return string
         */
        public function decompress($value);
        /**
         * @return string
         */
        public function toString();
    }
    class Zend_Filter_Compress_Gz extends \Zend_Filter_Compress_CompressAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return int
         */
        public function getLevel()
        {
        }
        /**
         * @param int $level
         *
         * @return Zend_Filter_Compress_Gz
         */
        public function setLevel($level)
        {
        }
        /**
         * @return string
         */
        public function getMode()
        {
        }
        /**
         * @param string $mode
         */
        public function setMode($mode)
        {
        }
        /**
         * @return string
         */
        public function getArchive()
        {
        }
        /**
         * @param string $archive
         *
         * @return Zend_Filter_Compress_Gz
         */
        public function setArchive($archive)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function compress($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function decompress($content)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Filter_Compress_Lzf implements \Zend_Filter_Compress_CompressInterface
    {
        public function __construct()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function compress($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function decompress($content)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Filter_Compress_Rar extends \Zend_Filter_Compress_CompressAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function getCallback()
        {
        }
        /**
         * @param string $callback
         *
         * @return Zend_Filter_Compress_Rar
         */
        public function setCallback($callback)
        {
        }
        /**
         * @return string
         */
        public function getArchive()
        {
        }
        /**
         * @param string $archive
         *
         * @return Zend_Filter_Compress_Rar
         */
        public function setArchive($archive)
        {
        }
        /**
         * @return string
         */
        public function getPassword()
        {
        }
        /**
         * @param string $password
         *
         * @return Zend_Filter_Compress_Rar
         */
        public function setPassword($password)
        {
        }
        /**
         * @return string
         */
        public function getTarget()
        {
        }
        /**
         * @param string $target
         *
         * @return Zend_Filter_Compress_Rar
         */
        public function setTarget($target)
        {
        }
        /**
         * @param array<array-key, mixed>|string $content
         *
         * @return string
         */
        public function compress($content)
        {
        }
        /**
         * @param string $content
         *
         * @return bool
         */
        public function decompress($content)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Filter_Compress_Tar extends \Zend_Filter_Compress_CompressAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function getArchive()
        {
        }
        /**
         * @param string $archive
         *
         * @return Zend_Filter_Compress_Tar
         */
        public function setArchive($archive)
        {
        }
        /**
         * @return string
         */
        public function getTarget()
        {
        }
        /**
         * @param string $target
         *
         * @return Zend_Filter_Compress_Tar
         */
        public function setTarget($target)
        {
        }
        public function getMode()
        {
        }
        /**
         * @param string $mode
         */
        public function setMode($mode)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function compress($content)
        {
        }
        /**
         * @param string $content
         *
         * @return bool
         */
        public function decompress($content)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Filter_Compress_Zip extends \Zend_Filter_Compress_CompressAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function getArchive()
        {
        }
        /**
         * @param string $archive
         *
         * @return Zend_Filter_Compress_Rar
         */
        public function setArchive($archive)
        {
        }
        /**
         * @return string
         */
        public function getTarget()
        {
        }
        /**
         * @param string $target
         *
         * @return Zend_Filter_Compress_Rar
         */
        public function setTarget($target)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function compress($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function decompress($content)
        {
        }
        /**
         * @param string $error
         */
        public function _errorString($error)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Filter_Decompress extends \Zend_Filter_Compress
    {
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Decrypt extends \Zend_Filter_Encrypt
    {
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Digits implements \Zend_Filter_Interface
    {
        /**
         * @var mixed
         */
        public static $_unicodeEnabled;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Dir implements \Zend_Filter_Interface
    {
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Encrypt implements \Zend_Filter_Interface
    {
        public $_adapter;
        /**
         * @param array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function getAdapter()
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $options
         *
         * @return Zend_Filter_Encrypt
         */
        public function setAdapter($options = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed>|string $options
         */
        public function __call($method, $options)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    interface Zend_Filter_Encrypt_Interface
    {
        /**
         * @param string $value
         *
         * @return string
         */
        public function encrypt($value);
        /**
         * @param string $value
         *
         * @return string
         */
        public function decrypt($value);
    }
    class Zend_Filter_Encrypt_Mcrypt implements \Zend_Filter_Encrypt_Interface
    {
        public $_encryption = 'Psalm could not infer this type';
        /**
         * @var array<array-key, mixed>
         */
        public $_compression;
        public static $_srandCalled = false;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $options
         */
        public function __construct($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEncryption()
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Filter_File_Encryption
         */
        public function setEncryption($options)
        {
        }
        /**
         * @return string
         */
        public function getVector()
        {
        }
        /**
         * @param null|string $vector
         *
         * @return Zend_Filter_Encrypt_Mcrypt
         */
        public function setVector($vector = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCompression()
        {
        }
        /**
         * @param array<array-key, mixed>|string $compression
         *
         * @return Zend_Filter_Encrypt_Mcrypt
         */
        public function setCompression($compression)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function encrypt($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function decrypt($value)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return resource
         *
         * @throws Zend_Filter_Exception
         */
        public function _openCipher()
        {
        }
        /**
         * @param resource $cipher
         *
         * @return Zend_Filter_Encrypt_Mcrypt
         */
        public function _closeCipher($cipher)
        {
        }
        public function _initCipher($cipher)
        {
        }
        public function _srand()
        {
        }
    }
    class Zend_Filter_Encrypt_Openssl implements \Zend_Filter_Encrypt_Interface
    {
        public $_keys = 'Psalm could not infer this type';
        /**
         * @var string
         */
        public $_passphrase;
        /**
         * @var array<array-key, mixed>
         */
        public $_compression;
        /**
         * @var bool
         */
        public $_package;
        /**
         * @param array<array-key, mixed>|string $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param array<array-key, mixed>|string $keys
         *
         * @return Zend_Filter_Encrypt_Openssl
         */
        public function _setKeys($keys)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPublicKey()
        {
        }
        /**
         * @param array<array-key, mixed>|string $key
         *
         * @return Zend_Filter_Encrypt_Openssl
         */
        public function setPublicKey($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPrivateKey()
        {
        }
        /**
         * @param string $key
         * @param null|string $passphrase
         *
         * @return Zend_Filter_Encrypt_Openssl
         */
        public function setPrivateKey($key, $passphrase = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEnvelopeKey()
        {
        }
        /**
         * @return Zend_Filter_Encrypt_Openssl
         */
        public function setEnvelopeKey($key)
        {
        }
        /**
         * @return string
         */
        public function getPassphrase()
        {
        }
        /**
         * @param string $passphrase
         *
         * @return Zend_Filter_Encrypt_Openssl
         */
        public function setPassphrase($passphrase)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCompression()
        {
        }
        /**
         * @param array<array-key, mixed>|string $compression
         *
         * @return Zend_Filter_Encrypt_Openssl
         */
        public function setCompression($compression)
        {
        }
        /**
         * @return bool
         */
        public function getPackage()
        {
        }
        /**
         * @param bool $package
         *
         * @return Zend_Filter_Encrypt_Openssl
         */
        public function setPackage($package)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function encrypt($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function decrypt($value)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Filter_Exception extends \Zend_Exception
    {
    }
    class Zend_Filter_File_Decrypt extends \Zend_Filter_Decrypt
    {
        /**
         * @var string
         */
        public $_filename;
        /**
         * @return string
         */
        public function getFilename()
        {
        }
        /**
         * @param null|string $filename
         *
         * @return Zend_Filter_File_Encryt
         */
        public function setFilename($filename = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_File_Encrypt extends \Zend_Filter_Encrypt
    {
        /**
         * @var string
         */
        public $_filename;
        /**
         * @return string
         */
        public function getFilename()
        {
        }
        /**
         * @param null|string $filename
         *
         * @return Zend_Filter_File_Encryt
         */
        public function setFilename($filename = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_File_LowerCase extends \Zend_Filter_StringToLower
    {
        /**
         * @param null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_File_Rename implements \Zend_Filter_Interface
    {
        public $_files = array();
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return void
         */
        public function __construct($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFile()
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Filter_File_Rename
         */
        public function setFile($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Filter_File_Rename
         */
        public function addFile($options)
        {
        }
        /**
         * @param string $value
         * @param bool $source
         *
         * @return string
         */
        public function getNewName($value, $source = false)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function _convertOptions($options)
        {
        }
        /**
         * @param string $file
         *
         * @return array<array-key, mixed>
         */
        public function _getFileName($file)
        {
        }
    }
    class Zend_Filter_File_UpperCase extends \Zend_Filter_StringToUpper
    {
        /**
         * @param null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_HtmlEntities implements \Zend_Filter_Interface
    {
        /**
         * @var int
         */
        public $_quoteStyle;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var unknown_type
         */
        public $_doubleQuote;
        /**
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return int
         */
        public function getQuoteStyle()
        {
        }
        /**
         * @param int $quoteStyle
         *
         * @return Zend_Filter_HtmlEntities
         */
        public function setQuoteStyle($quoteStyle)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Filter_HtmlEntities
         */
        public function setEncoding($value)
        {
        }
        /**
         * @return string
         */
        public function getCharSet()
        {
        }
        /**
         * @param string $charSet
         *
         * @return Zend_Filter_HtmlEntities
         */
        public function setCharSet($charSet)
        {
        }
        /**
         * @return bool
         */
        public function getDoubleQuote()
        {
        }
        /**
         * @param bool $doubleQuote
         *
         * @return Zend_Filter_HtmlEntities
         */
        public function setDoubleQuote($doubleQuote)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Inflector implements \Zend_Filter_Interface
    {
        /**
         * @var Zend_Loader_PluginLoader_Interface
         */
        public $_pluginLoader;
        /**
         * @var string
         */
        public $_target;
        /**
         * @var bool
         */
        public $_throwTargetExceptionsOn;
        /**
         * @var string
         */
        public $_targetReplacementIdentifier;
        /**
         * @var array<array-key, mixed>
         */
        public $_rules;
        /**
         * @param array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader_Interface
         */
        public function getPluginLoader()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $pluginLoader
         *
         * @return Zend_Filter_Inflector
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $pluginLoader)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Filter_Inflector
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Filter_Inflector
         */
        public function setOptions($options)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Filter_Inflector
         */
        public function addFilterPrefixPath($prefix, $path)
        {
        }
        /**
         * @return Zend_Filter_Inflector
         */
        public function setThrowTargetExceptionsOn($throwTargetExceptionsOn)
        {
        }
        /**
         * @return bool
         */
        public function isThrowTargetExceptionsOn()
        {
        }
        /**
         * @param string $targetReplacementIdentifier
         *
         * @return Zend_Filter_Inflector
         */
        public function setTargetReplacementIdentifier($targetReplacementIdentifier)
        {
        }
        /**
         * @return string
         */
        public function getTargetReplacementIdentifier()
        {
        }
        public function setTarget($target)
        {
        }
        /**
         * @return string
         */
        public function getTarget()
        {
        }
        /**
         * @param reference $target
         *
         * @return Zend_Filter_Inflector
         */
        public function setTargetReference(&$target)
        {
        }
        /**
         * @param array<array-key, mixed> $rules
         *
         * @return Zend_Filter_Inflector
         */
        public function setRules(array $rules)
        {
        }
        public function addRules(array $rules)
        {
        }
        /**
         * @param null|string $spec
         *
         * @return array<array-key, mixed>|false
         */
        public function getRules($spec = null)
        {
        }
        /**
         * @param string $spec
         * @param int $index
         *
         * @return Zend_Filter_Interface|false
         */
        public function getRule($spec, $index)
        {
        }
        /**
         * @return Zend_Filter_Inflector
         */
        public function clearRules()
        {
        }
        /**
         * @param string $spec
         * @param Zend_Filter_Interface|array<array-key, mixed>|string $ruleSet
         *
         * @return Zend_Filter_Inflector
         */
        public function setFilterRule($spec, $ruleSet)
        {
        }
        /**
         * @param mixed $spec
         * @param mixed $ruleSet
         *
         * @return void
         */
        public function addFilterRule($spec, $ruleSet)
        {
        }
        /**
         * @param string $name
         * @param string $value
         *
         * @return Zend_Filter_Inflector
         */
        public function setStaticRule($name, $value)
        {
        }
        /**
         * @param string $name
         * @param mixed $reference
         *
         * @return Zend_Filter_Inflector
         */
        public function setStaticRuleReference($name, &$reference)
        {
        }
        /**
         * @param array<array-key, mixed>|string $source
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($source)
        {
        }
        /**
         * @param string $spec
         *
         * @return string
         */
        public function _normalizeSpec($spec)
        {
        }
        /**
         * @param string $rule
         *
         * @return Zend_Filter_Interface
         */
        public function _getRule($rule)
        {
        }
    }
    class Zend_Filter_Input
    {
        public const ALLOW_EMPTY = 'allowEmpty';
        public const BREAK_CHAIN = 'breakChainOnFailure';
        public const DEFAULT_VALUE = 'default';
        public const MESSAGES = 'messages';
        public const ESCAPE_FILTER = 'escapeFilter';
        public const FIELDS = 'fields';
        public const FILTER = 'filter';
        public const FILTER_CHAIN = 'filterChain';
        public const MISSING_MESSAGE = 'missingMessage';
        public const INPUT_NAMESPACE = 'inputNamespace';
        public const VALIDATOR_NAMESPACE = 'validatorNamespace';
        public const FILTER_NAMESPACE = 'filterNamespace';
        public const NOT_EMPTY_MESSAGE = 'notEmptyMessage';
        public const PRESENCE = 'presence';
        public const PRESENCE_OPTIONAL = 'optional';
        public const PRESENCE_REQUIRED = 'required';
        public const RULE = 'rule';
        public const RULE_WILDCARD = '*';
        public const VALIDATE = 'validate';
        public const VALIDATOR = 'validator';
        public const VALIDATOR_CHAIN = 'validatorChain';
        public const VALIDATOR_CHAIN_COUNT = 'validatorChainCount';
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var array<array-key, mixed>
         */
        public $_filterRules;
        /**
         * @var array<array-key, mixed>
         */
        public $_validatorRules;
        /**
         * @var array<array-key, mixed>
         */
        public $_validFields;
        /**
         * @var array<array-key, mixed>
         */
        public $_invalidMessages;
        /**
         * @var array<array-key, mixed>
         */
        public $_invalidErrors;
        /**
         * @var array<array-key, mixed>
         */
        public $_missingFields;
        /**
         * @var array<array-key, mixed>
         */
        public $_unknownFields;
        /**
         * @var Zend_Filter_Interface
         */
        public $_defaultEscapeFilter;
        /**
         * @var array<array-key, mixed>
         */
        public $_loaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_defaults;
        /**
         * @var bool
         */
        public $_processed;
        /**
         * @var Zend_Translate
         */
        public $_translator;
        /**
         * @var Boolean
         */
        public $_translatorDisabled;
        /**
         * @param array<array-key, mixed> $filterRules
         * @param array<array-key, mixed> $validatorRules
         * @param array<array-key, mixed>|null $data
         * @param array<array-key, mixed>|null $options
         */
        public function __construct($filterRules, $validatorRules, ?array $data = null, ?array $options = null)
        {
        }
        /**
         * @param mixed $namespaces
         *
         * @return Zend_Filter_Input
         */
        public function addNamespace($namespaces)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Filter_Input
         */
        public function addFilterPrefixPath($prefix, $path)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Filter_Input
         */
        public function addValidatorPrefixPath($prefix, $path)
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         * @param string $type
         *
         * @return Zend_Filter_Input
         *
         * @throws Zend_Filter_Exception
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader, $type)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_PluginLoader_Interface
         *
         * @throws Zend_Filter_Exception
         */
        public function getPluginLoader($type)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getInvalid()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMissing()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getUnknown()
        {
        }
        /**
         * @param null|string $fieldName
         *
         * @return mixed
         */
        public function getEscaped($fieldName = null)
        {
        }
        /**
         * @return mixed
         */
        public function _escapeRecursive($data)
        {
        }
        /**
         * @param null|string $fieldName
         *
         * @return mixed
         */
        public function getUnescaped($fieldName = null)
        {
        }
        /**
         * @param string $fieldName
         *
         * @return mixed
         */
        public function __get($fieldName)
        {
        }
        /**
         * @return bool
         */
        public function hasInvalid()
        {
        }
        /**
         * @return bool
         */
        public function hasMissing()
        {
        }
        /**
         * @return bool
         */
        public function hasUnknown()
        {
        }
        /**
         * @return bool
         */
        public function hasValid()
        {
        }
        /**
         * @param null|string $fieldName
         *
         * @return bool
         */
        public function isValid($fieldName = null)
        {
        }
        /**
         * @param string $fieldName
         *
         * @return bool
         */
        public function __isset($fieldName)
        {
        }
        /**
         * @return Zend_Filter_Input
         *
         * @throws Zend_Filter_Exception
         */
        public function process()
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return Zend_Filter_Input
         */
        public function setData(array $data)
        {
        }
        /**
         * @param mixed $escapeFilter
         *
         * @return Zend_Filter_Interface
         */
        public function setDefaultEscapeFilter($escapeFilter)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Filter_Input
         *
         * @throws Zend_Filter_Exception
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translator
         *
         * @return Zend_Filter_Input
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Filter_Input
         */
        public function setDisableTranslator($flag)
        {
        }
        /**
         * @return bool
         */
        public function translatorIsDisabled()
        {
        }
        /**
         * @return void
         */
        public function _filter()
        {
        }
        /**
         * @param array<array-key, mixed> $filterRule
         *
         * @return void
         */
        public function _filterRule(array $filterRule)
        {
        }
        /**
         * @return Zend_Filter_Interface
         */
        public function _getDefaultEscapeFilter()
        {
        }
        /**
         * @param string $rule
         * @param string $field
         *
         * @return string
         */
        public function _getMissingMessage($rule, $field)
        {
        }
        /**
         * @return string
         */
        public function _getNotEmptyMessage($rule, $field)
        {
        }
        /**
         * @return void
         */
        public function _process()
        {
        }
        /**
         * @return void
         */
        public function _validate()
        {
        }
        /**
         * @param array<array-key, mixed> $validatorRule
         *
         * @return void
         */
        public function _validateRule(array $validatorRule)
        {
        }
        /**
         * @param array<array-key, mixed> $validatorRule
         *
         * @return mixed
         */
        public function _getNotEmptyValidatorInstance($validatorRule)
        {
        }
        /**
         * @param mixed $classBaseName
         *
         * @return Zend_Filter_Interface
         */
        public function _getFilter($classBaseName)
        {
        }
        /**
         * @param mixed $classBaseName
         *
         * @return Zend_Validate_Interface
         */
        public function _getValidator($classBaseName)
        {
        }
        /**
         * @param string $type
         * @param mixed $classBaseName
         *
         * @return Zend_Filter_Interface|Zend_Validate_Interface
         *
         * @throws Zend_Filter_Exception
         */
        public function _getFilterOrValidator($type, $classBaseName)
        {
        }
    }
    class Zend_Filter_Int implements \Zend_Filter_Interface
    {
        /**
         * @param string $value
         *
         * @return int
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    interface Zend_Filter_Interface
    {
        /**
         * @param mixed $value
         *
         * @return mixed
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value);
    }
    class Zend_Filter_LocalizedToNormalized implements \Zend_Filter_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        public function __construct($options = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Filter_LocalizedToNormalized
         */
        public function setOptions(?array $options = null)
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_NormalizedToLocalized implements \Zend_Filter_Interface
    {
        public $_options = 'Psalm could not infer this type';
        public function __construct($options = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Filter_LocalizedToNormalized
         */
        public function setOptions(?array $options = null)
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Null implements \Zend_Filter_Interface
    {
        public const BOOLEAN = 1;
        public const INTEGER = 2;
        public const EMPTY_ARRAY = 4;
        public const STRING = 8;
        public const ZERO = 16;
        public const ALL = 31;
        public $_constants = 'Psalm could not infer this type';
        /**
         * @var int
         */
        public $_type;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getType()
        {
        }
        /**
         * @param array<array-key, mixed>|int|null $type
         *
         * @return Zend_Filter_Null
         *
         * @throws Zend_Filter_Exception
         */
        public function setType($type = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_PregReplace implements \Zend_Filter_Interface
    {
        /**
         * @var mixed
         */
        public $_matchPattern;
        /**
         * @var mixed
         */
        public $_replacement;
        /**
         * @var bool
         */
        public static $_unicodeSupportEnabled;
        /**
         * @return bool
         */
        public static function isUnicodeSupportEnabled()
        {
        }
        /**
         * @return bool
         */
        public static function _determineUnicodeSupport()
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param mixed $match
         *
         * @return Zend_Filter_PregReplace
         */
        public function setMatchPattern($match)
        {
        }
        /**
         * @return string
         */
        public function getMatchPattern()
        {
        }
        /**
         * @param mixed $replacement
         *
         * @return Zend_Filter_PregReplace
         */
        public function setReplacement($replacement)
        {
        }
        /**
         * @return string
         */
        public function getReplacement()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_RealPath implements \Zend_Filter_Interface
    {
        /**
         * @var bool
         */
        public $_exists;
        /**
         * @param Zend_Config|bool $options
         */
        public function __construct($options = true)
        {
        }
        /**
         * @return bool
         */
        public function getExists()
        {
        }
        /**
         * @param Zend_Config|bool $exists
         *
         * @return Zend_Filter_RealPath
         */
        public function setExists($exists)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_StringToLower implements \Zend_Filter_Interface
    {
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param null|string $encoding
         *
         * @return Zend_Filter_StringToLower
         *
         * @throws Zend_Filter_Exception
         */
        public function setEncoding($encoding = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_StringToUpper implements \Zend_Filter_Interface
    {
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param null|string $encoding
         *
         * @return Zend_Filter_StringToUpper
         *
         * @throws Zend_Filter_Exception
         */
        public function setEncoding($encoding = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_StringTrim implements \Zend_Filter_Interface
    {
        /**
         * @var null|string
         */
        public $_charList;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return null|string
         */
        public function getCharList()
        {
        }
        /**
         * @param null|string $charList
         *
         * @return Zend_Filter_StringTrim
         */
        public function setCharList($charList)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
        /**
         * @param string $value
         * @param string $charlist
         *
         * @return string
         */
        public function _unicodeTrim($value, $charlist = '\\\\s')
        {
        }
    }
    class Zend_Filter_StripNewlines implements \Zend_Filter_Interface
    {
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_StripTags implements \Zend_Filter_Interface
    {
        public const UNIQUE_ID_PREFIX = '__Zend_Filter_StripTags__';
        /**
         * @var bool
         */
        public $commentsAllowed;
        /**
         * @var array<array-key, mixed>
         */
        public $_tagsAllowed;
        /**
         * @var array<array-key, mixed>
         */
        public $_attributesAllowed;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return bool
         */
        public function getCommentsAllowed()
        {
        }
        /**
         * @param bool $commentsAllowed
         *
         * @return Zend_Filter_StripTags
         */
        public function setCommentsAllowed($commentsAllowed)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTagsAllowed()
        {
        }
        /**
         * @param array<array-key, mixed>|string $tagsAllowed
         *
         * @return Zend_Filter_StripTags
         */
        public function setTagsAllowed($tagsAllowed)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttributesAllowed()
        {
        }
        /**
         * @param array<array-key, mixed>|string $attributesAllowed
         *
         * @return Zend_Filter_StripTags
         */
        public function setAttributesAllowed($attributesAllowed)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
        /**
         * @param string $tag
         *
         * @return string
         */
        public function _filterTag($tag)
        {
        }
    }
    class Zend_Filter_Word_CamelCaseToDash extends \Zend_Filter_Word_CamelCaseToSeparator
    {
        /**
         * @return void
         */
        public function __construct()
        {
        }
    }
    class Zend_Filter_Word_CamelCaseToSeparator extends \Zend_Filter_Word_Separator_Abstract
    {
        /**
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Word_CamelCaseToUnderscore extends \Zend_Filter_Word_CamelCaseToSeparator
    {
        /**
         * @return void
         */
        public function __construct()
        {
        }
    }
    class Zend_Filter_Word_DashToCamelCase extends \Zend_Filter_Word_SeparatorToCamelCase
    {
        /**
         * @return void
         */
        public function __construct()
        {
        }
    }
    class Zend_Filter_Word_DashToSeparator extends \Zend_Filter_Word_Separator_Abstract
    {
        /**
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
    }
    class Zend_Filter_Word_DashToUnderscore extends \Zend_Filter_Word_SeparatorToSeparator
    {
        /**
         * @return void
         */
        public function __construct()
        {
        }
    }
    class Zend_Filter_Word_SeparatorToCamelCase extends \Zend_Filter_Word_Separator_Abstract
    {
        /**
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
        /**
         * @param array<array-key, mixed> $matches
         *
         * @return string
         */
        public static function _strtoupperArray(array $matches)
        {
        }
    }
    class Zend_Filter_Word_SeparatorToDash extends \Zend_Filter_Word_SeparatorToSeparator
    {
        /**
         * @param string $searchSeparator
         *
         * @return void
         */
        public function __construct($searchSeparator = ' ')
        {
        }
    }
    class Zend_Filter_Word_SeparatorToSeparator extends \Zend_Filter_PregReplace
    {
        public $_searchSeparator = null;
        public $_replacementSeparator = null;
        /**
         * @param string $searchSeparator
         *
         * @return void
         */
        public function __construct($searchSeparator = ' ', $replacementSeparator = '-')
        {
        }
        /**
         * @param string $separator
         *
         * @return static
         */
        public function setSearchSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getSearchSeparator()
        {
        }
        /**
         * @param string $separator
         *
         * @return static
         */
        public function setReplacementSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getReplacementSeparator()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         *
         * @throws Zend_Filter_Exception
         */
        public function filter($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _separatorToSeparatorFilter($value)
        {
        }
    }
    class Zend_Filter_Word_Separator_Abstract extends \Zend_Filter_PregReplace
    {
        public $_separator = null;
        /**
         * @param string $separator
         *
         * @return void
         */
        public function __construct($separator = ' ')
        {
        }
        /**
         * @param string $separator
         *
         * @return static
         */
        public function setSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getSeparator()
        {
        }
    }
    class Zend_Filter_Word_UnderscoreToCamelCase extends \Zend_Filter_Word_SeparatorToCamelCase
    {
        /**
         * @return void
         */
        public function __construct()
        {
        }
    }
    class Zend_Filter_Word_UnderscoreToDash extends \Zend_Filter_Word_SeparatorToSeparator
    {
        /**
         * @return void
         */
        public function __construct()
        {
        }
    }
    class Zend_Filter_Word_UnderscoreToSeparator extends \Zend_Filter_Word_SeparatorToSeparator
    {
        /**
         * @return void
         */
        public function __construct($replacementSeparator = ' ')
        {
        }
    }
    class Zend_Form implements \Iterator, \Countable, \Zend_Validate_Interface
    {
        public const DECORATOR = 'DECORATOR';
        public const ELEMENT = 'ELEMENT';
        public const METHOD_DELETE = 'delete';
        public const METHOD_GET = 'get';
        public const METHOD_POST = 'post';
        public const METHOD_PUT = 'put';
        public const ENCTYPE_URLENCODED = 'application/x-www-form-urlencoded';
        public const ENCTYPE_MULTIPART = 'multipart/form-data';
        /**
         * @var array<array-key, mixed>
         */
        public $_attribs;
        /**
         * @var array<array-key, mixed>
         */
        public $_decorators;
        /**
         * @var string
         */
        public $_defaultDisplayGroupClass;
        /**
         * @var string
         */
        public $_description;
        /**
         * @var bool
         */
        public $_disableLoadDefaultDecorators;
        /**
         * @var array<array-key, mixed>
         */
        public $_displayGroupPrefixPaths;
        /**
         * @var array<array-key, mixed>
         */
        public $_displayGroups;
        /**
         * @var array<array-key, mixed>|null
         */
        public $_elementDecorators;
        /**
         * @var array<array-key, mixed>
         */
        public $_elementPrefixPaths;
        /**
         * @var array<array-key, mixed>
         */
        public $_elements;
        /**
         * @var string
         */
        public $_elementsBelongTo;
        /**
         * @var array<array-key, mixed>
         */
        public $_errorMessages;
        /**
         * @var bool
         */
        public $_errorsExist;
        /**
         * @var bool
         */
        public $_errorsForced;
        /**
         * @var int|null
         */
        public $_formOrder;
        /**
         * @var bool
         */
        public $_isArray;
        /**
         * @var string
         */
        public $_legend;
        /**
         * @var array<array-key, mixed>
         */
        public $_loaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_methods;
        /**
         * @var array<array-key, mixed>
         */
        public $_order;
        /**
         * @var bool
         */
        public $_orderUpdated;
        /**
         * @var array<array-key, mixed>
         */
        public $_subFormPrefixPaths;
        /**
         * @var array<array-key, mixed>
         */
        public $_subForms;
        /**
         * @var Zend_Translate
         */
        public $_translator;
        /**
         * @var Zend_Translate
         */
        public static $_translatorDefault;
        /**
         * @var bool
         */
        public $_translatorDisabled;
        /**
         * @var Zend_View_Interface
         */
        public $_view;
        /**
         * @var bool
         */
        public $_isRendered;
        /**
         * @param mixed|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return void
         */
        public function __clone()
        {
        }
        /**
         * @return Zend_Form
         */
        public function reset()
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Form
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         * @param null|string $type
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader, $type = null)
        {
        }
        /**
         * @param null|string $type
         *
         * @return Zend_Loader_PluginLoader_Interface
         *
         * @throws Zend_Form_Exception
         */
        public function getPluginLoader($type = null)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         * @param null|string $type
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function addPrefixPath($prefix, $path, $type = null)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_Form
         */
        public function addPrefixPaths(array $spec)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         * @param null|string $type
         *
         * @return Zend_Form
         */
        public function addElementPrefixPath($prefix, $path, $type = null)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_Form
         */
        public function addElementPrefixPaths(array $spec)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Form
         */
        public function addDisplayGroupPrefixPath($prefix, $path)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_Form
         */
        public function addDisplayGroupPrefixPaths(array $spec)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return $this
         */
        public function setAttrib($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_Form
         */
        public function addAttribs(array $attribs)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return $this
         */
        public function setAttribs(array $attribs)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getAttrib($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttribs()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function removeAttrib($key)
        {
        }
        /**
         * @return Zend_Form
         */
        public function clearAttribs()
        {
        }
        /**
         * @param string $action
         *
         * @return Zend_Form
         */
        public function setAction($action)
        {
        }
        /**
         * @return string
         */
        public function getAction()
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function setMethod($method)
        {
        }
        /**
         * @return string
         */
        public function getMethod()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form
         */
        public function setEnctype($value)
        {
        }
        /**
         * @return string
         */
        public function getEnctype()
        {
        }
        /**
         * @param string $value
         * @param bool $allowBrackets
         *
         * @return string
         */
        public function filterName($value, $allowBrackets = false)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function setName($name)
        {
        }
        /**
         * @return null|string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getFullyQualifiedName()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form
         */
        public function setLegend($value)
        {
        }
        /**
         * @return string
         */
        public function getLegend()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form
         */
        public function setDescription($value)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param int $index
         *
         * @return Zend_Form
         */
        public function setOrder($index)
        {
        }
        /**
         * @return int|null
         */
        public function getOrder()
        {
        }
        public function _setIsRendered()
        {
        }
        public function _getIsRendered()
        {
        }
        /**
         * @param Zend_Form_Element|string $element
         * @param null|string $name
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function addElement($element, $name = null, $options = null)
        {
        }
        /**
         * @param string $type
         * @param string $name
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Form_Element
         *
         * @throws Zend_Form_Exception
         */
        public function createElement($type, $name, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $elements
         *
         * @return Zend_Form
         */
        public function addElements(array $elements)
        {
        }
        /**
         * @param array<array-key, mixed> $elements
         *
         * @return Zend_Form
         */
        public function setElements(array $elements)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Element|null
         */
        public function getElement($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getElements()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeElement($name)
        {
        }
        /**
         * @return Zend_Form
         */
        public function clearElements()
        {
        }
        /**
         * @param array<array-key, mixed> $defaults
         *
         * @return Zend_Form
         */
        public function setDefaults(array $defaults)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Form
         */
        public function setDefault($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getValue($name)
        {
        }
        /**
         * @param bool $suppressArrayNotation
         *
         * @return array<array-key, mixed>
         */
        public function getValues($suppressArrayNotation = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $suppressArrayNotation
         *
         * @return array<array-key, mixed>
         */
        public function getValidValues($data, $suppressArrayNotation = false)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getUnfilteredValue($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getUnfilteredValues()
        {
        }
        /**
         * @param array<array-key, mixed> $filters
         *
         * @return Zend_Form
         */
        public function setElementFilters(array $filters)
        {
        }
        /**
         * @param string $array
         *
         * @return Zend_Form
         */
        public function setElementsBelongTo($array)
        {
        }
        /**
         * @param null|string $name
         *
         * @return void
         */
        public function _setElementsBelongTo($name = null)
        {
        }
        /**
         * @return null|string
         */
        public function getElementsBelongTo()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form
         */
        public function setIsArray($flag)
        {
        }
        /**
         * @return bool
         */
        public function isArray()
        {
        }
        /**
         * @param Zend_Form $form
         * @param string $name
         * @param int|null $order
         *
         * @return Zend_Form
         */
        public function addSubForm(\Zend_Form $form, $name, $order = null)
        {
        }
        /**
         * @param array<array-key, mixed> $subForms
         *
         * @return Zend_Form
         */
        public function addSubForms(array $subForms)
        {
        }
        /**
         * @param array<array-key, mixed> $subForms
         *
         * @return Zend_Form
         */
        public function setSubForms(array $subForms)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form|null
         */
        public function getSubForm($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getSubForms()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeSubForm($name)
        {
        }
        /**
         * @return Zend_Form
         */
        public function clearSubForms()
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Form
         */
        public function setDefaultDisplayGroupClass($class)
        {
        }
        /**
         * @return string
         */
        public function getDefaultDisplayGroupClass()
        {
        }
        /**
         * @param array<array-key, mixed> $elements
         * @param string $name
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function addDisplayGroup(array $elements, $name, $options = null)
        {
        }
        /**
         * @param Zend_Form_DisplayGroup $group
         * @param null|string $name
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function _addDisplayGroupObject(\Zend_Form_DisplayGroup $group, $name = null)
        {
        }
        /**
         * @param array<array-key, mixed> $groups
         *
         * @return Zend_Form
         */
        public function addDisplayGroups(array $groups)
        {
        }
        /**
         * @param array<array-key, mixed> $groups
         *
         * @return Zend_Form
         */
        public function setDisplayGroups(array $groups)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_DisplayGroup|null
         */
        public function getDisplayGroup($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDisplayGroups()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeDisplayGroup($name)
        {
        }
        /**
         * @return Zend_Form
         */
        public function clearDisplayGroups()
        {
        }
        /**
         * @param array<array-key, mixed> $values
         *
         * @return Zend_Form
         */
        public function populate(array $values)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _getArrayName($value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         * @param string $arrayPath
         *
         * @return string
         */
        public function _dissolveArrayValue($value, $arrayPath)
        {
        }
        /**
         * @param array<array-key, mixed> $array
         * @param null|string $arrayPath
         * @param string $key
         *
         * @return array<array-key, mixed>
         */
        public function _dissolveArrayUnsetKey($array, $arrayPath, $key)
        {
        }
        /**
         * @param mixed $value
         * @param string $arrayPath
         *
         * @return array<array-key, mixed>
         */
        public function _attachToArray($value, $arrayPath)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getElementsAndSubFormsOrdered()
        {
        }
        /**
         * @param array<array-key, mixed> $into
         *
         * @return array<array-key, mixed>
         */
        public function _array_replace_recursive(array $into)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return bool
         *
         * @throws Zend_Form_Exception
         */
        public function isValid($data)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return bool
         */
        public function isValidPartial(array $data)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return string
         */
        public function processAjax(array $data)
        {
        }
        /**
         * @param string $message
         *
         * @return Zend_Form
         */
        public function addErrorMessage($message)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Form
         */
        public function addErrorMessages(array $messages)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Form
         */
        public function setErrorMessages(array $messages)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrorMessages()
        {
        }
        /**
         * @return Zend_Form
         */
        public function clearErrorMessages()
        {
        }
        /**
         * @return Zend_Form
         */
        public function markAsError()
        {
        }
        /**
         * @param string $message
         *
         * @return Zend_Form
         */
        public function addError($message)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Form
         */
        public function addErrors(array $messages)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Form
         */
        public function setErrors(array $messages)
        {
        }
        public function persistData()
        {
        }
        /**
         * @return bool
         */
        public function isErrors()
        {
        }
        /**
         * @return bool
         */
        public function hasErrors()
        {
        }
        /**
         * @param null|string $name
         * @param bool $suppressArrayNotation
         *
         * @return array<array-key, mixed>
         */
        public function getErrors($name = null, $suppressArrayNotation = false)
        {
        }
        /**
         * @param null|string $name
         * @param bool $suppressArrayNotation
         *
         * @return array<array-key, mixed>
         */
        public function getMessages($name = null, $suppressArrayNotation = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCustomMessages()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return Zend_Form
         */
        public function setView(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return Zend_View_Interface|null
         */
        public function getView()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function _getDecorator($name, $options)
        {
        }
        /**
         * @param Zend_Form_Decorator_Interface|string $decorator
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function addDecorator($decorator, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function addDecorators(array $decorators)
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         *
         * @return Zend_Form
         */
        public function setDecorators(array $decorators)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Decorator_Abstract|false
         */
        public function getDecorator($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDecorators()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeDecorator($name)
        {
        }
        /**
         * @return Zend_Form
         */
        public function clearDecorators()
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         * @param array<array-key, mixed>|null $elements
         * @param bool $include
         *
         * @return Zend_Form
         */
        public function setElementDecorators(array $decorators, ?array $elements = null, $include = true)
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         *
         * @return Zend_Form
         */
        public function setDisplayGroupDecorators(array $decorators)
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         *
         * @return Zend_Form
         */
        public function setSubFormDecorators(array $decorators)
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translator
         *
         * @return Zend_Form
         *
         * @throws Zend_Form_Exception
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translator
         *
         * @return void
         *
         * @throws Zend_Form_Exception
         */
        public static function setDefaultTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate|null
         */
        public function getTranslator()
        {
        }
        /**
         * @return bool
         */
        public function hasTranslator()
        {
        }
        /**
         * @return Zend_Translate|null
         */
        public static function getDefaultTranslator()
        {
        }
        /**
         * @return bool
         */
        public static function hasDefaultTranslator()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form
         */
        public function setDisableTranslator($flag)
        {
        }
        /**
         * @return bool
         */
        public function translatorIsDisabled()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form|Zend_Form_Element|null
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param Zend_Form|Zend_Form_Element $value
         *
         * @return void
         *
         * @throws Zend_Form_Exception
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function __unset($name)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return string
         *
         * @throws Zend_Form_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return Zend_Form|Zend_Form_DisplayGroup|Zend_Form_Element
         *
         * @throws Zend_Form_Exception
         */
        public function current()
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form
         */
        public function setDisableLoadDefaultDecorators($flag)
        {
        }
        /**
         * @return bool
         */
        public function loadDefaultDecoratorsIsDisabled()
        {
        }
        /**
         * @return Zend_Form
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function removeFromIteration($name)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Form_Exception
         */
        public function _sort()
        {
        }
        /**
         * @param array<array-key, mixed> $decorator
         * @param mixed $name
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function _loadDecorator(array $decorator, $name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getErrorMessages()
        {
        }
    }
    class Zend_Form_Decorator_Abstract implements \Zend_Form_Decorator_Interface
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_placement;
        /**
         * @var Zend_Form|Zend_Form_Element
         */
        public $_element;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var string
         */
        public $_separator;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_Decorator_Abstract
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Form_Decorator_Abstract
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Form_Decorator_Abstract
         */
        public function setOption($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getOption($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param mixed $key
         *
         * @return void
         */
        public function removeOption($key)
        {
        }
        /**
         * @return Zend_Form_Decorator_Abstract
         */
        public function clearOptions()
        {
        }
        /**
         * @param Zend_Form|Zend_Form_Element $element
         *
         * @return Zend_Form_Decorator_Abstract
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function setElement($element)
        {
        }
        /**
         * @return Zend_Form|Zend_Form_Element
         */
        public function getElement()
        {
        }
        /**
         * @return string
         */
        public function getPlacement()
        {
        }
        /**
         * @return string
         */
        public function getSeparator()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_Callback extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var array<array-key, mixed>|string
         */
        public $_callback;
        /**
         * @param callback $callback
         *
         * @return Zend_Form_Decorator_Callback
         *
         * @throws Zend_Form_Exception
         */
        public function setCallback($callback)
        {
        }
        /**
         * @return array<array-key, mixed>|null|string
         */
        public function getCallback()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_Captcha extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_Captcha_ReCaptcha extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_Captcha_Word extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_Description extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var bool
         */
        public $_escape;
        /**
         * @var string
         */
        public $_placement;
        /**
         * @var string
         */
        public $_tag;
        /**
         * @param string $tag
         *
         * @return Zend_Form_Decorator_Description
         */
        public function setTag($tag)
        {
        }
        /**
         * @return string
         */
        public function getTag()
        {
        }
        /**
         * @return string
         */
        public function getClass()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Decorator_Description
         */
        public function setEscape($flag)
        {
        }
        /**
         * @return true
         */
        public function getEscape()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_DtDdWrapper extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_placement;
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_Errors extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_Exception extends \Zend_Form_Exception
    {
    }
    class Zend_Form_Decorator_Fieldset extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var array<array-key, mixed>
         */
        public $stripAttribs;
        /**
         * @var string
         */
        public $_legend;
        /**
         * @var string
         */
        public $_placement;
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form_Decorator_Fieldset
         */
        public function setLegend($value)
        {
        }
        /**
         * @return string
         */
        public function getLegend()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_File extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var array<array-key, mixed>
         */
        public $_attribBlacklist;
        /**
         * @var string
         */
        public $_placement;
        /**
         * @return array<array-key, mixed>
         */
        public function getAttribs()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_Form extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_helper;
        /**
         * @param string $helper
         *
         * @return Zend_Form_Decorator_Form
         */
        public function setHelper($helper)
        {
        }
        /**
         * @return string
         */
        public function getHelper()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_FormElements extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @param string $baseBelongsTo
         * @param string $belongsTo
         *
         * @return string
         */
        public function mergeBelongsTo($baseBelongsTo, $belongsTo)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_FormErrors extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var array<array-key, mixed>
         */
        public $_defaults;
        public $_ignoreSubForms;
        public $_showCustomFormErrors;
        public $_onlyCustomFormErrors;
        public $_markupElementLabelEnd;
        public $_markupElementLabelStart;
        public $_markupListEnd;
        public $_markupListItemEnd;
        public $_markupListItemStart;
        public $_markupListStart;
        /**
         * @var bool
         */
        public $_escape;
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
        /**
         * @return void
         */
        public function initOptions()
        {
        }
        /**
         * @return string
         */
        public function getMarkupElementLabelStart()
        {
        }
        /**
         * @param string $markupElementLabelStart
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setMarkupElementLabelStart($markupElementLabelStart)
        {
        }
        /**
         * @return string
         */
        public function getMarkupElementLabelEnd()
        {
        }
        /**
         * @param string $markupElementLabelEnd
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setMarkupElementLabelEnd($markupElementLabelEnd)
        {
        }
        /**
         * @return string
         */
        public function getMarkupListStart()
        {
        }
        /**
         * @param string $markupListStart
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setMarkupListStart($markupListStart)
        {
        }
        /**
         * @return string
         */
        public function getMarkupListEnd()
        {
        }
        /**
         * @param string $markupListEnd
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setMarkupListEnd($markupListEnd)
        {
        }
        /**
         * @return string
         */
        public function getMarkupListItemStart()
        {
        }
        /**
         * @param string $markupListItemStart
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setMarkupListItemStart($markupListItemStart)
        {
        }
        /**
         * @return string
         */
        public function getMarkupListItemEnd()
        {
        }
        /**
         * @param string $markupListItemEnd
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setMarkupListItemEnd($markupListItemEnd)
        {
        }
        /**
         * @return bool
         */
        public function ignoreSubForms()
        {
        }
        /**
         * @param bool $ignoreSubForms
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setIgnoreSubForms($ignoreSubForms)
        {
        }
        /**
         * @return bool
         */
        public function getShowCustomFormErrors()
        {
        }
        /**
         * @param bool $showCustomFormErrors
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setShowCustomFormErrors($showCustomFormErrors)
        {
        }
        /**
         * @return bool
         */
        public function getOnlyCustomFormErrors()
        {
        }
        /**
         * @param bool $onlyCustomFormErrors
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setOnlyCustomFormErrors($onlyCustomFormErrors)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Decorator_FormErrors
         */
        public function setEscape($flag)
        {
        }
        /**
         * @return bool
         */
        public function getEscape()
        {
        }
        /**
         * @param Zend_Form_Element $element
         * @param Zend_View_Interface $view
         *
         * @return string
         */
        public function renderLabel(\Zend_Form_Element $element, \Zend_View_Interface $view)
        {
        }
        /**
         * @param Zend_Form $form
         * @param Zend_View_Interface $view
         *
         * @return string
         */
        public function _recurseForm(\Zend_Form $form, \Zend_View_Interface $view)
        {
        }
    }
    class Zend_Form_Decorator_HtmlTag extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var string
         */
        public $_placement;
        /**
         * @var string
         */
        public $_tag;
        /**
         * @var Zend_Filter
         */
        public $_tagFilter;
        /**
         * @return string
         */
        public function _htmlAttribs(array $attribs)
        {
        }
        /**
         * @param string $tag
         *
         * @return string
         */
        public function normalizeTag($tag)
        {
        }
        /**
         * @param string $tag
         *
         * @return Zend_Form_Decorator_HtmlTag
         */
        public function setTag($tag)
        {
        }
        /**
         * @return string
         */
        public function getTag()
        {
        }
        /**
         * @param string $tag
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function _getOpenTag($tag, ?array $attribs = null)
        {
        }
        /**
         * @param string $tag
         *
         * @return string
         */
        public function _getCloseTag($tag)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
        /**
         * @return string
         */
        public function _getEncoding()
        {
        }
    }
    class Zend_Form_Decorator_Image extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var array<array-key, mixed>
         */
        public $_attribBlacklist;
        /**
         * @var string
         */
        public $_placement;
        /**
         * @var string
         */
        public $_tag;
        /**
         * @param string $tag
         *
         * @return Zend_Form_Decorator_Image
         */
        public function setTag($tag)
        {
        }
        /**
         * @return void
         */
        public function getTag()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttribs()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    interface Zend_Form_Decorator_Interface
    {
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null);
        /**
         * @param mixed $element
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function setElement($element);
        /**
         * @return mixed
         */
        public function getElement();
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function setOptions(array $options);
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function setConfig(\Zend_Config $config);
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function setOption($key, $value);
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getOption($key);
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions();
        /**
         * @param string $key
         *
         * @return bool
         */
        public function removeOption($key);
        /**
         * @return Zend_Form_Decorator_Interface
         */
        public function clearOptions();
        /**
         * @param string $content
         *
         * @return string
         */
        public function render($content);
    }
    class Zend_Form_Decorator_Label extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        public const IMPLICIT = 'IMPLICIT';
        public const IMPLICIT_PREPEND = 'IMPLICIT_PREPEND';
        public const IMPLICIT_APPEND = 'IMPLICIT_APPEND';
        /**
         * @var string
         */
        public $_placement;
        /**
         * @var string
         */
        public $_tag;
        /**
         * @var string
         */
        public $_tagClass;
        /**
         * @param string $id
         *
         * @return Zend_Form_Decorator_Label
         */
        public function setId($id)
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @param string $tag
         *
         * @return Zend_Form_Decorator_Label
         */
        public function setTag($tag)
        {
        }
        /**
         * @return string
         */
        public function getTag()
        {
        }
        /**
         * @param string $tagClass
         *
         * @return Zend_Form_Decorator_Label
         */
        public function setTagClass($tagClass)
        {
        }
        /**
         * @return void
         */
        public function getTagClass()
        {
        }
        /**
         * @return string
         */
        public function getClass()
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function _loadOptReqKey($key)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Form_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return string
         */
        public function getLabel()
        {
        }
        /**
         * @return string
         */
        public function getPlacement()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    interface Zend_Form_Decorator_Marker_File_Interface
    {
    }
    class Zend_Form_Decorator_PrepareElements extends \Zend_Form_Decorator_FormElements
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
        public function _recursivelyPrepareForm(\Zend_Form $form)
        {
        }
    }
    class Zend_Form_Decorator_Tooltip extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_ViewHelper extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var array<array-key, mixed>
         */
        public $_buttonTypes;
        /**
         * @var string
         */
        public $_helper;
        /**
         * @param string $helper
         *
         * @return Zend_Form_Decorator_Element_ViewHelper
         */
        public function setHelper($helper)
        {
        }
        /**
         * @return string
         */
        public function getHelper()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getElementAttribs()
        {
        }
        /**
         * @param Zend_Form_Element $element
         *
         * @return null|string
         */
        public function getValue($element)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_Decorator_ViewScript extends \Zend_Form_Decorator_Abstract
    {
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_placement;
        /**
         * @var string
         */
        public $_viewScript;
        /**
         * @var string
         */
        public $_viewModule;
        /**
         * @param string $script
         *
         * @return Zend_Form_Decorator_ViewScript
         */
        public function setViewScript($script)
        {
        }
        /**
         * @return null|string
         */
        public function getViewScript()
        {
        }
        /**
         * @return Zend_Form_Decorator_ViewScript
         */
        public function setViewModule($viewModule)
        {
        }
        /**
         * @return null|string
         */
        public function getViewModule()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         *
         * @throws Zend_Form_Decorator_Exception
         */
        public function render($content)
        {
        }
    }
    class Zend_Form_DisplayGroup implements \Iterator, \Countable
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_attribs;
        /**
         * @var array<array-key, mixed>
         */
        public $_decorators;
        /**
         * @var string
         */
        public $_description;
        /**
         * @var bool
         */
        public $_disableLoadDefaultDecorators;
        /**
         * @var array<array-key, mixed>
         */
        public $_elementOrder;
        /**
         * @var array<array-key, mixed>
         */
        public $_elements;
        /**
         * @var Zend_Form
         */
        public $_form;
        /**
         * @var bool
         */
        public $_groupUpdated;
        /**
         * @var Zend_Loader_PluginLoader
         */
        public $_loader;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var int
         */
        public $_order;
        /**
         * @var Zend_Translate
         */
        public $_translator;
        /**
         * @var bool
         */
        public $_translatorDisabled;
        /**
         * @var Zend_View_Interface
         */
        public $_view;
        /**
         * @param string $name
         * @param Zend_Loader_PluginLoader $loader
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($name, \Zend_Loader_PluginLoader $loader, $options = null)
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return $this
         */
        public function setAttrib($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_Form_DisplayGroup
         */
        public function addAttribs(array $attribs)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return $this
         */
        public function setAttribs(array $attribs)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getAttrib($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttribs()
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function removeAttrib($key)
        {
        }
        /**
         * @return Zend_Form
         */
        public function clearAttribs()
        {
        }
        /**
         * @param Zend_Form $form
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setForm(\Zend_Form $form)
        {
        }
        /**
         * @return Zend_Form|null
         */
        public function getForm()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function filterName($value)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getFullyQualifiedName()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @param string $legend
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setLegend($legend)
        {
        }
        /**
         * @return string
         */
        public function getLegend()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setDescription($value)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param int $order
         *
         * @return Zend_Form_Element
         */
        public function setOrder($order)
        {
        }
        /**
         * @return int
         */
        public function getOrder()
        {
        }
        /**
         * @param Zend_Form_Element $element
         *
         * @return Zend_Form_DisplayGroup
         */
        public function addElement(\Zend_Form_Element $element)
        {
        }
        /**
         * @param array<array-key, mixed> $elements
         *
         * @return Zend_Form_DisplayGroup
         *
         * @throws Zend_Form_Exception
         */
        public function addElements(array $elements)
        {
        }
        /**
         * @param array<array-key, mixed> $elements
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setElements(array $elements)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Element|null
         */
        public function getElement($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getElements()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeElement($name)
        {
        }
        /**
         * @return Zend_Form_DisplayGroup
         */
        public function clearElements()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader $loader
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader $loader)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public function getPluginLoader()
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Form_DisplayGroup
         */
        public function addPrefixPath($prefix, $path)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_Form_DisplayGroup
         */
        public function addPrefixPaths(array $spec)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element
         */
        public function setDisableLoadDefaultDecorators($flag)
        {
        }
        /**
         * @return bool
         */
        public function loadDefaultDecoratorsIsDisabled()
        {
        }
        /**
         * @return Zend_Form_DisplayGroup
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function _getDecorator($name, $options = null)
        {
        }
        /**
         * @param Zend_Form_Decorator_Interface|string $decorator
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Form_DisplayGroup
         */
        public function addDecorator($decorator, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         *
         * @return Zend_Form_DisplayGroup
         */
        public function addDecorators(array $decorators)
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setDecorators(array $decorators)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Decorator_Abstract|false
         */
        public function getDecorator($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDecorators()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeDecorator($name)
        {
        }
        /**
         * @return Zend_Form_DisplayGroup
         */
        public function clearDecorators()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setView(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return Zend_View_Interface
         */
        public function getView()
        {
        }
        /**
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translator
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @return bool
         */
        public function hasTranslator()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_DisplayGroup
         */
        public function setDisableTranslator($flag)
        {
        }
        /**
         * @return bool
         */
        public function translatorIsDisabled()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return string
         *
         * @throws Zend_Form_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return Zend_Form_Element
         */
        public function current()
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return void
         */
        public function _sort()
        {
        }
        /**
         * @param array<array-key, mixed> $decorator
         * @param mixed $name
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function _loadDecorator(array $decorator, $name)
        {
        }
    }
    class Zend_Form_Element implements \Zend_Validate_Interface
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var bool
         */
        public $_allowEmpty;
        /**
         * @var bool
         */
        public $_autoInsertNotEmptyValidator;
        /**
         * @var string
         */
        public $_belongsTo;
        /**
         * @var array<array-key, mixed>
         */
        public $_decorators;
        /**
         * @var string
         */
        public $_description;
        /**
         * @var bool
         */
        public $_disableLoadDefaultDecorators;
        /**
         * @var array<array-key, mixed>
         */
        public $_errorMessages;
        /**
         * @var array<array-key, mixed>
         */
        public $_errors;
        /**
         * @var string
         */
        public $_errorMessageSeparator;
        /**
         * @var array<array-key, mixed>
         */
        public $_filters;
        /**
         * @var bool
         */
        public $_ignore;
        /**
         * @var bool
         */
        public $_isArray;
        /**
         * @var bool
         */
        public $_isError;
        /**
         * @var bool
         */
        public $_isErrorForced;
        /**
         * @var string
         */
        public $_label;
        /**
         * @var array<array-key, mixed>
         */
        public $_loaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_messages;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var int
         */
        public $_order;
        /**
         * @var bool
         */
        public $_required;
        /**
         * @var Zend_Translate
         */
        public $_translator;
        /**
         * @var bool
         */
        public $_translatorDisabled;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var array<array-key, mixed>
         */
        public $_validators;
        /**
         * @var array<array-key, mixed>
         */
        public $_validatorRules;
        /**
         * @var mixed
         */
        public $_value;
        /**
         * @var Zend_View_Interface
         */
        public $_view;
        /**
         * @var bool
         */
        public $_isPartialRendering;
        /**
         * @var bool
         */
        public $_concatJustValuesInErrorMessage;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $spec
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         *
         * @throws Zend_Form_Exception
         */
        public function __construct($spec, $options = null)
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element
         */
        public function setDisableLoadDefaultDecorators($flag)
        {
        }
        /**
         * @return bool
         */
        public function loadDefaultDecoratorsIsDisabled()
        {
        }
        /**
         * @return Zend_Form_Element
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @param Zend_Form_Decorator_Interface $decorator
         *
         * @return string
         */
        public static function resolveElementId(\Zend_Form_Decorator_Interface $decorator)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_Element
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Form_Element
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param Zend_Translate|null $translator
         *
         * @return Zend_Form_Element
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @return bool
         */
        public function hasTranslator()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element
         */
        public function setDisableTranslator($flag)
        {
        }
        /**
         * @return bool
         */
        public function translatorIsDisabled()
        {
        }
        /**
         * @param string $value
         * @param bool $allowBrackets
         *
         * @return string
         */
        public function filterName($value, $allowBrackets = false)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Element
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getFullyQualifiedName()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Form_Element
         */
        public function setValue($value)
        {
        }
        /**
         * @param string $value
         * @param string $key
         *
         * @return void
         */
        public function _filterValue(&$value, &$key)
        {
        }
        /**
         * @return mixed
         */
        public function getValue()
        {
        }
        /**
         * @return mixed
         */
        public function getUnfilteredValue()
        {
        }
        /**
         * @param string $label
         *
         * @return $this
         */
        public function setLabel($label)
        {
        }
        /**
         * @return string
         */
        public function getLabel()
        {
        }
        /**
         * @param int $order
         *
         * @return Zend_Form_Element
         */
        public function setOrder($order)
        {
        }
        /**
         * @return int
         */
        public function getOrder()
        {
        }
        /**
         * @param bool $flag
         *
         * @return $this
         */
        public function setRequired($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function isRequired()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element
         */
        public function setAutoInsertNotEmptyValidator($flag)
        {
        }
        /**
         * @return bool
         */
        public function autoInsertNotEmptyValidator()
        {
        }
        /**
         * @param string $description
         *
         * @return Zend_Form_Element
         */
        public function setDescription($description)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param bool $flag
         *
         * @return $this
         */
        public function setAllowEmpty($flag)
        {
        }
        /**
         * @return bool
         */
        public function getAllowEmpty()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element
         */
        public function setIgnore($flag)
        {
        }
        /**
         * @return bool
         */
        public function getIgnore()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element
         */
        public function setIsArray($flag)
        {
        }
        /**
         * @return bool
         */
        public function isArray()
        {
        }
        /**
         * @param string $array
         *
         * @return Zend_Form_Element
         */
        public function setBelongsTo($array)
        {
        }
        /**
         * @return string
         */
        public function getBelongsTo()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return $this
         *
         * @throws Zend_Form_Exception
         */
        public function setAttrib($name, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return $this
         */
        public function setAttribs(array $attribs)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getAttrib($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttribs()
        {
        }
        /**
         * @param bool $concatJustValuesInErrorMessage
         *
         * @return Zend_Form_Element
         */
        public function setConcatJustValuesInErrorMessage($concatJustValuesInErrorMessage)
        {
        }
        /**
         * @return bool
         */
        public function getConcatJustValuesInErrorMessage()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return voide
         */
        public function __set($key, $value)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return string
         *
         * @throws Zend_Form_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         * @param string $type
         *
         * @return Zend_Form_Element
         *
         * @throws Zend_Form_Exception
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader, $type)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_PluginLoader
         *
         * @throws Zend_Loader_Exception
         */
        public function getPluginLoader($type)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         * @param null|string $type
         *
         * @return Zend_Form_Element
         *
         * @throws Zend_Form_Exception
         */
        public function addPrefixPath($prefix, $path, $type = null)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return Zend_Form_Element
         */
        public function addPrefixPaths(array $spec)
        {
        }
        /**
         * @param Zend_Validate_Interface|string $validator
         * @param bool $breakChainOnFailure
         * @param array<array-key, mixed> $options
         *
         * @return $this
         *
         * @throws Zend_Form_Exception
         */
        public function addValidator($validator, $breakChainOnFailure = false, $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $validators
         *
         * @return $this
         */
        public function addValidators(array $validators)
        {
        }
        /**
         * @param array<array-key, mixed> $validators
         *
         * @return Zend_Form_Element
         */
        public function setValidators(array $validators)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Validate_Interface|false
         */
        public function getValidator($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getValidators()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeValidator($name)
        {
        }
        /**
         * @return Zend_Form_Element
         */
        public function clearValidators()
        {
        }
        /**
         * @param mixed $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
        /**
         * @param string $message
         *
         * @return Zend_Form_Element
         */
        public function addErrorMessage($message)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Form_Element
         */
        public function addErrorMessages(array $messages)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Form_Element
         */
        public function setErrorMessages(array $messages)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrorMessages()
        {
        }
        /**
         * @return Zend_Form_Element
         */
        public function clearErrorMessages()
        {
        }
        /**
         * @return string
         */
        public function getErrorMessageSeparator()
        {
        }
        /**
         * @param string $separator
         *
         * @return Zend_Form_Element
         */
        public function setErrorMessageSeparator($separator)
        {
        }
        /**
         * @return Zend_Form_Element
         */
        public function markAsError()
        {
        }
        /**
         * @param string $message
         *
         * @return Zend_Form_Element
         */
        public function addError($message)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Form_Element
         */
        public function addErrors(array $messages)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Form_Element
         */
        public function setErrors(array $messages)
        {
        }
        /**
         * @return bool
         */
        public function hasErrors()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages()
        {
        }
        /**
         * @param Zend_Filter_Interface|string $filter
         *
         * @return Zend_Form_Element
         */
        public function addFilter($filter, $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $filters
         *
         * @return Zend_Form_Element
         */
        public function addFilters(array $filters)
        {
        }
        /**
         * @param array<array-key, mixed> $filters
         *
         * @return Zend_Form_Element
         */
        public function setFilters(array $filters)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Filter_Interface
         */
        public function getFilter($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFilters()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Element
         */
        public function removeFilter($name)
        {
        }
        /**
         * @return Zend_Form_Element
         */
        public function clearFilters()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return Zend_Form_Element
         */
        public function setView(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return Zend_View_Interface|null
         */
        public function getView()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function _getDecorator($name, $options)
        {
        }
        /**
         * @param Zend_Form_Decorator_Interface|string $decorator
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Form_Element
         */
        public function addDecorator($decorator, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         *
         * @return Zend_Form_Element
         */
        public function addDecorators(array $decorators)
        {
        }
        /**
         * @param array<array-key, mixed> $decorators
         *
         * @return Zend_Form_Element
         */
        public function setDecorators(array $decorators)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Decorator_Abstract|false
         */
        public function getDecorator($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDecorators()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Element
         */
        public function removeDecorator($name)
        {
        }
        /**
         * @return Zend_Form_Element
         */
        public function clearDecorators()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param array<array-key, mixed> $filter
         *
         * @return Zend_Filter_Interface
         */
        public function _loadFilter(array $filter)
        {
        }
        /**
         * @param array<array-key, mixed> $validator
         *
         * @return Zend_Validate_Interface
         */
        public function _loadValidator(array $validator)
        {
        }
        /**
         * @param array<array-key, mixed> $decorator
         * @param mixed $name
         *
         * @return Zend_Form_Decorator_Interface
         */
        public function _loadDecorator(array $decorator, $name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getErrorMessages()
        {
        }
        /**
         * @return bool
         */
        public function _hasErrorMessages()
        {
        }
    }
    class Zend_Form_Element_Button extends \Zend_Form_Element_Submit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @param mixed $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
    }
    class Zend_Form_Element_Captcha extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        public const CAPTCHA = 'CAPTCHA';
        /**
         * @var Zend_Captcha_Adapter
         */
        public $_captcha;
        /**
         * @return Zend_Captcha_Adapter
         */
        public function getCaptcha()
        {
        }
        /**
         * @param Zend_Captcha_Adapter|array<array-key, mixed>|string $captcha
         * @param array<array-key, mixed> $options
         */
        public function setCaptcha($captcha, $options = array())
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|string $spec
         *
         * @return void
         */
        public function __construct($spec, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_Element_Captcha
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_PluginLoader
         *
         * @throws Zend_Loader_Exception
         */
        public function getPluginLoader($type)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         * @param null|string $type
         *
         * @return Zend_Form_Element
         *
         * @throws Zend_Form_Exception
         */
        public function addPrefixPath($prefix, $path, $type = null)
        {
        }
        /**
         * @return Zend_Form_Element_Captcha
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @param mixed $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
    }
    class Zend_Form_Element_Checkbox extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var bool
         */
        public $checked;
        /**
         * @var string
         */
        public $helper;
        /**
         * @var array<array-key, mixed>
         */
        public $options;
        /**
         * @var string
         */
        public $_checkedValue;
        /**
         * @var string
         */
        public $_uncheckedValue;
        /**
         * @var string
         */
        public $_value;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setValue($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setCheckedValue($value)
        {
        }
        /**
         * @return string
         */
        public function getCheckedValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setUncheckedValue($value)
        {
        }
        /**
         * @return string
         */
        public function getUncheckedValue()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element_Checkbox
         */
        public function setChecked($flag)
        {
        }
        /**
         * @return bool
         */
        public function isChecked()
        {
        }
    }
    class Zend_Form_Element_Exception extends \Zend_Form_Exception
    {
    }
    class Zend_Form_Element_File extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        public const TRANSFER_ADAPTER = 'TRANSFER_ADAPTER';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var Zend_File_Transfer_Adapter_Abstract
         */
        public $_adapter;
        /**
         * @var bool
         */
        public $_validated;
        /**
         * @var bool
         */
        public $_valueDisabled;
        /**
         * @var int
         */
        public $_counter;
        /**
         * @var int
         */
        public static $_maxFileSize;
        /**
         * @return Zend_Form_Element_File
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         * @param string $type
         *
         * @return Zend_Form_Element_File
         *
         * @throws Zend_Form_Exception
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader, $type)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_PluginLoader_Interface
         *
         * @throws Zend_Loader_Exception
         */
        public function getPluginLoader($type)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         * @param null|string $type
         *
         * @return Zend_Form_Element_File
         *
         * @throws Zend_Form_Exception
         */
        public function addPrefixPath($prefix, $path, $type = null)
        {
        }
        /**
         * @param Zend_File_Transfer_Adapter_Abstract|string $adapter
         *
         * @return Zend_Form_Element_File
         *
         * @throws Zend_Form_Element_Exception
         */
        public function setTransferAdapter($adapter)
        {
        }
        /**
         * @return Zend_File_Transfer_Adapter_Abstract
         */
        public function getTransferAdapter()
        {
        }
        /**
         * @param Zend_Validate_Interface|string $validator
         * @param bool $breakChainOnFailure
         * @param mixed $options
         *
         * @return $this
         *
         * @throws Zend_Form_Exception
         */
        public function addValidator($validator, $breakChainOnFailure = false, $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $validators
         *
         * @return $this
         */
        public function addValidators(array $validators)
        {
        }
        /**
         * @param array<array-key, mixed> $validators
         *
         * @return Zend_Form_Element_File
         */
        public function setValidators(array $validators)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Validate_Interface|null
         */
        public function getValidator($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getValidators()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Element_File
         */
        public function removeValidator($name)
        {
        }
        /**
         * @return Zend_Form_Element_File
         */
        public function clearValidators()
        {
        }
        /**
         * @param array<array-key, mixed>|string $filter
         * @param array<array-key, mixed>|null|string $options
         *
         * @return Zend_Form_Element_File
         */
        public function addFilter($filter, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $filters
         *
         * @return Zend_Form_Element_File
         */
        public function addFilters(array $filters)
        {
        }
        /**
         * @param array<array-key, mixed> $filters
         *
         * @return Zend_Form_Element_File
         */
        public function setFilters(array $filters)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Filter_Interface|null
         */
        public function getFilter($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFilters()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Form_Element_File
         */
        public function removeFilter($name)
        {
        }
        /**
         * @return Zend_Form_Element_File
         */
        public function clearFilters()
        {
        }
        /**
         * @param string $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
        /**
         * @return bool
         */
        public function receive()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @return bool
         */
        public function hasErrors()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Form_Element_File
         */
        public function setDestination($path)
        {
        }
        /**
         * @return string
         */
        public function getDestination()
        {
        }
        /**
         * @param null|string $value
         * @param bool $path
         *
         * @return string
         */
        public function getFileName($value = null, $path = true)
        {
        }
        /**
         * @param null|string $value
         *
         * @return array<array-key, mixed>
         */
        public function getFileInfo($value = null)
        {
        }
        /**
         * @param int $count
         *
         * @return Zend_Form_Element_File
         */
        public function setMultiFile($count)
        {
        }
        /**
         * @return int
         */
        public function getMultiFile()
        {
        }
        /**
         * @return int
         */
        public function getMaxFileSize()
        {
        }
        /**
         * @param int $size
         *
         * @return int
         */
        public function setMaxFileSize($size)
        {
        }
        /**
         * @param string $setting
         *
         * @return int
         */
        public function _convertIniToInteger($setting)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element_File
         */
        public function setValueDisabled($flag)
        {
        }
        /**
         * @return bool
         */
        public function isValueDisabled()
        {
        }
        /**
         * @return null|string
         */
        public function getValue()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Form_Element_File
         */
        public function setValue($value)
        {
        }
        /**
         * @param Zend_Translate|null $translator
         *
         * @return Zend_Form_Element_File
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element_File
         */
        public function setDisableTranslator($flag)
        {
        }
        /**
         * @return bool
         */
        public function translatorIsDisabled()
        {
        }
        /**
         * @return bool
         */
        public function isReceived()
        {
        }
        /**
         * @return bool
         */
        public function isUploaded()
        {
        }
        /**
         * @return bool
         */
        public function isFiltered()
        {
        }
        /**
         * @param string $hash
         *
         * @return array<array-key, mixed>|string
         */
        public function getHash($hash = 'crc32')
        {
        }
        /**
         * @return array<array-key, mixed>|string
         */
        public function getFileSize()
        {
        }
        /**
         * @return array<array-key, mixed>|string
         */
        public function getMimeType()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return string
         *
         * @throws Zend_Form_Element_Exception
         */
        public function render(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getErrorMessages()
        {
        }
    }
    class Zend_Form_Element_Hash extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var mixed
         */
        public $_hash;
        /**
         * @var string
         */
        public $_salt;
        /**
         * @var Zend_Session_Namespace
         */
        public $_session;
        /**
         * @var int
         */
        public $_timeout;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $spec
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($spec, $options = null)
        {
        }
        /**
         * @param Zend_Session_Namespace $session
         *
         * @return Zend_Form_Element_Hash
         */
        public function setSession($session)
        {
        }
        /**
         * @return Zend_Session_Namespace
         */
        public function getSession()
        {
        }
        /**
         * @return Zend_Form_Element_Hash
         */
        public function initCsrfValidator()
        {
        }
        /**
         * @param string $salt
         *
         * @return Zend_Form_Element_Hash
         */
        public function setSalt($salt)
        {
        }
        /**
         * @return string
         */
        public function getSalt()
        {
        }
        /**
         * @return string
         */
        public function getHash()
        {
        }
        /**
         * @return string
         */
        public function getSessionName()
        {
        }
        /**
         * @param int $ttl
         *
         * @return Zend_Form_Element_Hash
         */
        public function setTimeout($ttl)
        {
        }
        /**
         * @return int
         */
        public function getTimeout()
        {
        }
        /**
         * @return null
         */
        public function getLabel()
        {
        }
        /**
         * @return void
         */
        public function initCsrfToken()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return void
         */
        public function _generateHash()
        {
        }
    }
    class Zend_Form_Element_Hidden extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Form_Element_Image extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var string
         */
        public $src;
        /**
         * @var mixed
         */
        public $_imageValue;
        /**
         * @return Zend_Form_Element_Image
         */
        public function loadDefaultDecorators()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Form_Element_Image
         */
        public function setImage($path)
        {
        }
        /**
         * @return string
         */
        public function getImage()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Form_Element_Image
         */
        public function setImageValue($value)
        {
        }
        /**
         * @return mixed
         */
        public function getImageValue()
        {
        }
        /**
         * @return bool
         */
        public function isChecked()
        {
        }
    }
    class Zend_Form_Element_Multi extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var array<array-key, mixed>
         */
        public $options;
        /**
         * @var bool
         */
        public $_registerInArrayValidator;
        /**
         * @var string
         */
        public $_separator;
        /**
         * @var array<array-key, mixed>
         */
        public $_translated;
        /**
         * @return mixed
         */
        public function getSeparator()
        {
        }
        /**
         * @param mixed $separator
         *
         * @return Zend_Form_Element_Multi
         */
        public function setSeparator($separator)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getMultiOptions()
        {
        }
        /**
         * @param string $option
         * @param string $value
         *
         * @return $this
         */
        public function addMultiOption($option, $value = '')
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return $this
         */
        public function addMultiOptions(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Form_Element_Multi
         */
        public function setMultiOptions(array $options)
        {
        }
        /**
         * @param string $option
         *
         * @return mixed
         */
        public function getMultiOption($option)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMultiOptions()
        {
        }
        /**
         * @param string $option
         *
         * @return bool
         */
        public function removeMultiOption($option)
        {
        }
        /**
         * @return Zend_Form_Element_Multi
         */
        public function clearMultiOptions()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element_Multi
         */
        public function setRegisterInArrayValidator($flag)
        {
        }
        /**
         * @return bool
         */
        public function registerInArrayValidator()
        {
        }
        /**
         * @param string $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
        /**
         * @param string $option
         * @param string $value
         *
         * @return bool
         */
        public function _translateOption($option, $value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _translateValue($value)
        {
        }
    }
    class Zend_Form_Element_MultiCheckbox extends \Zend_Form_Element_Multi
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var bool
         */
        public $_isArray;
        /**
         * @return Zend_Form_Element_MultiCheckbox
         */
        public function loadDefaultDecorators()
        {
        }
    }
    class Zend_Form_Element_Multiselect extends \Zend_Form_Element_Select
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $multiple;
        /**
         * @var string
         */
        public $helper;
        /**
         * @var bool
         */
        public $_isArray;
    }
    class Zend_Form_Element_Note extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var bool
         */
        public $_ignore;
        /**
         * @param mixed $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
    }
    class Zend_Form_Element_Password extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @var bool
         */
        public $renderPassword;
        /**
         * @param bool $flag
         *
         * @return Zend_Form_Element_Password
         */
        public function setRenderPassword($flag)
        {
        }
        /**
         * @return bool
         */
        public function renderPassword()
        {
        }
        /**
         * @param string $value
         * @param mixed|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
    }
    class Zend_Form_Element_Radio extends \Zend_Form_Element_Multi
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @return Zend_Form_Element_Radio
         */
        public function loadDefaultDecorators()
        {
        }
    }
    class Zend_Form_Element_Reset extends \Zend_Form_Element_Submit
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Form_Element_Select extends \Zend_Form_Element_Multi
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $multiple;
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Form_Element_Submit extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $spec
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         *
         * @return void
         */
        public function __construct($spec, $options = null)
        {
        }
        /**
         * @return string
         */
        public function getLabel()
        {
        }
        /**
         * @return bool
         */
        public function isChecked()
        {
        }
        /**
         * @return Zend_Form_Element_Submit
         */
        public function loadDefaultDecorators()
        {
        }
    }
    class Zend_Form_Element_Text extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Form_Element_Textarea extends \Zend_Form_Element_Xhtml
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
        /**
         * @var string
         */
        public $helper;
    }
    class Zend_Form_Element_Xhtml extends \Zend_Form_Element
    {
        public const DECORATOR = 'DECORATOR';
        public const FILTER = 'FILTER';
        public const VALIDATE = 'VALIDATE';
    }
    class Zend_Form_Exception extends \Zend_Exception
    {
    }
    class Zend_Form_SubForm extends \Zend_Form
    {
        public const DECORATOR = 'DECORATOR';
        public const ELEMENT = 'ELEMENT';
        public const METHOD_DELETE = 'delete';
        public const METHOD_GET = 'get';
        public const METHOD_POST = 'post';
        public const METHOD_PUT = 'put';
        public const ENCTYPE_URLENCODED = 'application/x-www-form-urlencoded';
        public const ENCTYPE_MULTIPART = 'multipart/form-data';
        /**
         * @var bool
         */
        public $_isArray;
        /**
         * @return Zend_Form_SubForm
         */
        public function loadDefaultDecorators()
        {
        }
    }
    class Zend_Gdata extends \Zend_Gdata_App
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'xapi';
        /**
         * @var string
         */
        public $_defaultPostUri;
        /**
         * @var array<array-key, mixed>
         */
        public $_registeredPackages;
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @var Zend_Gdata_HttpClient
         */
        public $_httpClient;
        /**
         * @var Zend_Gdata_HttpClient
         */
        public static $_staticHttpClient;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param string $uri
         * @param Zend_Http_Client|null $client
         * @param string $className
         *
         * @return Zend_Gdata_App_Feed|string
         *
         * @throws Zend_Gdata_App_Exception
         */
        public static function import($uri, $client = null, $className = 'Zend_Gdata_Feed', $useObjectMapping = true)
        {
        }
        /**
         * @param mixed $location
         * @param string $className
         *
         * @return Zend_Gdata_App_Feed|string
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getFeed($location, $className = 'Zend_Gdata_Feed')
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_App_Entry|string
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getEntry($location, $className = 'Zend_Gdata_Entry')
        {
        }
        /**
         * @param string $method
         * @param string $url
         * @param array<array-key, mixed> $headers
         * @param null|string $body
         * @param null|string $contentType
         * @param int|null $remainingRedirects
         *
         * @return Zend_Http_Response
         */
        public function performHttpRequest($method, $url, $headers = array(), $body = null, $contentType = null, $remainingRedirects = null)
        {
        }
        /**
         * @return bool
         */
        public function isAuthenticated()
        {
        }
    }
    class Zend_Gdata_Analytics extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'analytics';
        public const ANALYTICS_FEED_URI = 'https://www.googleapis.com/analytics/v2.4/data';
        public const ANALYTICS_ACCOUNT_FEED_URI = 'https://www.googleapis.com/analytics/v2.4/management/accounts';
        public static $namespaces = 'Psalm could not infer this type';
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param Zend_Uri_Uri|string $uri
         *
         * @return Zend_Gdata_Analytics_AccountFeed
         */
        public function getAccountFeed($uri)
        {
        }
        /**
         * @param Zend_Uri_Uri|string $uri
         *
         * @return Zend_Gdata_Analytics_DataFeed
         */
        public function getDataFeed($uri)
        {
        }
        /**
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function newDataQuery()
        {
        }
        /**
         * @return Zend_Gdata_Analytics_AccountQuery
         */
        public function newAccountQuery()
        {
        }
    }
    class Zend_Gdata_Analytics_AccountEntry extends \Zend_Gdata_Entry
    {
        public $_accountId;
        public $_accountName;
        public $_profileId;
        public $_webPropertyId;
        public $_currency;
        public $_timezone;
        public $_tableId;
        public $_profileName;
        public $_goal;
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMElement $child
         *
         * @return void
         */
        public function takeChildFromDOM($child)
        {
        }
    }
    class Zend_Gdata_Analytics_AccountFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Analytics_AccountQuery extends \Zend_Gdata_Query
    {
        public const ANALYTICS_FEED_URI = 'https://www.googleapis.com/analytics/v2.4/management/accounts';
        public $_defaultFeedUri = 'https://www.googleapis.com/analytics/v2.4/management/accounts';
        /**
         * @var string
         */
        public $_accountId;
        /**
         * @var string
         */
        public $_webpropertyId;
        /**
         * @var string
         */
        public $_profileId;
        /**
         * @var bool
         */
        public $_webproperties;
        /**
         * @var bool
         */
        public $_profiles;
        /**
         * @var bool
         */
        public $_goals;
        /**
         * @param string $accountId
         *
         * @return Zend_Gdata_Analytics_AccountQuery
         */
        public function setAccountId($accountId)
        {
        }
        /**
         * @return string
         */
        public function getAccountId()
        {
        }
        /**
         * @param string $webpropertyId
         *
         * @return Zend_Gdata_Analytics_AccountQuery
         */
        public function setWebpropertyId($webpropertyId)
        {
        }
        /**
         * @return string
         */
        public function getWebpropertyId()
        {
        }
        /**
         * @param string $profileId
         *
         * @return Zend_Gdata_Analytics_AccountQuery
         */
        public function setProfileId($profileId)
        {
        }
        /**
         * @return string
         */
        public function getProfileId()
        {
        }
        /**
         * @param string $accountId
         *
         * @return Zend_Gdata_Analytics_AccountQuery
         */
        public function webproperties($accountId = '~all')
        {
        }
        /**
         * @param string $webpropertyId
         * @param string $accountId
         *
         * @return Zend_Gdata_Analytics_AccountQuery
         */
        public function profiles($webpropertyId = '~all', $accountId = '~all')
        {
        }
        public function goals($profileId = '~all', $webpropertyId = '~all', $accountId = '~all')
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Analytics_DataEntry extends \Zend_Gdata_Entry
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_dimensions;
        /**
         * @var array<array-key, mixed>
         */
        public $_metrics;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMElement $child
         *
         * @return void
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getDimension($name)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getMetric($name)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getValue($name)
        {
        }
    }
    class Zend_Gdata_Analytics_DataFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Analytics_DataQuery extends \Zend_Gdata_Query
    {
        public const ANALYTICS_FEED_URI = 'https://www.googleapis.com/analytics/v2.4/data';
        public const DIMENSION_BROWSER = 'ga:browser';
        public const DIMENSION_BROWSER_VERSION = 'ga:browserVersion';
        public const DIMENSION_CITY = 'ga:city';
        public const DIMENSION_CONNECTIONSPEED = 'ga:connectionSpeed';
        public const DIMENSION_CONTINENT = 'ga:continent';
        public const DIMENSION_COUNTRY = 'ga:country';
        public const DIMENSION_DATE = 'ga:date';
        public const DIMENSION_DAY = 'ga:day';
        public const DIMENSION_DAYS_SINCE_LAST_VISIT = 'ga:daysSinceLastVisit';
        public const DIMENSION_FLASH_VERSION = 'ga:flashVersion';
        public const DIMENSION_HOSTNAME = 'ga:hostname';
        public const DIMENSION_HOUR = 'ga:hour';
        public const DIMENSION_JAVA_ENABLED = 'ga:javaEnabled';
        public const DIMENSION_LANGUAGE = 'ga:language';
        public const DIMENSION_LATITUDE = 'ga:latitude';
        public const DIMENSION_LONGITUDE = 'ga:longitude';
        public const DIMENSION_MONTH = 'ga:month';
        public const DIMENSION_NETWORK_DOMAIN = 'ga:networkDomain';
        public const DIMENSION_NETWORK_LOCATION = 'ga:networkLocation';
        public const DIMENSION_OPERATING_SYSTEM = 'ga:operatingSystem';
        public const DIMENSION_OPERATING_SYSTEM_VERSION = 'ga:operatingSystemVersion';
        public const DIMENSION_PAGE_DEPTH = 'ga:pageDepth';
        public const DIMENSION_REGION = 'ga:region';
        public const DIMENSION_SCREEN_COLORS = 'ga:screenColors';
        public const DIMENSION_SCREEN_RESOLUTION = 'ga:screenResolution';
        public const DIMENSION_SUB_CONTINENT = 'ga:subContinent';
        public const DIMENSION_USER_DEFINED_VALUE = 'ga:userDefinedValue';
        public const DIMENSION_VISIT_COUNT = 'ga:visitCount';
        public const DIMENSION_VISIT_LENGTH = 'ga:visitLength';
        public const DIMENSION_VISITOR_TYPE = 'ga:visitorType';
        public const DIMENSION_WEEK = 'ga:week';
        public const DIMENSION_YEAR = 'ga:year';
        public const DIMENSION_AD_CONTENT = 'ga:adContent';
        public const DIMENSION_AD_GROUP = 'ga:adGroup';
        public const DIMENSION_AD_SLOT = 'ga:adSlot';
        public const DIMENSION_AD_SLOT_POSITION = 'ga:adSlotPosition';
        public const DIMENSION_CAMPAIGN = 'ga:campaign';
        public const DIMENSION_KEYWORD = 'ga:keyword';
        public const DIMENSION_MEDIUM = 'ga:medium';
        public const DIMENSION_REFERRAL_PATH = 'ga:referralPath';
        public const DIMENSION_SOURCE = 'ga:source';
        public const DIMENSION_EXIT_PAGE_PATH = 'ga:exitPagePath';
        public const DIMENSION_LANDING_PAGE_PATH = 'ga:landingPagePath';
        public const DIMENSION_PAGE_PATH = 'ga:pagePath';
        public const DIMENSION_PAGE_TITLE = 'ga:pageTitle';
        public const DIMENSION_SECOND_PAGE_PATH = 'ga:secondPagePath';
        public const DIMENSION_AFFILIATION = 'ga:affiliation';
        public const DIMENSION_DAYS_TO_TRANSACTION = 'ga:daysToTransaction';
        public const DIMENSION_PRODUCT_CATEGORY = 'ga:productCategory';
        public const DIMENSION_PRODUCT_NAME = 'ga:productName';
        public const DIMENSION_PRODUCT_SKU = 'ga:productSku';
        public const DIMENSION_TRANSACTION_ID = 'ga:transactionId';
        public const DIMENSION_VISITS_TO_TRANSACTION = 'ga:visitsToTransaction';
        public const DIMENSION_SEARCH_CATEGORY = 'ga:searchCategory';
        public const DIMENSION_SEARCH_DESTINATION_PAGE = 'ga:searchDestinationPage';
        public const DIMENSION_SEARCH_KEYWORD = 'ga:searchKeyword';
        public const DIMENSION_SEARCH_KEYWORD_REFINEMENT = 'ga:searchKeywordRefinement';
        public const DIMENSION_SEARCH_START_PAGE = 'ga:searchStartPage';
        public const DIMENSION_SEARCH_USED = 'ga:searchUsed';
        public const DIMENSION_NEXT_PAGE_PATH = 'ga:nextPagePath';
        public const DIMENSION_PREV_PAGE_PATH = 'ga:previousPagePath';
        public const DIMENSION_EVENT_CATEGORY = 'ga:eventCategory';
        public const DIMENSION_EVENT_ACTION = 'ga:eventAction';
        public const DIMENSION_EVENT_LABEL = 'ga:eventLabel';
        public const DIMENSION_CUSTOM_VAR_NAME_1 = 'ga:customVarName1';
        public const DIMENSION_CUSTOM_VAR_NAME_2 = 'ga:customVarName2';
        public const DIMENSION_CUSTOM_VAR_NAME_3 = 'ga:customVarName3';
        public const DIMENSION_CUSTOM_VAR_NAME_4 = 'ga:customVarName4';
        public const DIMENSION_CUSTOM_VAR_NAME_5 = 'ga:customVarName5';
        public const DIMENSION_CUSTOM_VAR_VALUE_1 = 'ga:customVarValue1';
        public const DIMENSION_CUSTOM_VAR_VALUE_2 = 'ga:customVarValue2';
        public const DIMENSION_CUSTOM_VAR_VALUE_3 = 'ga:customVarValue3';
        public const DIMENSION_CUSTOM_VAR_VALUE_4 = 'ga:customVarValue4';
        public const DIMENSION_CUSTOM_VAR_VALUE_5 = 'ga:customVarValue5';
        public const METRIC_BOUNCES = 'ga:bounces';
        public const METRIC_ENTRANCES = 'ga:entrances';
        public const METRIC_EXITS = 'ga:exits';
        public const METRIC_NEW_VISITS = 'ga:newVisits';
        public const METRIC_PAGEVIEWS = 'ga:pageviews';
        public const METRIC_TIME_ON_PAGE = 'ga:timeOnPage';
        public const METRIC_TIME_ON_SITE = 'ga:timeOnSite';
        public const METRIC_VISITORS = 'ga:visitors';
        public const METRIC_VISITS = 'ga:visits';
        public const METRIC_AD_CLICKS = 'ga:adClicks';
        public const METRIC_AD_COST = 'ga:adCost';
        public const METRIC_CPC = 'ga:CPC';
        public const METRIC_CPM = 'ga:CPM';
        public const METRIC_CTR = 'ga:CTR';
        public const METRIC_IMPRESSIONS = 'ga:impressions';
        public const METRIC_UNIQUE_PAGEVIEWS = 'ga:uniquePageviews';
        public const METRIC_ITEM_REVENUE = 'ga:itemRevenue';
        public const METRIC_ITEM_QUANTITY = 'ga:itemQuantity';
        public const METRIC_TRANSACTIONS = 'ga:transactions';
        public const METRIC_TRANSACTION_REVENUE = 'ga:transactionRevenue';
        public const METRIC_TRANSACTION_SHIPPING = 'ga:transactionShipping';
        public const METRIC_TRANSACTION_TAX = 'ga:transactionTax';
        public const METRIC_UNIQUE_PURCHASES = 'ga:uniquePurchases';
        public const METRIC_SEARCH_DEPTH = 'ga:searchDepth';
        public const METRIC_SEARCH_DURATION = 'ga:searchDuration';
        public const METRIC_SEARCH_EXITS = 'ga:searchExits';
        public const METRIC_SEARCH_REFINEMENTS = 'ga:searchRefinements';
        public const METRIC_SEARCH_UNIQUES = 'ga:searchUniques';
        public const METRIC_SEARCH_VISIT = 'ga:searchVisits';
        public const METRIC_GOAL_COMPLETIONS_ALL = 'ga:goalCompletionsAll';
        public const METRIC_GOAL_STARTS_ALL = 'ga:goalStartsAll';
        public const METRIC_GOAL_VALUE_ALL = 'ga:goalValueAll';
        public const METRIC_GOAL_1_COMPLETION = 'ga:goal1Completions';
        public const METRIC_GOAL_1_STARTS = 'ga:goal1Starts';
        public const METRIC_GOAL_1_VALUE = 'ga:goal1Value';
        public const METRIC_TOTAL_EVENTS = 'ga:totalEvents';
        public const METRIC_UNIQUE_EVENTS = 'ga:uniqueEvents';
        public const METRIC_EVENT_VALUE = 'ga:eventValue';
        public const EQUALS = '==';
        public const EQUALS_NOT = '!=';
        public const GREATER = '>';
        public const LESS = '>';
        public const GREATER_EQUAL = '>=';
        public const LESS_EQUAL = '<=';
        public const CONTAINS = '=@';
        public const CONTAINS_NOT = '!@';
        public const REGULAR = '=~';
        public const REGULAR_NOT = '!~';
        public $_defaultFeedUri = 'https://www.googleapis.com/analytics/v2.4/data';
        /**
         * @var string
         */
        public $_profileId;
        /**
         * @var array<array-key, mixed>
         */
        public $_dimensions;
        /**
         * @var array<array-key, mixed>
         */
        public $_metrics;
        /**
         * @var array<array-key, mixed>
         */
        public $_sort;
        /**
         * @var array<array-key, mixed>
         */
        public $_filters;
        /**
         * @param string $id
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function setProfileId($id)
        {
        }
        /**
         * @return string
         */
        public function getProfileId()
        {
        }
        /**
         * @param string $dimension
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function addDimension($dimension)
        {
        }
        /**
         * @param string $metric
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function addMetric($metric)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDimensions()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMetrics()
        {
        }
        /**
         * @param string $dimension
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function removeDimension($dimension)
        {
        }
        /**
         * @param string $metric
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function removeMetric($metric)
        {
        }
        /**
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function setStartDate($date)
        {
        }
        /**
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function setEndDate($date)
        {
        }
        /**
         * @param string $filter
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function addFilter($filter)
        {
        }
        /**
         * @param string $filter
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function addOrFilter($filter)
        {
        }
        /**
         * @param string $sort
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function addSort($sort, $descending = false)
        {
        }
        /**
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function clearSort()
        {
        }
        /**
         * @param string $segment
         *
         * @return Zend_Gdata_Analytics_DataQuery
         */
        public function setSegment($segment)
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Analytics_Extension_Dimension extends \Zend_Gdata_Analytics_Extension_Metric
    {
        public $_rootNamespace = 'ga';
        public $_rootElement = 'dimension';
        public $_value = null;
        public $_name = null;
    }
    class Zend_Gdata_Analytics_Extension_Metric extends \Zend_Gdata_Analytics_Extension_Property
    {
        public $_rootNamespace = 'ga';
        public $_rootElement = 'metric';
        public $_value = null;
        public $_name = null;
        public function takeAttributeFromDOM($attribute)
        {
        }
    }
    class Zend_Gdata_Analytics_Extension_Property extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'ga';
        public $_rootElement = 'property';
        public $_value = null;
        public $_name = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null, $name = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Analytics_Extension_Property
         */
        public function setValue($value)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Gdata_Analytics_Extension_Property
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Analytics_Extension_TableId extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'ga';
        public $_rootElement = 'tableId';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_Extension_Timezone
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Analytics_Goal extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'ga';
        public $_rootElement = 'goal';
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Gdata_App
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        /**
         * @var Zend_Http_Client
         */
        public $_httpClient;
        /**
         * @var Zend_Http_Client
         */
        public static $_staticHttpClient;
        /**
         * @var bool
         */
        public static $_httpMethodOverride;
        /**
         * @var bool
         */
        public static $_gzipEnabled;
        /**
         * @var bool
         */
        public static $_verboseExceptionMessages;
        /**
         * @var string
         */
        public $_defaultPostUri;
        /**
         * @var array<array-key, mixed>
         */
        public $_registeredPackages;
        /**
         * @var int
         */
        public static $_maxRedirects;
        public $_majorProtocolVersion;
        public $_minorProtocolVersion;
        /**
         * @var bool
         */
        public $_useObjectMapping;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function registerPackage($name)
        {
        }
        /**
         * @param string $uri
         * @param string $className
         *
         * @return Zend_Gdata_App_Feed|string
         */
        public function getFeed($uri, $className = 'Zend_Gdata_App_Feed')
        {
        }
        /**
         * @param string $uri
         * @param string $className
         *
         * @return Zend_Gdata_App_Entry|string
         */
        public function getEntry($uri, $className = 'Zend_Gdata_App_Entry')
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        /**
         * @param Zend_Http_Client $client
         *
         * @return Zend_Gdata_App
         *
         * @throws Zend_Gdata_App_HttpException
         */
        public function setHttpClient($client, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param Zend_Http_Client $httpClient
         *
         * @return void
         */
        public static function setStaticHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public static function getStaticHttpClient()
        {
        }
        /**
         * @param bool $override
         *
         * @return void
         */
        public static function setHttpMethodOverride($override = true)
        {
        }
        /**
         * @return bool
         */
        public static function getHttpMethodOverride()
        {
        }
        /**
         * @param bool $enabled
         *
         * @return void
         */
        public static function setGzipEnabled($enabled = false)
        {
        }
        /**
         * @return bool
         */
        public static function getGzipEnabled()
        {
        }
        /**
         * @return bool
         */
        public static function getVerboseExceptionMessages()
        {
        }
        /**
         * @param bool $verbose
         */
        public static function setVerboseExceptionMessages($verbose)
        {
        }
        /**
         * @param int $maxRedirects
         *
         * @return void
         */
        public static function setMaxRedirects($maxRedirects)
        {
        }
        /**
         * @return int
         */
        public static function getMaxRedirects()
        {
        }
        /**
         * @param int $value
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setMajorProtocolVersion($value)
        {
        }
        /**
         * @return int
         */
        public function getMajorProtocolVersion()
        {
        }
        /**
         * @param int|null $value
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setMinorProtocolVersion($value)
        {
        }
        /**
         * @return int|null
         */
        public function getMinorProtocolVersion()
        {
        }
        /**
         * @param string $method
         * @param null|string $url
         * @param array<array-key, mixed> $headers
         * @param mixed|null $data
         * @param null|string $contentTypeOverride
         *
         * @return array<array-key, mixed>
         */
        public function prepareRequest($method, $url = null, $headers = array(), $data = null, $contentTypeOverride = null)
        {
        }
        /**
         * @param string $method
         * @param string $url
         * @param array<array-key, mixed>|null $headers
         * @param null|string $body
         * @param null|string $contentType
         * @param int|null $remainingRedirects
         *
         * @return Zend_Http_Response
         */
        public function performHttpRequest($method, $url, $headers = null, $body = null, $contentType = null, $remainingRedirects = null)
        {
        }
        /**
         * @param string $uri
         * @param Zend_Http_Client|null $client
         * @param string $className
         * @param bool $useObjectMapping
         *
         * @return Zend_Gdata_App_Feed|string
         *
         * @throws Zend_Gdata_App_Exception
         */
        public static function import($uri, $client = null, $className = 'Zend_Gdata_App_Feed', $useObjectMapping = true)
        {
        }
        /**
         * @param string $url
         * @param string $className
         * @param array<array-key, mixed> $extraHeaders
         *
         * @return Zend_Gdata_App_Feed|string
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function importUrl($url, $className = 'Zend_Gdata_App_Feed', $extraHeaders = array())
        {
        }
        /**
         * @param string $string
         * @param string $className
         *
         * @return Zend_Gdata_App_Feed
         *
         * @throws Zend_Gdata_App_Exception
         */
        public static function importString($string, $className = 'Zend_Gdata_App_Feed', $majorProtocolVersion = null, $minorProtocolVersion = null)
        {
        }
        /**
         * @param string $filename
         * @param string $className
         * @param string $useIncludePath
         *
         * @return Zend_Gdata_App_Feed
         *
         * @throws Zend_Gdata_App_Exception
         */
        public static function importFile($filename, $className = 'Zend_Gdata_App_Feed', $useIncludePath = false)
        {
        }
        /**
         * @param string $uri
         * @param array<array-key, mixed> $extraHeaders
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Gdata_App_HttpException
         */
        public function get($uri, $extraHeaders = array())
        {
        }
        /**
         * @param mixed $data
         * @param null|string $uri
         * @param null|string $contentType
         * @param array<array-key, mixed>|null $extraHeaders
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function post($data, $uri = null, $remainingRedirects = null, $contentType = null, $extraHeaders = null)
        {
        }
        /**
         * @param mixed $data
         * @param null|string $uri
         * @param null|string $contentType
         * @param array<array-key, mixed>|null $extraHeaders
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function put($data, $uri = null, $remainingRedirects = null, $contentType = null, $extraHeaders = null)
        {
        }
        /**
         * @param mixed $data
         *
         * @return void
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function delete($data, $remainingRedirects = null)
        {
        }
        /**
         * @param mixed $data
         * @param string $uri
         * @param string $className
         * @param array<array-key, mixed> $extraHeaders
         *
         * @return Zend_Gdata_App_Entry
         */
        public function insertEntry($data, $uri, $className = 'Zend_Gdata_App_Entry', $extraHeaders = array())
        {
        }
        /**
         * @param mixed $data
         * @param array<array-key, mixed> $extraHeaders
         *
         * @return Zend_Gdata_App_Entry
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function updateEntry($data, $uri = null, $className = null, $extraHeaders = array())
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param object $feed
         *
         * @return mixed
         */
        public function retrieveAllEntriesForFeed($feed)
        {
        }
        /**
         * @param string $logfile
         */
        public function enableRequestDebugLogging($logfile)
        {
        }
        /**
         * @param Zend_Gdata_App_Feed $feed
         * @param null|string $className
         *
         * @return Zend_Gdata_App_Feed|null
         */
        public function getNextFeed($feed, $className = null)
        {
        }
        /**
         * @param Zend_Gdata_App_Feed $feed
         * @param null|string $className
         *
         * @return Zend_Gdata_App_Feed|null
         */
        public function getPreviousFeed($feed, $className = null)
        {
        }
        /**
         * @return null|string
         */
        public function generateIfMatchHeaderData($data, $allowWeek)
        {
        }
        /**
         * @return bool
         */
        public function usingObjectMapping()
        {
        }
        /**
         * @param bool $value
         *
         * @return void
         */
        public function useObjectMapping($value)
        {
        }
    }
    class Zend_Gdata_App_AuthException extends \Zend_Gdata_App_Exception
    {
    }
    class Zend_Gdata_App_BadMethodCallException extends \Zend_Gdata_App_Exception
    {
    }
    class Zend_Gdata_App_Base
    {
        /**
         * @var string
         */
        public $_rootElement;
        /**
         * @var string
         */
        public $_rootNamespace;
        /**
         * @var string
         */
        public $_rootNamespaceURI;
        /**
         * @var array<array-key, mixed>
         */
        public $_extensionElements;
        /**
         * @var array<array-key, mixed>
         */
        public $_extensionAttributes;
        /**
         * @var string
         */
        public $_text;
        /**
         * @var array<array-key, mixed>
         */
        public static $_namespaceLookupCache;
        /**
         * @var array<array-key, mixed>
         */
        public $_namespaces;
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function getText($trim = true)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_App_Base
         */
        public function setText($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getExtensionElements()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_App_Base
         */
        public function setExtensionElements($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getExtensionAttributes()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_App_Base
         */
        public function setExtensionAttributes($value)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @param DOMNode $node
         */
        public function transferFromDOM($node)
        {
        }
        /**
         * @param string $xml
         */
        public function transferFromXML($xml)
        {
        }
        /**
         * @return string
         */
        public function saveXML()
        {
        }
        /**
         * @return string
         */
        public function getXML()
        {
        }
        /**
         * @return string
         */
        public function encode()
        {
        }
        /**
         * @param string $prefix
         * @param int $majorVersion
         * @param int|null $minorVersion
         *
         * @return string
         */
        public function lookupNamespace($prefix, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param string $prefix
         * @param string $namespaceUri
         * @param int $majorVersion
         * @param int $minorVersion
         *
         * @return void
         */
        public function registerNamespace($prefix, $namespaceUri, $majorVersion = 1, $minorVersion = 0)
        {
        }
        public static function flushNamespaceLookupCache()
        {
        }
        /**
         * @param array<array-key, mixed> $namespaceArray
         *
         * @return void
         */
        public function registerAllNamespaces($namespaceArray)
        {
        }
        /**
         * @param string $name
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         */
        public function __set($name, $val)
        {
        }
        /**
         * @param string $name
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         */
        public function __unset($name)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Gdata_App_BaseMediaSource implements \Zend_Gdata_App_MediaSource
    {
        /**
         * @var string
         */
        public $_contentType;
        /**
         * @var string
         */
        public $_slug;
        /**
         * @return string
         */
        public function getContentType()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_App_MediaFileSource
         */
        public function setContentType($value)
        {
        }
        /**
         * @return string
         */
        public function getSlug()
        {
        }
        /**
         * @return Zend_Gdata_App_MediaSource
         */
        public function setSlug($value)
        {
        }
        /**
         * @param string $name
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         */
        public function __set($name, $val)
        {
        }
        /**
         * @param string $name
         */
        public function __isset($name)
        {
        }
    }
    class Zend_Gdata_App_CaptchaRequiredException extends \Zend_Gdata_App_AuthException
    {
        public const ACCOUNTS_URL = 'https://www.google.com/accounts/';
        /**
         * @var string
         */
        public $captchaToken;
        /**
         * @var string
         */
        public $captchaUrl;
        /**
         * @param string $captchaToken
         * @param string $captchaUrl
         */
        public function __construct($captchaToken, $captchaUrl)
        {
        }
        /**
         * @return string
         */
        public function getCaptchaToken()
        {
        }
        /**
         * @return string
         */
        public function getCaptchaUrl()
        {
        }
    }
    class Zend_Gdata_App_Entry extends \Zend_Gdata_App_FeedEntryParent
    {
        /**
         * @var string
         */
        public $_rootElement;
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var Zend_Gdata_App_Extension_Content
         */
        public $_content;
        /**
         * @var Zend_Gdata_App_Extension_Published
         */
        public $_published;
        /**
         * @var Zend_Gdata_App_Extension_Source
         */
        public $_source;
        /**
         * @var Zend_Gdata_App_Extension_Summary
         */
        public $_summary;
        /**
         * @var Zend_Gdata_App_Extension_Control
         */
        public $_control;
        /**
         * @var Zend_Gdata_App_Extension_Edited
         */
        public $_edited;
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @param null|string $uri
         * @param null|string $className
         * @param array<array-key, mixed> $extraHeaders
         *
         * @return Zend_Gdata_App_Entry
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function save($uri = null, $className = null, $extraHeaders = array())
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function delete()
        {
        }
        /**
         * @param array<array-key, mixed> $extraHeaders
         *
         * @return mixed
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function reload($uri = null, $className = null, $extraHeaders = array())
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Content
         */
        public function getContent()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Content $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setContent($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Published
         */
        public function getPublished()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Published $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setPublished($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Source
         */
        public function getSource()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Source $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setSource($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Summary
         */
        public function getSummary()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Summary $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setSummary($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Control
         */
        public function getControl()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Control $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setControl($value)
        {
        }
    }
    class Zend_Gdata_App_Exception extends \Zend_Exception
    {
    }
    class Zend_Gdata_App_Extension extends \Zend_Gdata_App_Base
    {
    }
    class Zend_Gdata_App_Extension_Author extends \Zend_Gdata_App_Extension_Person
    {
        public $_rootElement = 'author';
    }
    class Zend_Gdata_App_Extension_Category extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'category';
        public $_term = null;
        public $_scheme = null;
        public $_label = null;
        public function __construct($term = null, $scheme = null, $label = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return null|string
         */
        public function getTerm()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Extension_Category
         */
        public function setTerm($value)
        {
        }
        /**
         * @return null|string
         */
        public function getScheme()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Extension_Category
         */
        public function setScheme($value)
        {
        }
        /**
         * @return null|string
         */
        public function getLabel()
        {
        }
        /**
         * @param null|string $value
         *
         * @return $this
         */
        public function setLabel($value)
        {
        }
    }
    class Zend_Gdata_App_Extension_Content extends \Zend_Gdata_App_Extension_Text
    {
        public $_rootElement = 'content';
        public $_src = null;
        public function __construct($text = null, $type = 'text', $src = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getSrc()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setSrc($value)
        {
        }
    }
    class Zend_Gdata_App_Extension_Contributor extends \Zend_Gdata_App_Extension_Person
    {
        public $_rootElement = 'contributor';
    }
    class Zend_Gdata_App_Extension_Control extends \Zend_Gdata_App_Extension
    {
        public $_rootNamespace = 'app';
        public $_rootElement = 'control';
        public $_draft = null;
        public function __construct($draft = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Draft
         */
        public function getDraft()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Draft $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setDraft($value)
        {
        }
    }
    class Zend_Gdata_App_Extension_Draft extends \Zend_Gdata_App_Extension
    {
        public $_rootNamespace = 'app';
        public $_rootElement = 'draft';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Edited extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'edited';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Element extends \Zend_Gdata_App_Extension
    {
        public function __construct($rootElement = null, $rootNamespace = null, $rootNamespaceURI = null, $text = null)
        {
        }
        public function transferFromDOM($node)
        {
        }
    }
    class Zend_Gdata_App_Extension_Email extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'email';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Generator extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'generator';
        public $_uri = null;
        public $_version = null;
        public function __construct($text = null, $uri = null, $version = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Uri
         */
        public function getUri()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Uri $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setUri($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Version
         */
        public function getVersion()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Version $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setVersion($value)
        {
        }
    }
    class Zend_Gdata_App_Extension_Icon extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'icon';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Id extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'id';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Link extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'link';
        public $_href = null;
        public $_rel = null;
        public $_type = null;
        public $_hrefLang = null;
        public $_title = null;
        public $_length = null;
        public function __construct($href = null, $rel = null, $type = null, $hrefLang = null, $title = null, $length = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return null|string
         */
        public function getHref()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setHref($value)
        {
        }
        /**
         * @return null|string
         */
        public function getRel()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setRel($value)
        {
        }
        /**
         * @return null|string
         */
        public function getType()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setType($value)
        {
        }
        /**
         * @return null|string
         */
        public function getHrefLang()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setHrefLang($value)
        {
        }
        /**
         * @return null|string
         */
        public function getTitle()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setTitle($value)
        {
        }
        /**
         * @return null|string
         */
        public function getLength()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setLength($value)
        {
        }
    }
    class Zend_Gdata_App_Extension_Logo extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'logo';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Name extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'name';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Person extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = null;
        public $_name = null;
        public $_email = null;
        public $_uri = null;
        public function __construct($name = null, $email = null, $uri = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Name
         */
        public function getName()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Name $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setName($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Email
         */
        public function getEmail()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Email $value
         *
         * @return Zend_Gdata_App_Extension_Person
         */
        public function setEmail($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Uri
         */
        public function getUri()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Uri $value
         *
         * @return Zend_Gdata_App_Extension_Person
         */
        public function setUri($value)
        {
        }
    }
    class Zend_Gdata_App_Extension_Published extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'published';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Rights extends \Zend_Gdata_App_Extension_Text
    {
        public $_rootElement = 'rights';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Source extends \Zend_Gdata_App_FeedSourceParent
    {
        public $_rootElement = 'source';
    }
    class Zend_Gdata_App_Extension_Subtitle extends \Zend_Gdata_App_Extension_Text
    {
        public $_rootElement = 'subtitle';
    }
    class Zend_Gdata_App_Extension_Summary extends \Zend_Gdata_App_Extension_Text
    {
        public $_rootElement = 'summary';
    }
    class Zend_Gdata_App_Extension_Text extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = null;
        public $_type = 'text';
        public function __construct($text = null, $type = 'text')
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        public function getType()
        {
        }
        public function setType($value)
        {
        }
    }
    class Zend_Gdata_App_Extension_Title extends \Zend_Gdata_App_Extension_Text
    {
        public $_rootElement = 'title';
    }
    class Zend_Gdata_App_Extension_Updated extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'updated';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Extension_Uri extends \Zend_Gdata_App_Extension
    {
        public $_rootElement = 'uri';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_App_Feed extends \Zend_Gdata_App_FeedSourceParent
    {
        /**
         * @var string
         */
        public $_rootElement;
        /**
         * @var array<array-key, mixed>
         */
        public $_entry;
        /**
         * @var int
         */
        public $_entryIndex;
        /**
         * @param string $var
         *
         * @return mixed
         */
        public function __get($var)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
        /**
         * @return mixed
         */
        public function key()
        {
        }
        /**
         * @return mixed
         */
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEntry()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_App_Feed
         */
        public function setEntry($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Feed
         */
        public function addEntry($value)
        {
        }
        /**
         * @param int $key
         * @param Zend_Gdata_App_Entry $value
         *
         * @return void
         */
        public function offsetSet($key, $value)
        {
        }
        /**
         * @param int $key
         */
        public function offsetGet($key)
        {
        }
        /**
         * @param int $key
         */
        public function offsetUnset($key)
        {
        }
        /**
         * @param int $key
         *
         * @return bool
         */
        public function offsetExists($key)
        {
        }
        /**
         * @return mixed|null
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function getNextFeed()
        {
        }
        /**
         * @return mixed|null
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function getPreviousFeed()
        {
        }
        /**
         * @param int|null $value
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setMajorProtocolVersion($value)
        {
        }
        /**
         * @param int|null $value
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setMinorProtocolVersion($value)
        {
        }
    }
    class Zend_Gdata_App_FeedEntryParent extends \Zend_Gdata_App_Base
    {
        public $_service = null;
        /**
         * @var null|string
         */
        public $_etag;
        public $_author = array();
        public $_category = array();
        public $_contributor = array();
        public $_id = null;
        public $_link = array();
        public $_rights = null;
        public $_title = null;
        public $_updated = null;
        public $_majorProtocolVersion = 1;
        public $_minorProtocolVersion = null;
        public function __construct($element = null)
        {
        }
        /**
         * @param Zend_Http_Client $httpClient
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @return Zend_Http_Client_Abstract
         */
        public function getHttpClient()
        {
        }
        /**
         * @param Zend_Gdata_App $instance
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setService($instance)
        {
        }
        /**
         * @return Zend_Gdata_App|null
         */
        public function getService()
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Author
         */
        public function getAuthor()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setAuthor($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCategory()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setCategory($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getContributor()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setContributor($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Id
         */
        public function getId()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Id $value
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setId($value)
        {
        }
        /**
         * @param null|string $rel
         *
         * @return mixed
         */
        public function getLink($rel = null)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link
         */
        public function getEditLink()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link
         */
        public function getNextLink()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link
         */
        public function getPreviousLink()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link
         */
        public function getLicenseLink()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link
         */
        public function getSelfLink()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link
         */
        public function getAlternateLink()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setLink($value)
        {
        }
        /**
         * @return Zend_Gdata_AppExtension_Rights
         */
        public function getRights()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Rights $value
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setRights($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Title
         */
        public function getTitle()
        {
        }
        /**
         * @return string
         */
        public function getTitleValue()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Title $value
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setTitle($value)
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Updated
         */
        public function getUpdated()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Updated $value
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setUpdated($value)
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_App_Entry
         */
        public function setEtag($value)
        {
        }
        /**
         * @return null|string
         */
        public function getEtag()
        {
        }
        /**
         * @param int|null $value
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setMajorProtocolVersion($value)
        {
        }
        /**
         * @return int|null
         */
        public function getMajorProtocolVersion()
        {
        }
        /**
         * @param int|null $value
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setMinorProtocolVersion($value)
        {
        }
        /**
         * @return int|null
         */
        public function getMinorProtocolVersion()
        {
        }
        /**
         * @param string $prefix
         * @param int|null $majorVersion
         * @param int|null $minorVersion
         *
         * @return string
         */
        public function lookupNamespace($prefix, $majorVersion = null, $minorVersion = null)
        {
        }
    }
    class Zend_Gdata_App_FeedSourceParent extends \Zend_Gdata_App_FeedEntryParent
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_rootElement;
        public $_generator = null;
        public $_icon = null;
        public $_logo = null;
        public $_subtitle = null;
        /**
         * @param Zend_Http_Client $httpClient
         *
         * @return Zend_Gdata_App_FeedSourceParent
         */
        public function setHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @param Zend_Gdata_App $instance
         *
         * @return Zend_Gdata_App_FeedEntryParent
         */
        public function setService($instance)
        {
        }
        /**
         * @param string $var
         *
         * @return mixed
         */
        public function __get($var)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_AppExtension_Generator
         */
        public function getGenerator()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Generator $value
         *
         * @return Zend_Gdata_App_FeedSourceParent
         */
        public function setGenerator($value)
        {
        }
        /**
         * @return Zend_Gdata_AppExtension_Icon
         */
        public function getIcon()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Icon $value
         *
         * @return Zend_Gdata_App_FeedSourceParent
         */
        public function setIcon($value)
        {
        }
        /**
         * @return Zend_Gdata_AppExtension_logo
         */
        public function getlogo()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_logo $value
         *
         * @return Zend_Gdata_App_FeedSourceParent
         */
        public function setlogo($value)
        {
        }
        /**
         * @return Zend_Gdata_AppExtension_Subtitle
         */
        public function getSubtitle()
        {
        }
        /**
         * @param Zend_Gdata_App_Extension_Subtitle $value
         *
         * @return Zend_Gdata_App_FeedSourceParent
         */
        public function setSubtitle($value)
        {
        }
    }
    class Zend_Gdata_App_HttpException extends \Zend_Gdata_App_Exception
    {
        public $_httpClientException = null;
        public $_response = null;
        /**
         * @param null|string $message
         */
        public function __construct($message = null, $e = null, $response = null)
        {
        }
        /**
         * @return Zend_Http_Client_Exception
         */
        public function getHttpClientException()
        {
        }
        /**
         * @param Zend_Http_Client_Exception $value
         */
        public function setHttpClientException($value)
        {
        }
        /**
         * @param Zend_Http_Response $response
         */
        public function setResponse($response)
        {
        }
        /**
         * @return Zend_Http_Response
         */
        public function getResponse()
        {
        }
        /**
         * @return string
         */
        public function getRawResponseBody()
        {
        }
    }
    class Zend_Gdata_App_IOException extends \Zend_Gdata_App_Exception
    {
    }
    class Zend_Gdata_App_InvalidArgumentException extends \Zend_Gdata_App_Exception
    {
    }
    class Zend_Gdata_App_LoggingHttpClientAdapterSocket extends \Zend_Http_Client_Adapter_Socket
    {
        /**
         * @var null|resource
         */
        public $log_handle;
        /**
         * @param string $message
         */
        public function log($message)
        {
        }
        /**
         * @param string $host
         * @param int $port
         * @param bool $secure
         */
        public function connect($host, $port = 80, $secure = false)
        {
        }
        /**
         * @param string $method
         * @param Zend_Uri_Http $uri
         * @param string $http_ver
         * @param array<array-key, mixed> $headers
         * @param string $body
         *
         * @return string
         */
        public function write($method, $uri, $http_ver = '1.1', $headers = array(), $body = '')
        {
        }
        /**
         * @return string
         */
        public function read()
        {
        }
        public function close()
        {
        }
    }
    class Zend_Gdata_App_MediaEntry extends \Zend_Gdata_App_Entry
    {
        /**
         * @var Zend_Gdata_App_MediaSource
         */
        public $_mediaSource;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null, $mediaSource = null)
        {
        }
        /**
         * @return Zend_Gdata_MediaMimeStream|string
         */
        public function encode()
        {
        }
        /**
         * @return Zend_Gdata_App_MediaSource
         */
        public function getMediaSource()
        {
        }
        /**
         * @param Zend_Gdata_App_MediaSource $value
         *
         * @return Zend_Gdata_App_MediaEntry
         */
        public function setMediaSource($value)
        {
        }
    }
    class Zend_Gdata_App_MediaFileSource extends \Zend_Gdata_App_BaseMediaSource
    {
        /**
         * @var string
         */
        public $_filename;
        /**
         * @var string
         */
        public $_contentType;
        /**
         * @param string $filename
         */
        public function __construct($filename)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Gdata_App_IOException
         */
        public function encode()
        {
        }
        /**
         * @return string
         */
        public function getFilename()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_App_MediaFileSource
         */
        public function setFilename($value)
        {
        }
        /**
         * @return string
         */
        public function getContentType()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_App_MediaFileSource
         */
        public function setContentType($value)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    interface Zend_Gdata_App_MediaSource
    {
        /**
         * @return string
         */
        public function encode();
        /**
         * @param string $value
         *
         * @return Zend_Gdata_App_MediaFileSource
         */
        public function setContentType($value);
        /**
         * @return string
         */
        public function getContentType();
        /**
         * @return Zend_Gdata_App_MediaSource
         */
        public function setSlug($value);
        /**
         * @return string
         */
        public function getSlug();
    }
    class Zend_Gdata_App_Util
    {
        /**
         * @param int $timestamp
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public static function formatTimestamp($timestamp)
        {
        }
        /**
         * @param int|null $maximumKey
         * @param array<array-key, mixed> $collection
         *
         * @throws Zend_Gdata_App_Exception
         */
        public static function findGreatestBoundedValue($maximumKey, $collection)
        {
        }
    }
    class Zend_Gdata_App_VersionException extends \Zend_Gdata_App_Exception
    {
    }
    class Zend_Gdata_AuthSub
    {
        public const AUTHSUB_REQUEST_URI = 'https://www.google.com/accounts/AuthSubRequest';
        public const AUTHSUB_SESSION_TOKEN_URI = 'https://www.google.com/accounts/AuthSubSessionToken';
        public const AUTHSUB_REVOKE_TOKEN_URI = 'https://www.google.com/accounts/AuthSubRevokeToken';
        public const AUTHSUB_TOKEN_INFO_URI = 'https://www.google.com/accounts/AuthSubTokenInfo';
        /**
         * @param string $next
         * @param string $scope
         * @param int $secure
         * @param int $session
         * @param string $request_uri
         */
        public static function getAuthSubTokenUri($next, $scope, $secure = 0, $session = 0, $request_uri)
        {
        }
        /**
         * @param string $token
         * @param Zend_Http_Client|null $client
         * @param string $request_uri
         *
         * @return string
         *
         * @throws Zend_Gdata_App_AuthException
         * @throws Zend_Gdata_App_HttpException
         */
        public static function getAuthSubSessionToken($token, $client = null, $request_uri)
        {
        }
        /**
         * @param string $token
         * @param Zend_Http_Client|null $client
         * @param string $request_uri
         *
         * @return bool
         *
         * @throws Zend_Gdata_App_HttpException
         */
        public static function AuthSubRevokeToken($token, $client = null, $request_uri)
        {
        }
        /**
         * @param string $token
         * @param Zend_Http_Client|null $client
         * @param string $request_uri
         */
        public static function getAuthSubTokenInfo($token, $client = null, $request_uri)
        {
        }
        /**
         * @param string $token
         * @param Zend_Gdata_HttpClient|null $client
         */
        public static function getHttpClient($token, $client = null)
        {
        }
    }
    class Zend_Gdata_Books extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'print';
        public const VOLUME_FEED_URI = 'https://books.google.com/books/feeds/volumes';
        public const MY_LIBRARY_FEED_URI = 'https://books.google.com/books/feeds/users/me/collections/library/volumes';
        public const MY_ANNOTATION_FEED_URI = 'https://books.google.com/books/feeds/users/me/volumes';
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param Zend_Gdata_Query|null|string $location
         *
         * @return Zend_Gdata_Books_VolumeFeed
         */
        public function getVolumeFeed($location = null)
        {
        }
        /**
         * @param null|string $volumeId
         * @param Zend_Gdata_Query|null|string $location
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function getVolumeEntry($volumeId = null, $location = null)
        {
        }
        /**
         * @param Zend_Gdata_Query|null|string $location
         *
         * @return Zend_Gdata_Books_VolumeFeed
         */
        public function getUserLibraryFeed($location = null)
        {
        }
        /**
         * @param Zend_Gdata_Query|null|string $location
         *
         * @return Zend_Gdata_Books_VolumeFeed
         */
        public function getUserAnnotationFeed($location = null)
        {
        }
        /**
         * @param Zend_Gdata_Books_VolumeEntry $entry
         * @param Zend_Gdata_Query|null|string $location
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function insertVolume($entry, $location = null)
        {
        }
        /**
         * @param Zend_Gdata_Books_VolumeEntry $entry
         *
         * @return void
         */
        public function deleteVolume($entry)
        {
        }
    }
    class Zend_Gdata_Books_CollectionEntry extends \Zend_Gdata_Entry
    {
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Books_CollectionFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Books_Extension_AnnotationLink extends \Zend_Gdata_Books_Extension_BooksLink
    {
        /**
         * @param null|string $href
         * @param null|string $rel
         * @param null|string $type
         * @param null|string $hrefLang
         * @param null|string $title
         * @param null|string $length
         */
        public function __construct($href = null, $rel = null, $type = null, $hrefLang = null, $title = null, $length = null)
        {
        }
    }
    class Zend_Gdata_Books_Extension_BooksCategory extends \Zend_Gdata_App_Extension_Category
    {
        /**
         * @param null|string $term
         * @param null|string $scheme
         * @param null|string $label
         */
        public function __construct($term = null, $scheme = null, $label = null)
        {
        }
    }
    class Zend_Gdata_Books_Extension_BooksLink extends \Zend_Gdata_App_Extension_Link
    {
        /**
         * @param null|string $href
         * @param null|string $rel
         * @param null|string $type
         * @param null|string $hrefLang
         * @param null|string $title
         * @param null|string $length
         */
        public function __construct($href = null, $rel = null, $type = null, $hrefLang = null, $title = null, $length = null)
        {
        }
    }
    class Zend_Gdata_Books_Extension_Embeddability extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gbs';
        public $_rootElement = 'embeddability';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return null|string
         */
        public function getValue()
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_Books_Extension_Embeddability
         */
        public function setValue($value)
        {
        }
    }
    class Zend_Gdata_Books_Extension_InfoLink extends \Zend_Gdata_Books_Extension_BooksLink
    {
        /**
         * @param null|string $href
         * @param null|string $rel
         * @param null|string $type
         * @param null|string $hrefLang
         * @param null|string $title
         * @param null|string $length
         */
        public function __construct($href = null, $rel = null, $type = null, $hrefLang = null, $title = null, $length = null)
        {
        }
    }
    class Zend_Gdata_Books_Extension_PreviewLink extends \Zend_Gdata_Books_Extension_BooksLink
    {
        /**
         * @param null|string $href
         * @param null|string $rel
         * @param null|string $type
         * @param null|string $hrefLang
         * @param null|string $title
         * @param null|string $length
         */
        public function __construct($href = null, $rel = null, $type = null, $hrefLang = null, $title = null, $length = null)
        {
        }
    }
    class Zend_Gdata_Books_Extension_Review extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gbs';
        public $_rootElement = 'review';
        public $_lang = null;
        public $_type = null;
        /**
         * @param null|string $lang
         * @param null|string $type
         * @param null|string $value
         */
        public function __construct($lang = null, $type = null, $value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getLang()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $lang
         *
         * @return Zend_Gdata_Books_Extension_Review
         */
        public function setLang($lang)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Gdata_Books_Extension_Review
         */
        public function setType($type)
        {
        }
    }
    class Zend_Gdata_Books_Extension_ThumbnailLink extends \Zend_Gdata_Books_Extension_BooksLink
    {
        /**
         * @param null|string $href
         * @param null|string $rel
         * @param null|string $type
         * @param null|string $hrefLang
         * @param null|string $title
         * @param null|string $length
         */
        public function __construct($href = null, $rel = null, $type = null, $hrefLang = null, $title = null, $length = null)
        {
        }
    }
    class Zend_Gdata_Books_Extension_Viewability extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gbs';
        public $_rootElement = 'viewability';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Books_Extension_Viewability
         */
        public function setValue($value)
        {
        }
    }
    class Zend_Gdata_Books_VolumeEntry extends \Zend_Gdata_Entry
    {
        public const THUMBNAIL_LINK_REL = 'http://schemas.google.com/books/2008/thumbnail';
        public const PREVIEW_LINK_REL = 'http://schemas.google.com/books/2008/preview';
        public const INFO_LINK_REL = 'http://schemas.google.com/books/2008/info';
        public const ANNOTATION_LINK_REL = 'http://schemas.google.com/books/2008/annotation';
        public $_comments = null;
        public $_creators = array();
        public $_dates = array();
        public $_descriptions = array();
        public $_embeddability = null;
        public $_formats = array();
        public $_identifiers = array();
        public $_languages = array();
        public $_publishers = array();
        public $_rating = null;
        public $_review = null;
        public $_subjects = array();
        public $_titles = array();
        public $_viewability = null;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Extension_Comments|null
         */
        public function getComments()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCreators()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDates()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDescriptions()
        {
        }
        /**
         * @return Zend_Gdata_Books_Extension_Embeddability|null
         */
        public function getEmbeddability()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFormats()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIdentifiers()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLanguages()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPublishers()
        {
        }
        /**
         * @return Zend_Gdata_Extension_Rating|null
         */
        public function getRating()
        {
        }
        /**
         * @return Zend_Gdata_Books_Extension_Review|null
         */
        public function getReview()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getSubjects()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTitles()
        {
        }
        /**
         * @return Zend_Gdata_Books_Extension_Viewability|null
         */
        public function getViewability()
        {
        }
        /**
         * @param Zend_Gdata_Extension_Comments|null $comments
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setComments($comments)
        {
        }
        /**
         * @param array<array-key, mixed> $creators
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setCreators($creators)
        {
        }
        /**
         * @param array<array-key, mixed> $dates
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setDates($dates)
        {
        }
        /**
         * @param array<array-key, mixed> $descriptions
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setDescriptions($descriptions)
        {
        }
        /**
         * @param Zend_Gdata_Books_Extension_Embeddability|null $embeddability
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setEmbeddability($embeddability)
        {
        }
        /**
         * @param array<array-key, mixed> $formats
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setFormats($formats)
        {
        }
        /**
         * @param array<array-key, mixed> $identifiers
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setIdentifiers($identifiers)
        {
        }
        /**
         * @param array<array-key, mixed> $languages
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setLanguages($languages)
        {
        }
        /**
         * @param array<array-key, mixed> $publishers
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setPublishers($publishers)
        {
        }
        /**
         * @param Zend_Gdata_Extension_Rating|null $rating
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setRating($rating)
        {
        }
        /**
         * @param Zend_Gdata_Books_Extension_Review|null $review
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setReview($review)
        {
        }
        /**
         * @param array<array-key, mixed> $subjects
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setSubjects($subjects)
        {
        }
        /**
         * @param array<array-key, mixed> $titles
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setTitles($titles)
        {
        }
        /**
         * @param Zend_Gdata_Books_Extension_Viewability|null $viewability
         *
         * @return Zend_Gdata_Books_VolumeEntry
         */
        public function setViewability($viewability)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function getVolumeId()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_link|null
         */
        public function getThumbnailLink()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link|null
         */
        public function getPreviewLink()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link|null
         */
        public function getInfoLink()
        {
        }
        /**
         * @return Zend_Gdata_App_Extension_Link|null
         */
        public function getAnnotationLink()
        {
        }
    }
    class Zend_Gdata_Books_VolumeFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Books_VolumeQuery extends \Zend_Gdata_Query
    {
        /**
         * @param null|string $url
         */
        public function __construct($url = null)
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Gdata_Books_VolumeQuery
         */
        public function setMinViewability($value = null)
        {
        }
        /**
         * @return null|string
         */
        public function getMinViewability()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Calendar extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'cl';
        public const CALENDAR_FEED_URI = 'https://www.google.com/calendar/feeds';
        public const CALENDAR_EVENT_FEED_URI = 'https://www.google.com/calendar/feeds/default/private/full';
        public $_defaultPostUri = 'https://www.google.com/calendar/feeds/default/private/full';
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Calendar_EventFeed
         */
        public function getCalendarEventFeed($location = null)
        {
        }
        /**
         * @return Zend_Gdata_Calendar_EventEntry
         */
        public function getCalendarEventEntry($location = null)
        {
        }
        /**
         * @return Zend_Gdata_Calendar_ListFeed
         */
        public function getCalendarListFeed()
        {
        }
        /**
         * @return Zend_Gdata_Calendar_ListEntry
         */
        public function getCalendarListEntry($location = null)
        {
        }
        public function insertEvent($event, $uri = null)
        {
        }
    }
    class Zend_Gdata_Calendar_EventEntry extends \Zend_Gdata_Kind_EventEntry
    {
        public $_entryClassName = 'Zend_Gdata_Calendar_EventEntry';
        public $_sendEventNotifications = null;
        public $_timezone = null;
        public $_quickadd = null;
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function getSendEventNotifications()
        {
        }
        public function setSendEventNotifications($value)
        {
        }
        public function getTimezone()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_Timezone $value
         *
         * @return Zend_Gdata_Extension_EventEntry
         */
        public function setTimezone($value)
        {
        }
        public function getQuickAdd()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_QuickAdd $value
         *
         * @return Zend_Gdata_Extension_ListEntry
         */
        public function setQuickAdd($value)
        {
        }
    }
    class Zend_Gdata_Calendar_EventFeed extends \Zend_Gdata_Feed
    {
        public $_timezone = null;
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function getTimezone()
        {
        }
        public function setTimezone($value)
        {
        }
    }
    class Zend_Gdata_Calendar_EventQuery extends \Zend_Gdata_Query
    {
        public const CALENDAR_FEED_URI = 'https://www.google.com/calendar/feeds';
        public $_defaultFeedUri = 'https://www.google.com/calendar/feeds';
        public $_comments = null;
        public $_user = 'default';
        public $_visibility = 'public';
        public $_projection = 'full';
        public $_event = null;
        /**
         * @param null|string $url
         */
        public function __construct($url = null)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setComments($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setEvent($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setProjection($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setUser($value)
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setVisibility($value)
        {
        }
        /**
         * @return string
         */
        public function getComments()
        {
        }
        /**
         * @return string
         */
        public function getEvent()
        {
        }
        /**
         * @return string
         */
        public function getProjection()
        {
        }
        /**
         * @return string
         */
        public function getUser()
        {
        }
        /**
         * @return string
         */
        public function getVisibility()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setStartMax($value)
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setStartMin($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setOrderBy($value)
        {
        }
        /**
         * @return int
         */
        public function getStartMax()
        {
        }
        /**
         * @return int
         */
        public function getStartMin()
        {
        }
        /**
         * @return string
         */
        public function getOrderBy()
        {
        }
        /**
         * @return string
         */
        public function getSortOrder()
        {
        }
        /**
         * @return string
         */
        public function setSortOrder($value)
        {
        }
        /**
         * @return string
         */
        public function getRecurrenceExpansionStart()
        {
        }
        /**
         * @return string
         */
        public function setRecurrenceExpansionStart($value)
        {
        }
        /**
         * @return string
         */
        public function getRecurrenceExpansionEnd()
        {
        }
        /**
         * @return string
         */
        public function setRecurrenceExpansionEnd($value)
        {
        }
        /**
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function getSingleEvents()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setSingleEvents($value)
        {
        }
        /**
         * @return string
         */
        public function getFutureEvents()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_EventQuery
         */
        public function setFutureEvents($value)
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_AccessLevel extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gCal';
        public $_rootElement = 'accesslevel';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_Extension_Selected
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_Color extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gCal';
        public $_rootElement = 'color';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_Extension_Color
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_Hidden extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gCal';
        public $_rootElement = 'hidden';
        public $_value = null;
        /**
         * @param bool|null $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Calendar_Extension_Hidden
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_Link extends \Zend_Gdata_App_Extension_Link
    {
        public $_webContent = null;
        /**
         * @param Zend_Gdata_Calendar_Extension_Webcontent|null $webContent
         */
        public function __construct($href = null, $rel = null, $type = null, $hrefLang = null, $title = null, $length = null, $webContent = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Calendar_Extension_Webcontent
         */
        public function getWebContent()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_WebContent $value
         *
         * @return Zend_Calendar_Extension_Link
         */
        public function setWebContent($value)
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_QuickAdd extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gCal';
        public $_rootElement = 'quickadd';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_Extension_QuickAdd
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_Selected extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gCal';
        public $_rootElement = 'selected';
        public $_value = null;
        /**
         * @param bool|null $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return bool
         */
        public function getValue()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Calendar_Extension_Selected
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_SendEventNotifications extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gCal';
        public $_rootElement = 'sendEventNotifications';
        public $_value = null;
        /**
         * @param bool|null $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Extension_SendEventNotifications
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_Timezone extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gCal';
        public $_rootElement = 'timezone';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Calendar_Extension_Timezone
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Calendar_Extension_WebContent extends \Zend_Gdata_App_Extension
    {
        public $_rootNamespace = 'gCal';
        public $_rootElement = 'webContent';
        public $_url = null;
        public $_height = null;
        public $_width = null;
        /**
         * @param null|string $url
         * @param null|string $height
         * @param null|string $width
         */
        public function __construct($url = null, $height = null, $width = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getURL()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Calendar_Extension_WebContent
         */
        public function setURL($value)
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Calendar_Extension_WebContent
         */
        public function setHeight($value)
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Calendar_Extension_WebContent
         */
        public function setWidth($value)
        {
        }
    }
    class Zend_Gdata_Calendar_ListEntry extends \Zend_Gdata_Entry
    {
        public $_color = null;
        public $_accessLevel = null;
        public $_hidden = null;
        public $_selected = null;
        public $_timezone = null;
        public $_where = array();
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function getAccessLevel()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_AccessLevel $value
         *
         * @return Zend_Gdata_Extension_ListEntry
         */
        public function setAccessLevel($value)
        {
        }
        public function getColor()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_Color $value
         *
         * @return Zend_Gdata_Extension_ListEntry
         */
        public function setColor($value)
        {
        }
        public function getHidden()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_Hidden $value
         *
         * @return Zend_Gdata_Extension_ListEntry
         */
        public function setHidden($value)
        {
        }
        public function getSelected()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_Selected $value
         *
         * @return Zend_Gdata_Extension_ListEntry
         */
        public function setSelected($value)
        {
        }
        public function getTimezone()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_Timezone $value
         *
         * @return Zend_Gdata_Extension_ListEntry
         */
        public function setTimezone($value)
        {
        }
        public function getWhere()
        {
        }
        /**
         * @param Zend_Gdata_Extension_Where $value
         *
         * @return Zend_Gdata_Extension_ListEntry
         */
        public function setWhere($value)
        {
        }
    }
    class Zend_Gdata_Calendar_ListFeed extends \Zend_Gdata_Feed
    {
        public $_timezone = null;
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function getTimezone()
        {
        }
        /**
         * @param Zend_Gdata_Calendar_Extension_Timezone $value
         *
         * @return Zend_Gdata_Extension_ListEntry
         */
        public function setTimezone($value)
        {
        }
    }
    class Zend_Gdata_ClientLogin
    {
        public const CLIENTLOGIN_URI = 'https://www.google.com/accounts/ClientLogin';
        public const DEFAULT_SOURCE = 'Zend-ZendFramework';
        /**
         * @param string $email
         * @param string $password
         * @param string $service
         * @param Zend_Gdata_HttpClient|null $client
         * @param string $source
         * @param null|string $loginToken
         * @param null|string $loginCaptcha
         * @param string $accountType
         *
         * @return Zend_Gdata_HttpClient
         *
         * @throws Zend_Gdata_App_AuthException
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_App_CaptchaRequiredException
         */
        public static function getHttpClient($email, $password, $service = 'xapi', $client = null, $source, $loginToken = null, $loginCaptcha = null, $loginUri, $accountType = 'HOSTED_OR_GOOGLE')
        {
        }
    }
    class Zend_Gdata_Docs extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'writely';
        public const DOCUMENTS_LIST_FEED_URI = 'https://docs.google.com/feeds/documents/private/full';
        public const DOCUMENTS_FOLDER_FEED_URI = 'https://docs.google.com/feeds/folders/private/full';
        public const DOCUMENTS_CATEGORY_SCHEMA = 'http://schemas.google.com/g/2005#kind';
        public const DOCUMENTS_CATEGORY_TERM = 'http://schemas.google.com/docs/2007#folder';
        /**
         * @var string
         */
        public $_defaultPostUri;
        /**
         * @var array<array-key, mixed>
         */
        public static $SUPPORTED_FILETYPES;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param string $fileExtension
         *
         * @return string
         */
        public static function lookupMimeType($fileExtension)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Docs_DocumentListFeed
         */
        public function getDocumentListFeed($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Docs_DocumentListEntry
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getDocumentListEntry($location = null)
        {
        }
        /**
         * @param string $docId
         * @param string $docType
         *
         * @return Zend_Gdata_Docs_DocumentListEntry
         */
        public function getDoc($docId, $docType)
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Gdata_Docs_DocumentListEntry
         */
        public function getDocument($id)
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Gdata_Docs_DocumentListEntry
         */
        public function getSpreadsheet($id)
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Gdata_Docs_DocumentListEntry
         */
        public function getPresentation($id)
        {
        }
        /**
         * @param string $fileLocation
         * @param null|string $title
         * @param null|string $mimeType
         * @param null|string $uri
         *
         * @return Zend_Gdata_Docs_DocumentListEntry
         */
        public function uploadFile($fileLocation, $title = null, $mimeType = null, $uri = null)
        {
        }
        /**
         * @param string $folderName
         * @param null|string $folderResourceId
         *
         * @return Zend_Gdata_Entry
         */
        public function createFolder($folderName, $folderResourceId = null)
        {
        }
        /**
         * @param mixed $data
         * @param string $uri
         * @param string $className
         *
         * @return Zend_Gdata_Docs_DocumentListEntry
         */
        public function insertDocument($data, $uri, $className = 'Zend_Gdata_Docs_DocumentListEntry')
        {
        }
    }
    class Zend_Gdata_Docs_DocumentListEntry extends \Zend_Gdata_Entry
    {
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Docs_DocumentListFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Docs_Query extends \Zend_Gdata_Query
    {
        public const DOCUMENTS_LIST_FEED_URI = 'https://docs.google.com/feeds/documents';
        /**
         * @var string
         */
        public $_defaultFeedUri;
        /**
         * @var string
         */
        public $_visibility;
        /**
         * @var string
         */
        public $_projection;
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Docs_Query
         */
        public function setProjection($value)
        {
        }
        /**
         * @return Zend_Gdata_Docs_Query
         */
        public function setVisibility($value)
        {
        }
        /**
         * @return string
         */
        public function getProjection()
        {
        }
        /**
         * @return string
         */
        public function getVisibility()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Docs_Query
         */
        public function setTitle($value)
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Docs_Query
         */
        public function setTitleExact($value)
        {
        }
        /**
         * @return string
         */
        public function getTitleExact()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_DublinCore extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'xapi';
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Creator extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'creator';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Date extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'date';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Description extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'description';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Format extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'format';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Identifier extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'identifier';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Language extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'language';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Publisher extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'publisher';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Rights extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'rights';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Subject extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'subject';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_DublinCore_Extension_Title extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'dc';
        public $_rootElement = 'title';
        public function __construct($value = null)
        {
        }
    }
    class Zend_Gdata_Entry extends \Zend_Gdata_App_MediaEntry
    {
        public $_entryClassName = 'Zend_Gdata_Entry';
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
    }
    class Zend_Gdata_Exif extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'xapi';
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
    }
    class Zend_Gdata_Exif_Entry extends \Zend_Gdata_Entry
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_tags;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function getTags()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_Tags $value
         *
         * @return Zend_Gdata_Exif_Entry
         */
        public function setTags($value)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_Distance extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'distance';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_Exposure extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'exposure';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_FStop extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'fstop';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_Flash extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'flash';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_FocalLength extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'focallength';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_ImageUniqueId extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'imageUniqueID';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_Iso extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'iso';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_Make extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'make';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_Model extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'model';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_Tags extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'tags';
        /**
         * @var Zend_Gdata_Exif_Extension_Distance
         */
        public $_distance;
        /**
         * @var Zend_Gdata_Exif_Extension_Exposure
         */
        public $_exposure;
        /**
         * @var Zend_Gdata_Exif_Extension_Flash
         */
        public $_flash;
        /**
         * @var Zend_Gdata_Exif_Extension_FocalLength
         */
        public $_focalLength;
        /**
         * @var Zend_Gdata_Exif_Extension_FStop
         */
        public $_fStop;
        /**
         * @var Zend_Gdata_Exif_Extension_ImageUniqueId
         */
        public $_imageUniqueId;
        /**
         * @var Zend_Gdata_Exif_Extension_Iso
         */
        public $_iso;
        /**
         * @var Zend_Gdata_Exif_Extension_Make
         */
        public $_make;
        /**
         * @var Zend_Gdata_Exif_Extension_Model
         */
        public $_model;
        /**
         * @var Zend_Gdata_Exif_Extension_Time
         */
        public $_time;
        /**
         * @param Zend_Gdata_Exif_Extension_Distance|null $distance
         * @param Zend_Gdata_Exif_Extension_Exposure|null $exposure
         * @param Zend_Gdata_Exif_Extension_Flash|null $flash
         * @param Zend_Gdata_Exif_Extension_FStop|null $fStop
         * @param Zend_Gdata_Exif_Extension_ImageUniqueId|null $imageUniqueId
         * @param Zend_Gdata_Exif_Extension_Iso|null $iso
         * @param Zend_Gdata_Exif_Extension_Make|null $make
         * @param Zend_Gdata_Exif_Extension_Model|null $model
         * @param Zend_Gdata_Exif_Extension_Time|null $time
         */
        public function __construct($distance = null, $exposure = null, $flash = null, $focalLength = null, $fStop = null, $imageUniqueId = null, $iso = null, $make = null, $model = null, $time = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_Distance
         */
        public function getDistance()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_Distance $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setDistance($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_Exposure
         */
        public function getExposure()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_Exposure $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setExposure($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_Flash
         */
        public function getFlash()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_Flash $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setFlash($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_FocalLength
         */
        public function getFocalLength()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_FocalLength $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setFocalLength($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_FStop
         */
        public function getFStop()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_FStop $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setFStop($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_ImageUniqueId
         */
        public function getImageUniqueId()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_ImageUniqueId $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setImageUniqueId($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_Iso
         */
        public function getIso()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_Iso $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setIso($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_Make
         */
        public function getMake()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_Make $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setMake($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_Model
         */
        public function getModel()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_Model $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setModel($value)
        {
        }
        /**
         * @return Zend_Gdata_Exif_Extension_Time
         */
        public function getTime()
        {
        }
        /**
         * @param Zend_Gdata_Exif_Extension_Time $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setTime($value)
        {
        }
    }
    class Zend_Gdata_Exif_Extension_Time extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'exif';
        public $_rootElement = 'time';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Exif_Feed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Extension extends \Zend_Gdata_App_Extension
    {
        public $_rootNamespace = 'gd';
        public function __construct()
        {
        }
    }
    class Zend_Gdata_Extension_AttendeeStatus extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'attendeeStatus';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Extension_Visibility
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Extension_AttendeeType extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'attendeeType';
        public $_value = null;
        /**
         * @param null|string $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Extension_Visibility
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Extension_Comments extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'comments';
        public $_rel = null;
        public $_feedLink = null;
        public function __construct($rel = null, $feedLink = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        public function getRel()
        {
        }
        public function setRel($value)
        {
        }
        public function getFeedLink()
        {
        }
        public function setFeedLink($value)
        {
        }
    }
    class Zend_Gdata_Extension_EntryLink extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'entryLink';
        public $_href = null;
        public $_readOnly = null;
        public $_rel = null;
        public $_entry = null;
        public function __construct($href = null, $rel = null, $readOnly = null, $entry = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getHref()
        {
        }
        public function setHref($value)
        {
        }
        public function getReadOnly()
        {
        }
        public function setReadOnly($value)
        {
        }
        public function getRel()
        {
        }
        public function setRel($value)
        {
        }
        public function getEntry()
        {
        }
        public function setEntry($value)
        {
        }
    }
    class Zend_Gdata_Extension_EventStatus extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'eventStatus';
        public $_value = null;
        public function __construct($value = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Extension_Visibility
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Extension_ExtendedProperty extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'extendedProperty';
        public $_name = null;
        public $_value = null;
        public function __construct($name = null, $value = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        public function __toString()
        {
        }
        public function getName()
        {
        }
        public function setName($value)
        {
        }
        public function getValue()
        {
        }
        public function setValue($value)
        {
        }
    }
    class Zend_Gdata_Extension_FeedLink extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'feedLink';
        public $_countHint = null;
        public $_href = null;
        public $_readOnly = null;
        public $_rel = null;
        public $_feed = null;
        public function __construct($href = null, $rel = null, $countHint = null, $readOnly = null, $feed = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getHref()
        {
        }
        public function setHref($value)
        {
        }
        public function getReadOnly()
        {
        }
        public function setReadOnly($value)
        {
        }
        public function getRel()
        {
        }
        public function setRel($value)
        {
        }
        public function getFeed()
        {
        }
        public function setFeed($value)
        {
        }
    }
    class Zend_Gdata_Extension_OpenSearchItemsPerPage extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'itemsPerPage';
        public $_rootNamespace = 'openSearch';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Extension_OpenSearchStartIndex extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'startIndex';
        public $_rootNamespace = 'openSearch';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Extension_OpenSearchTotalResults extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'totalResults';
        public $_rootNamespace = 'openSearch';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Extension_OriginalEvent extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'originalEvent';
        public $_id = null;
        public $_href = null;
        public $_when = null;
        public function __construct($id = null, $href = null, $when = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function getId()
        {
        }
        public function setId($value)
        {
        }
        public function getHref()
        {
        }
        public function setHref($value)
        {
        }
        public function getWhen()
        {
        }
        public function setWhen($value)
        {
        }
    }
    class Zend_Gdata_Extension_Rating extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'rating';
        public $_min = null;
        public $_max = null;
        public $_numRaters = null;
        public $_average = null;
        public $_value = null;
        /**
         * @param int|null $average
         * @param int|null $min
         * @param int|null $max
         * @param int|null $numRaters
         * @param int|null $value
         */
        public function __construct($average = null, $min = null, $max = null, $numRaters = null, $value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return int
         */
        public function getMin()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Extension_Rating
         */
        public function setMin($value)
        {
        }
        /**
         * @return int
         */
        public function getNumRaters()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Extension_Rating
         */
        public function setNumRaters($value)
        {
        }
        /**
         * @return int
         */
        public function getAverage()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Extension_Rating
         */
        public function setAverage($value)
        {
        }
        /**
         * @return int
         */
        public function getMax()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Extension_Rating
         */
        public function setMax($value)
        {
        }
        /**
         * @return int
         */
        public function getValue()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Extension_Rating
         */
        public function setValue($value)
        {
        }
    }
    class Zend_Gdata_Extension_Recurrence extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'recurrence';
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Extension_RecurrenceException extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'recurrenceException';
        public $_specialized = null;
        public $_entryLink = null;
        public $_originalEvent = null;
        /**
         * @param bool|null $specialized
         */
        public function __construct($specialized = null, $entryLink = null, $originalEvent = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return bool
         */
        public function getSpecialized()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Extension_RecurrenceException
         */
        public function setSpecialized($value)
        {
        }
        /**
         * @return Zend_Gdata_Extension_EntryLink
         */
        public function getEntryLink()
        {
        }
        /**
         * @param Zend_Gdata_Extension_EntryLink $value
         *
         * @return Zend_Gdata_Extension_RecurrenceException
         */
        public function setEntryLink($value)
        {
        }
        /**
         * @return Zend_Gdata_Extension_OriginalEvent
         */
        public function getOriginalEvent()
        {
        }
        /**
         * @param Zend_Gdata_Extension_OriginalEvent $value
         *
         * @return Zend_Gdata_Extension_RecurrenceException
         */
        public function setOriginalEvent($value)
        {
        }
    }
    class Zend_Gdata_Extension_Reminder extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'reminder';
        public $_absoluteTime = null;
        public $_method = null;
        public $_days = null;
        public $_hours = null;
        public $_minutes = null;
        public function __construct($absoluteTime = null, $method = null, $days = null, $hours = null, $minutes = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        public function __toString()
        {
        }
        public function getAbsoluteTime()
        {
        }
        public function setAbsoluteTime($value)
        {
        }
        public function getDays()
        {
        }
        public function setDays($value)
        {
        }
        public function getHours()
        {
        }
        public function setHours($value)
        {
        }
        public function getMinutes()
        {
        }
        public function setMinutes($value)
        {
        }
        public function getMethod()
        {
        }
        public function setMethod($value)
        {
        }
    }
    class Zend_Gdata_Extension_Transparency extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'transparency';
        public $_value = null;
        /**
         * @param bool|null $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return bool
         */
        public function getValue()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Extension_Transparency
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Extension_Visibility extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'visibility';
        public $_value = null;
        /**
         * @param bool|null $value
         */
        public function __construct($value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return bool
         */
        public function getValue()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Extension_Visibility
         */
        public function setValue($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Extension_When extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'when';
        public $_reminders = array();
        public $_startTime = null;
        public $_valueString = null;
        public $_endTime = null;
        public function __construct($startTime = null, $endTime = null, $valueString = null, $reminders = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        public function __toString()
        {
        }
        public function getStartTime()
        {
        }
        public function setStartTime($value)
        {
        }
        public function getEndTime()
        {
        }
        public function setEndTime($value)
        {
        }
        public function getValueString()
        {
        }
        public function setValueString($value)
        {
        }
        public function getReminders()
        {
        }
        public function setReminders($value)
        {
        }
    }
    class Zend_Gdata_Extension_Where extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'where';
        public $_label = null;
        public $_rel = null;
        public $_valueString = null;
        public $_entryLink = null;
        public function __construct($valueString = null, $label = null, $rel = null, $entryLink = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        public function __toString()
        {
        }
        public function getLabel()
        {
        }
        public function setLabel($value)
        {
        }
        public function getRel()
        {
        }
        public function setRel($value)
        {
        }
        public function getValueString()
        {
        }
        public function setValueString($value)
        {
        }
        public function getEntryLink()
        {
        }
        public function setEntryLink($value)
        {
        }
    }
    class Zend_Gdata_Extension_Who extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'who';
        public $_email = null;
        public $_rel = null;
        public $_valueString = null;
        public $_attendeeStatus = null;
        public $_attendeeType = null;
        public $_entryLink = null;
        /**
         * @param null|string $email
         * @param null|string $rel
         * @param null|string $valueString
         * @param Zend_Gdata_Extension_AttendeeStatus|null $attendeeStatus
         * @param Zend_Gdata_Extension_AttendeeType|null $attendeeType
         * @param null|string $entryLink
         */
        public function __construct($email = null, $rel = null, $valueString = null, $attendeeStatus = null, $attendeeType = null, $entryLink = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function getValueString()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Extension_Who
         */
        public function setValueString($value)
        {
        }
        /**
         * @return string
         */
        public function getEmail()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Extension_Who
         */
        public function setEmail($value)
        {
        }
        /**
         * @return string
         */
        public function getRel()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Extension_Who
         */
        public function setRel($value)
        {
        }
        /**
         * @return Zend_Gdata_Extension_AttendeeStatus
         */
        public function getAttendeeStatus()
        {
        }
        /**
         * @param Zend_Gdata_Extension_AttendeeStatus $value
         *
         * @return Zend_Gdata_Extension_Who
         */
        public function setAttendeeStatus($value)
        {
        }
        /**
         * @return Zend_Gdata_Extension_AttendeeType
         */
        public function getAttendeeType()
        {
        }
        /**
         * @param Zend_Gdata_Extension_AttendeeType $value
         *
         * @return Zend_Gdata_Extension_Who
         */
        public function setAttendeeType($value)
        {
        }
    }
    class Zend_Gdata_Feed extends \Zend_Gdata_App_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var Zend_Gdata_Extension_OpenSearchTotalResults|null
         */
        public $_totalResults;
        /**
         * @var Zend_Gdata_Extension_OpenSearchStartIndex|null
         */
        public $_startIndex;
        /**
         * @var Zend_Gdata_Extension_OpenSearchItemsPerPage|null
         */
        public $_itemsPerPage;
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @param Zend_Gdata_Extension_OpenSearchTotalResults|null $value
         *
         * @return Zend_Gdata_Feed
         */
        public function setTotalResults($value)
        {
        }
        /**
         * @return Zend_Gdata_Extension_OpenSearchTotalResults|null
         */
        public function getTotalResults()
        {
        }
        /**
         * @param Zend_Gdata_Extension_OpenSearchStartIndex|null $value
         *
         * @return Zend_Gdata_Feed
         */
        public function setStartIndex($value)
        {
        }
        /**
         * @return Zend_Gdata_Extension_OpenSearchStartIndex|null
         */
        public function getStartIndex()
        {
        }
        /**
         * @param Zend_Gdata_Extension_OpenSearchItemsPerPage|null $value
         *
         * @return Zend_Gdata_Feed
         */
        public function setItemsPerPage($value)
        {
        }
        /**
         * @return Zend_Gdata_Extension_OpenSearchItemsPerPage|null
         */
        public function getItemsPerPage()
        {
        }
    }
    class Zend_Gdata_Gapps extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'apps';
        public const APPS_BASE_FEED_URI = 'https://apps-apis.google.com/a/feeds';
        public const APPS_USER_PATH = '/user/2.0';
        public const APPS_NICKNAME_PATH = '/nickname/2.0';
        public const APPS_GROUP_PATH = '/group/2.0';
        public const APPS_EMAIL_LIST_PATH = '/emailList/2.0';
        public const APPS_EMAIL_LIST_RECIPIENT_POSTFIX = '/recipient';
        /**
         * @var string
         */
        public $_domain;
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param null|string $domain
         * @param string $applicationId
         */
        public function __construct($client = null, $domain = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param Zend_Gdata_Exception $e
         *
         * @throws Zend_Gdata_Gapps_ServiceException
         * @throws mixed
         */
        public static function throwServiceExceptionIfDetected($e)
        {
        }
        /**
         * @param string $uri
         * @param Zend_Http_Client|null $client
         * @param string $className
         *
         * @return Zend_Gdata_App_Feed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public static function import($uri, $client = null, $className = 'Zend_Gdata_App_Feed', $useObjectMapping = true)
        {
        }
        /**
         * @param string $uri
         * @param array<array-key, mixed> $extraHeaders
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function get($uri, $extraHeaders = array())
        {
        }
        /**
         * @param mixed $data
         * @param null|string $uri
         * @param int|null $remainingRedirects
         * @param null|string $contentType
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_App_InvalidArgumentException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function post($data, $uri = null, $remainingRedirects = null, $contentType = null, $extraHeaders = null)
        {
        }
        /**
         * @param mixed $data
         * @param null|string $uri
         * @param int|null $remainingRedirects
         * @param null|string $contentType
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_App_InvalidArgumentException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function put($data, $uri = null, $remainingRedirects = null, $contentType = null, $extraHeaders = null)
        {
        }
        /**
         * @param mixed $data
         * @param int|null $remainingRedirects
         *
         * @return void
         *
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_App_InvalidArgumentException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function delete($data, $remainingRedirects = null)
        {
        }
        /**
         * @param string $value
         */
        public function setDomain($value)
        {
        }
        /**
         * @return string
         */
        public function getDomain()
        {
        }
        /**
         * @param null|string $domain
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getBaseUrl($domain = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_UserFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getUserFeed($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_NicknameFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getNicknameFeed($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_GroupFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getGroupFeed($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_MemberFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getMemberFeed($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_OwnerFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getOwnerFeed($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_EmailListFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getEmailListFeed($location = null)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Gapps_EmailListRecipientFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getEmailListRecipientFeed($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Gapps_UserEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getUserEntry($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Gapps_NicknameEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getNicknameEntry($location)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_GroupEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getGroupEntry($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_MemberEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getMemberEntry($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Gapps_OwnerEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getOwnerEntry($location = null)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Gapps_EmailListEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getEmailListEntry($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Gapps_EmailListRecipientEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function getEmailListRecipientEntry($location)
        {
        }
        /**
         * @param Zend_Gdata_Gapps_UserEntry $user
         * @param null|string $uri
         *
         * @return Zend_Gdata_Gapps_UserEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function insertUser($user, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Gapps_NicknameEntry $nickname
         * @param null|string $uri
         *
         * @return Zend_Gdata_Gapps_NicknameEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function insertNickname($nickname, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Gapps_GroupEntry $group
         * @param null|string $uri
         *
         * @return Zend_Gdata_Gapps_GroupEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function insertGroup($group, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Gapps_MemberEntry $member
         * @param null|string $uri
         *
         * @return Zend_Gdata_Gapps_MemberEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function insertMember($member, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Gapps_OwnerEntry $owner
         * @param null|string $uri
         *
         * @return Zend_Gdata_Gapps_OwnerEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function insertOwner($owner, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Gapps_EmailListEntry $emailList
         * @param null|string $uri
         *
         * @return Zend_Gdata_Gapps_EmailListEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function insertEmailList($emailList, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Gapps_EmailListRecipientEntry $recipient
         * @param null|string $uri
         *
         * @return Zend_Gdata_Gapps_EmailListRecipientEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function insertEmailListRecipient($recipient, $uri = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $username
         * @param string $givenName
         * @param string $familyName
         * @param string $password
         * @param null|string $quotaLimitInMB
         *
         * @return Zend_Gdata_Gapps_UserEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function createUser($username, $givenName, $familyName, $password, $passwordHashFunction = null, $quotaLimitInMB = null)
        {
        }
        /**
         * @param string $username
         *
         * @return Zend_Gdata_Gapps_UserEntry
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         * @throws Zend_Gdata_App_HttpException
         */
        public function retrieveUser($username)
        {
        }
        /**
         * @param null|string $startUsername
         *
         * @return Zend_Gdata_Gapps_UserFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrievePageOfUsers($startUsername = null)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_UserFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrieveAllUsers()
        {
        }
        /**
         * @param string $username
         * @param Zend_Gdata_Gapps_UserEntry $userEntry
         *
         * @return Zend_Gdata_Gapps_UserEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function updateUser($username, $userEntry)
        {
        }
        /**
         * @param string $username
         *
         * @return Zend_Gdata_Gapps_UserEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function suspendUser($username)
        {
        }
        /**
         * @param string $username
         *
         * @return Zend_Gdata_Gapps_UserEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function restoreUser($username)
        {
        }
        /**
         * @param string $username
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function deleteUser($username)
        {
        }
        /**
         * @param string $username
         * @param string $nickname
         *
         * @return Zend_Gdata_Gapps_NicknameEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function createNickname($username, $nickname)
        {
        }
        /**
         * @param string $nickname
         *
         * @return Zend_Gdata_Gapps_NicknameEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrieveNickname($nickname)
        {
        }
        /**
         * @param string $username
         *
         * @return Zend_Gdata_Gapps_NicknameFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrieveNicknames($username)
        {
        }
        /**
         * @param null|string $startNickname
         *
         * @return Zend_Gdata_Gapps_NicknameFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrievePageOfNicknames($startNickname = null)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_NicknameFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrieveAllNicknames()
        {
        }
        /**
         * @param string $nickname
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function deleteNickname($nickname)
        {
        }
        /**
         * @param string $groupId
         * @param string $groupName
         * @param null|string $description
         * @param null|string $emailPermission
         *
         * @return Zend_Gdata_Gapps_GroupEntry
         */
        public function createGroup($groupId, $groupName, $description = null, $emailPermission = null)
        {
        }
        /**
         * @param string $groupId
         *
         * @return Zend_Gdata_Gapps_GroupEntry
         */
        public function retrieveGroup($groupId)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_GroupFeed
         */
        public function retrieveAllGroups()
        {
        }
        /**
         * @param string $groupId
         */
        public function deleteGroup($groupId)
        {
        }
        /**
         * @param string $memberId
         * @param string $groupId
         *
         * @return bool
         */
        public function isMember($memberId, $groupId)
        {
        }
        /**
         * @param string $recipientAddress
         * @param string $groupId
         *
         * @return Zend_Gdata_Gapps_MemberEntry
         */
        public function addMemberToGroup($recipientAddress, $groupId)
        {
        }
        /**
         * @param string $memberId
         * @param string $groupId
         */
        public function removeMemberFromGroup($memberId, $groupId)
        {
        }
        /**
         * @param string $groupId
         *
         * @return Zend_Gdata_Gapps_MemberFeed
         */
        public function retrieveAllMembers($groupId)
        {
        }
        /**
         * @param string $email
         * @param string $groupId
         *
         * @return Zend_Gdata_Gapps_OwnerEntry
         */
        public function addOwnerToGroup($email, $groupId)
        {
        }
        /**
         * @param string $groupId
         *
         * @return Zend_Gdata_Gapps_OwnerFeed
         */
        public function retrieveGroupOwners($groupId)
        {
        }
        /**
         * @param string $email
         * @param string $groupId
         *
         * @return bool
         */
        public function isOwner($email, $groupId)
        {
        }
        /**
         * @param string $email
         * @param string $groupId
         */
        public function removeOwnerFromGroup($email, $groupId)
        {
        }
        /**
         * @param string $groupId
         * @param null|string $groupName
         * @param null|string $description
         * @param null|string $emailPermission
         *
         * @return Zend_Gdata_Gapps_GroupEntry
         */
        public function updateGroup($groupId, $groupName = null, $description = null, $emailPermission = null)
        {
        }
        /**
         * @param string $memberId
         * @param bool|null $directOnly
         *
         * @return Zend_Gdata_Gapps_GroupFeed
         */
        public function retrieveGroups($memberId, $directOnly = null)
        {
        }
        /**
         * @param null|string $startGroup
         *
         * @return Zend_Gdata_Gapps_GroupFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrievePageOfGroups($startGroup = null)
        {
        }
        /**
         * @param string $groupId
         * @param null|string $startMember
         *
         * @return Zend_Gdata_Gapps_MemberFeed
         */
        public function retrievePageOfMembers($groupId, $startMember = null)
        {
        }
        /**
         * @param string $emailList
         *
         * @return Zend_Gdata_Gapps_EmailListEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function createEmailList($emailList)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_EmailListFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrieveEmailLists($recipient)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_EmailListFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrievePageOfEmailLists($startNickname = null)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_EmailListFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrieveAllEmailLists()
        {
        }
        /**
         * @param string $emailList
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function deleteEmailList($emailList)
        {
        }
        /**
         * @param string $recipientAddress
         * @param string $emailList
         *
         * @return Zend_Gdata_Gapps_EmailListRecipientEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function addRecipientToEmailList($recipientAddress, $emailList)
        {
        }
        /**
         * @param null|string $startRecipient
         *
         * @return Zend_Gdata_Gapps_EmailListRecipientFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrievePageOfRecipients($emailList, $startRecipient = null)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_EmailListRecipientFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function retrieveAllRecipients($emailList)
        {
        }
        /**
         * @param string $recipientAddress
         * @param string $emailList
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         * @throws Zend_Gdata_Gapps_ServiceException
         */
        public function removeRecipientFromEmailList($recipientAddress, $emailList)
        {
        }
    }
    class Zend_Gdata_Gapps_EmailListEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_EmailListEntry';
        /**
         * @var Zend_Gdata_Gapps_Extension_EmailList
         */
        public $_emailList;
        /**
         * @var Zend_Gdata_Extension_FeedLink
         */
        public $_feedLink;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_Extension_EmailList
         */
        public function getEmailList()
        {
        }
        /**
         * @param Zend_Gdata_Gapps_Extension_EmailList $value
         *
         * @return Zend_Gdata_Gapps_EventEntry
         */
        public function setEmailList($value)
        {
        }
        /**
         * @param null|string $rel
         *
         * @return mixed
         */
        public function getFeedLink($rel = null)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Gapps_EventEntry
         */
        public function setFeedLink($value)
        {
        }
    }
    class Zend_Gdata_Gapps_EmailListFeed extends \Zend_Gdata_Feed
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_EmailListEntry';
        public $_feedClassName = 'Zend_Gdata_Gapps_EmailListFeed';
    }
    class Zend_Gdata_Gapps_EmailListQuery extends \Zend_Gdata_Gapps_Query
    {
        /**
         * @var string
         */
        public $_emailListName;
        /**
         * @param null|string $domain
         * @param null|string $emailListName
         * @param null|string $recipient
         * @param null|string $startEmailListName
         */
        public function __construct($domain = null, $emailListName = null, $recipient = null, $startEmailListName = null)
        {
        }
        /**
         * @param string $value
         */
        public function setEmailListName($value)
        {
        }
        /**
         * @return string
         */
        public function getEmailListName()
        {
        }
        /**
         * @param string $value
         */
        public function setRecipient($value)
        {
        }
        /**
         * @return string
         */
        public function getRecipient()
        {
        }
        /**
         * @param string $value
         */
        public function setStartEmailListName($value)
        {
        }
        /**
         * @return string
         */
        public function getStartEmailListName()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Gapps_EmailListRecipientEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_EmailListRecipientEntry';
        /**
         * @var Zend_Gdata_Extension_Who
         */
        public $_who;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Extension_Who
         */
        public function getWho()
        {
        }
        /**
         * @param Zend_Gdata_Extension_Who $value
         *
         * @return Zend_Gdata_Gapps_EventEntry
         */
        public function setWho($value)
        {
        }
    }
    class Zend_Gdata_Gapps_EmailListRecipientFeed extends \Zend_Gdata_Feed
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_EmailListRecipientEntry';
        public $_feedClassName = 'Zend_Gdata_Gapps_EmailListRecipientFeed';
    }
    class Zend_Gdata_Gapps_EmailListRecipientQuery extends \Zend_Gdata_Gapps_Query
    {
        /**
         * @var string
         */
        public $_emailListName;
        /**
         * @param null|string $domain
         * @param null|string $emailListName
         * @param null|string $startRecipient
         */
        public function __construct($domain = null, $emailListName = null, $startRecipient = null)
        {
        }
        /**
         * @param string $value
         */
        public function setEmailListName($value)
        {
        }
        public function getEmailListName()
        {
        }
        /**
         * @param string $value
         */
        public function setStartRecipient($value)
        {
        }
        /**
         * @return string
         */
        public function getStartRecipient()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Gapps_Error extends \Zend_Gdata_App_Base
    {
        public const UNKNOWN_ERROR = 1000;
        public const USER_DELETED_RECENTLY = 1100;
        public const USER_SUSPENDED = 1101;
        public const DOMAIN_USER_LIMIT_EXCEEDED = 1200;
        public const DOMAIN_ALIAS_LIMIT_EXCEEDED = 1201;
        public const DOMAIN_SUSPENDED = 1202;
        public const DOMAIN_FEATURE_UNAVAILABLE = 1203;
        public const ENTITY_EXISTS = 1300;
        public const ENTITY_DOES_NOT_EXIST = 1301;
        public const ENTITY_NAME_IS_RESERVED = 1302;
        public const ENTITY_NAME_NOT_VALID = 1303;
        public const INVALID_GIVEN_NAME = 1400;
        public const INVALID_FAMILY_NAME = 1401;
        public const INVALID_PASSWORD = 1402;
        public const INVALID_USERNAME = 1403;
        public const INVALID_HASH_FUNCTION_NAME = 1404;
        public const INVALID_HASH_DIGEST_LENGTH = 1405;
        public const INVALID_EMAIL_ADDRESS = 1406;
        public const INVALID_QUERY_PARAMETER_VALUE = 1407;
        public const TOO_MANY_RECIPIENTS_ON_EMAIL_LIST = 1500;
        public $_errorCode = null;
        public $_reason = null;
        public $_invalidInput = null;
        public function __construct($errorCode = null, $reason = null, $invalidInput = null)
        {
        }
        /**
         * @param int $value
         */
        public function setErrorCode($value)
        {
        }
        /**
         * @return int
         */
        public function getErrorCode()
        {
        }
        /**
         * @param string $value
         */
        public function setReason($value)
        {
        }
        /**
         * @return string
         */
        public function getReason()
        {
        }
        /**
         * @param string $value
         */
        public function setInvalidInput($value)
        {
        }
        /**
         * @return string
         */
        public function getInvalidInput()
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Gapps_Extension_EmailList extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'apps';
        public $_rootElement = 'emailList';
        /**
         * @var string
         */
        public $_name;
        /**
         * @param null|string $name
         */
        public function __construct($name = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_EmailList
         */
        public function setName($value)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Gapps_Extension_Login extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'apps';
        public $_rootElement = 'login';
        /**
         * @var string
         */
        public $_username;
        /**
         * @var string
         */
        public $_password;
        /**
         * @var string
         */
        public $_hashFunctionName;
        /**
         * @var bool
         */
        public $_admin;
        public $_agreedToTerms = null;
        /**
         * @var bool
         */
        public $_suspended;
        /**
         * @var bool
         */
        public $_changePasswordAtNextLogin;
        /**
         * @param null|string $username
         * @param null|string $password
         * @param null|string $hashFunctionName
         * @param bool|null $admin
         * @param bool|null $suspended
         * @param bool|null $changePasswordAtNextLogin
         * @param bool|null $agreedToTerms
         */
        public function __construct($username = null, $password = null, $hashFunctionName = null, $admin = null, $suspended = null, $changePasswordAtNextLogin = null, $agreedToTerms = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getUsername()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Login
         */
        public function setUsername($value)
        {
        }
        /**
         * @return string
         */
        public function getPassword()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Login
         */
        public function setPassword($value)
        {
        }
        /**
         * @return string
         */
        public function getHashFunctionName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Login
         */
        public function setHashFunctionName($value)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getAdmin()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Gapps_Extension_Login
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setAdmin($value)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getAgreedToTerms()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Gapps_Extension_Login
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setAgreedToTerms($value)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getSuspended()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Gapps_Extension_Login
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setSuspended($value)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getChangePasswordAtNextLogin()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Gapps_Extension_Login
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setChangePasswordAtNextLogin($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Gapps_Extension_Name extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'apps';
        public $_rootElement = 'name';
        /**
         * @var string
         */
        public $_familyName;
        /**
         * @var string
         */
        public $_givenName;
        /**
         * @param null|string $familyName
         * @param null|string $givenName
         */
        public function __construct($familyName = null, $givenName = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getFamilyName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Name
         */
        public function setFamilyName($value)
        {
        }
        /**
         * @return string
         */
        public function getGivenName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Name
         */
        public function setGivenName($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Gapps_Extension_Nickname extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'apps';
        public $_rootElement = 'nickname';
        /**
         * @var string
         */
        public $_name;
        /**
         * @param null|string $name
         */
        public function __construct($name = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Nickname
         */
        public function setName($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Gapps_Extension_Property extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'apps';
        public $_rootElement = 'property';
        /**
         * @var string
         */
        public $_name;
        /**
         * @var string
         */
        public $_value;
        /**
         * @param null|string $name
         * @param null|string $value
         */
        public function __construct($name = null, $value = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Property
         */
        public function setName($value)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Property
         */
        public function setValue($value)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Gapps_Extension_Quota extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'apps';
        public $_rootElement = 'quota';
        /**
         * @var int
         */
        public $_limit;
        /**
         * @param null|string $limit
         */
        public function __construct($limit = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getLimit()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Gapps_Extension_Quota
         */
        public function setLimit($value)
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Gapps_GroupEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_GroupEntry';
        /**
         * @var Zend_Gdata_Gapps_Extension_Property
         */
        public $_property;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @param null|string $rel
         *
         * @return mixed
         */
        public function getProperty($rel = null)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Gapps_GroupEntry
         */
        public function setProperty($value)
        {
        }
    }
    class Zend_Gdata_Gapps_GroupFeed extends \Zend_Gdata_Feed
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_GroupEntry';
        public $_feedClassName = 'Zend_Gdata_Gapps_GroupFeed';
    }
    class Zend_Gdata_Gapps_GroupQuery extends \Zend_Gdata_Gapps_Query
    {
        /**
         * @var string
         */
        public $_groupId;
        /**
         * @param null|string $domain
         * @param null|string $groupId
         */
        public function __construct($domain = null, $groupId = null, $startGroupId = null)
        {
        }
        /**
         * @param string $value
         */
        public function setGroupId($value)
        {
        }
        public function getGroupId()
        {
        }
        /**
         * @param string $value
         */
        public function setMember($value)
        {
        }
        /**
         * @return string
         */
        public function getMember()
        {
        }
        /**
         * @param bool $value
         */
        public function setDirectOnly($value)
        {
        }
        /**
         * @return bool
         */
        public function getDirectOnly()
        {
        }
        /**
         * @param string $value
         */
        public function setStartGroupId($value)
        {
        }
        /**
         * @return string
         */
        public function getStartGroupId()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Gapps_MemberEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_MemberEntry';
        /**
         * @var Zend_Gdata_Gapps_Extension_Property
         */
        public $_property;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @param null|string $rel
         *
         * @return mixed
         */
        public function getProperty($rel = null)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Gapps_MemberEntry
         */
        public function setProperty($value)
        {
        }
    }
    class Zend_Gdata_Gapps_MemberFeed extends \Zend_Gdata_Feed
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_MemberEntry';
        public $_feedClassName = 'Zend_Gdata_Gapps_MemberFeed';
    }
    class Zend_Gdata_Gapps_MemberQuery extends \Zend_Gdata_Gapps_Query
    {
        /**
         * @var string
         */
        public $_groupId;
        /**
         * @var string
         */
        public $_memberId;
        /**
         * @param null|string $domain
         * @param null|string $groupId
         * @param null|string $memberId
         * @param null|string $startMemberId
         */
        public function __construct($domain = null, $groupId = null, $memberId = null, $startMemberId = null)
        {
        }
        /**
         * @param string $value
         */
        public function setGroupId($value)
        {
        }
        /**
         * @return string
         */
        public function getGroupId()
        {
        }
        /**
         * @param string $value
         */
        public function setMemberId($value)
        {
        }
        /**
         * @return The
         */
        public function getMemberId()
        {
        }
        /**
         * @param string $value
         */
        public function setStartMemberId($value)
        {
        }
        /**
         * @return string
         */
        public function getStartMemberId()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Gapps_NicknameEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_NicknameEntry';
        /**
         * @var Zend_Gdata_Gapps_Extension_Login
         */
        public $_login;
        /**
         * @var Zend_Gdata_Gapps_Extension_Nickname
         */
        public $_nickname;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_Extension_Login
         */
        public function getLogin()
        {
        }
        /**
         * @param Zend_Gdata_Gapps_Extension_Login $value
         *
         * @return Zend_Gdata_Gapps_NicknameEntry
         */
        public function setLogin($value)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_Extension_Nickname
         */
        public function getNickname()
        {
        }
        /**
         * @param Zend_Gdata_Gapps_Extension_Nickname $value
         *
         * @return Zend_Gdata_Gapps_NicknameEntry
         */
        public function setNickname($value)
        {
        }
    }
    class Zend_Gdata_Gapps_NicknameFeed extends \Zend_Gdata_Feed
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_NicknameEntry';
        public $_feedClassName = 'Zend_Gdata_Gapps_NicknameFeed';
    }
    class Zend_Gdata_Gapps_NicknameQuery extends \Zend_Gdata_Gapps_Query
    {
        /**
         * @var string
         */
        public $_nickname;
        /**
         * @param null|string $domain
         * @param null|string $nickname
         * @param null|string $username
         * @param null|string $startNickname
         */
        public function __construct($domain = null, $nickname = null, $username = null, $startNickname = null)
        {
        }
        /**
         * @param string $value
         */
        public function setNickname($value)
        {
        }
        /**
         * @return string
         */
        public function getNickname()
        {
        }
        /**
         * @param string $value
         */
        public function setUsername($value)
        {
        }
        /**
         * @return string
         */
        public function getUsername()
        {
        }
        /**
         * @param string $value
         */
        public function setStartNickname($value)
        {
        }
        /**
         * @return string
         */
        public function getStartNickname()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Gapps_OwnerEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_OwnerEntry';
        /**
         * @var Zend_Gdata_Gapps_Extension_Property
         */
        public $_property;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @param null|string $rel
         *
         * @return mixed
         */
        public function getProperty($rel = null)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Gapps_OwnerEntry
         */
        public function setProperty($value)
        {
        }
    }
    class Zend_Gdata_Gapps_OwnerFeed extends \Zend_Gdata_Feed
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_OwnerEntry';
        public $_feedClassName = 'Zend_Gdata_Gapps_OwnerFeed';
    }
    class Zend_Gdata_Gapps_OwnerQuery extends \Zend_Gdata_Gapps_Query
    {
        /**
         * @var string
         */
        public $_groupId;
        /**
         * @var string
         */
        public $_ownerEmail;
        /**
         * @param null|string $domain
         * @param null|string $groupId
         * @param null|string $ownerEmail
         */
        public function __construct($domain = null, $groupId = null, $ownerEmail = null)
        {
        }
        /**
         * @param string $value
         */
        public function setGroupId($value)
        {
        }
        /**
         * @return string
         */
        public function getGroupId()
        {
        }
        /**
         * @param string $value
         */
        public function setOwnerEmail($value)
        {
        }
        /**
         * @return string
         */
        public function getOwnerEmail()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Gapps_Query extends \Zend_Gdata_Query
    {
        /**
         * @var string
         */
        public $_domain;
        /**
         * @param null|string $domain
         */
        public function __construct($domain = null)
        {
        }
        /**
         * @param string $value
         */
        public function setDomain($value)
        {
        }
        /**
         * @return string
         */
        public function getDomain()
        {
        }
        /**
         * @param null|string $domain
         */
        public function getBaseUrl($domain = null)
        {
        }
    }
    class Zend_Gdata_Gapps_ServiceException extends \Zend_Exception
    {
        public $_rootElement = 'AppsForYourDomainErrors';
        /**
         * @var array<array-key, mixed>
         */
        public $_errors;
        /**
         * @return array<array-key, mixed>
         */
        public function __construct($errors = null)
        {
        }
        /**
         * @param Zend_Gdata_Gapps_Error $error
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function addError($error)
        {
        }
        /**
         * @param array<array-key, mixed> $array
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function setErrors($array)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @return Zend_Gdata_Gapps_Error
         */
        public function getError($errorCode)
        {
        }
        /**
         * @param int $errorCode
         *
         * @return bool
         */
        public function hasError($errorCode)
        {
        }
        /**
         * @param string $string
         *
         * @return Zend_Gdata_Gapps_ServiceException
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function importFromString($string)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Gdata_Gapps_UserEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_UserEntry';
        /**
         * @var Zend_Gdata_Gapps_Extension_Login
         */
        public $_login;
        /**
         * @var Zend_Gdata_Gapps_Extension_Name
         */
        public $_name;
        /**
         * @var Zend_Gdata_Gapps_Extension_Quota
         */
        public $_quota;
        /**
         * @var Zend_Gdata_Extension_FeedLink
         */
        public $_feedLink;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_Extension_Login
         */
        public function getLogin()
        {
        }
        /**
         * @param Zend_Gdata_Gapps_Extension_Login $value
         *
         * @return Zend_Gdata_Gapps_UserEntry
         */
        public function setLogin($value)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_Extension_Name
         */
        public function getName()
        {
        }
        /**
         * @param Zend_Gdata_Gapps_Extension_Name $value
         *
         * @return Zend_Gdata_Gapps_UserEntry
         */
        public function setName($value)
        {
        }
        /**
         * @return Zend_Gdata_Gapps_Extension_Quota
         */
        public function getQuota()
        {
        }
        /**
         * @param Zend_Gdata_Gapps_Extension_Quota $value
         *
         * @return Zend_Gdata_Gapps_UserEntry
         */
        public function setQuota($value)
        {
        }
        /**
         * @param null|string $rel
         *
         * @return mixed
         */
        public function getFeedLink($rel = null)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Gapps_EventEntry
         */
        public function setFeedLink($value)
        {
        }
    }
    class Zend_Gdata_Gapps_UserFeed extends \Zend_Gdata_Feed
    {
        public $_entryClassName = 'Zend_Gdata_Gapps_UserEntry';
        public $_feedClassName = 'Zend_Gdata_Gapps_UserFeed';
    }
    class Zend_Gdata_Gapps_UserQuery extends \Zend_Gdata_Gapps_Query
    {
        /**
         * @var string
         */
        public $_username;
        /**
         * @param null|string $domain
         * @param null|string $username
         * @param null|string $startUsername
         */
        public function __construct($domain = null, $username = null, $startUsername = null)
        {
        }
        /**
         * @param string $value
         */
        public function setUsername($value)
        {
        }
        public function getUsername()
        {
        }
        /**
         * @param string $value
         */
        public function setStartUsername($value)
        {
        }
        /**
         * @return string
         */
        public function getStartUsername()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
    }
    class Zend_Gdata_Gbase extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'gbase';
        public const GBASE_ITEM_FEED_URI = 'https://www.google.com/base/feeds/items';
        public const GBASE_SNIPPET_FEED_URI = 'https://www.google.com/base/feeds/snippets';
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
    }
    class Zend_Gdata_Gbase_Entry extends \Zend_Gdata_Entry
    {
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Gbase_Extension_BaseAttribute extends \Zend_Gdata_App_Extension_Element
    {
        public function __construct($name = null, $text = null, $type = null)
        {
        }
    }
    class Zend_Gdata_Gbase_Feed extends \Zend_Gdata_Feed
    {
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Gbase_ItemEntry extends \Zend_Gdata_Gbase_Entry
    {
    }
    class Zend_Gdata_Gbase_ItemFeed extends \Zend_Gdata_Feed
    {
    }
    class Zend_Gdata_Gbase_ItemQuery extends \Zend_Gdata_Gbase_Query
    {
        public const GBASE_ITEM_FEED_URI = 'https://www.google.com/base/feeds/items';
        public const GBASE_SNIPPET_FEED_URI = 'https://www.google.com/base/feeds/snippets';
    }
    class Zend_Gdata_Gbase_Query extends \Zend_Gdata_Query
    {
        public const GBASE_ITEM_FEED_URI = 'https://www.google.com/base/feeds/items';
        public const GBASE_SNIPPET_FEED_URI = 'https://www.google.com/base/feeds/snippets';
        public function __construct($url = null)
        {
        }
    }
    class Zend_Gdata_Gbase_SnippetEntry extends \Zend_Gdata_Gbase_Entry
    {
    }
    class Zend_Gdata_Gbase_SnippetFeed extends \Zend_Gdata_Feed
    {
    }
    class Zend_Gdata_Gbase_SnippetQuery extends \Zend_Gdata_Gbase_Query
    {
        public const GBASE_ITEM_FEED_URI = 'https://www.google.com/base/feeds/items';
        public const GBASE_SNIPPET_FEED_URI = 'https://www.google.com/base/feeds/snippets';
        public const BASE_SNIPPET_FEED_URI = 'https://www.google.com/base/feeds/snippets';
    }
    class Zend_Gdata_Geo extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'xapi';
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
    }
    class Zend_Gdata_Geo_Entry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Geo_Entry';
        public $_where = null;
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function getWhere()
        {
        }
        public function setWhere($value)
        {
        }
    }
    class Zend_Gdata_Geo_Extension_GeoRssWhere extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'georss';
        public $_rootElement = 'where';
        /**
         * @var Zend_Gdata_Geo_Extension_GmlPoint
         */
        public $_point;
        /**
         * @param Zend_Gdata_Geo_Extension_GmlPoint|null $point
         */
        public function __construct($point = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Geo_Extension_GmlPoint
         */
        public function getPoint()
        {
        }
        /**
         * @param Zend_Gdata_Geo_Extension_GmlPoint $value
         *
         * @return Zend_Gdata_Geo_Extension_GeoRssWhere
         */
        public function setPoint($value)
        {
        }
    }
    class Zend_Gdata_Geo_Extension_GmlPoint extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gml';
        public $_rootElement = 'Point';
        /**
         * @var Zend_Gdata_Geo_Extension_GmlPos
         */
        public $_pos;
        /**
         * @param Zend_Gdata_Geo_Extension_GmlPos|null $pos
         */
        public function __construct($pos = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Geo_Extension_GmlPos
         */
        public function getPos()
        {
        }
        /**
         * @param Zend_Gdata_Geo_Extension_GmlPos $value
         *
         * @return Zend_Gdata_Geo_Extension_GmlPoint
         */
        public function setPos($value)
        {
        }
    }
    class Zend_Gdata_Geo_Extension_GmlPos extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gml';
        public $_rootElement = 'pos';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Geo_Feed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Health extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'xapi';
        public const AUTHSUB_PROFILE_FEED_URI = 'https://www.google.com/health/feeds/profile/default';
        public const AUTHSUB_REGISTER_FEED_URI = 'https://www.google.com/health/feeds/register/default';
        public const CLIENTLOGIN_PROFILELIST_FEED_URI = 'https://www.google.com/health/feeds/profile/list';
        public const CLIENTLOGIN_PROFILE_FEED_URI = 'https://www.google.com/health/feeds/profile/ui';
        public const CLIENTLOGIN_REGISTER_FEED_URI = 'https://www.google.com/health/feeds/register/ui';
        public const HEALTH_SERVICE_NAME = 'health';
        public const H9_SANDBOX_SERVICE_NAME = 'weaver';
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         * @param bool $useH9Sandbox
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0', $useH9Sandbox = false)
        {
        }
    }
    class Zend_Gdata_Health_Extension_Ccr extends \Zend_Gdata_App_Extension_Element
    {
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Health_ProfileEntry extends \Zend_Gdata_Entry
    {
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Health_ProfileFeed extends \Zend_Gdata_Feed
    {
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Health_ProfileListEntry extends \Zend_Gdata_Entry
    {
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Health_ProfileListFeed extends \Zend_Gdata_Feed
    {
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Health_Query extends \Zend_Gdata_Query
    {
        public const HEALTH_PROFILE_FEED_URI = 'https://www.google.com/health/feeds/profile/default';
        public const HEALTH_REGISTER_FEED_URI = 'https://www.google.com/health/feeds/register/default';
        public const ITEM_CATEGORY_NS = 'http://schemas.google.com/health/item';
        public function __construct($url = null)
        {
        }
    }
    class Zend_Gdata_HttpAdapterStreamingProxy extends \Zend_Http_Client_Adapter_Proxy
    {
        public const CHUNK_SIZE = 1024;
        /**
         * @param string $method
         * @param Zend_Uri_Http $uri
         * @param string $http_ver
         * @param array<array-key, mixed> $headers
         * @param string $body
         *
         * @return string
         *
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function write($method, $uri, $http_ver = '1.1', $headers = array(), $body = '')
        {
        }
    }
    class Zend_Gdata_HttpAdapterStreamingSocket extends \Zend_Http_Client_Adapter_Socket
    {
        public const CHUNK_SIZE = 1024;
        /**
         * @param string $method
         * @param Zend_Uri_Http $uri
         * @param string $http_ver
         * @param array<array-key, mixed> $headers
         * @param string $body
         *
         * @return string
         */
        public function write($method, $uri, $http_ver = '1.1', $headers = array(), $body = '')
        {
        }
    }
    class Zend_Gdata_HttpClient extends \Zend_Http_Client
    {
        public const GET = 'GET';
        public const POST = 'POST';
        public const PUT = 'PUT';
        public const HEAD = 'HEAD';
        public const DELETE = 'DELETE';
        public const TRACE = 'TRACE';
        public const OPTIONS = 'OPTIONS';
        public const CONNECT = 'CONNECT';
        public const MERGE = 'MERGE';
        public const PATCH = 'PATCH';
        public const AUTH_BASIC = 'basic';
        public const HTTP_1 = '1.1';
        public const HTTP_0 = '1.0';
        public const CONTENT_TYPE = 'Content-Type';
        public const CONTENT_LENGTH = 'Content-Length';
        public const ENC_URLENCODED = 'application/x-www-form-urlencoded';
        public const ENC_FORMDATA = 'multipart/form-data';
        public const VTYPE_SCALAR = 'SCALAR';
        public const VTYPE_FILE = 'FILE';
        /**
         * @var resource
         */
        public $_authSubPrivateKeyId;
        /**
         * @var string
         */
        public $_authSubToken;
        /**
         * @var string
         */
        public $_clientLoginToken;
        /**
         * @var string
         */
        public $_clientLoginKey;
        /**
         * @var bool
         */
        public $_streamingRequest;
        /**
         * @param string $file
         * @param null|string $passphrase
         * @param bool $useIncludePath
         *
         * @return void
         */
        public function setAuthSubPrivateKeyFile($file, $passphrase = null, $useIncludePath = false)
        {
        }
        /**
         * @param string $key
         * @param null|string $passphrase
         *
         * @return Zend_Gdata_HttpClient
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function setAuthSubPrivateKey($key, $passphrase = null)
        {
        }
        /**
         * @return string
         */
        public function getAuthSubPrivateKeyId()
        {
        }
        /**
         * @return string
         */
        public function getAuthSubToken()
        {
        }
        /**
         * @param string $token
         *
         * @return Zend_Gdata_HttpClient
         */
        public function setAuthSubToken($token)
        {
        }
        /**
         * @return string
         */
        public function getClientLoginToken()
        {
        }
        /**
         * @param string $token
         *
         * @return Zend_Gdata_HttpClient
         */
        public function setClientLoginToken($token)
        {
        }
        /**
         * @param string $method
         * @param string $url
         * @param array<array-key, mixed> $headers
         * @param null|string $body
         * @param null|string $contentType
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Gdata_App_Exception
         */
        public function filterHttpRequest($method, $url, $headers = array(), $body = null, $contentType = null)
        {
        }
        /**
         * @param Zend_Http_Response $response
         *
         * @return Zend_Http_Response
         */
        public function filterHttpResponse($response)
        {
        }
        /**
         * @return Zend_Http_Client_Adapter_Interface|string
         */
        public function getAdapter()
        {
        }
        /**
         * @param Zend_Http_Client_Adapter_Interface $adapter
         *
         * @return void
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setAdapter($adapter)
        {
        }
        /**
         * @param bool $value
         *
         * @return void
         */
        public function setStreamingRequest($value)
        {
        }
        /**
         * @return bool
         */
        public function getStreamingRequest()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Http_Client_Exception
         */
        public function _prepareBody()
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function resetParameters($clearAll = false)
        {
        }
        /**
         * @param string $data
         * @param null|string $enctype
         *
         * @return Zend_Http_Client
         */
        public function setRawDataStream($data, $enctype = null)
        {
        }
    }
    class Zend_Gdata_Kind_EventEntry extends \Zend_Gdata_Entry
    {
        public $_who = array();
        public $_when = array();
        public $_where = array();
        public $_recurrence = null;
        public $_eventStatus = null;
        public $_comments = null;
        public $_transparency = null;
        public $_visibility = null;
        public $_recurrenceException = array();
        public $_extendedProperty = array();
        public $_originalEvent = null;
        public $_entryLink = null;
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        public function getWhen()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setWhen($value)
        {
        }
        public function getWhere()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setWhere($value)
        {
        }
        public function getWho()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setWho($value)
        {
        }
        public function getRecurrence()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setRecurrence($value)
        {
        }
        public function getEventStatus()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setEventStatus($value)
        {
        }
        public function getComments()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setComments($value)
        {
        }
        public function getTransparency()
        {
        }
        /**
         * @param Zend_Gdata_Transparency $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setTransparency($value)
        {
        }
        public function getVisibility()
        {
        }
        /**
         * @param Zend_Gdata_Visibility $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setVisibility($value)
        {
        }
        public function getRecurrenceExcption()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setRecurrenceException($value)
        {
        }
        public function getExtendedProperty()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setExtendedProperty($value)
        {
        }
        public function getOriginalEvent()
        {
        }
        /**
         * @param Zend_Gdata_Extension_OriginalEvent $value
         *
         * @return Zend_Gdata_Kind_EventEntry
         */
        public function setOriginalEvent($value)
        {
        }
        /**
         * @return Zend_Gdata_Extension_EntryLink
         */
        public function getEntryLink()
        {
        }
        /**
         * @param Zend_Gdata_Extension_EntryLink $value
         *
         * @return Zend_Gdata_Extension_Who
         */
        public function setEntryLink($value)
        {
        }
    }
    class Zend_Gdata_Media extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'xapi';
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
    }
    class Zend_Gdata_MediaMimeStream
    {
        /**
         * @var string
         */
        public $_boundaryString;
        /**
         * @var resource
         */
        public $_fileHandle;
        /**
         * @var int
         */
        public $_currentPart;
        /**
         * @var int
         */
        public $_totalSize;
        /**
         * @var array<array-key, mixed>
         */
        public $_parts;
        /**
         * @param null|string $xmlString
         * @param null|string $filePath
         * @param null|string $fileContentType
         *
         * @throws Zend_Gdata_App_IOException
         */
        public function __construct($xmlString = null, $filePath = null, $fileContentType = null)
        {
        }
        /**
         * @return void
         */
        public function wrapEntry($entry, $fileMimeType)
        {
        }
        /**
         * @return string
         */
        public function read($bytesRequested)
        {
        }
        /**
         * @return int
         */
        public function getTotalSize()
        {
        }
        /**
         * @return void
         */
        public function closeFileHandle()
        {
        }
        /**
         * @return string
         */
        public function getContentType()
        {
        }
    }
    class Zend_Gdata_Media_Entry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Media_Entry';
        /**
         * @var Zend_Gdata_Media_Extension_MediaGroup
         */
        public $_mediaGroup;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function getMediaGroup()
        {
        }
        /**
         * @param Zend_Gdata_Media_Extension_MediaGroup $mediaGroup
         *
         * @return Zend_Gdata_Media_Entry
         */
        public function setMediaGroup($mediaGroup)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaCategory extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'category';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_scheme;
        public $_label = null;
        /**
         * @param null|string $text
         * @param null|string $scheme
         * @param null|string $label
         */
        public function __construct($text = null, $scheme = null, $label = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getScheme()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaCategory
         */
        public function setScheme($value)
        {
        }
        /**
         * @return string
         */
        public function getLabel()
        {
        }
        /**
         * @param string $value
         *
         * @return $this
         */
        public function setLabel($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaContent extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'content';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_url;
        /**
         * @var int
         */
        public $_fileSize;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_medium;
        /**
         * @var string
         */
        public $_isDefault;
        /**
         * @var string
         */
        public $_expression;
        /**
         * @var int
         */
        public $_bitrate;
        /**
         * @var int
         */
        public $_framerate;
        /**
         * @var int
         */
        public $_samplingrate;
        /**
         * @var int
         */
        public $_channels;
        /**
         * @var int
         */
        public $_duration;
        /**
         * @var int
         */
        public $_height;
        /**
         * @var int
         */
        public $_width;
        /**
         * @var string
         */
        public $_lang;
        public function __construct($url = null, $fileSize = null, $type = null, $medium = null, $isDefault = null, $expression = null, $bitrate = null, $framerate = null, $samplingrate = null, $channels = null, $duration = null, $height = null, $width = null, $lang = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaContent
         */
        public function setUrl($value)
        {
        }
        /**
         * @return int
         */
        public function getFileSize()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Media_Extension_MediaContent
         */
        public function setFileSize($value)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaContent
         */
        public function setType($value)
        {
        }
        /**
         * @return string
         */
        public function getMedium()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaContent
         */
        public function setMedium($value)
        {
        }
        /**
         * @return bool
         */
        public function getIsDefault()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Gdata_Media_Extension_MediaContent
         */
        public function setIsDefault($value)
        {
        }
        /**
         * @return string
         */
        public function getExpression()
        {
        }
        public function setExpression($value)
        {
        }
        /**
         * @return int
         */
        public function getBitrate()
        {
        }
        public function setBitrate($value)
        {
        }
        /**
         * @return int
         */
        public function getFramerate()
        {
        }
        public function setFramerate($value)
        {
        }
        /**
         * @return int
         */
        public function getSamplingrate()
        {
        }
        public function setSamplingrate($value)
        {
        }
        /**
         * @return int
         */
        public function getChannels()
        {
        }
        public function setChannels($value)
        {
        }
        /**
         * @return int
         */
        public function getDuration()
        {
        }
        public function setDuration($value)
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
        public function setHeight($value)
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        public function setWidth($value)
        {
        }
        /**
         * @return string
         */
        public function getLang()
        {
        }
        public function setLang($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaCopyright extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'copyright';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_url;
        /**
         * @param null|string $text
         * @param null|string $url
         */
        public function __construct($text = null, $url = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaCopyright
         */
        public function setUrl($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaCredit extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'credit';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_role;
        /**
         * @var string
         */
        public $_scheme;
        /**
         * @param null|string $text
         * @param null|string $role
         * @param null|string $scheme
         */
        public function __construct($text = null, $role = null, $scheme = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getRole()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaCredit
         */
        public function setRole($value)
        {
        }
        /**
         * @return string
         */
        public function getScheme()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaCredit
         */
        public function setScheme($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaDescription extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'description';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_type;
        /**
         * @param null|string $text
         * @param null|string $type
         */
        public function __construct($text = null, $type = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaDescription
         */
        public function setType($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaGroup extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'group';
        public $_rootNamespace = 'media';
        /**
         * @var array<array-key, mixed>
         */
        public $_content;
        /**
         * @var array<array-key, mixed>
         */
        public $_category;
        /**
         * @var Zend_Gdata_Media_Extension_MediaCopyright
         */
        public $_copyright;
        /**
         * @var array<array-key, mixed>
         */
        public $_credit;
        /**
         * @var Zend_Gdata_Media_Extension_MediaDescription
         */
        public $_description;
        /**
         * @var array<array-key, mixed>
         */
        public $_hash;
        /**
         * @var Zend_Gdata_Media_Extension_MediaKeywords
         */
        public $_keywords;
        /**
         * @var array<array-key, mixed>
         */
        public $_player;
        /**
         * @var array<array-key, mixed>
         */
        public $_rating;
        /**
         * @var array<array-key, mixed>
         */
        public $_restriction;
        /**
         * @var array<array-key, mixed>
         */
        public $_mediaText;
        /**
         * @var array<array-key, mixed>
         */
        public $_thumbnail;
        /**
         * @var string
         */
        public $_title;
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getContent()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Media_MediaGroup
         */
        public function setContent($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCategory()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setCategory($value)
        {
        }
        /**
         * @return Zend_Gdata_Media_Extension_MediaCopyright
         */
        public function getCopyright()
        {
        }
        /**
         * @param Zend_Gdata_Media_Extension_MediaCopyright $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setCopyright($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCredit()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setCredit($value)
        {
        }
        /**
         * @return Zend_Gdata_Media_Extension_MediaTitle
         */
        public function getTitle()
        {
        }
        /**
         * @param Zend_Gdata_Media_Extension_MediaTitle $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setTitle($value)
        {
        }
        /**
         * @return Zend_Gdata_Media_Extension_MediaDescription
         */
        public function getDescription()
        {
        }
        /**
         * @param Zend_Gdata_Media_Extension_MediaDescription $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setDescription($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHash()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setHash($value)
        {
        }
        /**
         * @return Zend_Gdata_Media_Extension_MediaKeywords
         */
        public function getKeywords()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setKeywords($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPlayer()
        {
        }
        public function setPlayer($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRating()
        {
        }
        public function setRating($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRestriction()
        {
        }
        public function setRestriction($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getThumbnail()
        {
        }
        public function setThumbnail($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMediaText()
        {
        }
        public function setMediaText($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaHash extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'hash';
        public $_rootNamespace = 'media';
        public $_algo = null;
        /**
         * @param null|string $text
         * @param null|string $algo
         */
        public function __construct($text = null, $algo = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getAlgo()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaHash
         */
        public function setAlgo($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaKeywords extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'keywords';
        public $_rootNamespace = 'media';
        public function __construct()
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaPlayer extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'player';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_url;
        /**
         * @var int
         */
        public $_width;
        /**
         * @var int
         */
        public $_height;
        /**
         * @param null|string $url
         * @param int|null $width
         * @param int|null $height
         */
        public function __construct($url = null, $width = null, $height = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaPlayer
         */
        public function setUrl($value)
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Media_Extension_MediaPlayer
         */
        public function setWidth($value)
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Media_Extension_MediaPlayer
         */
        public function setHeight($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaRating extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'rating';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_scheme;
        /**
         * @param null|string $text
         * @param null|string $scheme
         */
        public function __construct($text = null, $scheme = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getScheme()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaRating
         */
        public function setScheme($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaRestriction extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'restriction';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_relationship;
        /**
         * @var string
         */
        public $_type;
        /**
         * @param null|string $text
         * @param null|string $relationship
         * @param null|string $type
         */
        public function __construct($text = null, $relationship = null, $type = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getRelationship()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaRestriction
         */
        public function setRelationship($value)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaRestriction
         */
        public function setType($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaText extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'text';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_lang;
        /**
         * @var string
         */
        public $_start;
        /**
         * @var string
         */
        public $_end;
        /**
         * @param null|string $text
         * @param null|string $type
         * @param null|string $lang
         * @param null|string $start
         * @param null|string $end
         */
        public function __construct($text = null, $type = null, $lang = null, $start = null, $end = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaText
         */
        public function setType($value)
        {
        }
        /**
         * @return string
         */
        public function getLang()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaText
         */
        public function setLang($value)
        {
        }
        /**
         * @return string
         */
        public function getStart()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaText
         */
        public function setStart($value)
        {
        }
        /**
         * @return string
         */
        public function getEnd()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaText
         */
        public function setEnd($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaThumbnail extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'thumbnail';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_url;
        /**
         * @var int
         */
        public $_width;
        /**
         * @var int
         */
        public $_height;
        /**
         * @var string
         */
        public $_time;
        /**
         * @param null|string $url
         * @param int|null $width
         * @param int|null $height
         * @param null|string $time
         */
        public function __construct($url = null, $width = null, $height = null, $time = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaThumbnail
         */
        public function setUrl($value)
        {
        }
        /**
         * @return int
         */
        public function getWidth()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Media_Extension_MediaThumbnail
         */
        public function setWidth($value)
        {
        }
        /**
         * @return int
         */
        public function getHeight()
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Media_Extension_MediaThumbnail
         */
        public function setHeight($value)
        {
        }
        /**
         * @return string
         */
        public function getTime()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaThumbnail
         */
        public function setTime($value)
        {
        }
    }
    class Zend_Gdata_Media_Extension_MediaTitle extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'title';
        public $_rootNamespace = 'media';
        /**
         * @var string
         */
        public $_type;
        /**
         * @param null|string $text
         * @param null|string $type
         */
        public function __construct($text = null, $type = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $attribute
         */
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaTitle
         */
        public function setType($value)
        {
        }
    }
    class Zend_Gdata_Media_Feed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_MimeBodyString
    {
        /**
         * @var string
         */
        public $_sourceString;
        /**
         * @var int
         */
        public $_bytesRead;
        /**
         * @param string $sourceString
         */
        public function __construct($sourceString)
        {
        }
        /**
         * @param int $bytesRequested
         *
         * @return string
         */
        public function read($bytesRequested)
        {
        }
        /**
         * @return int
         */
        public function getSize()
        {
        }
    }
    class Zend_Gdata_MimeFile
    {
        /**
         * @var resource
         */
        public $_fileHandle;
        /**
         * @param string $fileHandle
         */
        public function __construct($fileHandle)
        {
        }
        /**
         * @param int $bytesRequested
         *
         * @return string
         */
        public function read($bytesRequested)
        {
        }
    }
    class Zend_Gdata_Photos extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'lh2';
        public const PICASA_BASE_URI = 'https://picasaweb.google.com/data';
        public const PICASA_BASE_FEED_URI = 'https://picasaweb.google.com/data/feed';
        public const DEFAULT_PROJECTION = 'api';
        public const DEFAULT_VISIBILITY = 'all';
        public const DEFAULT_USER = 'default';
        public const USER_PATH = 'user';
        public const ALBUM_PATH = 'albumid';
        public const PHOTO_PATH = 'photoid';
        public const COMMUNITY_SEARCH_PATH = 'all';
        public const FEED_LINK_PATH = 'http://schemas.google.com/g/2005#feed';
        public const KIND_PATH = 'http://schemas.google.com/g/2005#kind';
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param null|string $userName
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Photos_UserFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function getUserFeed($userName = null, $location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Photos_AlbumFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function getAlbumFeed($location = null)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Photos_PhotoFeed
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function getPhotoFeed($location = null)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Photos_UserEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function getUserEntry($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Photos_AlbumEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function getAlbumEntry($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Photos_PhotoEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function getPhotoEntry($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Photos_TagEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function getTagEntry($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Photos_CommentEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function getCommentEntry($location)
        {
        }
        /**
         * @param Zend_Gdata_Photos_AlbumEntry $album
         *
         * @return Zend_Gdata_Photos_AlbumEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function insertAlbumEntry($album, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Photos_PhotoEntry $photo
         *
         * @return Zend_Gdata_Photos_PhotoEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function insertPhotoEntry($photo, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Photos_TagEntry $tag
         *
         * @return Zend_Gdata_Photos_TagEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function insertTagEntry($tag, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Photos_CommentEntry $comment
         *
         * @return Zend_Gdata_Photos_CommentEntry
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function insertCommentEntry($comment, $uri = null)
        {
        }
        /**
         * @param Zend_Gdata_Photos_AlbumEntry $album
         * @param bool $catch
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function deleteAlbumEntry($album, $catch)
        {
        }
        /**
         * @param Zend_Gdata_Photos_PhotoEntry $photo
         * @param bool $catch
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function deletePhotoEntry($photo, $catch)
        {
        }
        /**
         * @param Zend_Gdata_Photos_CommentEntry $comment
         * @param bool $catch
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function deleteCommentEntry($comment, $catch)
        {
        }
        /**
         * @param Zend_Gdata_Photos_TagEntry $tag
         * @param bool $catch
         *
         * @throws Zend_Gdata_App_Exception
         * @throws Zend_Gdata_App_HttpException
         */
        public function deleteTagEntry($tag, $catch)
        {
        }
    }
    class Zend_Gdata_Photos_AlbumEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Photos_AlbumEntry';
        /**
         * @var Zend_Gdata_Photos_Extension_Id
         */
        public $_gphotoId;
        /**
         * @var Zend_Gdata_Photos_Extension_Access
         */
        public $_gphotoAccess;
        /**
         * @var Zend_Gdata_Photos_Extension_Location
         */
        public $_gphotoLocation;
        /**
         * @var Zend_Gdata_Photos_Extension_User
         */
        public $_gphotoUser;
        /**
         * @var Zend_Gdata_Photos_Extension_Nickname
         */
        public $_gphotoNickname;
        /**
         * @var Zend_Gdata_Photos_Extension_Timestamp
         */
        public $_gphotoTimestamp;
        /**
         * @var Zend_Gdata_Photos_Extension_Name
         */
        public $_gphotoName;
        /**
         * @var Zend_Gdata_Photos_Extension_NumPhotos
         */
        public $_gphotoNumPhotos;
        /**
         * @var Zend_Gdata_Photos_Extension_CommentCount
         */
        public $_gphotoCommentCount;
        /**
         * @var Zend_Gdata_Photos_Extension_CommentingEnabled
         */
        public $_gphotoCommentingEnabled;
        /**
         * @var Zend_Gdata_Media_MediaGroup
         */
        public $_mediaGroup;
        /**
         * @var Zend_Gdata_Geo_Extension_GeoRssWhere
         */
        public $_geoRssWhere;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getGphotoAccess()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Access
         */
        public function setGphotoAccess($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoLocation()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Location
         */
        public function setGphotoLocation($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Name
         */
        public function setGphotoName($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoNumPhotos()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_NumPhotos
         */
        public function setGphotoNumPhotos($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoCommentCount()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_CommentCount
         */
        public function setGphotoCommentCount($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoCommentingEnabled()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_CommentingEnabled
         */
        public function setGphotoCommentingEnabled($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Id
         */
        public function setGphotoId($value)
        {
        }
        /**
         * @return string
         */
        public function getGeoRssWhere()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Geo_Extension_GeoRssWhere
         */
        public function setGeoRssWhere($value)
        {
        }
        /**
         * @return string
         */
        public function getMediaGroup()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setMediaGroup($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoUser()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_User
         */
        public function setGphotoUser($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoNickname()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Nickname
         */
        public function setGphotoNickname($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoTimestamp()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Timestamp
         */
        public function setGphotoTimestamp($value)
        {
        }
    }
    class Zend_Gdata_Photos_AlbumFeed extends \Zend_Gdata_Feed
    {
        public $_entryClassName = 'Zend_Gdata_Photos_AlbumEntry';
        public $_feedClassName = 'Zend_Gdata_Photos_AlbumFeed';
        /**
         * @var Zend_Gdata_Photos_Extension_Id
         */
        public $_gphotoId;
        /**
         * @var Zend_Gdata_Photos_Extension_User
         */
        public $_gphotoUser;
        /**
         * @var Zend_Gdata_Photos_Extension_Access
         */
        public $_gphotoAccess;
        /**
         * @var Zend_Gdata_Photos_Extension_Location
         */
        public $_gphotoLocation;
        /**
         * @var Zend_Gdata_Photos_Extension_Nickname
         */
        public $_gphotoNickname;
        /**
         * @var Zend_Gdata_Photos_Extension_Timestamp
         */
        public $_gphotoTimestamp;
        /**
         * @var Zend_Gdata_Photos_Extension_Name
         */
        public $_gphotoName;
        /**
         * @var Zend_Gdata_Photos_Extension_NumPhotos
         */
        public $_gphotoNumPhotos;
        /**
         * @var Zend_Gdata_Photos_Extension_CommentCount
         */
        public $_gphotoCommentCount;
        /**
         * @var Zend_Gdata_Photos_Extension_CommentingEnabled
         */
        public $_gphotoCommentingEnabled;
        public $_entryKindClassMapping = 'Psalm could not infer this type';
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getGphotoUser()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_User
         */
        public function setGphotoUser($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoAccess()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Access
         */
        public function setGphotoAccess($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoLocation()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Location
         */
        public function setGphotoLocation($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Name
         */
        public function setGphotoName($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoNumPhotos()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_NumPhotos
         */
        public function setGphotoNumPhotos($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoCommentCount()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_CommentCount
         */
        public function setGphotoCommentCount($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoCommentingEnabled()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_CommentingEnabled
         */
        public function setGphotoCommentingEnabled($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Id
         */
        public function setGphotoId($value)
        {
        }
        /**
         * @return string
         */
        public function getGeoRssWhere()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Geo_Extension_GeoRssWhere
         */
        public function setGeoRssWhere($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoNickname()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Nickname
         */
        public function setGphotoNickname($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoTimestamp()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Timestamp
         */
        public function setGphotoTimestamp($value)
        {
        }
    }
    class Zend_Gdata_Photos_AlbumQuery extends \Zend_Gdata_Photos_UserQuery
    {
        /**
         * @var string
         */
        public $_albumName;
        /**
         * @var string
         */
        public $_albumId;
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_AlbumQuery
         */
        public function setAlbumName($value)
        {
        }
        /**
         * @return string
         */
        public function getAlbumName()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_AlbumQuery
         */
        public function setAlbumId($value)
        {
        }
        /**
         * @return string
         */
        public function getAlbumId()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getQueryUrl($incomingUri = '')
        {
        }
    }
    class Zend_Gdata_Photos_CommentEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Photos_CommentEntry';
        /**
         * @var Zend_Gdata_Photos_Extension_Id
         */
        public $_gphotoId;
        /**
         * @var Zend_Gdata_Photos_Extension_PhotoId
         */
        public $_gphotoPhotoId;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getGphotoPhotoId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_PhotoId
         */
        public function setGphotoPhotoId($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Id
         */
        public function setGphotoId($value)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Access extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'access';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_AlbumId extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'albumid';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_BytesUsed extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'bytesUsed';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Checksum extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'checksum';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Client extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'client';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_CommentCount extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'commentCount';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_CommentingEnabled extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'commentingEnabled';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Height extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'height';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Id extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'id';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Location extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'location';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_MaxPhotosPerAlbum extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'maxPhotosPerAlbum';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Name extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'name';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Nickname extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'nickname';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_NumPhotos extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'numphotos';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_NumPhotosRemaining extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'numphotosremaining';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_PhotoId extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'id';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Position extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'position';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_QuotaCurrent extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'quotaCurrent';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_QuotaLimit extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'quotaLimit';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Rotation extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'rotation';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Size extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'size';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Thumbnail extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'thumbnail';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Timestamp extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'timestamp';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_User extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'user';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Version extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'version';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Weight extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'weight';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_Extension_Width extends \Zend_Gdata_Extension
    {
        public $_rootNamespace = 'gphoto';
        public $_rootElement = 'width';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Photos_PhotoEntry extends \Zend_Gdata_Media_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Photos_PhotoEntry';
        /**
         * @var Zend_Gdata_Photos_Extension_Id
         */
        public $_gphotoId;
        /**
         * @var Zend_Gdata_Photos_Extension_AlbumId
         */
        public $_gphotoAlbumId;
        /**
         * @var Zend_Gdata_Photos_Extension_Version
         */
        public $_gphotoVersion;
        /**
         * @var Zend_Gdata_Photos_Extension_Width
         */
        public $_gphotoWidth;
        /**
         * @var Zend_Gdata_Photos_Extension_Height
         */
        public $_gphotoHeight;
        /**
         * @var Zend_Gdata_Photos_Extension_Size
         */
        public $_gphotoSize;
        /**
         * @var Zend_Gdata_Photos_Extension_Client
         */
        public $_gphotoClient;
        /**
         * @var Zend_Gdata_Photos_Extension_Checksum
         */
        public $_gphotoChecksum;
        /**
         * @var Zend_Gdata_Photos_Extension_Timestamp
         */
        public $_gphotoTimestamp;
        /**
         * @var Zend_Gdata_Photos_Extension_CommentCount
         */
        public $_gphotoCommentCount;
        /**
         * @var Zend_Gdata_Photos_Extension_CommentingEnabled
         */
        public $_gphotoCommentingEnabled;
        /**
         * @var Zend_Gdata_Exif_Extension_Tags
         */
        public $_exifTags;
        /**
         * @var Zend_Gdata_Geo_Extension_GeoRssWhere
         */
        public $_geoRssWhere;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getGphotoAlbumId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_AlbumId
         */
        public function setGphotoAlbumId($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Id
         */
        public function setGphotoId($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoVersion()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Version
         */
        public function setGphotoVersion($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoWidth()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Width
         */
        public function setGphotoWidth($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoHeight()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Height
         */
        public function setGphotoHeight($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoSize()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Size
         */
        public function setGphotoSize($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoClient()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Client
         */
        public function setGphotoClient($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoChecksum()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Checksum
         */
        public function setGphotoChecksum($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoTimestamp()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Timestamp
         */
        public function setGphotoTimestamp($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoCommentCount()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_CommentCount
         */
        public function setGphotoCommentCount($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoCommentingEnabled()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_CommentingEnabled
         */
        public function setGphotoCommentingEnabled($value)
        {
        }
        /**
         * @return string
         */
        public function getExifTags()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Exif_Extension_Tags
         */
        public function setExifTags($value)
        {
        }
        /**
         * @return string
         */
        public function getGeoRssWhere()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Geo_Extension_GeoRssWhere
         */
        public function setGeoRssWhere($value)
        {
        }
        /**
         * @return string
         */
        public function getMediaGroup()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setMediaGroup($value)
        {
        }
    }
    class Zend_Gdata_Photos_PhotoFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var Zend_Gdata_Photos_Extension_Id
         */
        public $_gphotoId;
        /**
         * @var Zend_Gdata_Photos_Extension_AlbumId
         */
        public $_gphotoAlbumId;
        /**
         * @var Zend_Gdata_Photos_Extension_Version
         */
        public $_gphotoVersion;
        /**
         * @var Zend_Gdata_Photos_Extension_Width
         */
        public $_gphotoWidth;
        /**
         * @var Zend_Gdata_Photos_Extension_Height
         */
        public $_gphotoHeight;
        /**
         * @var Zend_Gdata_Photos_Extension_Size
         */
        public $_gphotoSize;
        /**
         * @var Zend_Gdata_Photos_Extension_Client
         */
        public $_gphotoClient;
        /**
         * @var Zend_Gdata_Photos_Extension_Checksum
         */
        public $_gphotoChecksum;
        /**
         * @var Zend_Gdata_Photos_Extension_Timestamp
         */
        public $_gphotoTimestamp;
        /**
         * @var Zend_Gdata_Photos_Extension_CommentCount
         */
        public $_gphotoCommentCount;
        /**
         * @var Zend_Gdata_Photos_Extension_CommentingEnabled
         */
        public $_gphotoCommentingEnabled;
        /**
         * @var Zend_Gdata_Media_Extension_MediaGroup
         */
        public $_mediaGroup;
        public $_entryClassName = 'Zend_Gdata_Photos_PhotoEntry';
        public $_feedClassName = 'Zend_Gdata_Photos_PhotoFeed';
        public $_entryKindClassMapping = 'Psalm could not infer this type';
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getGphotoId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Id
         */
        public function setGphotoId($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoVersion()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Version
         */
        public function setGphotoVersion($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoAlbumId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_AlbumId
         */
        public function setGphotoAlbumId($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoWidth()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Width
         */
        public function setGphotoWidth($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoHeight()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Height
         */
        public function setGphotoHeight($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoSize()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Size
         */
        public function setGphotoSize($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoClient()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Client
         */
        public function setGphotoClient($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoChecksum()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Checksum
         */
        public function setGphotoChecksum($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoTimestamp()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Timestamp
         */
        public function setGphotoTimestamp($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoCommentCount()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_CommentCount
         */
        public function setGphotoCommentCount($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoCommentingEnabled()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_CommentingEnabled
         */
        public function setGphotoCommentingEnabled($value)
        {
        }
        /**
         * @return string
         */
        public function getMediaGroup()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Media_Extension_MediaGroup
         */
        public function setMediaGroup($value)
        {
        }
    }
    class Zend_Gdata_Photos_PhotoQuery extends \Zend_Gdata_Photos_AlbumQuery
    {
        /**
         * @var string
         */
        public $_photoId;
        /**
         * @param string $value
         */
        public function setPhotoId($value)
        {
        }
        /**
         * @return string
         */
        public function getPhotoId()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getQueryUrl($incomingUri = '')
        {
        }
    }
    class Zend_Gdata_Photos_TagEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Photos_TagEntry';
        public $_gphotoWeight = null;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getGphotoWeight()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Weight
         */
        public function setGphotoWeight($value)
        {
        }
    }
    class Zend_Gdata_Photos_UserEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Photos_UserEntry';
        /**
         * @var Zend_Gdata_Photos_Extension_Nickname
         */
        public $_gphotoNickname;
        /**
         * @var Zend_Gdata_Photos_Extension_User
         */
        public $_gphotoUser;
        /**
         * @var Zend_Gdata_Photos_Extension_Thumbnail
         */
        public $_gphotoThumbnail;
        /**
         * @var Zend_Gdata_Photos_Extension_QuotaLimit
         */
        public $_gphotoQuotaLimit;
        /**
         * @var Zend_Gdata_Photos_Extension_QuotaCurrent
         */
        public $_gphotoQuotaCurrent;
        /**
         * @var Zend_Gdata_Photos_Extension_MaxPhotosPerAlbum
         */
        public $_gphotoMaxPhotosPerAlbum;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getGphotoNickname()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Nickname
         */
        public function setGphotoNickname($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoThumbnail()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Thumbnail
         */
        public function setGphotoThumbnail($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoQuotaCurrent()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_QuotaCurrent
         */
        public function setGphotoQuotaCurrent($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoQuotaLimit()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_QuotaLimit
         */
        public function setGphotoQuotaLimit($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoMaxPhotosPerAlbum()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_MaxPhotosPerAlbum
         */
        public function setGphotoMaxPhotosPerAlbum($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoUser()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_User
         */
        public function setGphotoUser($value)
        {
        }
    }
    class Zend_Gdata_Photos_UserFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var Zend_Gdata_Photos_Extension_User
         */
        public $_gphotoUser;
        /**
         * @var Zend_Gdata_Photos_Extension_Thumbnail
         */
        public $_gphotoThumbnail;
        /**
         * @var Zend_Gdata_Photos_Extension_Nickname
         */
        public $_gphotoNickname;
        public $_entryClassName = 'Zend_Gdata_Photos_UserEntry';
        public $_feedClassName = 'Zend_Gdata_Photos_UserFeed';
        public $_entryKindClassMapping = 'Psalm could not infer this type';
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @return string
         */
        public function getGphotoUser()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_User
         */
        public function setGphotoUser($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoNickname()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Nickname
         */
        public function setGphotoNickname($value)
        {
        }
        /**
         * @return string
         */
        public function getGphotoThumbnail()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_Extension_Thumbnail
         */
        public function setGphotoThumbnail($value)
        {
        }
    }
    class Zend_Gdata_Photos_UserQuery extends \Zend_Gdata_Query
    {
        /**
         * @var string
         */
        public $_projection;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_user;
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_UserQuery
         */
        public function setProjection($value)
        {
        }
        /**
         * @return string
         */
        public function getProjection()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Photos_UserQuery
         */
        public function setType($value)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $value
         */
        public function setUser($value)
        {
        }
        /**
         * @return string
         */
        public function getUser()
        {
        }
        /**
         * @param string $value
         */
        public function setAccess($value)
        {
        }
        /**
         * @return string
         */
        public function getAccess()
        {
        }
        /**
         * @param string $value
         */
        public function setTag($value)
        {
        }
        /**
         * @return string
         */
        public function getTag()
        {
        }
        /**
         * @param string $value
         */
        public function setKind($value)
        {
        }
        /**
         * @return string
         */
        public function getKind()
        {
        }
        /**
         * @param string $value
         */
        public function setImgMax($value)
        {
        }
        /**
         * @return string
         */
        public function getImgMax()
        {
        }
        /**
         * @param string $value
         */
        public function setThumbsize($value)
        {
        }
        /**
         * @return string
         */
        public function getThumbsize()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function getQueryUrl($incomingUri = null)
        {
        }
    }
    class Zend_Gdata_Query
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var string
         */
        public $_defaultFeedUri;
        /**
         * @var string
         */
        public $_url;
        /**
         * @var string
         */
        public $_category;
        public function __construct($url = null)
        {
        }
        /**
         * @return string
         */
        public function getQueryString()
        {
        }
        public function resetParameters()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
        /**
         * @param string $name
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setParam($name, $value)
        {
        }
        /**
         * @param string $name
         */
        public function getParam($name)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setAlt($value)
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Query
         */
        public function setMaxResults($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setQuery($value)
        {
        }
        /**
         * @param int $value
         *
         * @return Zend_Gdata_Query
         */
        public function setStartIndex($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setUpdatedMax($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setUpdatedMin($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setPublishedMax($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setPublishedMin($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setAuthor($value)
        {
        }
        /**
         * @return string
         */
        public function getAlt()
        {
        }
        /**
         * @return int
         */
        public function getMaxResults()
        {
        }
        /**
         * @return string
         */
        public function getQuery()
        {
        }
        /**
         * @return int
         */
        public function getStartIndex()
        {
        }
        /**
         * @return string
         */
        public function getUpdatedMax()
        {
        }
        /**
         * @return string
         */
        public function getUpdatedMin()
        {
        }
        /**
         * @return string
         */
        public function getPublishedMax()
        {
        }
        /**
         * @return string
         */
        public function getPublishedMin()
        {
        }
        /**
         * @return string
         */
        public function getAuthor()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Query
         */
        public function setCategory($value)
        {
        }
        public function getCategory()
        {
        }
        public function __get($name)
        {
        }
        public function __set($name, $val)
        {
        }
    }
    class Zend_Gdata_Spreadsheets extends \Zend_Gdata
    {
        public const DEFAULT_MAJOR_PROTOCOL_VERSION = 1;
        public const DEFAULT_MINOR_PROTOCOL_VERSION = null;
        public const AUTH_SERVICE_NAME = 'wise';
        public const SPREADSHEETS_FEED_URI = 'https://spreadsheets.google.com/feeds/spreadsheets';
        public const SPREADSHEETS_POST_URI = 'https://spreadsheets.google.com/feeds/spreadsheets/private/full';
        public const WORKSHEETS_FEED_LINK_URI = 'http://schemas.google.com/spreadsheets/2006#worksheetsfeed';
        public const LIST_FEED_LINK_URI = 'http://schemas.google.com/spreadsheets/2006#listfeed';
        public const CELL_FEED_LINK_URI = 'http://schemas.google.com/spreadsheets/2006#cellsfeed';
        /**
         * @var array<array-key, mixed>
         */
        public static $namespaces;
        /**
         * @param Zend_Http_Client|null $client
         * @param string $applicationId
         */
        public function __construct($client = null, $applicationId = 'MyCompany-MyApp-1.0')
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Spreadsheets_SpreadsheetFeed
         */
        public function getSpreadsheetFeed($location = null)
        {
        }
        /**
         * @param string $location
         *
         * @return SpreadsheetEntry
         */
        public function getSpreadsheetEntry($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return Zend_Gdata_Spreadsheets_WorksheetFeed
         */
        public function getWorksheetFeed($location)
        {
        }
        /**
         * @param string $location
         *
         * @return WorksheetEntry
         */
        public function GetWorksheetEntry($location)
        {
        }
        /**
         * @param string $location
         *
         * @return CellFeed
         */
        public function getCellFeed($location)
        {
        }
        /**
         * @param string $location
         *
         * @return CellEntry
         */
        public function getCellEntry($location)
        {
        }
        /**
         * @param mixed $location
         *
         * @return ListFeed
         */
        public function getListFeed($location)
        {
        }
        /**
         * @param string $location
         *
         * @return ListEntry
         */
        public function getListEntry($location)
        {
        }
        /**
         * @param int $row
         * @param int $col
         * @param int $inputValue
         * @param string $key
         * @param string $wkshtId
         *
         * @return CellEntry
         */
        public function updateCell($row, $col, $inputValue, $key, $wkshtId = 'default')
        {
        }
        /**
         * @param array<array-key, mixed> $rowData
         * @param string $key
         * @param string $wkshtId
         *
         * @return ListEntry
         */
        public function insertRow($rowData, $key, $wkshtId = 'default')
        {
        }
        /**
         * @param ListEntry $entry
         * @param array<array-key, mixed> $newRowData
         */
        public function updateRow($entry, $newRowData)
        {
        }
        /**
         * @param ListEntry $entry
         */
        public function deleteRow($entry)
        {
        }
        /**
         * @param mixed $location
         *
         * @return array<array-key, mixed>
         */
        public function getSpreadsheetListFeedContents($location)
        {
        }
        /**
         * @param mixed $location
         * @param null|string $range
         * @param bool $empty
         *
         * @return array<array-key, mixed>
         */
        public function getSpreadsheetCellFeedContents($location, $range = null, $empty = false)
        {
        }
        /**
         * @param mixed|null $location
         *
         * @return Zend_Gdata_Spreadsheets_SpreadsheetFeed
         */
        public function getSpreadsheets($location = null)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_CellEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Spreadsheets_CellEntry';
        public $_cell;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return Zend_Gdata_Spreadsheets_Extension_Cell
         */
        public function getCell()
        {
        }
        /**
         * @param Zend_Gdata_Spreadsheets_Extension_Cell $cell
         *
         * @return Zend_Gdata_Spreadsheets_CellEntry
         */
        public function setCell($cell)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_CellFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        /**
         * @var Zend_Gdata_Spreadsheets_Extension_RowCount
         */
        public $_rowCount;
        /**
         * @var Zend_Gdata_Spreadsheets_Extension_ColCount
         */
        public $_colCount;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getRowCount()
        {
        }
        /**
         * @return string
         */
        public function getColumnCount()
        {
        }
        /**
         * @param string $rowCount
         */
        public function setRowCount($rowCount)
        {
        }
        /**
         * @param string $colCount
         */
        public function setColumnCount($colCount)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_CellQuery extends \Zend_Gdata_Query
    {
        public const SPREADSHEETS_CELL_FEED_URI = 'https://spreadsheets.google.com/feeds/cells';
        public $_defaultFeedUri = 'https://spreadsheets.google.com/feeds/cells';
        public $_visibility = 'private';
        public $_projection = 'full';
        public $_spreadsheetKey = null;
        public $_worksheetId = 'default';
        public $_cellId = null;
        /**
         * @param null|string $url
         */
        public function __construct($url = null)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setSpreadsheetKey($value)
        {
        }
        /**
         * @return string
         */
        public function getSpreadsheetKey()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setWorksheetId($value)
        {
        }
        /**
         * @return string
         */
        public function getWorksheetId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setCellId($value)
        {
        }
        /**
         * @return string
         */
        public function getCellId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setProjection($value)
        {
        }
        /**
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setVisibility($value)
        {
        }
        /**
         * @return string
         */
        public function getProjection()
        {
        }
        /**
         * @return string
         */
        public function getVisibility()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setMinRow($value)
        {
        }
        /**
         * @return string
         */
        public function getMinRow()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setMaxRow($value)
        {
        }
        /**
         * @return string
         */
        public function getMaxRow()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setMinCol($value)
        {
        }
        /**
         * @return string
         */
        public function getMinCol()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setMaxCol($value)
        {
        }
        /**
         * @return string
         */
        public function getMaxCol()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setRange($value)
        {
        }
        /**
         * @return string
         */
        public function getRange()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setReturnEmpty($value)
        {
        }
        /**
         * @return string
         */
        public function getReturnEmpty()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
        /**
         * @return string
         */
        public function getQueryString()
        {
        }
    }
    class Zend_Gdata_Spreadsheets_DocumentQuery extends \Zend_Gdata_Query
    {
        public const SPREADSHEETS_FEED_URI = 'https://spreadsheets.google.com/feeds';
        public $_defaultFeedUri = 'https://spreadsheets.google.com/feeds';
        public $_documentType;
        public $_visibility = 'private';
        public $_projection = 'full';
        public $_spreadsheetKey = null;
        public $_worksheetId = null;
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setSpreadsheetKey($value)
        {
        }
        /**
         * @return string
         */
        public function getSpreadsheetKey()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setWorksheetId($value)
        {
        }
        /**
         * @return string
         */
        public function getWorksheetId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_DocumentQuery
         */
        public function setDocumentType($value)
        {
        }
        /**
         * @return string
         */
        public function getDocumentType()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_DocumentQuery
         */
        public function setProjection($value)
        {
        }
        /**
         * @return Zend_Gdata_Spreadsheets_DocumentQuery
         */
        public function setVisibility($value)
        {
        }
        /**
         * @return string
         */
        public function getProjection()
        {
        }
        /**
         * @return string
         */
        public function getVisibility()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_DocumentQuery
         */
        public function setTitle($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_DocumentQuery
         */
        public function setTitleExact($value)
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @return string
         */
        public function getTitleExact()
        {
        }
        public function appendVisibilityProjection()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
        /**
         * @return string
         */
        public function getQueryString()
        {
        }
    }
    class Zend_Gdata_Spreadsheets_Extension_Cell extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'cell';
        public $_rootNamespace = 'gs';
        /**
         * @var string
         */
        public $_row;
        /**
         * @var string
         */
        public $_col;
        /**
         * @var string
         */
        public $_inputValue;
        /**
         * @var string
         */
        public $_numericValue;
        /**
         * @param null|string $text
         * @param null|string $row
         * @param null|string $col
         * @param null|string $inputValue
         * @param null|string $numericValue
         */
        public function __construct($text = null, $row = null, $col = null, $inputValue = null, $numericValue = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeAttributeFromDOM($attribute)
        {
        }
        /**
         * @return string
         */
        public function getRow()
        {
        }
        /**
         * @return string
         */
        public function getColumn()
        {
        }
        /**
         * @return string
         */
        public function getInputValue()
        {
        }
        /**
         * @return string
         */
        public function getNumericValue()
        {
        }
        /**
         * @param string $row
         */
        public function setRow($row)
        {
        }
        /**
         * @param string $col
         */
        public function setColumn($col)
        {
        }
        /**
         * @param string $inputValue
         */
        public function setInputValue($inputValue)
        {
        }
        /**
         * @param string $numericValue
         */
        public function setNumericValue($numericValue)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_Extension_ColCount extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'colCount';
        public $_rootNamespace = 'gs';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_Extension_Custom extends \Zend_Gdata_Extension
    {
        public $_rootElement = null;
        public $_rootNamespace = 'gsx';
        /**
         * @param null|string $column
         * @param null|string $value
         */
        public function __construct($column = null, $value = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $node
         */
        public function transferFromDOM($node)
        {
        }
        /**
         * @param string $column
         */
        public function setColumnName($column)
        {
        }
        /**
         * @return string
         */
        public function getColumnName()
        {
        }
    }
    class Zend_Gdata_Spreadsheets_Extension_RowCount extends \Zend_Gdata_Extension
    {
        public $_rootElement = 'rowCount';
        public $_rootNamespace = 'gs';
        /**
         * @param null|string $text
         */
        public function __construct($text = null)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_ListEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Spreadsheets_ListEntry';
        /**
         * @var array<array-key, mixed>
         */
        public $_custom;
        /**
         * @var array<array-key, mixed>
         */
        public $_customByName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCustom()
        {
        }
        /**
         * @param null|string $name
         *
         * @return mixed
         */
        public function getCustomByName($name = null)
        {
        }
        /**
         * @param array<array-key, mixed> $custom
         *
         * @return Zend_Gdata_Spreadsheets_ListEntry
         */
        public function setCustom($custom)
        {
        }
        /**
         * @param Zend_Gdata_Spreadsheets_Extension_Custom $custom
         *
         * @return Zend_Gdata_Spreadsheets_ListEntry
         */
        public function addCustom($custom)
        {
        }
        /**
         * @param int $index
         *
         * @return Zend_Gdata_Spreadsheets_ListEntry
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function removeCustom($index)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Gdata_Spreadsheets_ListEntry
         *
         * @throws Zend_Gdata_App_InvalidArgumentException
         */
        public function removeCustomByName($name)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_ListFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_ListQuery extends \Zend_Gdata_Query
    {
        public const SPREADSHEETS_LIST_FEED_URI = 'https://spreadsheets.google.com/feeds/list';
        public $_defaultFeedUri = 'https://spreadsheets.google.com/feeds/list';
        public $_visibility = 'private';
        public $_projection = 'full';
        public $_spreadsheetKey = null;
        public $_worksheetId = 'default';
        public $_rowId = null;
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setSpreadsheetKey($value)
        {
        }
        /**
         * @return string
         */
        public function getSpreadsheetKey()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setWorksheetId($value)
        {
        }
        /**
         * @return string
         */
        public function getWorksheetId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_CellQuery
         */
        public function setRowId($value)
        {
        }
        /**
         * @return string
         */
        public function getRowId()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_ListQuery
         */
        public function setProjection($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_ListQuery
         */
        public function setVisibility($value)
        {
        }
        /**
         * @return string
         */
        public function getProjection()
        {
        }
        /**
         * @return string
         */
        public function getVisibility()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_DocumentQuery
         */
        public function setSpreadsheetQuery($value)
        {
        }
        /**
         * @return string
         */
        public function getSpreadsheetQuery()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_DocumentQuery
         */
        public function setOrderBy($value)
        {
        }
        /**
         * @return string
         */
        public function getOrderBy()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Gdata_Spreadsheets_DocumentQuery
         */
        public function setReverse($value)
        {
        }
        /**
         * @return string
         */
        public function getReverse()
        {
        }
        /**
         * @return string
         */
        public function getQueryUrl()
        {
        }
        /**
         * @return string
         */
        public function getQueryString()
        {
        }
    }
    class Zend_Gdata_Spreadsheets_SpreadsheetEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Spreadsheets_SpreadsheetEntry';
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @return Zend_Gdata_Spreadsheets_WorksheetFeed
         */
        public function getWorksheets()
        {
        }
    }
    class Zend_Gdata_Spreadsheets_SpreadsheetFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_WorksheetEntry extends \Zend_Gdata_Entry
    {
        public $_entryClassName = 'Zend_Gdata_Spreadsheets_WorksheetEntry';
        public $_rowCount = null;
        public $_colCount = null;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
        /**
         * @param DOMDocument|null $doc
         *
         * @return DOMElement
         */
        public function getDOM($doc = null, $majorVersion = 1, $minorVersion = null)
        {
        }
        /**
         * @param DOMNode $child
         */
        public function takeChildFromDOM($child)
        {
        }
        /**
         * @return string
         */
        public function getRowCount()
        {
        }
        /**
         * @return string
         */
        public function getColumnCount()
        {
        }
        /**
         * @param string $rowCount
         */
        public function setRowCount($rowCount)
        {
        }
        /**
         * @param string $colCount
         */
        public function setColumnCount($colCount)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getContentsAsRows()
        {
        }
        /**
         * @param null|string $range
         * @param bool $empty
         *
         * @return array<array-key, mixed>
         */
        public function getContentsAsCells($range = null, $empty = false)
        {
        }
    }
    class Zend_Gdata_Spreadsheets_WorksheetFeed extends \Zend_Gdata_Feed
    {
        /**
         * @var string
         */
        public $_entryClassName;
        /**
         * @var string
         */
        public $_feedClassName;
        /**
         * @param DOMElement|null $element
         */
        public function __construct($element = null)
        {
        }
    }
    class Zend_Http_Client
    {
        public const GET = 'GET';
        public const POST = 'POST';
        public const PUT = 'PUT';
        public const HEAD = 'HEAD';
        public const DELETE = 'DELETE';
        public const TRACE = 'TRACE';
        public const OPTIONS = 'OPTIONS';
        public const CONNECT = 'CONNECT';
        public const MERGE = 'MERGE';
        public const PATCH = 'PATCH';
        public const AUTH_BASIC = 'basic';
        public const HTTP_1 = '1.1';
        public const HTTP_0 = '1.0';
        public const CONTENT_TYPE = 'Content-Type';
        public const CONTENT_LENGTH = 'Content-Length';
        public const ENC_URLENCODED = 'application/x-www-form-urlencoded';
        public const ENC_FORMDATA = 'multipart/form-data';
        public const VTYPE_SCALAR = 'SCALAR';
        public const VTYPE_FILE = 'FILE';
        /**
         * @var array<array-key, mixed>
         */
        public $config;
        /**
         * @var Zend_Http_Client_Adapter_Interface
         */
        public $adapter;
        /**
         * @var Zend_Uri_Http
         */
        public $uri;
        /**
         * @var array<array-key, mixed>
         */
        public $headers;
        /**
         * @var string
         */
        public $method;
        /**
         * @var array<array-key, mixed>
         */
        public $paramsGet;
        /**
         * @var array<array-key, mixed>
         */
        public $paramsPost;
        /**
         * @var string
         */
        public $enctype;
        /**
         * @var string
         */
        public $raw_post_data;
        /**
         * @var array<array-key, mixed>|null
         */
        public $auth;
        /**
         * @var array<array-key, mixed>
         */
        public $files;
        /**
         * @var array<array-key, mixed>
         */
        public $body_field_order;
        /**
         * @var Zend_Http_CookieJar
         */
        public $cookiejar;
        /**
         * @var string
         */
        public $last_request;
        /**
         * @var Zend_Http_Response
         */
        public $last_response;
        /**
         * @var int
         */
        public $redirectCounter;
        /**
         * @var bool
         */
        public $_unmaskStatus;
        /**
         * @var bool
         */
        public $_queryBracketsEscaped;
        /**
         * @var resource
         */
        public static $_fileInfoDb;
        /**
         * @param Zend_Uri_Http|null|string $uri
         * @param array<array-key, mixed>|null $config
         */
        public function __construct($uri = null, $config = null)
        {
        }
        /**
         * @param Zend_Uri_Http|string $uri
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setUri($uri)
        {
        }
        /**
         * @param bool $as_string
         *
         * @return Zend_Uri_Http|string
         */
        public function getUri($as_string = false)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setConfig($config = array())
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setMethod($method)
        {
        }
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setHeaders($name, $value = null)
        {
        }
        /**
         * @param string $key
         *
         * @return array<array-key, mixed>|null|string
         */
        public function getHeader($key)
        {
        }
        /**
         * @param array<array-key, mixed>|string $name
         * @param null|string $value
         *
         * @return Zend_Http_Client
         */
        public function setParameterGet($name, $value = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $name
         * @param null|string $value
         *
         * @return Zend_Http_Client
         */
        public function setParameterPost($name, $value = null)
        {
        }
        /**
         * @param string $type
         * @param string $name
         * @param string $value
         *
         * @return null
         */
        public function _setParameter($type, $name, $value)
        {
        }
        /**
         * @return int
         */
        public function getRedirectionsCount()
        {
        }
        /**
         * @param false|string $user
         * @param string $password
         * @param string $type
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setAuth($user, $password = '', $type)
        {
        }
        /**
         * @param Zend_Http_CookieJar|bool $cookiejar
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setCookieJar($cookiejar = true)
        {
        }
        /**
         * @return Zend_Http_CookieJar|null
         */
        public function getCookieJar()
        {
        }
        /**
         * @param Zend_Http_Cookie|string $cookie
         * @param null|string $value
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setCookie($cookie, $value = null)
        {
        }
        /**
         * @param string $filename
         * @param string $formname
         * @param null|string $data
         * @param null|string $ctype
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setFileUpload($filename, $formname, $data = null, $ctype = null)
        {
        }
        /**
         * @param string $enctype
         *
         * @return Zend_Http_Client
         */
        public function setEncType($enctype)
        {
        }
        /**
         * @param resource|string $data
         * @param null|string $enctype
         *
         * @return Zend_Http_Client
         */
        public function setRawData($data, $enctype = null)
        {
        }
        /**
         * @param bool $status
         *
         * @return Zend_Http_Client
         */
        public function setUnmaskStatus($status = true)
        {
        }
        /**
         * @return bool
         */
        public function getUnmaskStatus()
        {
        }
        /**
         * @param bool $clearAll
         *
         * @return Zend_Http_Client
         */
        public function resetParameters($clearAll = false)
        {
        }
        /**
         * @return string
         */
        public function getLastRequest()
        {
        }
        /**
         * @return Zend_Http_Response
         */
        public function getLastResponse()
        {
        }
        /**
         * @param Zend_Http_Client_Adapter_Interface|string $adapter
         *
         * @return null
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setAdapter($adapter)
        {
        }
        /**
         * @return Zend_Http_Client_Adapter_Interface
         */
        public function getAdapter()
        {
        }
        /**
         * @param bool|string $streamfile
         *
         * @return Zend_Http_Client
         */
        public function setStream($streamfile = true)
        {
        }
        /**
         * @return bool|string
         */
        public function getStream()
        {
        }
        /**
         * @return resource
         */
        public function _openTempStream()
        {
        }
        /**
         * @param null|string $method
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Http_Client_Exception
         */
        public function request($method = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepareHeaders()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Http_Client_Exception
         */
        public function _prepareBody()
        {
        }
        /**
         * @param array<array-key, mixed> $parray
         * @param bool $urlencode
         *
         * @return array<array-key, mixed>
         */
        public function _getParametersRecursive($parray, $urlencode = false)
        {
        }
        /**
         * @param string $file
         *
         * @return string
         */
        public function _detectFileMimeType($file)
        {
        }
        /**
         * @param string $boundary
         * @param string $name
         * @param mixed $value
         * @param null|string $filename
         * @param array<array-key, mixed> $headers
         *
         * @return string
         */
        public static function encodeFormData($boundary, $name, $value, $filename = null, $headers = array())
        {
        }
        /**
         * @param string $user
         * @param string $password
         * @param string $type
         *
         * @return string
         *
         * @throws Zend_Http_Client_Exception
         */
        public static function encodeAuthHeader($user, $password, $type)
        {
        }
        /**
         * @param array<array-key, mixed> $parray
         * @param null|string $prefix
         *
         * @return array<array-key, mixed>
         */
        public static function _flattenParametersArray($parray, $prefix = null)
        {
        }
        /**
         * @param array<array-key, mixed>|object|string $value
         * @param bool $recurse
         */
        public function _validateHeaderValue($value, $recurse = true)
        {
        }
    }
    class Zend_Http_Client_Adapter_Curl implements \Zend_Http_Client_Adapter_Interface, \Zend_Http_Client_Adapter_Stream
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var array<array-key, mixed>
         */
        public $_connected_to;
        /**
         * @var null|resource
         */
        public $_curl;
        /**
         * @var array<array-key, mixed>
         */
        public $_invalidOverwritableCurlOptions;
        /**
         * @var string
         */
        public $_response;
        /**
         * @var resource
         */
        public $out_stream;
        /**
         * @return void
         *
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function __construct()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Http_Client_Adapter_Curl
         *
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function setConfig($config = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getConfig()
        {
        }
        /**
         * @param int|string $option
         * @param mixed $value
         *
         * @return Zend_Http_Adapter_Curl
         */
        public function setCurlOption($option, $value)
        {
        }
        /**
         * @param string $host
         * @param int $port
         * @param bool $secure
         *
         * @return void
         *
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function connect($host, $port = 80, $secure = false)
        {
        }
        /**
         * @param string $method
         * @param Zend_Uri_Http $uri
         * @param array<array-key, mixed> $headers
         * @param string $body
         *
         * @return string
         *
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function write($method, $uri, $httpVersion = 1.1, $headers = array(), $body = '')
        {
        }
        /**
         * @return string
         */
        public function read()
        {
        }
        public function close()
        {
        }
        /**
         * @return resource
         */
        public function getHandle()
        {
        }
        /**
         * @param resource $stream
         *
         * @return Zend_Http_Client_Adapter_Socket
         */
        public function setOutputStream($stream)
        {
        }
        /**
         * @param resource $curl
         * @param string $header
         *
         * @return int
         */
        public function readHeader($curl, $header)
        {
        }
    }
    class Zend_Http_Client_Adapter_Exception extends \Zend_Http_Client_Exception
    {
        public const READ_TIMEOUT = 1000;
    }
    interface Zend_Http_Client_Adapter_Interface
    {
        /**
         * @param array<array-key, mixed> $config
         */
        public function setConfig($config = array());
        /**
         * @param string $host
         * @param int $port
         * @param bool $secure
         */
        public function connect($host, $port = 80, $secure = false);
        /**
         * @param string $method
         * @param Zend_Uri_Http $url
         * @param string $http_ver
         * @param array<array-key, mixed> $headers
         * @param string $body
         *
         * @return string
         */
        public function write($method, $url, $http_ver = '1.1', $headers = array(), $body = '');
        /**
         * @return string
         */
        public function read();
        public function close();
    }
    class Zend_Http_Client_Adapter_Proxy extends \Zend_Http_Client_Adapter_Socket
    {
        /**
         * @var array<array-key, mixed>
         */
        public $config;
        /**
         * @var bool
         */
        public $negotiated;
        /**
         * @var string
         */
        public $connectHandshakeRequest;
        /**
         * @param string $host
         * @param int $port
         * @param bool $secure
         */
        public function connect($host, $port = 80, $secure = false)
        {
        }
        /**
         * @param string $method
         * @param Zend_Uri_Http $uri
         * @param string $http_ver
         * @param array<array-key, mixed> $headers
         * @param string $body
         *
         * @return string
         *
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function write($method, $uri, $http_ver = '1.1', $headers = array(), $body = '')
        {
        }
        /**
         * @param string $host
         * @param int $port
         * @param string $http_ver
         * @param array<array-key, mixed> $headers
         *
         * @return void
         *
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function connectHandshake($host, $port = 443, $http_ver = '1.1', array &$headers = array())
        {
        }
        public function close()
        {
        }
        public function __destruct()
        {
        }
    }
    class Zend_Http_Client_Adapter_Socket implements \Zend_Http_Client_Adapter_Interface, \Zend_Http_Client_Adapter_Stream
    {
        /**
         * @var null|resource
         */
        public $socket;
        /**
         * @var array<array-key, mixed>
         */
        public $connected_to;
        /**
         * @var resource
         */
        public $out_stream;
        /**
         * @var array<array-key, mixed>
         */
        public $config;
        /**
         * @var string
         */
        public $method;
        /**
         * @var resource
         */
        public $_context;
        public function __construct()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         */
        public function setConfig($config = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getConfig()
        {
        }
        /**
         * @param mixed $context
         *
         * @return Zend_Http_Client_Adapter_Socket
         */
        public function setStreamContext($context)
        {
        }
        /**
         * @return resource
         */
        public function getStreamContext()
        {
        }
        /**
         * @param string $host
         * @param int $port
         * @param bool $secure
         */
        public function connect($host, $port = 80, $secure = false)
        {
        }
        /**
         * @param string $method
         * @param Zend_Uri_Http $uri
         * @param string $http_ver
         * @param array<array-key, mixed> $headers
         * @param string $body
         *
         * @return string
         */
        public function write($method, $uri, $http_ver = '1.1', $headers = array(), $body = '')
        {
        }
        /**
         * @return string
         */
        public function read()
        {
        }
        public function close()
        {
        }
        /**
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function _checkSocketReadTimeout()
        {
        }
        /**
         * @param resource $stream
         *
         * @return Zend_Http_Client_Adapter_Socket
         */
        public function setOutputStream($stream)
        {
        }
        public function __destruct()
        {
        }
    }
    interface Zend_Http_Client_Adapter_Stream
    {
        /**
         * @param resource $stream
         */
        public function setOutputStream($stream);
    }
    class Zend_Http_Client_Adapter_Test implements \Zend_Http_Client_Adapter_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $config;
        /**
         * @var array<array-key, mixed>
         */
        public $responses;
        /**
         * @var int
         */
        public $responseIndex;
        /**
         * @var bool
         */
        public $_nextRequestWillFail;
        public function __construct()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Http_Client_Adapter_Test
         */
        public function setNextRequestWillFail($flag)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         */
        public function setConfig($config = array())
        {
        }
        /**
         * @param string $host
         * @param int $port
         * @param bool $secure
         *
         * @throws Zend_Http_Client_Adapter_Exception
         */
        public function connect($host, $port = 80, $secure = false)
        {
        }
        /**
         * @param string $method
         * @param Zend_Uri_Http $uri
         * @param string $http_ver
         * @param array<array-key, mixed> $headers
         * @param string $body
         *
         * @return string
         */
        public function write($method, $uri, $http_ver = '1.1', $headers = array(), $body = '')
        {
        }
        /**
         * @return string
         */
        public function read()
        {
        }
        public function close()
        {
        }
        /**
         * @param Zend_Http_Response|array<array-key, mixed>|string $response
         */
        public function setResponse($response)
        {
        }
        public function addResponse($response)
        {
        }
        /**
         * @param int $index
         */
        public function setResponseIndex($index)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getConfig()
        {
        }
    }
    class Zend_Http_Client_Exception extends \Zend_Http_Exception
    {
    }
    class Zend_Http_Cookie
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $value;
        /**
         * @var int
         */
        public $expires;
        /**
         * @var string
         */
        public $domain;
        /**
         * @var string
         */
        public $path;
        /**
         * @var bool
         */
        public $secure;
        /**
         * @var bool
         */
        public $encodeValue;
        /**
         * @param string $name
         * @param string $value
         * @param string $domain
         * @param int|null $expires
         * @param null|string $path
         * @param bool $secure
         */
        public function __construct($name, $value, $domain, $expires = null, $path = null, $secure = false)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @return string
         */
        public function getDomain()
        {
        }
        /**
         * @return string
         */
        public function getPath()
        {
        }
        /**
         * @return int|null
         */
        public function getExpiryTime()
        {
        }
        /**
         * @return bool
         */
        public function isSecure()
        {
        }
        /**
         * @param int|null $now
         *
         * @return bool
         */
        public function isExpired($now = null)
        {
        }
        /**
         * @return bool
         */
        public function isSessionCookie()
        {
        }
        /**
         * @param Zend_Uri_Http|string $uri
         * @param bool $matchSessionCookies
         * @param int|null $now
         *
         * @return bool
         */
        public function match($uri, $matchSessionCookies = true, $now = null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $cookieStr
         * @param Zend_Uri_Http|null|string $refUri
         * @param bool $encodeValue
         *
         * @return Zend_Http_Cookie
         */
        public static function fromString($cookieStr, $refUri = null, $encodeValue = true)
        {
        }
        /**
         * @param string $cookieDomain
         * @param string $host
         *
         * @return bool
         */
        public static function matchCookieDomain($cookieDomain, $host)
        {
        }
        /**
         * @param string $cookiePath
         * @param string $path
         *
         * @return bool
         */
        public static function matchCookiePath($cookiePath, $path)
        {
        }
    }
    class Zend_Http_CookieJar implements \Countable, \IteratorAggregate
    {
        public const COOKIE_OBJECT = 0;
        public const COOKIE_STRING_ARRAY = 1;
        public const COOKIE_STRING_CONCAT = 2;
        public const COOKIE_STRING_CONCAT_STRICT = 3;
        /**
         * @var array<array-key, mixed>
         */
        public $cookies;
        /**
         * @var array<array-key, mixed>
         */
        public $_rawCookies;
        public function __construct()
        {
        }
        /**
         * @param Zend_Http_Cookie|string $cookie
         * @param Zend_Uri_Http|null|string $ref_uri
         * @param bool $encodeValue
         */
        public function addCookie($cookie, $ref_uri = null, $encodeValue = true)
        {
        }
        /**
         * @param Zend_Http_Response $response
         * @param Zend_Uri_Http|string $ref_uri
         * @param bool $encodeValue
         */
        public function addCookiesFromResponse($response, $ref_uri, $encodeValue = true)
        {
        }
        /**
         * @param int $ret_as
         *
         * @return array<array-key, mixed>|string
         */
        public function getAllCookies($ret_as)
        {
        }
        /**
         * @param Zend_Uri_Http|string $uri
         * @param bool $matchSessionCookies
         * @param int $ret_as
         * @param int|null $now
         *
         * @return array<array-key, mixed>|string
         */
        public function getMatchingCookies($uri, $matchSessionCookies = true, $ret_as, $now = null)
        {
        }
        /**
         * @param Zend_Uri_Http|string $uri
         * @param string $cookie_name
         * @param int $ret_as
         *
         * @return Zend_Http_Cookie|string
         */
        public function getCookie($uri, $cookie_name, $ret_as)
        {
        }
        /**
         * @param Zend_Http_Cookie|array<array-key, mixed> $ptr
         * @param int $ret_as
         *
         * @return array<array-key, mixed>|string
         */
        public function _flattenCookiesArray($ptr, $ret_as)
        {
        }
        /**
         * @param string $domain
         *
         * @return array<array-key, mixed>
         */
        public function _matchDomain($domain)
        {
        }
        /**
         * @param string $path
         *
         * @return array<array-key, mixed>
         */
        public function _matchPath($domains, $path)
        {
        }
        /**
         * @param Zend_Http_Response $response
         *
         * @return Zend_Http_CookieJar
         */
        public static function fromResponse(\Zend_Http_Response $response, $ref_uri)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return ArrayIterator
         */
        public function getIterator()
        {
        }
        /**
         * @return bool
         */
        public function isEmpty()
        {
        }
        /**
         * @return Zend_Http_CookieJar
         */
        public function reset()
        {
        }
    }
    class Zend_Http_Exception extends \Zend_Exception
    {
    }
    class Zend_Http_Header_Exception_InvalidArgumentException extends \Zend_Http_Exception
    {
    }
    class Zend_Http_Header_Exception_RuntimeException extends \Zend_Http_Exception
    {
    }
    class Zend_Http_Header_HeaderValue
    {
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function filter($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public static function isValid($value)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         *
         * @throws \Exception\RuntimeException
         */
        public static function assertValid($value)
        {
        }
    }
    class Zend_Http_Header_SetCookie
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $value;
        /**
         * @var int
         */
        public $version;
        /**
         * @var int
         */
        public $maxAge;
        /**
         * @var int
         */
        public $expires;
        /**
         * @var string
         */
        public $domain;
        /**
         * @var string
         */
        public $path;
        /**
         * @var bool
         */
        public $secure;
        /**
         * @var true
         */
        public $httponly;
        /**
         * @param bool $bypassHeaderFieldName
         *
         * @return SetCookie|array<array-key, mixed>
         *
         * @throws Zend_Http_Header_Exception_InvalidArgumentException
         */
        public static function fromString($headerLine, $bypassHeaderFieldName = false)
        {
        }
        /**
         * @param null|string $name
         * @param null|string $value
         * @param int|null $expires
         * @param null|string $path
         * @param null|string $domain
         * @param bool $secure
         * @param bool $httponly
         * @param null|string $maxAge
         * @param int|null $version
         *
         * @return SetCookie
         */
        public function __construct($name = null, $value = null, $expires = null, $path = null, $domain = null, $secure = false, $httponly = false, $maxAge = null, $version = null)
        {
        }
        /**
         * @return string
         */
        public function getFieldName()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Http_Header_Exception_RuntimeException
         */
        public function getFieldValue()
        {
        }
        /**
         * @param string $name
         *
         * @return SetCookie
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $value
         */
        public function setValue($value)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * @param int $version
         */
        public function setVersion($version)
        {
        }
        /**
         * @return int
         */
        public function getVersion()
        {
        }
        /**
         * @param int $maxAge
         */
        public function setMaxAge($maxAge)
        {
        }
        /**
         * @return int
         */
        public function getMaxAge()
        {
        }
        /**
         * @param int $expires
         *
         * @return SetCookie
         */
        public function setExpires($expires)
        {
        }
        /**
         * @return int
         */
        public function getExpires($inSeconds = false)
        {
        }
        /**
         * @param string $domain
         */
        public function setDomain($domain)
        {
        }
        /**
         * @return string
         */
        public function getDomain()
        {
        }
        /**
         * @param string $path
         */
        public function setPath($path)
        {
        }
        /**
         * @return string
         */
        public function getPath()
        {
        }
        /**
         * @param bool $secure
         */
        public function setSecure($secure)
        {
        }
        /**
         * @return bool
         */
        public function isSecure()
        {
        }
        /**
         * @param bool $httponly
         */
        public function setHttponly($httponly)
        {
        }
        /**
         * @return bool
         */
        public function isHttponly()
        {
        }
        /**
         * @param int|null $now
         *
         * @return bool
         */
        public function isExpired($now = null)
        {
        }
        /**
         * @return bool
         */
        public function isSessionCookie()
        {
        }
        public function isValidForRequest($requestDomain, $path, $isSecure = false)
        {
        }
        public function toString()
        {
        }
        public function __toString()
        {
        }
        public function toStringMultipleHeaders(array $headers)
        {
        }
    }
    class Zend_Http_Response
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $messages;
        /**
         * @var string
         */
        public $version;
        /**
         * @var int
         */
        public $code;
        /**
         * @var string
         */
        public $message;
        /**
         * @var array<array-key, mixed>
         */
        public $headers;
        /**
         * @var string
         */
        public $body;
        /**
         * @param int $code
         * @param array<array-key, mixed> $headers
         * @param null|string $body
         * @param string $version
         * @param null|string $message
         *
         * @throws Zend_Http_Exception
         */
        public function __construct($code, array $headers, $body = null, $version = '1.1', $message = null)
        {
        }
        /**
         * @return bool
         */
        public function isError()
        {
        }
        /**
         * @return bool
         */
        public function isSuccessful()
        {
        }
        /**
         * @return bool
         */
        public function isRedirect()
        {
        }
        /**
         * @return string
         */
        public function getBody()
        {
        }
        /**
         * @return string
         */
        public function getRawBody()
        {
        }
        /**
         * @return string
         */
        public function getVersion()
        {
        }
        /**
         * @return int
         */
        public function getStatus()
        {
        }
        /**
         * @return string
         */
        public function getMessage()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        public function getHeader($header)
        {
        }
        /**
         * @param bool $status_line
         * @param string $br
         *
         * @return string
         */
        public function getHeadersAsString($status_line = true, $br = '
')
        {
        }
        /**
         * @param string $br
         *
         * @return string
         */
        public function asString($br = '
')
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param int|null $code
         * @param bool $http11
         *
         * @return string
         */
        public static function responseCodeAsText($code = null, $http11 = true)
        {
        }
        /**
         * @param string $response_str
         *
         * @return int
         */
        public static function extractCode($response_str)
        {
        }
        /**
         * @param string $response_str
         *
         * @return string
         */
        public static function extractMessage($response_str)
        {
        }
        /**
         * @param string $response_str
         *
         * @return string
         */
        public static function extractVersion($response_str)
        {
        }
        /**
         * @param string $response_str
         *
         * @return array<array-key, mixed>
         */
        public static function extractHeaders($response_str)
        {
        }
        /**
         * @param string $response_str
         *
         * @return string
         */
        public static function extractBody($response_str)
        {
        }
        /**
         * @param string $body
         *
         * @return string
         */
        public static function decodeChunkedBody($body)
        {
        }
        /**
         * @param string $body
         *
         * @return string
         */
        public static function decodeGzip($body)
        {
        }
        /**
         * @param string $body
         *
         * @return string
         */
        public static function decodeDeflate($body)
        {
        }
        /**
         * @param string $response_str
         *
         * @return Zend_Http_Response
         */
        public static function fromString($response_str)
        {
        }
    }
    class Zend_Http_Response_Stream extends \Zend_Http_Response
    {
        /**
         * @var resource
         */
        public $stream;
        /**
         * @var string
         */
        public $stream_name;
        /**
         * @var bool
         */
        public $_cleanup;
        /**
         * @return resourse
         */
        public function getStream()
        {
        }
        /**
         * @param resourse $stream
         *
         * @return Zend_Http_Response_Stream
         */
        public function setStream($stream)
        {
        }
        /**
         * @return bool
         */
        public function getCleanup()
        {
        }
        /**
         * @param bool $cleanup
         */
        public function setCleanup($cleanup = true)
        {
        }
        /**
         * @return string
         */
        public function getStreamName()
        {
        }
        /**
         * @param string $stream_name
         *
         * @return Zend_Http_Response_Stream
         */
        public function setStreamName($stream_name)
        {
        }
        /**
         * @param int $code
         * @param array<array-key, mixed> $headers
         * @param null|string $body
         * @param string $version
         * @param null|string $message
         *
         * @throws Zend_Http_Exception
         */
        public function __construct($code, $headers, $body = null, $version = '1.1', $message = null)
        {
        }
        /**
         * @param string $response_str
         * @param resource $stream
         *
         * @return Zend_Http_Response_Stream
         */
        public static function fromStream($response_str, $stream)
        {
        }
        /**
         * @return string
         */
        public function getBody()
        {
        }
        /**
         * @return string
         */
        public function getRawBody()
        {
        }
        /**
         * @return string
         */
        public function readStream()
        {
        }
        public function __destruct()
        {
        }
    }
    class Zend_Http_UserAgent implements \Serializable
    {
        public const DEFAULT_IDENTIFICATION_SEQUENCE = 'mobile,desktop';
        public const DEFAULT_PERSISTENT_STORAGE_ADAPTER = 'Session';
        public const DEFAULT_BROWSER_TYPE = 'desktop';
        public const DEFAULT_HTTP_USER_AGENT = 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)';
        public const DEFAULT_HTTP_ACCEPT = 'application/xhtml+xml';
        public const DEFAULT_MARKUP_LANGUAGE = 'xhtml';
        /**
         * @var string
         */
        public $_browserType;
        /**
         * @var array<array-key, mixed>
         */
        public $_browserTypeClass;
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var Zend_Http_UserAgent_Device
         */
        public $_device;
        /**
         * @var bool
         */
        public $_immutable;
        /**
         * @var array<array-key, mixed>
         */
        public $_loaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_loaderTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_matchLog;
        /**
         * @var array<array-key, mixed>
         */
        public $_server;
        /**
         * @var Zend_Http_UserAgent_Storage
         */
        public $_storage;
        /**
         * @param ArrayAccess|Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function serialize()
        {
        }
        /**
         * @param string $serialized
         *
         * @return void
         */
        public function unserialize($serialized)
        {
        }
        /**
         * @param ArrayAccess|Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Http_UserAgent
         */
        public function setOptions($options)
        {
        }
        /**
         * @param string $deviceClass
         *
         * @return bool
         */
        public function _match($deviceClass)
        {
        }
        /**
         * @param string $browserType
         *
         * @return string
         *
         * @throws Zend_Loader_PluginLoader_Exception
         */
        public function _getUserAgentDevice($browserType)
        {
        }
        /**
         * @return string
         */
        public function getUserAgent()
        {
        }
        /**
         * @param string $userAgent
         *
         * @return Zend_Http_UserAgent
         */
        public function setUserAgent($userAgent)
        {
        }
        /**
         * @param null|string $httpAccept
         *
         * @return string
         */
        public function getHttpAccept($httpAccept = null)
        {
        }
        /**
         * @param string $httpAccept
         *
         * @return Zend_Http_UserAgent
         */
        public function setHttpAccept($httpAccept)
        {
        }
        /**
         * @param null|string $browser
         *
         * @return Zend_Http_UserAgent_Storage
         */
        public function getStorage($browser = null)
        {
        }
        /**
         * @param Zend_Http_UserAgent_Storage $storage
         *
         * @return Zend_Http_UserAgent
         */
        public function setStorage(\Zend_Http_UserAgent_Storage $storage)
        {
        }
        /**
         * @param null|string $browser
         *
         * @return void
         */
        public function clearStorage($browser = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getConfig()
        {
        }
        /**
         * @param mixed $config
         *
         * @return Zend_Http_UserAgent
         */
        public function setConfig($config = array())
        {
        }
        /**
         * @return Zend_Http_UserAgent_Device
         */
        public function getDevice()
        {
        }
        /**
         * @return string
         */
        public function getBrowserType()
        {
        }
        /**
         * @param string $browserType
         *
         * @return Zend_Http_UserAgent
         */
        public function setBrowserType($browserType)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getServer()
        {
        }
        /**
         * @param ArrayAccess|array<array-key, mixed> $server
         *
         * @return void
         *
         * @throws Zend_Http_UserAgent_Exception
         */
        public function setServer($server)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getServerValue($key)
        {
        }
        /**
         * @param float|int|string $key
         * @param mixed $value
         *
         * @return void
         */
        public function setServerValue($key, $value)
        {
        }
        /**
         * @param string $type
         * @param Zend_Loader_PluginLoader|string $loader
         *
         * @return Zend_Http_UserAgent
         */
        public function setPluginLoader($type, $loader)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_PluginLoader
         */
        public function getPluginLoader($type)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         *
         * @throws Zend_Http_UserAgent_Exception
         */
        public function _validateLoaderType($type)
        {
        }
        /**
         * @return Zend_Http_UserAgent_Result
         */
        public function _matchUserAgent()
        {
        }
        /**
         * @return void
         */
        public function _createDevice()
        {
        }
    }
    class Zend_Http_UserAgent_AbstractDevice implements \Zend_Http_UserAgent_Device
    {
        /**
         * @var string
         */
        public $_browser;
        /**
         * @var string
         */
        public $_browserVersion;
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var string
         */
        public $_userAgent;
        /**
         * @var array<array-key, mixed>
         */
        public $_server;
        /**
         * @var array<array-key, mixed>
         */
        public $_images;
        /**
         * @var array<array-key, mixed>
         */
        public $_aFeatures;
        /**
         * @var array<array-key, mixed>
         */
        public $_aGroup;
        /**
         * @param array<array-key, mixed>|null|string $userAgent
         * @param array<array-key, mixed> $server
         * @param array<array-key, mixed> $config
         *
         * @return void
         */
        public function __construct($userAgent = null, array $server = array(), array $config = array())
        {
        }
        /**
         * @return string
         */
        public function serialize()
        {
        }
        /**
         * @param string $serialized
         *
         * @return void
         */
        public function unserialize($serialized)
        {
        }
        /**
         * @param array<array-key, mixed> $spec
         *
         * @return void
         */
        public function _restoreFromArray(array $spec)
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function _defineFeatures()
        {
        }
        /**
         * @return string
         */
        public abstract function getType();
        /**
         * @param string $feature
         *
         * @return bool
         */
        public function hasFeature($feature)
        {
        }
        /**
         * @param string $feature
         *
         * @return null|string
         */
        public function getFeature($feature)
        {
        }
        /**
         * @param string $feature
         * @param string $value
         * @param string $group
         *
         * @return Zend_Http_UserAgent_AbstractDevice
         */
        public function setFeature($feature, $value = false, $group = '')
        {
        }
        /**
         * @param string $group
         * @param string $feature
         *
         * @return Zend_Http_UserAgent_AbstractDevice
         */
        public function setGroup($group, $feature)
        {
        }
        /**
         * @param string $group
         *
         * @return array<array-key, mixed>
         */
        public function getGroup($group)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAllFeatures()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAllGroups()
        {
        }
        /**
         * @return void
         */
        public function _getDefaultFeatures()
        {
        }
        /**
         * @param string $userAgent
         *
         * @return array<array-key, mixed>
         */
        public static function extractFromUserAgent($userAgent)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _loadFeaturesAdapter()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImageFormatSupport()
        {
        }
        /**
         * @return int
         */
        public function getMaxImageHeight()
        {
        }
        /**
         * @return int
         */
        public function getMaxImageWidth()
        {
        }
        /**
         * @return int
         */
        public function getPhysicalScreenHeight()
        {
        }
        /**
         * @return int
         */
        public function getPhysicalScreenWidth()
        {
        }
        /**
         * @return string
         */
        public function getPreferredMarkup()
        {
        }
        /**
         * @return int
         */
        public function getXhtmlSupportLevel()
        {
        }
        /**
         * @return bool
         */
        public function hasFlashSupport()
        {
        }
        /**
         * @return bool
         */
        public function hasPdfSupport()
        {
        }
        /**
         * @return bool
         */
        public function hasPhoneNumber()
        {
        }
        /**
         * @return bool
         */
        public function httpsSupport()
        {
        }
        /**
         * @return string
         */
        public function getBrowser()
        {
        }
        /**
         * @return string
         */
        public function getBrowserVersion()
        {
        }
        /**
         * @return string
         */
        public function getUserAgent()
        {
        }
        /**
         * @return the
         */
        public function getImages()
        {
        }
        /**
         * @param string $browser
         */
        public function setBrowser($browser)
        {
        }
        /**
         * @param string $browserVersion
         */
        public function setBrowserVersion($browserVersion)
        {
        }
        /**
         * @param string $userAgent
         */
        public function setUserAgent($userAgent)
        {
        }
        /**
         * @param array<array-key, mixed> $_images
         */
        public function setImages($_images)
        {
        }
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $signatures
         *
         * @return bool
         */
        public static function _matchAgentAgainstSignatures($userAgent, $signatures)
        {
        }
    }
    class Zend_Http_UserAgent_Bot extends \Zend_Http_UserAgent_AbstractDevice
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Http_UserAgent_Checker extends \Zend_Http_UserAgent_Desktop
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Http_UserAgent_Console extends \Zend_Http_UserAgent_Desktop
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Http_UserAgent_Desktop extends \Zend_Http_UserAgent_AbstractDevice
    {
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    interface Zend_Http_UserAgent_Device extends \Serializable
    {
        /**
         * @param array<array-key, mixed>|null|string $userAgent
         * @param array<array-key, mixed> $server
         * @param array<array-key, mixed> $config
         *
         * @return void
         */
        public function __construct($userAgent = null, array $server = array(), array $config = array());
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return array<array-key, mixed>|bool
         */
        public static function match($userAgent, $server);
        /**
         * @return array<array-key, mixed>
         */
        public function getAllFeatures();
        /**
         * @return void
         */
        public function getAllGroups();
        /**
         * @param string $feature
         *
         * @return bool
         */
        public function hasFeature($feature);
        /**
         * @param string $feature
         *
         * @return mixed
         */
        public function getFeature($feature);
        /**
         * @return string
         */
        public function getBrowser();
        /**
         * @return string
         */
        public function getBrowserVersion();
        /**
         * @param string $group
         *
         * @return array<array-key, mixed>
         */
        public function getGroup($group);
        /**
         * @return array<array-key, mixed>
         */
        public function getImageFormatSupport();
        /**
         * @return array<array-key, mixed>
         */
        public function getImages();
        /**
         * @return int
         */
        public function getMaxImageHeight();
        /**
         * @return int
         */
        public function getMaxImageWidth();
        /**
         * @return int
         */
        public function getPhysicalScreenHeight();
        /**
         * @return int
         */
        public function getPhysicalScreenWidth();
        /**
         * @return string
         */
        public function getPreferredMarkup();
        /**
         * @return string
         */
        public function getUserAgent();
        /**
         * @return int
         */
        public function getXhtmlSupportLevel();
        /**
         * @return bool
         */
        public function hasFlashSupport();
        /**
         * @return bool
         */
        public function hasPdfSupport();
        /**
         * @return bool
         */
        public function hasPhoneNumber();
        /**
         * @return bool
         */
        public function httpsSupport();
    }
    class Zend_Http_UserAgent_Email extends \Zend_Http_UserAgent_Desktop
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Http_UserAgent_Exception extends \Zend_Exception
    {
    }
    interface Zend_Http_UserAgent_Features_Adapter
    {
        /**
         * @return array<array-key, mixed>
         */
        public static function getFromRequest($request, array $config);
    }
    class Zend_Http_UserAgent_Features_Adapter_Browscap implements \Zend_Http_UserAgent_Features_Adapter
    {
        /**
         * @throws Zend_Http_UserAgent_Features_Exception
         */
        public function __construct()
        {
        }
        /**
         * @param array<array-key, mixed> $request
         * @param array<array-key, mixed> $config
         *
         * @return array<array-key, mixed>
         */
        public static function getFromRequest($request, array $config)
        {
        }
    }
    class Zend_Http_UserAgent_Features_Adapter_DeviceAtlas implements \Zend_Http_UserAgent_Features_Adapter
    {
        /**
         * @param array<array-key, mixed> $request
         *
         * @return array<array-key, mixed>
         */
        public static function getFromRequest($request, array $config)
        {
        }
    }
    class Zend_Http_UserAgent_Features_Adapter_TeraWurfl implements \Zend_Http_UserAgent_Features_Adapter
    {
        /**
         * @param array<array-key, mixed> $request
         *
         * @return array<array-key, mixed>
         */
        public static function getFromRequest($request, array $config)
        {
        }
        public static function getAllCapabilities(\TeraWurfl $wurflObj)
        {
        }
    }
    class Zend_Http_UserAgent_Features_Exception extends \Zend_Http_UserAgent_Exception
    {
    }
    class Zend_Http_UserAgent_Feed extends \Zend_Http_UserAgent_AbstractDevice
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function _defineFeatures()
        {
        }
    }
    class Zend_Http_UserAgent_Mobile extends \Zend_Http_UserAgent_AbstractDevice
    {
        public const DEFAULT_FEATURES_ADAPTER_CLASSNAME = 'Zend_Http_UserAgent_Features_Adapter_Browscap';
        public const DEFAULT_FEATURES_ADAPTER_PATH = 'Zend/Http/UserAgent/Features/Adapter/Browscap.php';
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @var array<array-key, mixed>
         */
        public static $_haTerms;
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaBegin;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @param string $userAgent
         *
         * @return string
         */
        public static function userAgentStart($userAgent)
        {
        }
        /**
         * @return void
         */
        public function __construct($userAgent = null, array $server = array(), array $config = array())
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function _defineFeatures()
        {
        }
        /**
         * @return __TYPE__
         */
        public function getMarkupLanguage($preferredMarkup = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImageFormatSupport()
        {
        }
        /**
         * @return int
         */
        public function getMaxImageHeight()
        {
        }
        /**
         * @return int
         */
        public function getMaxImageWidth()
        {
        }
        /**
         * @return int
         */
        public function getPhysicalScreenHeight()
        {
        }
        /**
         * @return int
         */
        public function getPhysicalScreenWidth()
        {
        }
        /**
         * @return string
         */
        public function getPreferredMarkup()
        {
        }
        /**
         * @return int
         */
        public function getXhtmlSupportLevel()
        {
        }
        /**
         * @return bool
         */
        public function hasFlashSupport()
        {
        }
        /**
         * @return bool
         */
        public function hasPdfSupport()
        {
        }
        /**
         * @return bool
         */
        public function hasPhoneNumber()
        {
        }
        /**
         * @return bool
         */
        public function httpsSupport()
        {
        }
    }
    class Zend_Http_UserAgent_Offline extends \Zend_Http_UserAgent_Desktop
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Http_UserAgent_Probe extends \Zend_Http_UserAgent_AbstractDevice
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function _defineFeatures()
        {
        }
    }
    class Zend_Http_UserAgent_Spam extends \Zend_Http_UserAgent_AbstractDevice
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function _defineFeatures()
        {
        }
    }
    interface Zend_Http_UserAgent_Storage
    {
        /**
         * @return bool
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function isEmpty();
        /**
         * @return mixed
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function read();
        /**
         * @param mixed $contents
         *
         * @return void
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function write($contents);
        /**
         * @return void
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function clear();
    }
    class Zend_Http_UserAgent_Storage_Exception extends \Zend_Http_UserAgent_Exception
    {
    }
    class Zend_Http_UserAgent_Storage_NonPersistent implements \Zend_Http_UserAgent_Storage
    {
        /**
         * @var mixed
         */
        public $_data;
        /**
         * @return bool
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function isEmpty()
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function read()
        {
        }
        /**
         * @param mixed $contents
         *
         * @return void
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function write($contents)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function clear()
        {
        }
    }
    class Zend_Http_UserAgent_Storage_Session implements \Zend_Http_UserAgent_Storage
    {
        public const NAMESPACE_DEFAULT = 'Zend_Http_UserAgent';
        public const MEMBER_DEFAULT = 'storage';
        /**
         * @var Zend_Session_Namespace
         */
        public $_session;
        /**
         * @var mixed
         */
        public $_namespace;
        /**
         * @var mixed
         */
        public $_member;
        /**
         * @param array<array-key, mixed>|null|object $options
         *
         * @return void
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @return string
         */
        public function getMember()
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function isEmpty()
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function read()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function write($content)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Http_UserAgent_Storage_Exception
         */
        public function clear()
        {
        }
    }
    class Zend_Http_UserAgent_Text extends \Zend_Http_UserAgent_AbstractDevice
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function _defineFeatures()
        {
        }
        /**
         * @return null
         */
        public function getImageFormatSupport()
        {
        }
        /**
         * @return string
         */
        public function getPreferredMarkup()
        {
        }
        /**
         * @return int
         */
        public function getXhtmlSupportLevel()
        {
        }
        /**
         * @return bool
         */
        public function hasFlashSupport()
        {
        }
        /**
         * @return bool
         */
        public function hasPdfSupport()
        {
        }
    }
    class Zend_Http_UserAgent_Validator extends \Zend_Http_UserAgent_Desktop
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_uaSignatures;
        /**
         * @param string $userAgent
         * @param array<array-key, mixed> $server
         *
         * @return bool
         */
        public static function match($userAgent, $server)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Json
    {
        public const TYPE_ARRAY = 1;
        public const TYPE_OBJECT = 0;
        /**
         * @var int
         */
        public static $maxRecursionDepthAllowed;
        /**
         * @var bool
         */
        public static $useBuiltinEncoderDecoder;
        /**
         * @param string $encodedValue
         * @param int $objectDecodeType
         *
         * @return mixed
         */
        public static function decode($encodedValue, $objectDecodeType)
        {
        }
        /**
         * @param mixed $valueToEncode
         * @param bool $cycleCheck
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public static function encode($valueToEncode, $cycleCheck = false, $options = array())
        {
        }
        /**
         * @param array<array-key, mixed>|object $value
         * @param array<array-key, mixed> $javascriptExpressions
         * @param null $currentKey
         *
         * @return void
         */
        public static function _recursiveJsonExprFinder(&$value, array &$javascriptExpressions, $currentKey = null)
        {
        }
        /**
         * @param SimpleXMLElement $simpleXmlElementObject
         *
         * @return Zend_Json_Expr|string
         */
        public static function _getXmlValue($simpleXmlElementObject)
        {
        }
        /**
         * @param SimpleXMLElement $simpleXmlElementObject
         * @param bool $ignoreXmlAttributes
         * @param int $recursionDepth
         *
         * @return array<array-key, mixed>
         */
        public static function _processXml($simpleXmlElementObject, $ignoreXmlAttributes, $recursionDepth = 0)
        {
        }
        /**
         * @param string $xmlStringContents
         * @param bool $ignoreXmlAttributes
         *
         * @return mixed
         *
         * @throws Zend_Json_Exception
         */
        public static function fromXml($xmlStringContents, $ignoreXmlAttributes = true)
        {
        }
        /**
         * @param string $json
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public static function prettyPrint($json, $options = array())
        {
        }
    }
    class Zend_Json_Decoder
    {
        public const EOF = 0;
        public const DATUM = 1;
        public const LBRACE = 2;
        public const LBRACKET = 3;
        public const RBRACE = 4;
        public const RBRACKET = 5;
        public const COMMA = 6;
        public const COLON = 7;
        /**
         * @var string
         */
        public $_source;
        /**
         * @var int
         */
        public $_sourceLength;
        /**
         * @var int
         */
        public $_offset;
        /**
         * @var int
         */
        public $_token;
        /**
         * @var int
         */
        public $_decodeType;
        /**
         * @param string $source
         * @param int $decodeType
         *
         * @return void
         */
        public function __construct($source, $decodeType)
        {
        }
        /**
         * @param null|string $source
         * @param int $objectDecodeType
         *
         * @return mixed
         *
         * @throws Zend_Json_Exception
         */
        public static function decode($source = null, $objectDecodeType)
        {
        }
        /**
         * @return mixed
         */
        public function _decodeValue()
        {
        }
        /**
         * @return StdClass|array<array-key, mixed>
         */
        public function _decodeObject()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _decodeArray()
        {
        }
        public function _eatWhitespace()
        {
        }
        /**
         * @return int
         */
        public function _getNextToken()
        {
        }
        /**
         * @return string
         */
        public static function decodeUnicodeString($chrs)
        {
        }
        /**
         * @param string $utf16
         *
         * @return string
         */
        public static function _utf162utf8($utf16)
        {
        }
    }
    class Zend_Json_Encoder
    {
        /**
         * @var bool
         */
        public $_cycleCheck;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_visited;
        /**
         * @param bool $cycleCheck
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($cycleCheck = false, $options = array())
        {
        }
        /**
         * @param mixed $value
         * @param bool $cycleCheck
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public static function encode($value, $cycleCheck = false, $options = array())
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         */
        public function _encodeValue(&$value)
        {
        }
        /**
         * @param object $value
         *
         * @return string
         *
         * @throws Zend_Json_Exception
         */
        public function _encodeObject(&$value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function _wasVisited(&$value)
        {
        }
        public function _encodeArray(&$array)
        {
        }
        public function _encodeDatum(&$value)
        {
        }
        public function _encodeString(&$string)
        {
        }
        /**
         * @param ReflectionClass $cls
         *
         * @return string
         */
        public static function _encodeConstants(\ReflectionClass $cls)
        {
        }
        /**
         * @param ReflectionClass $cls
         *
         * @return string
         */
        public static function _encodeMethods(\ReflectionClass $cls)
        {
        }
        /**
         * @param ReflectionClass $cls
         *
         * @return string
         */
        public static function _encodeVariables(\ReflectionClass $cls)
        {
        }
        /**
         * @param string $className
         * @param string $package
         *
         * @return string
         *
         * @throws Zend_Json_Exception
         */
        public static function encodeClass($className, $package = '')
        {
        }
        /**
         * @param array<array-key, mixed> $classNames
         * @param string $package
         *
         * @return string
         */
        public static function encodeClasses(array $classNames, $package = '')
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function encodeUnicodeString($value)
        {
        }
        /**
         * @param string $utf8
         *
         * @return string
         */
        public static function _utf82utf16($utf8)
        {
        }
    }
    class Zend_Json_Exception extends \Zend_Exception
    {
    }
    class Zend_Json_Expr
    {
        /**
         * @var string
         */
        public $_expression;
        /**
         * @param string $expression
         *
         * @return void
         */
        public function __construct($expression)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Json_Server extends \Zend_Server_Abstract
    {
        public const VERSION_1 = '1.0';
        public const VERSION_2 = '2.0';
        /**
         * @var bool
         */
        public $_autoEmitResponse;
        /**
         * @var bool
         */
        public $_overwriteExistingMethods;
        /**
         * @var Zend_Json_Server_Request
         */
        public $_request;
        /**
         * @var Zend_Json_Server_Response
         */
        public $_response;
        /**
         * @var Zend_Json_Server_Smd
         */
        public $_serviceMap;
        /**
         * @var array<array-key, mixed>
         */
        public $_smdMethods;
        /**
         * @var Zend_Server_Description
         */
        public $_table;
        /**
         * @param array<array-key, mixed>|string $function
         * @param string $namespace
         *
         * @return Zend_Json_Server
         */
        public function addFunction($function, $namespace = '')
        {
        }
        /**
         * @param string $class
         * @param string $namespace
         * @param mixed|null $argv
         *
         * @return Zend_Json_Server
         */
        public function setClass($class, $namespace = '', $argv = null)
        {
        }
        /**
         * @param null|string $fault
         * @param int $code
         *
         * @return false
         */
        public function fault($fault = null, $code = 404, $data = null)
        {
        }
        /**
         * @param Zend_Json_Server_Request $request
         *
         * @return Zend_Json_Server_Response|null
         */
        public function handle($request = false)
        {
        }
        /**
         * @param Zend_Server_Definition|array<array-key, mixed> $definition
         *
         * @return void
         */
        public function loadFunctions($definition)
        {
        }
        public function setPersistence($mode)
        {
        }
        /**
         * @param Zend_Json_Server_Request $request
         *
         * @return Zend_Json_Server
         */
        public function setRequest(\Zend_Json_Server_Request $request)
        {
        }
        /**
         * @return Zend_Json_Server_Request
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Json_Server_Response $response
         *
         * @return Zend_Json_Server
         */
        public function setResponse(\Zend_Json_Server_Response $response)
        {
        }
        /**
         * @return Zend_Json_Server_Response
         */
        public function getResponse()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Json_Server
         */
        public function setAutoEmitResponse($flag)
        {
        }
        /**
         * @return bool
         */
        public function autoEmitResponse()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return Zend_Json_Server_Smd
         */
        public function getServiceMap()
        {
        }
        /**
         * @param Zend_Server_Reflection_Function $method
         *
         * @return void
         */
        public function _addMethodServiceMap(\Zend_Server_Method_Definition $method)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function _fixType($type)
        {
        }
        /**
         * @param array<array-key, mixed> $args
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>
         */
        public function _getDefaultParams(array $args, array $params)
        {
        }
        /**
         * @param Zend_Server_Reflection_Function_Abstract $method
         *
         * @return array<array-key, mixed>|string
         */
        public function _getParams(\Zend_Server_Method_Definition $method)
        {
        }
        /**
         * @return Zend_Json_Server_Response
         */
        public function _getReadyResponse()
        {
        }
        /**
         * @param Zend_Server_Reflection_Function_Abstract $method
         *
         * @return array<array-key, mixed>|string
         */
        public function _getReturnType(\Zend_Server_Method_Definition $method)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getSmdMethods()
        {
        }
        /**
         * @return void
         */
        public function _handle()
        {
        }
    }
    class Zend_Json_Server_Cache extends \Zend_Server_Cache
    {
        /**
         * @param string $filename
         * @param Zend_Json_Server $server
         *
         * @return bool
         */
        public static function saveSmd($filename, \Zend_Json_Server $server)
        {
        }
        /**
         * @param string $filename
         *
         * @return false|string
         */
        public static function getSmd($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public static function deleteSmd($filename)
        {
        }
    }
    class Zend_Json_Server_Error
    {
        public const ERROR_PARSE = -32768;
        public const ERROR_INVALID_REQUEST = -32600;
        public const ERROR_INVALID_METHOD = -32601;
        public const ERROR_INVALID_PARAMS = -32602;
        public const ERROR_INTERNAL = -32603;
        public const ERROR_OTHER = -32000;
        /**
         * @var array<array-key, mixed>
         */
        public $_allowedCodes;
        /**
         * @var int
         */
        public $_code;
        /**
         * @var mixed
         */
        public $_data;
        /**
         * @var string
         */
        public $_message;
        /**
         * @param null|string $message
         * @param int $code
         * @param mixed|null $data
         *
         * @return void
         */
        public function __construct($message = null, $code = -32000, $data = null)
        {
        }
        /**
         * @param int $code
         *
         * @return Zend_Json_Server_Error
         */
        public function setCode($code)
        {
        }
        /**
         * @return int|null
         */
        public function getCode()
        {
        }
        /**
         * @param string $message
         *
         * @return Zend_Json_Server_Error
         */
        public function setMessage($message)
        {
        }
        /**
         * @return string
         */
        public function getMessage()
        {
        }
        /**
         * @param mixed $data
         *
         * @return Zend_Json_Server_Error
         */
        public function setData($data)
        {
        }
        /**
         * @return mixed
         */
        public function getData()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Json_Server_Exception extends \Zend_Json_Exception
    {
    }
    class Zend_Json_Server_Request
    {
        /**
         * @var mixed
         */
        public $_id;
        /**
         * @var bool
         */
        public $_isMethodError;
        /**
         * @var string
         */
        public $_method;
        /**
         * @var string
         */
        public $_methodRegex;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var string
         */
        public $_version;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Json_Server_Request
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param mixed $value
         * @param null|string $key
         *
         * @return Zend_Json_Server_Request
         */
        public function addParam($value, $key = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Json_Server_Request
         */
        public function addParams(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Json_Server_Request
         */
        public function setParams(array $params)
        {
        }
        /**
         * @param int|string $index
         *
         * @return mixed|null
         */
        public function getParam($index)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Json_Server_Request
         */
        public function setMethod($name)
        {
        }
        /**
         * @return string
         */
        public function getMethod()
        {
        }
        /**
         * @return bool
         */
        public function isMethodError()
        {
        }
        /**
         * @param mixed $name
         *
         * @return Zend_Json_Server_Request
         */
        public function setId($name)
        {
        }
        /**
         * @return mixed
         */
        public function getId()
        {
        }
        /**
         * @param string $version
         *
         * @return Zend_Json_Server_Request
         */
        public function setVersion($version)
        {
        }
        /**
         * @return string
         */
        public function getVersion()
        {
        }
        /**
         * @param string $json
         *
         * @return void
         */
        public function loadJson($json)
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Json_Server_Request_Http extends \Zend_Json_Server_Request
    {
        /**
         * @var string
         */
        public $_rawJson;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function getRawJson()
        {
        }
    }
    class Zend_Json_Server_Response
    {
        /**
         * @var Zend_Json_Server_Error|null
         */
        public $_error;
        /**
         * @var mixed
         */
        public $_id;
        /**
         * @var mixed
         */
        public $_result;
        /**
         * @var Zend_Json_Server_Smd
         */
        public $_serviceMap;
        /**
         * @var string
         */
        public $_version;
        /**
         * @param mixed $value
         *
         * @return Zend_Json_Server_Response
         */
        public function setResult($value)
        {
        }
        /**
         * @return mixed
         */
        public function getResult()
        {
        }
        /**
         * @param Zend_Json_Server_Error $error
         *
         * @return Zend_Json_Server_Response
         */
        public function setError(\Zend_Json_Server_Error $error)
        {
        }
        /**
         * @return Zend_Json_Server_Error|null
         */
        public function getError()
        {
        }
        /**
         * @return bool
         */
        public function isError()
        {
        }
        /**
         * @param mixed $name
         *
         * @return Zend_Json_Server_Response
         */
        public function setId($name)
        {
        }
        /**
         * @return mixed
         */
        public function getId()
        {
        }
        /**
         * @param string $version
         *
         * @return Zend_Json_Server_Response
         */
        public function setVersion($version)
        {
        }
        /**
         * @return string
         */
        public function getVersion()
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return mixed
         */
        public function getArgs()
        {
        }
        /**
         * @param mixed $args
         *
         * @return Zend_Json_Server_Response
         */
        public function setArgs($args)
        {
        }
        /**
         * @param Zend_Json_Server_Smd $serviceMap
         *
         * @return Zend_Json_Server_Response
         */
        public function setServiceMap($serviceMap)
        {
        }
        /**
         * @return Zend_Json_Server_Smd|null
         */
        public function getServiceMap()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Json_Server_Response_Http extends \Zend_Json_Server_Response
    {
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return void
         */
        public function sendHeaders()
        {
        }
    }
    class Zend_Json_Server_Smd
    {
        public const ENV_JSONRPC_1 = 'JSON-RPC-1.0';
        public const ENV_JSONRPC_2 = 'JSON-RPC-2.0';
        public const SMD_VERSION = '2.0';
        /**
         * @var string
         */
        public $_contentType;
        /**
         * @var string
         */
        public $_contentTypeRegex;
        /**
         * @var string
         */
        public $_description;
        /**
         * @var bool
         */
        public $_dojoCompatible;
        /**
         * @var string
         */
        public $_envelope;
        /**
         * @var array<array-key, mixed>
         */
        public $_envelopeTypes;
        /**
         * @var string
         */
        public $_id;
        /**
         * @var array<array-key, mixed>
         */
        public $_services;
        /**
         * @var string
         */
        public $_target;
        /**
         * @var string
         */
        public $_transport;
        /**
         * @var array<array-key, mixed>
         */
        public $_transportTypes;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Json_Server_Smd
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $transport
         *
         * @return Zend_Json_Server_Smd
         */
        public function setTransport($transport)
        {
        }
        /**
         * @return string
         */
        public function getTransport()
        {
        }
        /**
         * @param string $envelopeType
         *
         * @return Zend_Json_Server_Smd
         */
        public function setEnvelope($envelopeType)
        {
        }
        /**
         * @return string
         */
        public function getEnvelope()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Json_Server_Smd
         */
        public function setContentType($type)
        {
        }
        /**
         * @return string
         */
        public function getContentType()
        {
        }
        /**
         * @param string $target
         *
         * @return Zend_Json_Server_Smd
         */
        public function setTarget($target)
        {
        }
        /**
         * @return string
         */
        public function getTarget()
        {
        }
        /**
         * @return Zend_Json_Server_Smd
         */
        public function setId($id)
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @param string $description
         *
         * @return Zend_Json_Server_Smd
         */
        public function setDescription($description)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Json_Server_Smd
         */
        public function setDojoCompatible($flag)
        {
        }
        /**
         * @return bool
         */
        public function isDojoCompatible()
        {
        }
        /**
         * @param Zend_Json_Server_Smd_Service|array<array-key, mixed> $service
         *
         * @return void
         */
        public function addService($service)
        {
        }
        /**
         * @param array<array-key, mixed> $services
         *
         * @return Zend_Json_Server_Smd
         */
        public function addServices(array $services)
        {
        }
        /**
         * @param array<array-key, mixed> $services
         *
         * @return Zend_Json_Server_Smd
         */
        public function setServices(array $services)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Json_Server_Smd_Service|false
         */
        public function getService($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getServices()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeService($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toDojoArray()
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Json_Server_Smd_Service
    {
        public $_envelope;
        public $_name;
        public $_return;
        public $_target;
        public $_transport = 'POST';
        /**
         * @var array<array-key, mixed>
         */
        public $_envelopeTypes;
        /**
         * @var string
         */
        public $_nameRegex;
        /**
         * @var array<array-key, mixed>
         */
        public $_paramOptionTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var array<array-key, mixed>
         */
        public $_paramMap;
        /**
         * @var array<array-key, mixed>
         */
        public $_transportTypes;
        /**
         * @param array<array-key, mixed>|string $spec
         *
         * @return void
         *
         * @throws Zend_Json_Server_Exception
         */
        public function __construct($spec)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Json_Server_Smd_Service
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Json_Server_Smd_Service
         *
         * @throws Zend_Json_Server_Exception
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $transport
         *
         * @return Zend_Json_Server_Smd_Service
         */
        public function setTransport($transport)
        {
        }
        /**
         * @return string
         */
        public function getTransport()
        {
        }
        /**
         * @param string $target
         *
         * @return Zend_Json_Server_Smd_Service
         */
        public function setTarget($target)
        {
        }
        /**
         * @return string
         */
        public function getTarget()
        {
        }
        /**
         * @param string $envelopeType
         *
         * @return Zend_Json_Server_Smd_Service
         */
        public function setEnvelope($envelopeType)
        {
        }
        /**
         * @return string
         */
        public function getEnvelope()
        {
        }
        /**
         * @param array<array-key, mixed>|string $type
         * @param array<array-key, mixed> $options
         * @param int|null $order
         *
         * @return Zend_Json_Server_Smd_Service
         */
        public function addParam($type, array $options = array(), $order = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Json_Server_Smd_Service
         */
        public function addParams(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Json_Server_Smd_Service
         */
        public function setParams(array $params)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @param array<array-key, mixed>|string $type
         *
         * @return Zend_Json_Server_Smd_Service
         */
        public function setReturn($type)
        {
        }
        /**
         * @return array<array-key, mixed>|string
         */
        public function getReturn()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $type
         *
         * @return true
         *
         * @throws Zend_Json_Server_Exception
         */
        public function _validateParamType($type, $isReturn = false)
        {
        }
    }
    class Zend_Layout
    {
        /**
         * @var Zend_View_Helper_Placeholder_Container
         */
        public $_container;
        /**
         * @var string
         */
        public $_contentKey;
        /**
         * @var bool
         */
        public $_enabled;
        /**
         * @var string
         */
        public $_helperClass;
        /**
         * @var Zend_Filter_Inflector
         */
        public $_inflector;
        /**
         * @var bool
         */
        public $_inflectorEnabled;
        /**
         * @var string
         */
        public $_inflectorTarget;
        /**
         * @var string
         */
        public $_layout;
        /**
         * @var string
         */
        public $_viewScriptPath;
        public $_viewBasePath = null;
        public $_viewBasePrefix = 'Layout_View';
        /**
         * @var bool
         */
        public $_mvcEnabled;
        /**
         * @var Zend_Layout
         */
        public static $_mvcInstance;
        /**
         * @var bool
         */
        public $_mvcSuccessfulActionOnly;
        /**
         * @var string
         */
        public $_pluginClass;
        /**
         * @var Zend_View_Interface
         */
        public $_view;
        /**
         * @var string
         */
        public $_viewSuffix;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         *
         * @return void
         */
        public function __construct($options = null, $initMvc = false)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         *
         * @return Zend_Layout
         */
        public static function startMvc($options = null)
        {
        }
        /**
         * @return Zend_Layout|null
         */
        public static function getMvcInstance()
        {
        }
        /**
         * @return void
         */
        public static function resetMvcInstance()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function setOptions($options)
        {
        }
        /**
         * @return void
         */
        public function _initMvc()
        {
        }
        /**
         * @return void
         */
        public function _initPlugin()
        {
        }
        /**
         * @return void
         */
        public function _initHelper()
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Layout
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @return Zend_View_Helper_Placeholder_Container
         */
        public function _initVarContainer()
        {
        }
        /**
         * @param string $name
         * @param bool $enabled
         *
         * @return Zend_Layout
         */
        public function setLayout($name, $enabled = true)
        {
        }
        /**
         * @return string
         */
        public function getLayout()
        {
        }
        /**
         * @return Zend_Layout
         */
        public function disableLayout()
        {
        }
        /**
         * @return Zend_Layout
         */
        public function enableLayout()
        {
        }
        /**
         * @return bool
         */
        public function isEnabled()
        {
        }
        public function setViewBasePath($path, $prefix = 'Layout_View')
        {
        }
        public function getViewBasePath()
        {
        }
        public function setViewScriptPath($path)
        {
        }
        public function getViewScriptPath()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Layout
         */
        public function setLayoutPath($path)
        {
        }
        /**
         * @return string
         */
        public function getLayoutPath()
        {
        }
        /**
         * @param string $contentKey
         *
         * @return Zend_Layout
         */
        public function setContentKey($contentKey)
        {
        }
        /**
         * @return string
         */
        public function getContentKey()
        {
        }
        /**
         * @param bool $mvcEnabled
         *
         * @return Zend_Layout
         */
        public function _setMvcEnabled($mvcEnabled)
        {
        }
        /**
         * @return bool
         */
        public function getMvcEnabled()
        {
        }
        /**
         * @param bool $successfulActionOnly
         *
         * @return Zend_Layout
         */
        public function setMvcSuccessfulActionOnly($successfulActionOnly)
        {
        }
        /**
         * @return bool
         */
        public function getMvcSuccessfulActionOnly()
        {
        }
        /**
         * @param Zend_View_Interface $view
         *
         * @return Zend_Layout
         */
        public function setView(\Zend_View_Interface $view)
        {
        }
        /**
         * @return string
         */
        public function getHelperClass()
        {
        }
        /**
         * @param string $helperClass
         *
         * @return Zend_Layout
         */
        public function setHelperClass($helperClass)
        {
        }
        /**
         * @return string
         */
        public function getPluginClass()
        {
        }
        /**
         * @param string $pluginClass
         *
         * @return Zend_Layout
         */
        public function setPluginClass($pluginClass)
        {
        }
        /**
         * @return Zend_View_Interface
         */
        public function getView()
        {
        }
        /**
         * @param string $viewSuffix
         *
         * @return Zend_Layout
         */
        public function setViewSuffix($viewSuffix)
        {
        }
        /**
         * @return string
         */
        public function getViewSuffix()
        {
        }
        /**
         * @return string
         */
        public function getInflectorTarget()
        {
        }
        /**
         * @param string $inflectorTarget
         *
         * @return Zend_Layout
         */
        public function setInflectorTarget($inflectorTarget)
        {
        }
        /**
         * @param Zend_Filter_Inflector $inflector
         *
         * @return Zend_Layout
         */
        public function setInflector(\Zend_Filter_Inflector $inflector)
        {
        }
        /**
         * @return Zend_Filter_Inflector
         */
        public function getInflector()
        {
        }
        /**
         * @return Zend_Layout
         */
        public function enableInflector()
        {
        }
        /**
         * @return Zend_Layout
         */
        public function disableInflector()
        {
        }
        /**
         * @return bool
         */
        public function inflectorEnabled()
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return void
         */
        public function __set($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function __unset($key)
        {
        }
        /**
         * @param mixed $spec
         * @param mixed|null $value
         *
         * @return Zend_Layout
         *
         * @throws Zend_Layout_Exception
         */
        public function assign($spec, $value = null)
        {
        }
        /**
         * @param mixed|null $name
         *
         * @return mixed
         */
        public function render($name = null)
        {
        }
    }
    class Zend_Layout_Controller_Action_Helper_Layout extends \Zend_Controller_Action_Helper_Abstract
    {
        /**
         * @var Zend_Controller_Front
         */
        public $_frontController;
        /**
         * @var Zend_Layout
         */
        public $_layout;
        /**
         * @var bool
         */
        public $_isActionControllerSuccessful;
        /**
         * @param Zend_Layout|null $layout
         *
         * @return void
         */
        public function __construct(?\Zend_Layout $layout = null)
        {
        }
        public function init()
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public function getFrontController()
        {
        }
        /**
         * @return Zend_Layout
         */
        public function getLayoutInstance()
        {
        }
        /**
         * @param Zend_Layout $layout
         *
         * @return Zend_Layout_Controller_Action_Helper_Layout
         */
        public function setLayoutInstance(\Zend_Layout $layout)
        {
        }
        /**
         * @return Zend_Layout_Controller_Action_Helper_Layout
         */
        public function postDispatch()
        {
        }
        /**
         * @return bool
         */
        public function isActionControllerSuccessful()
        {
        }
        /**
         * @return Zend_Layout
         */
        public function direct()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
    }
    class Zend_Layout_Controller_Plugin_Layout extends \Zend_Controller_Plugin_Abstract
    {
        public $_layoutActionHelper = null;
        /**
         * @var Zend_Layout
         */
        public $_layout;
        /**
         * @param Zend_Layout|null $layout
         *
         * @return void
         */
        public function __construct(?\Zend_Layout $layout = null)
        {
        }
        /**
         * @return Zend_Layout
         */
        public function getLayout()
        {
        }
        /**
         * @param Zend_Layout $layout
         *
         * @return Zend_Layout_Controller_Plugin_Layout
         */
        public function setLayout(\Zend_Layout $layout)
        {
        }
        /**
         * @param Zend_Layout_Controller_Action_Helper_Layout $layoutActionHelper
         *
         * @return Zend_Layout_Controller_Plugin_Layout
         */
        public function setLayoutActionHelper(\Zend_Layout_Controller_Action_Helper_Layout $layoutActionHelper)
        {
        }
        /**
         * @return Zend_Layout_Controller_Action_Helper_Layout
         */
        public function getLayoutActionHelper()
        {
        }
        /**
         * @param Zend_Controller_Request_Abstract $request
         *
         * @return void
         */
        public function postDispatch(\Zend_Controller_Request_Abstract $request)
        {
        }
    }
    class Zend_Layout_Exception extends \Zend_Exception
    {
    }
    class Zend_Ldap
    {
        public const SEARCH_SCOPE_SUB = 1;
        public const SEARCH_SCOPE_ONE = 2;
        public const SEARCH_SCOPE_BASE = 3;
        public const ACCTNAME_FORM_DN = 1;
        public const ACCTNAME_FORM_USERNAME = 2;
        public const ACCTNAME_FORM_BACKSLASH = 3;
        public const ACCTNAME_FORM_PRINCIPAL = 4;
        /**
         * @var string
         */
        public $_connectString;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var resource
         */
        public $_resource;
        /**
         * @var bool|null|string
         */
        public $_boundUser;
        /**
         * @var Zend_Ldap_Node
         */
        public $_rootDse;
        /**
         * @var Zend_Ldap_Node
         */
        public $_schema;
        /**
         * @param string $str
         *
         * @return string
         */
        public static function filterEscape($str)
        {
        }
        /**
         * @param string $dn
         * @param array<array-key, mixed>|null $keys
         * @param array<array-key, mixed>|null $vals
         *
         * @return bool
         */
        public static function explodeDn($dn, ?array &$keys = null, ?array &$vals = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Ldap_Exception
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @return resource
         */
        public function getResource()
        {
        }
        /**
         * @return int
         */
        public function getLastErrorCode()
        {
        }
        /**
         * @param int|null $errorCode
         * @param array<array-key, mixed>|null $errorMessages
         *
         * @return string
         */
        public function getLastError(&$errorCode = null, ?array &$errorMessages = null)
        {
        }
        /**
         * @return false|null|string
         */
        public function getBoundUser()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function setOptions($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @return string
         */
        public function _getHost()
        {
        }
        /**
         * @return int
         */
        public function _getPort()
        {
        }
        /**
         * @return bool
         */
        public function _getUseSsl()
        {
        }
        /**
         * @return string
         */
        public function _getUsername()
        {
        }
        /**
         * @return string
         */
        public function _getPassword()
        {
        }
        /**
         * @return bool
         */
        public function _getBindRequiresDn()
        {
        }
        /**
         * @return string
         */
        public function getBaseDn()
        {
        }
        /**
         * @return int
         */
        public function _getAccountCanonicalForm()
        {
        }
        /**
         * @return string
         */
        public function _getAccountDomainName()
        {
        }
        /**
         * @return string
         */
        public function _getAccountDomainNameShort()
        {
        }
        /**
         * @return string
         */
        public function _getAccountFilterFormat()
        {
        }
        /**
         * @return bool
         */
        public function _getAllowEmptyPassword()
        {
        }
        /**
         * @return bool
         */
        public function _getUseStartTls()
        {
        }
        /**
         * @return bool
         */
        public function _getOptReferrals()
        {
        }
        /**
         * @return bool
         */
        public function _getTryUsernameSplit()
        {
        }
        /**
         * @return string
         */
        public function _getAccountFilter($acctname)
        {
        }
        /**
         * @param string $name
         * @param string $dname
         * @param string $aname
         *
         * @return void
         */
        public function _splitName($name, &$dname, &$aname)
        {
        }
        /**
         * @param string $acctname
         *
         * @return string
         *
         * @throws Zend_Ldap_Exception
         */
        public function _getAccountDn($acctname)
        {
        }
        /**
         * @param string $dname
         *
         * @return bool
         */
        public function _isPossibleAuthority($dname)
        {
        }
        /**
         * @param string $acctname
         *
         * @return string
         *
         * @throws Zend_Ldap_Exception
         */
        public function getCanonicalAccountName($acctname, $form = 0)
        {
        }
        /**
         * @param array<array-key, mixed>|null $attrs
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Ldap_Exception
         */
        public function _getAccount($acctname, ?array $attrs = null)
        {
        }
        /**
         * @return Zend_Ldap
         */
        public function disconnect()
        {
        }
        /**
         * @param null|string $host
         * @param int|null $port
         * @param bool|null $useSsl
         * @param bool|null $useStartTls
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function connect($host = null, $port = null, $useSsl = null, $useStartTls = null)
        {
        }
        /**
         * @param null|string $username
         * @param null|string $password
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function bind($username = null, $password = null)
        {
        }
        /**
         * @param Zend_Ldap_Filter_Abstract|array<array-key, mixed>|string $filter
         * @param Zend_Ldap_Dn|null|string $basedn
         * @param int $scope
         * @param array<array-key, mixed> $attributes
         * @param null|string $sort
         * @param null|string $collectionClass
         * @param int $sizelimit
         * @param int $timelimit
         *
         * @return Zend_Ldap_Collection
         *
         * @throws Zend_Ldap_Exception
         */
        public function search($filter, $basedn = null, $scope, array $attributes = array(), $sort = null, $collectionClass = null, $sizelimit = 0, $timelimit = 0)
        {
        }
        /**
         * @param Zend_Ldap_Collection_Iterator_Default $iterator
         * @param null|string $collectionClass
         *
         * @return Zend_Ldap_Collection
         *
         * @throws Zend_Ldap_Exception
         */
        public function _createCollection(\Zend_Ldap_Collection_Iterator_Default $iterator, $collectionClass)
        {
        }
        /**
         * @param Zend_Ldap_Filter_Abstract|string $filter
         * @param Zend_Ldap_Dn|null|string $basedn
         * @param int $scope
         *
         * @return int
         *
         * @throws Zend_Ldap_Exception
         */
        public function count($filter, $basedn = null, $scope)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $dn
         *
         * @return int
         *
         * @throws Zend_Ldap_Exception
         */
        public function countChildren($dn)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $dn
         *
         * @return bool
         *
         * @throws Zend_Ldap_Exception
         */
        public function exists($dn)
        {
        }
        /**
         * @param Zend_Ldap_Filter_Abstract|array<array-key, mixed>|string $filter
         * @param Zend_Ldap_Dn|null|string $basedn
         * @param int $scope
         * @param array<array-key, mixed> $attributes
         * @param null|string $sort
         * @param bool $reverseSort
         * @param int $sizelimit
         * @param int $timelimit
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Ldap_Exception
         */
        public function searchEntries($filter, $basedn = null, $scope, array $attributes = array(), $sort = null, $reverseSort = false, $sizelimit = 0, $timelimit = 0)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $dn
         * @param array<array-key, mixed> $attributes
         * @param bool $throwOnNotFound
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Ldap_Exception
         */
        public function getEntry($dn, array $attributes = array(), $throwOnNotFound = false)
        {
        }
        /**
         * @param array<array-key, mixed> $entry
         *
         * @return void
         *
         * @throws InvalidArgumentException
         */
        public static function prepareLdapEntryArray(array &$entry)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $dn
         * @param array<array-key, mixed> $entry
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function add($dn, array $entry)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $dn
         * @param array<array-key, mixed> $entry
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function update($dn, array $entry)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $dn
         * @param array<array-key, mixed> $entry
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function save($dn, array $entry)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $dn
         * @param bool $recursively
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function delete($dn, $recursively = false)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $parentDn
         *
         * @return array<array-key, mixed>
         */
        public function _getChildrenDns($parentDn)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $from
         * @param Zend_Ldap_Dn|string $to
         * @param bool $recursively
         * @param bool $alwaysEmulate
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function moveToSubtree($from, $to, $recursively = false, $alwaysEmulate = false)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $from
         * @param Zend_Ldap_Dn|string $to
         * @param bool $recursively
         * @param bool $alwaysEmulate
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function move($from, $to, $recursively = false, $alwaysEmulate = false)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $from
         * @param Zend_Ldap_Dn|string $to
         * @param bool $recursively
         * @param bool $alwaysEmulate
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function rename($from, $to, $recursively = false, $alwaysEmulate = false)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $from
         * @param Zend_Ldap_Dn|string $to
         * @param bool $recursively
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function copyToSubtree($from, $to, $recursively = false)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $from
         * @param Zend_Ldap_Dn|string $to
         * @param bool $recursively
         *
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function copy($from, $to, $recursively = false)
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $dn
         *
         * @return Zend_Ldap_Node|null
         *
         * @throws Zend_Ldap_Exception
         */
        public function getNode($dn)
        {
        }
        /**
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function getBaseNode()
        {
        }
        /**
         * @return Zend_Ldap_Node_RootDse
         *
         * @throws Zend_Ldap_Exception
         */
        public function getRootDse()
        {
        }
        /**
         * @return Zend_Ldap_Node_Schema
         *
         * @throws Zend_Ldap_Exception
         */
        public function getSchema()
        {
        }
    }
    class Zend_Ldap_Attribute
    {
        public const PASSWORD_HASH_MD5 = 'md5';
        public const PASSWORD_HASH_SMD5 = 'smd5';
        public const PASSWORD_HASH_SHA = 'sha';
        public const PASSWORD_HASH_SSHA = 'ssha';
        public const PASSWORD_UNICODEPWD = 'unicodePwd';
        /**
         * @param array<array-key, mixed> $data
         * @param string $attribName
         * @param Traversable|array<array-key, mixed>|scalar $value
         * @param bool $append
         *
         * @return void
         */
        public static function setAttribute(array &$data, $attribName, $value, $append = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $attribName
         * @param int|null $index
         *
         * @return array<array-key, mixed>|mixed
         */
        public static function getAttribute(array $data, $attribName, $index = null)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $attribName
         * @param array<array-key, mixed>|mixed $value
         *
         * @return bool
         */
        public static function attributeHasValue(array &$data, $attribName, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $attribName
         *
         * @return void
         */
        public static function removeDuplicatesFromAttribute(array &$data, $attribName)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $attribName
         * @param array<array-key, mixed>|mixed $value
         *
         * @return void
         */
        public static function removeFromAttribute(array &$data, $attribName, $value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return null|string
         */
        public static function _valueToLdap($value)
        {
        }
        /**
         * @param string $value
         *
         * @return mixed
         */
        public static function _valueFromLdap($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return null|string
         */
        public static function convertToLdapValue($value)
        {
        }
        /**
         * @param string $value
         *
         * @return mixed
         */
        public static function convertFromLdapValue($value)
        {
        }
        /**
         * @param int $value
         * @param bool $utc
         *
         * @return null|string
         */
        public static function convertToLdapDateTimeValue($value, $utc = false)
        {
        }
        /**
         * @param string $value
         *
         * @return int|null
         */
        public static function convertFromLdapDateTimeValue($value)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $password
         * @param string $hashType
         * @param null|string $attribName
         *
         * @return null
         */
        public static function setPassword(array &$data, $password, $hashType, $attribName = null)
        {
        }
        /**
         * @param string $password
         * @param string $hashType
         *
         * @return string
         */
        public static function createPassword($password, $hashType)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $attribName
         * @param Traversable|array<array-key, mixed>|int $value
         * @param bool $utc
         * @param bool $append
         *
         * @return null
         */
        public static function setDateTimeAttribute(array &$data, $attribName, $value, $utc = false, $append = false)
        {
        }
        /**
         * @param int $value
         * @param bool $utc
         *
         * @return null|string
         */
        public static function _valueToLdapDateTime($value, $utc)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $attribName
         * @param int|null $index
         *
         * @return array<array-key, mixed>|int
         */
        public static function getDateTimeAttribute(array $data, $attribName, $index = null)
        {
        }
        /**
         * @param DateTime|string $value
         *
         * @return int|null
         */
        public static function _valueFromLdapDateTime($value)
        {
        }
    }
    class Zend_Ldap_Collection implements \Iterator, \Countable
    {
        /**
         * @var Zend_Ldap_Collection_Iterator_Default
         */
        public $_iterator;
        /**
         * @var int
         */
        public $_current;
        /**
         * @var array<array-key, mixed>
         */
        public $_cache;
        /**
         * @param Zend_Ldap_Collection_Iterator_Default $iterator
         */
        public function __construct(\Zend_Ldap_Collection_Iterator_Default $iterator)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @return bool
         */
        public function close()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFirst()
        {
        }
        /**
         * @return Zend_Ldap_Collection_Iterator_Default
         */
        public function getInnerIterator()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         *
         * @throws Zend_Ldap_Exception
         */
        public function current()
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return array<array-key, mixed>
         */
        public function _createEntry(array $data)
        {
        }
        /**
         * @return null|string
         */
        public function dn()
        {
        }
        /**
         * @return int|null
         */
        public function key()
        {
        }
        /**
         * @throws Zend_Ldap_Exception
         */
        public function next()
        {
        }
        /**
         * @throws Zend_Ldap_Exception
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    class Zend_Ldap_Collection_Iterator_Default implements \Iterator, \Countable
    {
        public const ATTRIBUTE_TO_LOWER = 1;
        public const ATTRIBUTE_TO_UPPER = 2;
        public const ATTRIBUTE_NATIVE = 3;
        /**
         * @var Zend_Ldap
         */
        public $_ldap;
        /**
         * @var resource
         */
        public $_resultId;
        /**
         * @var resource
         */
        public $_current;
        /**
         * @var int
         */
        public $_itemCount;
        /**
         * @var callback|int
         */
        public $_attributeNameTreatment;
        /**
         * @param Zend_Ldap $ldap
         * @param resource $resultId
         *
         * @return void
         */
        public function __construct(\Zend_Ldap $ldap, $resultId)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @return bool
         */
        public function close()
        {
        }
        /**
         * @return Zend_Ldap
         */
        public function getLdap()
        {
        }
        /**
         * @param callback|int $attributeNameTreatment
         *
         * @return Zend_Ldap_Collection_Iterator_Default
         */
        public function setAttributeNameTreatment($attributeNameTreatment)
        {
        }
        /**
         * @return callback|int
         */
        public function getAttributeNameTreatment()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return array<array-key, mixed>|null
         *
         * @throws Zend_Ldap_Exception
         */
        public function current()
        {
        }
        /**
         * @return null|string
         */
        public function key()
        {
        }
        /**
         * @throws Zend_Ldap_Exception
         */
        public function next()
        {
        }
        /**
         * @throws Zend_Ldap_Exception
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    class Zend_Ldap_Converter
    {
        public const STANDARD = 0;
        public const BOOLEAN = 1;
        public const GENERALIZED_TIME = 2;
        /**
         * @param string $string
         *
         * @return string
         */
        public static function ascToHex32($string)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function hex32ToAsc($string)
        {
        }
        /**
         * @param array<array-key, mixed> $matches
         *
         * @return string
         */
        public static function _charHex32ToAsc(array $matches)
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         *
         * @throws Zend_Ldap_Converter_Exception
         */
        public static function toLdap($value, $type)
        {
        }
        /**
         * @param DateTimt|Zend_Date|int|string $date
         * @param bool $asUtc
         *
         * @return string
         *
         * @throws InvalidArgumentException
         */
        public static function toLdapDateTime($date, $asUtc = true)
        {
        }
        /**
         * @param bool|int|string $value
         *
         * @return string
         */
        public static function toLdapBoolean($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         */
        public static function toLdapSerialize($value)
        {
        }
        /**
         * @param string $value
         * @param bool $dateTimeAsUtc
         *
         * @return mixed
         *
         * @throws Zend_Ldap_Converter_Exception
         */
        public static function fromLdap($value, $type, $dateTimeAsUtc = true)
        {
        }
        /**
         * @param string $date
         * @param bool $asUtc
         *
         * @return DateTime
         *
         * @throws InvalidArgumentException
         */
        public static function fromLdapDateTime($date, $asUtc = true)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws InvalidArgumentException
         */
        public static function fromLdapBoolean($value)
        {
        }
        /**
         * @param string $value
         *
         * @return mixed
         *
         * @throws UnexpectedValueException
         */
        public static function fromLdapUnserialize($value)
        {
        }
    }
    class Zend_Ldap_Converter_Exception extends \Zend_Exception
    {
    }
    class Zend_Ldap_Dn implements \ArrayAccess
    {
        public const ATTR_CASEFOLD_NONE = 'none';
        public const ATTR_CASEFOLD_UPPER = 'upper';
        public const ATTR_CASEFOLD_LOWER = 'lower';
        /**
         * @var string
         */
        public static $_defaultCaseFold;
        /**
         * @var string
         */
        public $_caseFold;
        /**
         * @var array<array-key, mixed>
         */
        public $_dn;
        /**
         * @param array<array-key, mixed>|string $dn
         * @param null|string $caseFold
         *
         * @return Zend_Ldap_Dn
         *
         * @throws Zend_Ldap_Exception
         */
        public static function factory($dn, $caseFold = null)
        {
        }
        /**
         * @param string $dn
         * @param null|string $caseFold
         *
         * @return Zend_Ldap_Dn
         *
         * @throws Zend_Ldap_Exception
         */
        public static function fromString($dn, $caseFold = null)
        {
        }
        /**
         * @param array<array-key, mixed> $dn
         * @param null|string $caseFold
         *
         * @return Zend_Ldap_Dn
         *
         * @throws Zend_Ldap_Exception
         */
        public static function fromArray(array $dn, $caseFold = null)
        {
        }
        /**
         * @param array<array-key, mixed> $dn
         * @param null|string $caseFold
         */
        public function __construct(array $dn, $caseFold)
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Ldap_Exception
         */
        public function getRdn($caseFold = null)
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return string
         *
         * @throws Zend_Ldap_Exception
         */
        public function getRdnString($caseFold = null)
        {
        }
        /**
         * @param int $levelUp
         *
         * @return Zend_Ldap_Dn
         */
        public function getParentDn($levelUp = 1)
        {
        }
        /**
         * @param int $index
         * @param int $length
         * @param null|string $caseFold
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Ldap_Exception
         */
        public function get($index, $length = 1, $caseFold = null)
        {
        }
        /**
         * @param int $index
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Ldap_Dn
         *
         * @throws Zend_Ldap_Exception
         */
        public function set($index, array $value)
        {
        }
        /**
         * @param int $index
         * @param int $length
         *
         * @return Zend_Ldap_Dn
         *
         * @throws Zend_Ldap_Exception
         */
        public function remove($index, $length = 1)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Ldap_Dn
         */
        public function append(array $value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Ldap_Dn
         */
        public function prepend(array $value)
        {
        }
        /**
         * @param int $index
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Ldap_Dn
         *
         * @throws Zend_Ldap_Exception
         */
        public function insert($index, array $value)
        {
        }
        /**
         * @param mixed $index
         *
         * @return bool
         *
         * @throws Zend_Ldap_Exception
         */
        public function _assertIndex($index)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return bool
         *
         * @throws Zend_Ldap_Exception
         */
        public static function _assertRdn(array $value)
        {
        }
        /**
         * @param null|string $caseFold
         */
        public function setCaseFold($caseFold)
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return string
         *
         * @throws Zend_Ldap_Exception
         */
        public function toString($caseFold = null)
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return array<array-key, mixed>
         */
        public function toArray($caseFold = null)
        {
        }
        /**
         * @param array<array-key, mixed> $part
         * @param string $caseFold
         *
         * @return array<array-key, mixed>
         */
        public static function _caseFoldRdn(array $part, $caseFold)
        {
        }
        /**
         * @param array<array-key, mixed> $dn
         * @param string $caseFold
         *
         * @return array<array-key, mixed>
         */
        public static function _caseFoldDn(array $dn, $caseFold)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return array<array-key, mixed>
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param array<array-key, mixed> $value
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * @param string $caseFold
         */
        public static function setDefaultCaseFold($caseFold)
        {
        }
        /**
         * @param string $caseFold
         *
         * @return string
         */
        public static function _sanitizeCaseFold($caseFold, $default)
        {
        }
        /**
         * @param array<array-key, mixed>|string $values
         *
         * @return array<array-key, mixed>
         */
        public static function escapeValue($values = array())
        {
        }
        /**
         * @param array<array-key, mixed>|string $values
         *
         * @return array<array-key, mixed>
         */
        public static function unescapeValue($values = array())
        {
        }
        /**
         * @param string $dn
         * @param array<array-key, mixed>|null $keys
         * @param array<array-key, mixed>|null $vals
         * @param string $caseFold
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Ldap_Exception
         */
        public static function explodeDn($dn, ?array &$keys = null, ?array &$vals = null, $caseFold)
        {
        }
        /**
         * @param string $dn
         * @param array<array-key, mixed>|null $keys
         * @param array<array-key, mixed>|null $vals
         * @param string $caseFold
         *
         * @return bool
         */
        public static function checkDn($dn, ?array &$keys = null, ?array &$vals = null, $caseFold)
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return string
         *
         * @throws Zend_Ldap_Exception
         */
        public static function implodeRdn(array $part, $caseFold = null)
        {
        }
        /**
         * @param array<array-key, mixed> $dnArray
         * @param null|string $caseFold
         * @param string $separator
         *
         * @return string
         *
         * @throws Zend_Ldap_Exception
         */
        public static function implodeDn(array $dnArray, $caseFold = null, $separator = ',')
        {
        }
        /**
         * @param Zend_Ldap_Dn|string $childDn
         * @param Zend_Ldap_Dn|string $parentDn
         *
         * @return bool
         */
        public static function isChildOf($childDn, $parentDn)
        {
        }
    }
    class Zend_Ldap_Exception extends \Zend_Exception
    {
        public const LDAP_SUCCESS = 0;
        public const LDAP_OPERATIONS_ERROR = 1;
        public const LDAP_PROTOCOL_ERROR = 2;
        public const LDAP_TIMELIMIT_EXCEEDED = 3;
        public const LDAP_SIZELIMIT_EXCEEDED = 4;
        public const LDAP_COMPARE_FALSE = 5;
        public const LDAP_COMPARE_TRUE = 6;
        public const LDAP_AUTH_METHOD_NOT_SUPPORTED = 7;
        public const LDAP_STRONG_AUTH_REQUIRED = 8;
        public const LDAP_PARTIAL_RESULTS = 9;
        public const LDAP_REFERRAL = 10;
        public const LDAP_ADMINLIMIT_EXCEEDED = 11;
        public const LDAP_UNAVAILABLE_CRITICAL_EXTENSION = 12;
        public const LDAP_CONFIDENTIALITY_REQUIRED = 13;
        public const LDAP_SASL_BIND_IN_PROGRESS = 14;
        public const LDAP_NO_SUCH_ATTRIBUTE = 16;
        public const LDAP_UNDEFINED_TYPE = 17;
        public const LDAP_INAPPROPRIATE_MATCHING = 18;
        public const LDAP_CONSTRAINT_VIOLATION = 19;
        public const LDAP_TYPE_OR_VALUE_EXISTS = 20;
        public const LDAP_INVALID_SYNTAX = 21;
        public const LDAP_NO_SUCH_OBJECT = 32;
        public const LDAP_ALIAS_PROBLEM = 33;
        public const LDAP_INVALID_DN_SYNTAX = 34;
        public const LDAP_IS_LEAF = 35;
        public const LDAP_ALIAS_DEREF_PROBLEM = 36;
        public const LDAP_PROXY_AUTHZ_FAILURE = 47;
        public const LDAP_INAPPROPRIATE_AUTH = 48;
        public const LDAP_INVALID_CREDENTIALS = 49;
        public const LDAP_INSUFFICIENT_ACCESS = 50;
        public const LDAP_BUSY = 51;
        public const LDAP_UNAVAILABLE = 52;
        public const LDAP_UNWILLING_TO_PERFORM = 53;
        public const LDAP_LOOP_DETECT = 54;
        public const LDAP_NAMING_VIOLATION = 64;
        public const LDAP_OBJECT_CLASS_VIOLATION = 65;
        public const LDAP_NOT_ALLOWED_ON_NONLEAF = 66;
        public const LDAP_NOT_ALLOWED_ON_RDN = 67;
        public const LDAP_ALREADY_EXISTS = 68;
        public const LDAP_NO_OBJECT_CLASS_MODS = 69;
        public const LDAP_RESULTS_TOO_LARGE = 70;
        public const LDAP_AFFECTS_MULTIPLE_DSAS = 71;
        public const LDAP_OTHER = 80;
        public const LDAP_SERVER_DOWN = 81;
        public const LDAP_LOCAL_ERROR = 82;
        public const LDAP_ENCODING_ERROR = 83;
        public const LDAP_DECODING_ERROR = 84;
        public const LDAP_TIMEOUT = 85;
        public const LDAP_AUTH_UNKNOWN = 86;
        public const LDAP_FILTER_ERROR = 87;
        public const LDAP_USER_CANCELLED = 88;
        public const LDAP_PARAM_ERROR = 89;
        public const LDAP_NO_MEMORY = 90;
        public const LDAP_CONNECT_ERROR = 91;
        public const LDAP_NOT_SUPPORTED = 92;
        public const LDAP_CONTROL_NOT_FOUND = 93;
        public const LDAP_NO_RESULTS_RETURNED = 94;
        public const LDAP_MORE_RESULTS_TO_RETURN = 95;
        public const LDAP_CLIENT_LOOP = 96;
        public const LDAP_REFERRAL_LIMIT_EXCEEDED = 97;
        public const LDAP_CUP_RESOURCES_EXHAUSTED = 113;
        public const LDAP_CUP_SECURITY_VIOLATION = 114;
        public const LDAP_CUP_INVALID_DATA = 115;
        public const LDAP_CUP_UNSUPPORTED_SCHEME = 116;
        public const LDAP_CUP_RELOAD_REQUIRED = 117;
        public const LDAP_CANCELLED = 118;
        public const LDAP_NO_SUCH_OPERATION = 119;
        public const LDAP_TOO_LATE = 120;
        public const LDAP_CANNOT_CANCEL = 121;
        public const LDAP_ASSERTION_FAILED = 122;
        public const LDAP_SYNC_REFRESH_REQUIRED = 4096;
        public const LDAP_X_SYNC_REFRESH_REQUIRED = 16640;
        public const LDAP_X_NO_OPERATION = 16654;
        public const LDAP_X_ASSERTION_FAILED = 16655;
        public const LDAP_X_NO_REFERRALS_FOUND = 16656;
        public const LDAP_X_CANNOT_CHAIN = 16657;
        public const LDAP_X_DOMAIN_MISMATCH = 28673;
        public const LDAP_X_EXTENSION_NOT_LOADED = 28674;
        /**
         * @param Zend_Ldap|null $ldap
         * @param null|string $str
         * @param int $code
         */
        public function __construct(?\Zend_Ldap $ldap = null, $str = null, $code = 0)
        {
        }
        /**
         * @param Zend_Ldap|null $ldap
         *
         * @return int
         */
        public static function getLdapCode(?\Zend_Ldap $ldap = null)
        {
        }
        /**
         * @return int
         */
        public function getErrorCode()
        {
        }
    }
    class Zend_Ldap_Filter extends \Zend_Ldap_Filter_String
    {
        public const TYPE_EQUALS = '=';
        public const TYPE_GREATER = '>';
        public const TYPE_GREATEROREQUAL = '>=';
        public const TYPE_LESS = '<';
        public const TYPE_LESSOREQUAL = '<=';
        public const TYPE_APPROX = '~=';
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function equals($attr, $value)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function begins($attr, $value)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function ends($attr, $value)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function contains($attr, $value)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function greater($attr, $value)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function greaterOrEqual($attr, $value)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function less($attr, $value)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function lessOrEqual($attr, $value)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         *
         * @return Zend_Ldap_Filter
         */
        public static function approx($attr, $value)
        {
        }
        /**
         * @param string $attr
         *
         * @return Zend_Ldap_Filter
         */
        public static function any($attr)
        {
        }
        /**
         * @param string $filter
         *
         * @return Zend_Ldap_Filter_String
         */
        public static function string($filter)
        {
        }
        /**
         * @param string $mask
         * @param string $value
         *
         * @return Zend_Ldap_Filter_Mask
         */
        public static function mask($mask, $value)
        {
        }
        /**
         * @return Zend_Ldap_Filter_And
         */
        public static function andFilter($filter)
        {
        }
        /**
         * @return Zend_Ldap_Filter_Or
         */
        public static function orFilter($filter)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         * @param string $filtertype
         * @param null|string $prepend
         * @param null|string $append
         *
         * @return string
         */
        public static function _createFilterString($attr, $value, $filtertype, $prepend = null, $append = null)
        {
        }
        /**
         * @param string $attr
         * @param string $value
         * @param string $filtertype
         * @param null|string $prepend
         * @param null|string $append
         */
        public function __construct($attr, $value, $filtertype, $prepend = null, $append = null)
        {
        }
    }
    class Zend_Ldap_Filter_Abstract
    {
        /**
         * @return string
         */
        public abstract function toString();
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return Zend_Ldap_Filter_Abstract
         */
        public function negate()
        {
        }
        /**
         * @return Zend_Ldap_Filter_And
         */
        public function addAnd($filter)
        {
        }
        /**
         * @return Zend_Ldap_Filter_Or
         */
        public function addOr($filter)
        {
        }
        /**
         * @param array<array-key, mixed>|string $values
         *
         * @return array<array-key, mixed>
         */
        public static function escapeValue($values = array())
        {
        }
        /**
         * @param array<array-key, mixed>|string $values
         *
         * @return array<array-key, mixed>
         */
        public static function unescapeValue($values = array())
        {
        }
    }
    class Zend_Ldap_Filter_And extends \Zend_Ldap_Filter_Logical
    {
        public const TYPE_AND = '&';
        public const TYPE_OR = '|';
        /**
         * @param array<array-key, mixed> $subfilters
         */
        public function __construct(array $subfilters)
        {
        }
    }
    class Zend_Ldap_Filter_Exception extends \Zend_Exception
    {
    }
    class Zend_Ldap_Filter_Logical extends \Zend_Ldap_Filter_Abstract
    {
        public const TYPE_AND = '&';
        public const TYPE_OR = '|';
        /**
         * @var array<array-key, mixed>
         */
        public $_subfilters;
        /**
         * @var string
         */
        public $_symbol;
        /**
         * @param array<array-key, mixed> $subfilters
         * @param string $symbol
         */
        public function __construct(array $subfilters, $symbol)
        {
        }
        /**
         * @param Zend_Ldap_Filter_Abstract $filter
         *
         * @return Zend_Ldap_Filter_Logical
         */
        public function addFilter(\Zend_Ldap_Filter_Abstract $filter)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Ldap_Filter_Mask extends \Zend_Ldap_Filter_String
    {
        /**
         * @param string $mask
         */
        public function __construct($mask, $value)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Ldap_Filter_Not extends \Zend_Ldap_Filter_Abstract
    {
        /**
         * @var Zend_Ldap_Filter_Abstract
         */
        public $_filter;
        /**
         * @param Zend_Ldap_Filter_Abstract $filter
         */
        public function __construct(\Zend_Ldap_Filter_Abstract $filter)
        {
        }
        /**
         * @return Zend_Ldap_Filter_Abstract
         */
        public function negate()
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Ldap_Filter_Or extends \Zend_Ldap_Filter_Logical
    {
        public const TYPE_AND = '&';
        public const TYPE_OR = '|';
        /**
         * @param array<array-key, mixed> $subfilters
         */
        public function __construct(array $subfilters)
        {
        }
    }
    class Zend_Ldap_Filter_String extends \Zend_Ldap_Filter_Abstract
    {
        /**
         * @var string
         */
        public $_filter;
        /**
         * @param string $filter
         */
        public function __construct($filter)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Ldap_Ldif_Encoder
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var bool
         */
        public $_versionWritten;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $string
         *
         * @return array<array-key, mixed>
         */
        public static function decode($string)
        {
        }
        /**
         * @param string $string
         *
         * @return array<array-key, mixed>
         */
        public function _decode($string)
        {
        }
        /**
         * @param array<array-key, mixed> $attribute
         * @param array<array-key, mixed> $entry
         */
        public function _pushAttribute(array $attribute, array &$entry)
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public static function encode($value, array $options = array())
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         */
        public function _encode($value)
        {
        }
        /**
         * @param string $string
         * @param boolen|null $base64
         *
         * @return string
         */
        public function _encodeString($string, &$base64 = null)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|string $value
         *
         * @return string
         */
        public function _encodeAttribute($name, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $attributes
         *
         * @return string
         */
        public function _encodeAttributes(array $attributes)
        {
        }
    }
    class Zend_Ldap_Node extends \Zend_Ldap_Node_Abstract
    {
        /**
         * @var Zend_Ldap_Dn
         */
        public $_newDn;
        /**
         * @var array<array-key, mixed>
         */
        public $_originalData;
        /**
         * @var bool
         */
        public $_new;
        /**
         * @var bool
         */
        public $_delete;
        /**
         * @var Zend_Ldap
         */
        public $_ldap;
        /**
         * @var array<array-key, mixed>
         */
        public $_children;
        /**
         * @var bool
         */
        public $_iteratorRewind;
        /**
         * @param Zend_Ldap_Dn $dn
         * @param array<array-key, mixed> $data
         * @param bool $fromDataSource
         * @param Zend_Ldap|null $ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function __construct(\Zend_Ldap_Dn $dn, array $data, $fromDataSource, ?\Zend_Ldap $ldap = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return null
         */
        public function __wakeup()
        {
        }
        /**
         * @return Zend_Ldap
         *
         * @throws Zend_Ldap_Exception
         */
        public function getLdap()
        {
        }
        /**
         * @param Zend_Ldap $ldap
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function attachLdap(\Zend_Ldap $ldap)
        {
        }
        /**
         * @return Zend_Ldap_Node
         */
        public function detachLdap()
        {
        }
        /**
         * @return bool
         */
        public function isAttached()
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $fromDataSource
         *
         * @throws Zend_Ldap_Exception
         */
        public function _loadData(array $data, $fromDataSource)
        {
        }
        /**
         * @param Zend_Ldap_Dn|array<array-key, mixed>|string $dn
         * @param array<array-key, mixed> $objectClass
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public static function create($dn, array $objectClass = array())
        {
        }
        /**
         * @param Zend_Ldap_Dn|array<array-key, mixed>|string $dn
         * @param Zend_Ldap $ldap
         *
         * @return Zend_Ldap_Node|null
         *
         * @throws Zend_Ldap_Exception
         */
        public static function fromLdap($dn, \Zend_Ldap $ldap)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $fromDataSource
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public static function fromArray(array $data, $fromDataSource = false)
        {
        }
        /**
         * @param bool $overwrite
         *
         * @return void
         */
        public function _ensureRdnAttributeValues($overwrite = false)
        {
        }
        /**
         * @param bool $new
         */
        public function _markAsNew($new)
        {
        }
        /**
         * @return bool
         */
        public function isNew()
        {
        }
        /**
         * @param bool $delete
         */
        public function _markAsToBeDeleted($delete)
        {
        }
        /**
         * @return bool
         */
        public function willBeDeleted()
        {
        }
        /**
         * @return Zend_Ldap_Node
         */
        public function delete()
        {
        }
        /**
         * @return bool
         */
        public function willBeMoved()
        {
        }
        /**
         * @param Zend_Ldap|null $ldap
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function update(?\Zend_Ldap $ldap = null)
        {
        }
        /**
         * @return Zend_Ldap_Dn
         */
        public function _getDn()
        {
        }
        /**
         * @return Zend_Ldap_Dn
         */
        public function getCurrentDn()
        {
        }
        /**
         * @param Zend_Ldap_Dn|array<array-key, mixed>|string $newDn
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function setDn($newDn)
        {
        }
        /**
         * @param Zend_Ldap_Dn|array<array-key, mixed>|string $newDn
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function move($newDn)
        {
        }
        /**
         * @param Zend_Ldap_Dn|array<array-key, mixed>|string $newDn
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function rename($newDn)
        {
        }
        /**
         * @param array<array-key, mixed>|string $value
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function setObjectClass($value)
        {
        }
        /**
         * @param array<array-key, mixed>|string $value
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function appendObjectClass($value)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public function toLdif(array $options = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getChangedData()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getChanges()
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function setAttribute($name, $value)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function appendToAttribute($name, $value)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @param bool $append
         *
         * @throws Zend_Ldap_Exception
         */
        public function _setAttribute($name, $value, $append)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|int $value
         * @param bool $utc
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function setDateTimeAttribute($name, $value, $utc = false)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|int $value
         * @param bool $utc
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function appendToDateTimeAttribute($name, $value, $utc = false)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed>|int $value
         * @param bool $utc
         * @param bool $append
         *
         * @throws Zend_Ldap_Exception
         */
        public function _setDateTimeAttribute($name, $value, $utc, $append)
        {
        }
        /**
         * @param string $password
         * @param string $hashType
         * @param string $attribName
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function setPasswordAttribute($password, $hashType, $attribName = 'userPassword')
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function deleteAttribute($name)
        {
        }
        /**
         * @param string $attribName
         *
         * @return void
         */
        public function removeDuplicatesFromAttribute($attribName)
        {
        }
        /**
         * @param string $attribName
         * @param array<array-key, mixed>|mixed $value
         *
         * @return void
         */
        public function removeFromAttribute($attribName, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         *
         * @throws Zend_Ldap_Exception
         */
        public function _assertChangeableAttribute($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return null
         *
         * @throws Zend_Ldap_Exception
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return null
         *
         * @throws Zend_Ldap_Exception
         */
        public function __unset($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return null
         *
         * @throws Zend_Ldap_Exception
         */
        public function offsetSet($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return null
         *
         * @throws Zend_Ldap_Exception
         */
        public function offsetUnset($name)
        {
        }
        /**
         * @param Zend_Ldap|null $ldap
         *
         * @return bool
         *
         * @throws Zend_Ldap_Exception
         */
        public function exists(?\Zend_Ldap $ldap = null)
        {
        }
        /**
         * @param Zend_Ldap|null $ldap
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function reload(?\Zend_Ldap $ldap = null)
        {
        }
        /**
         * @param Zend_Ldap_Filter_Abstract|string $filter
         * @param int $scope
         * @param null|string $sort
         *
         * @return Zend_Ldap_Node_Collection
         *
         * @throws Zend_Ldap_Exception
         */
        public function searchSubtree($filter, $scope, $sort = null)
        {
        }
        /**
         * @param Zend_Ldap_Filter_Abstract|string $filter
         * @param int $scope
         *
         * @return int
         *
         * @throws Zend_Ldap_Exception
         */
        public function countSubtree($filter, $scope)
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Ldap_Exception
         */
        public function countChildren()
        {
        }
        /**
         * @param Zend_Ldap_Filter_Abstract|string $filter
         * @param null|string $sort
         *
         * @return Zend_Ldap_Node_Collection
         *
         * @throws Zend_Ldap_Exception
         */
        public function searchChildren($filter, $sort = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Ldap_Exception
         */
        public function hasChildren()
        {
        }
        /**
         * @return Zend_Ldap_Node_ChildrenIterator
         *
         * @throws Zend_Ldap_Exception
         */
        public function getChildren()
        {
        }
        /**
         * @param Zend_Ldap|null $ldap
         *
         * @return Zend_Ldap_Node
         *
         * @throws Zend_Ldap_Exception
         */
        public function getParent(?\Zend_Ldap $ldap = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function current()
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
        public function next()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return void
         */
        public function _preDelete()
        {
        }
        /**
         * @return void
         */
        public function _postDelete()
        {
        }
        /**
         * @return void
         */
        public function _preAdd()
        {
        }
        /**
         * @return void
         */
        public function _postAdd()
        {
        }
        /**
         * @return void
         */
        public function _preRename()
        {
        }
        /**
         * @return void
         */
        public function _postRename()
        {
        }
        /**
         * @return void
         */
        public function _preUpdate()
        {
        }
        /**
         * @return void
         */
        public function _postUpdate()
        {
        }
    }
    class Zend_Ldap_Node_Abstract implements \ArrayAccess, \Countable
    {
        public static $_systemAttributes = 'Psalm could not infer this type';
        /**
         * @var Zend_Ldap_Dn
         */
        public $_dn;
        /**
         * @var array<array-key, mixed>
         */
        public $_currentData;
        /**
         * @param Zend_Ldap_Dn $dn
         * @param array<array-key, mixed> $data
         * @param bool $fromDataSource
         */
        public function __construct(\Zend_Ldap_Dn $dn, array $data, $fromDataSource)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $fromDataSource
         *
         * @throws Zend_Ldap_Exception
         */
        public function _loadData(array $data, $fromDataSource)
        {
        }
        /**
         * @param Zend_Ldap|null $ldap
         *
         * @return Zend_Ldap_Node_Abstract
         *
         * @throws Zend_Ldap_Exception
         */
        public function reload(?\Zend_Ldap $ldap = null)
        {
        }
        /**
         * @return Zend_Ldap_Dn
         */
        public function _getDn()
        {
        }
        /**
         * @return Zend_Ldap_Dn
         */
        public function getDn()
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return string
         */
        public function getDnString($caseFold = null)
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return array<array-key, mixed>
         */
        public function getDnArray($caseFold = null)
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return string
         */
        public function getRdnString($caseFold = null)
        {
        }
        /**
         * @param null|string $caseFold
         *
         * @return array<array-key, mixed>
         */
        public function getRdnArray($caseFold = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getObjectClass()
        {
        }
        /**
         * @param bool $includeSystemAttributes
         *
         * @return array<array-key, mixed>
         */
        public function getAttributes($includeSystemAttributes = true)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param bool $includeSystemAttributes
         *
         * @return array<array-key, mixed>
         */
        public function toArray($includeSystemAttributes = true)
        {
        }
        /**
         * @param bool $includeSystemAttributes
         *
         * @return string
         */
        public function toJson($includeSystemAttributes = true)
        {
        }
        /**
         * @param bool $includeSystemAttributes
         *
         * @return array<array-key, mixed>
         */
        public function getData($includeSystemAttributes = true)
        {
        }
        /**
         * @param string $name
         * @param bool $emptyExists
         *
         * @return bool
         */
        public function existsAttribute($name, $emptyExists = false)
        {
        }
        /**
         * @param string $attribName
         * @param array<array-key, mixed>|mixed $value
         *
         * @return bool
         */
        public function attributeHasValue($attribName, $value)
        {
        }
        /**
         * @param string $name
         * @param int|null $index
         *
         * @return mixed
         *
         * @throws Zend_Ldap_Exception
         */
        public function getAttribute($name, $index = null)
        {
        }
        /**
         * @param string $name
         * @param int|null $index
         *
         * @return array<array-key, mixed>|int
         *
         * @throws Zend_Ldap_Exception
         */
        public function getDateTimeAttribute($name, $index = null)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return null
         *
         * @throws BadMethodCallException
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Ldap_Exception
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         *
         * @return null
         *
         * @throws BadMethodCallException
         */
        public function __unset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return null
         *
         * @throws BadMethodCallException
         */
        public function offsetSet($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Ldap_Exception
         */
        public function offsetGet($name)
        {
        }
        /**
         * @param string $name
         *
         * @return null
         *
         * @throws BadMethodCallException
         */
        public function offsetUnset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function offsetExists($name)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Ldap_Node_ChildrenIterator implements \Iterator, \Countable, \RecursiveIterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param array<array-key, mixed> $data
         *
         * @return void
         */
        public function __construct(array $data)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Ldap_Node
         */
        public function current()
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
        public function next()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return Zend_Ldap_Node_ChildrenIterator
         */
        public function getChildren()
        {
        }
        /**
         * @param string $rdn
         *
         * @return Zend_Ldap_node
         */
        public function offsetGet($rdn)
        {
        }
        /**
         * @param string $rdn
         *
         * @return bool
         */
        public function offsetExists($rdn)
        {
        }
        /**
         * @param string $name
         *
         * @return null
         */
        public function offsetUnset($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return null
         */
        public function offsetSet($name, $value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Ldap_Node_Collection extends \Zend_Ldap_Collection
    {
        /**
         * @param array<array-key, mixed> $data
         *
         * @return Zend_Ldap_Node
         */
        public function _createEntry(array $data)
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
    }
    class Zend_Ldap_Node_RootDse extends \Zend_Ldap_Node_Abstract
    {
        public const SERVER_TYPE_GENERIC = 1;
        public const SERVER_TYPE_OPENLDAP = 2;
        public const SERVER_TYPE_ACTIVEDIRECTORY = 3;
        public const SERVER_TYPE_EDIRECTORY = 4;
        /**
         * @param Zend_Ldap $ldap
         *
         * @return Zend_Ldap_Node_RootDse
         *
         * @throws Zend_Ldap_Exception
         */
        public static function create(\Zend_Ldap $ldap)
        {
        }
        /**
         * @param Zend_Ldap_Dn $dn
         * @param array<array-key, mixed> $data
         */
        public function __construct(\Zend_Ldap_Dn $dn, array $data)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getNamingContexts()
        {
        }
        /**
         * @return null|string
         */
        public function getSubschemaSubentry()
        {
        }
        /**
         * @param array<array-key, mixed>|int|string $versions
         *
         * @return bool
         */
        public function supportsVersion($versions)
        {
        }
        /**
         * @param array<array-key, mixed>|string $mechlist
         *
         * @return bool
         */
        public function supportsSaslMechanism($mechlist)
        {
        }
        /**
         * @return int
         */
        public function getServerType()
        {
        }
        /**
         * @return Zend_Ldap_Dn
         */
        public function getSchemaDn()
        {
        }
    }
    class Zend_Ldap_Node_RootDse_ActiveDirectory extends \Zend_Ldap_Node_RootDse
    {
        public const SERVER_TYPE_GENERIC = 1;
        public const SERVER_TYPE_OPENLDAP = 2;
        public const SERVER_TYPE_ACTIVEDIRECTORY = 3;
        public const SERVER_TYPE_EDIRECTORY = 4;
        /**
         * @return null|string
         */
        public function getConfigurationNamingContext()
        {
        }
        /**
         * @return null|string
         */
        public function getCurrentTime()
        {
        }
        /**
         * @return null|string
         */
        public function getDefaultNamingContext()
        {
        }
        /**
         * @return null|string
         */
        public function getDnsHostName()
        {
        }
        /**
         * @return null|string
         */
        public function getDomainControllerFunctionality()
        {
        }
        /**
         * @return null|string
         */
        public function getDomainFunctionality()
        {
        }
        /**
         * @return null|string
         */
        public function getDsServiceName()
        {
        }
        /**
         * @return null|string
         */
        public function getForestFunctionality()
        {
        }
        /**
         * @return null|string
         */
        public function getHighestCommittedUSN()
        {
        }
        /**
         * @return null|string
         */
        public function getIsGlobalCatalogReady()
        {
        }
        /**
         * @return null|string
         */
        public function getIsSynchronized()
        {
        }
        /**
         * @return null|string
         */
        public function getLdapServiceName()
        {
        }
        /**
         * @return null|string
         */
        public function getRootDomainNamingContext()
        {
        }
        /**
         * @return null|string
         */
        public function getSchemaNamingContext()
        {
        }
        /**
         * @return null|string
         */
        public function getServerName()
        {
        }
        /**
         * @param array<array-key, mixed>|string $oids
         *
         * @return bool
         */
        public function supportsCapability($oids)
        {
        }
        /**
         * @param array<array-key, mixed>|string $oids
         *
         * @return bool
         */
        public function supportsControl($oids)
        {
        }
        /**
         * @param array<array-key, mixed>|string $policies
         *
         * @return bool
         */
        public function supportsPolicy($policies)
        {
        }
        /**
         * @return int
         */
        public function getServerType()
        {
        }
        /**
         * @return Zend_Ldap_Dn
         */
        public function getSchemaDn()
        {
        }
    }
    class Zend_Ldap_Node_RootDse_OpenLdap extends \Zend_Ldap_Node_RootDse
    {
        public const SERVER_TYPE_GENERIC = 1;
        public const SERVER_TYPE_OPENLDAP = 2;
        public const SERVER_TYPE_ACTIVEDIRECTORY = 3;
        public const SERVER_TYPE_EDIRECTORY = 4;
        /**
         * @return null|string
         */
        public function getConfigContext()
        {
        }
        /**
         * @return null|string
         */
        public function getMonitorContext()
        {
        }
        /**
         * @param array<array-key, mixed>|string $oids
         *
         * @return bool
         */
        public function supportsControl($oids)
        {
        }
        /**
         * @param array<array-key, mixed>|string $oids
         *
         * @return bool
         */
        public function supportsExtension($oids)
        {
        }
        /**
         * @param array<array-key, mixed>|string $oids
         *
         * @return bool
         */
        public function supportsFeature($oids)
        {
        }
        /**
         * @return int
         */
        public function getServerType()
        {
        }
    }
    class Zend_Ldap_Node_RootDse_eDirectory extends \Zend_Ldap_Node_RootDse
    {
        public const SERVER_TYPE_GENERIC = 1;
        public const SERVER_TYPE_OPENLDAP = 2;
        public const SERVER_TYPE_ACTIVEDIRECTORY = 3;
        public const SERVER_TYPE_EDIRECTORY = 4;
        /**
         * @param array<array-key, mixed>|string $oids
         *
         * @return bool
         */
        public function supportsExtension($oids)
        {
        }
        /**
         * @return null|string
         */
        public function getVendorName()
        {
        }
        /**
         * @return null|string
         */
        public function getVendorVersion()
        {
        }
        /**
         * @return null|string
         */
        public function getDsaName()
        {
        }
        /**
         * @return null|string
         */
        public function getStatisticsErrors()
        {
        }
        /**
         * @return null|string
         */
        public function getStatisticsSecurityErrors()
        {
        }
        /**
         * @return null|string
         */
        public function getStatisticsChainings()
        {
        }
        /**
         * @return null|string
         */
        public function getStatisticsReferralsReturned()
        {
        }
        /**
         * @return null|string
         */
        public function getStatisticsExtendedOps()
        {
        }
        /**
         * @return null|string
         */
        public function getStatisticsAbandonOps()
        {
        }
        /**
         * @return null|string
         */
        public function getStatisticsWholeSubtreeSearchOps()
        {
        }
        /**
         * @return int
         */
        public function getServerType()
        {
        }
    }
    class Zend_Ldap_Node_Schema extends \Zend_Ldap_Node_Abstract
    {
        public const OBJECTCLASS_TYPE_UNKNOWN = 0;
        public const OBJECTCLASS_TYPE_STRUCTURAL = 1;
        public const OBJECTCLASS_TYPE_ABSTRACT = 3;
        public const OBJECTCLASS_TYPE_AUXILIARY = 4;
        /**
         * @param Zend_Ldap $ldap
         *
         * @return Zend_Ldap_Node_Schema
         *
         * @throws Zend_Ldap_Exception
         */
        public static function create(\Zend_Ldap $ldap)
        {
        }
        /**
         * @param Zend_Ldap_Dn $dn
         * @param array<array-key, mixed> $data
         * @param Zend_Ldap $ldap
         */
        public function __construct(\Zend_Ldap_Dn $dn, array $data, \Zend_Ldap $ldap)
        {
        }
        /**
         * @param Zend_Ldap_Dn $dn
         * @param Zend_Ldap $ldap
         *
         * @return Zend_Ldap_Node_Schema
         */
        public function _parseSchema(\Zend_Ldap_Dn $dn, \Zend_Ldap $ldap)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttributeTypes()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getObjectClasses()
        {
        }
    }
    class Zend_Ldap_Node_Schema_ActiveDirectory extends \Zend_Ldap_Node_Schema
    {
        public const OBJECTCLASS_TYPE_UNKNOWN = 0;
        public const OBJECTCLASS_TYPE_STRUCTURAL = 1;
        public const OBJECTCLASS_TYPE_ABSTRACT = 3;
        public const OBJECTCLASS_TYPE_AUXILIARY = 4;
        /**
         * @var array<array-key, mixed>
         */
        public $_attributeTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_objectClasses;
        /**
         * @param Zend_Ldap_Dn $dn
         * @param Zend_Ldap $ldap
         *
         * @return Zend_Ldap_Node_Schema
         */
        public function _parseSchema(\Zend_Ldap_Dn $dn, \Zend_Ldap $ldap)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttributeTypes()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getObjectClasses()
        {
        }
    }
    class Zend_Ldap_Node_Schema_AttributeType_ActiveDirectory extends \Zend_Ldap_Node_Schema_Item
    {
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getOid()
        {
        }
        /**
         * @return string
         */
        public function getSyntax()
        {
        }
        /**
         * @return int|null
         */
        public function getMaxLength()
        {
        }
        /**
         * @return bool
         */
        public function isSingleValued()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
    }
    interface Zend_Ldap_Node_Schema_AttributeType_Interface
    {
        /**
         * @return string
         */
        public function getName();
        /**
         * @return string
         */
        public function getOid();
        /**
         * @return string
         */
        public function getSyntax();
        /**
         * @return int|null
         */
        public function getMaxLength();
        /**
         * @return bool
         */
        public function isSingleValued();
        /**
         * @return string
         */
        public function getDescription();
    }
    class Zend_Ldap_Node_Schema_AttributeType_OpenLdap extends \Zend_Ldap_Node_Schema_Item
    {
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getOid()
        {
        }
        /**
         * @return string
         */
        public function getSyntax()
        {
        }
        /**
         * @return int|null
         */
        public function getMaxLength()
        {
        }
        /**
         * @return bool
         */
        public function isSingleValued()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return Zend_Ldap_Node_Schema_AttributeType_OpenLdap|null
         */
        public function getParent()
        {
        }
    }
    class Zend_Ldap_Node_Schema_Item implements \ArrayAccess, \Countable
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param array<array-key, mixed> $data
         */
        public function __construct(array $data)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return Zend_Ldap_Node_Schema_Item
         */
        public function setData(array $data)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getData()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return null
         *
         * @throws BadMethodCallException
         */
        public function offsetSet($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function offsetGet($name)
        {
        }
        /**
         * @param string $name
         *
         * @return null
         *
         * @throws BadMethodCallException
         */
        public function offsetUnset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function offsetExists($name)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Ldap_Node_Schema_ObjectClass_ActiveDirectory extends \Zend_Ldap_Node_Schema_Item
    {
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getOid()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMustContain()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMayContain()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParentClasses()
        {
        }
    }
    interface Zend_Ldap_Node_Schema_ObjectClass_Interface
    {
        /**
         * @return string
         */
        public function getName();
        /**
         * @return string
         */
        public function getOid();
        /**
         * @return array<array-key, mixed>
         */
        public function getMustContain();
        /**
         * @return array<array-key, mixed>
         */
        public function getMayContain();
        /**
         * @return string
         */
        public function getDescription();
        /**
         * @return int
         */
        public function getType();
        /**
         * @return array<array-key, mixed>
         */
        public function getParentClasses();
    }
    class Zend_Ldap_Node_Schema_ObjectClass_OpenLdap extends \Zend_Ldap_Node_Schema_Item
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_inheritedMust;
        /**
         * @var array<array-key, mixed>
         */
        public $_inheritedMay;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getOid()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMustContain()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMayContain()
        {
        }
        /**
         * @return void
         */
        public function _resolveInheritance()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParentClasses()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParents()
        {
        }
    }
    class Zend_Ldap_Node_Schema_OpenLdap extends \Zend_Ldap_Node_Schema
    {
        public const OBJECTCLASS_TYPE_UNKNOWN = 0;
        public const OBJECTCLASS_TYPE_STRUCTURAL = 1;
        public const OBJECTCLASS_TYPE_ABSTRACT = 3;
        public const OBJECTCLASS_TYPE_AUXILIARY = 4;
        /**
         * @var array<array-key, mixed>
         */
        public $_attributeTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_objectClasses;
        /**
         * @var array<array-key, mixed>
         */
        public $_ldapSyntaxes;
        /**
         * @var array<array-key, mixed>
         */
        public $_matchingRules;
        /**
         * @var array<array-key, mixed>
         */
        public $_matchingRuleUse;
        /**
         * @param Zend_Ldap_Dn $dn
         * @param Zend_Ldap $ldap
         *
         * @return Zend_Ldap_Node_Schema
         */
        public function _parseSchema(\Zend_Ldap_Dn $dn, \Zend_Ldap $ldap)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttributeTypes()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getObjectClasses()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLdapSyntaxes()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMatchingRules()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMatchingRuleUse()
        {
        }
        /**
         * @return void
         */
        public function _loadAttributeTypes()
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function _parseAttributeType($value)
        {
        }
        /**
         * @return void
         */
        public function _loadObjectClasses()
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function _parseObjectClass($value)
        {
        }
        /**
         * @param Zend_Ldap_Node_Schema_Item $node
         * @param array<array-key, mixed> $repository
         */
        public function _resolveInheritance(\Zend_Ldap_Node_Schema_Item $node, array $repository)
        {
        }
        /**
         * @return void
         */
        public function _loadLdapSyntaxes()
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function _parseLdapSyntax($value)
        {
        }
        /**
         * @return void
         */
        public function _loadMatchingRules()
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function _parseMatchingRule($value)
        {
        }
        /**
         * @return void
         */
        public function _loadMatchingRuleUse()
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function _parseMatchingRuleUse($value)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         */
        public function _ensureNameAttribute(array &$data)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param array<array-key, mixed> $tokens
         *
         * @return void
         */
        public function _parseLdapSchemaSyntax(array &$data, array $tokens)
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function _tokenizeString($value)
        {
        }
    }
    class Zend_Loader
    {
        /**
         * @param string $class
         * @param array<array-key, mixed>|null|string $dirs
         *
         * @return void
         *
         * @throws Zend_Exception
         */
        public static function loadClass($class, $dirs = null)
        {
        }
        /**
         * @param string $filename
         * @param array<array-key, mixed>|null|string $dirs
         * @param bool $once
         *
         * @return bool
         *
         * @throws Zend_Exception
         */
        public static function loadFile($filename, $dirs = null, $once = false)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public static function isReadable($filename)
        {
        }
        /**
         * @param null|string $path
         *
         * @return array<array-key, mixed>
         */
        public static function explodeIncludePath($path = null)
        {
        }
        /**
         * @param string $class
         *
         * @return false|string
         */
        public static function autoload($class)
        {
        }
        /**
         * @param string $class
         * @param bool $enabled
         *
         * @return void
         *
         * @throws Zend_Exception
         */
        public static function registerAutoload($class = 'Zend_Loader', $enabled = true)
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         *
         * @throws Zend_Exception
         */
        public static function _securityCheck($filename)
        {
        }
        /**
         * @param string $filespec
         * @param bool $once
         *
         * @return bool
         */
        public static function _includeFile($filespec, $once = false)
        {
        }
        /**
         * @param string $file
         *
         * @return string
         */
        public static function standardiseFile($file)
        {
        }
    }
    class Zend_Loader_Autoloader
    {
        /**
         * @var Zend_Loader_Autoloader
         */
        public static $_instance;
        /**
         * @var array<array-key, mixed>
         */
        public $_autoloaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_defaultAutoloader;
        /**
         * @var bool
         */
        public $_fallbackAutoloader;
        /**
         * @var array<array-key, mixed>
         */
        public $_internalAutoloader;
        /**
         * @var array<array-key, mixed>
         */
        public $_namespaces;
        /**
         * @var array<array-key, mixed>
         */
        public $_namespaceAutoloaders;
        /**
         * @var bool
         */
        public $_suppressNotFoundWarnings;
        /**
         * @var null|string
         */
        public $_zfPath;
        /**
         * @return Zend_Loader_Autoloader
         */
        public static function getInstance()
        {
        }
        /**
         * @return void
         */
        public static function resetInstance()
        {
        }
        /**
         * @param string $class
         *
         * @return bool
         */
        public static function autoload($class)
        {
        }
        /**
         * @param array<array-key, mixed>|string $callback
         *
         * @return void
         */
        public function setDefaultAutoloader($callback)
        {
        }
        /**
         * @return array<array-key, mixed>|string
         */
        public function getDefaultAutoloader()
        {
        }
        /**
         * @param array<array-key, mixed> $autoloaders
         *
         * @return Zend_Loader_Autoloader
         */
        public function setAutoloaders(array $autoloaders)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAutoloaders()
        {
        }
        /**
         * @param string $namespace
         *
         * @return array<array-key, mixed>
         */
        public function getNamespaceAutoloaders($namespace)
        {
        }
        /**
         * @param array<array-key, mixed>|string $namespace
         *
         * @return Zend_Loader_Autoloader
         */
        public function registerNamespace($namespace)
        {
        }
        /**
         * @param array<array-key, mixed>|string $namespace
         *
         * @return Zend_Loader_Autoloader
         */
        public function unregisterNamespace($namespace)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRegisteredNamespaces()
        {
        }
        public function setZfPath($spec, $version = 'latest')
        {
        }
        public function getZfPath()
        {
        }
        /**
         * @param bool|null $flag
         *
         * @return Zend_Loader_Autoloader|bool
         */
        public function suppressNotFoundWarnings($flag = null)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Loader_Autoloader
         */
        public function setFallbackAutoloader($flag)
        {
        }
        /**
         * @return bool
         */
        public function isFallbackAutoloader()
        {
        }
        /**
         * @param string $class
         *
         * @return array<array-key, mixed>
         */
        public function getClassAutoloaders($class)
        {
        }
        /**
         * @param array<array-key, mixed>|object|string $callback
         * @param array<array-key, mixed>|string $namespace
         *
         * @return Zend_Loader_Autoloader
         */
        public function unshiftAutoloader($callback, $namespace = '')
        {
        }
        /**
         * @param array<array-key, mixed>|object|string $callback
         * @param array<array-key, mixed>|string $namespace
         *
         * @return Zend_Loader_Autoloader
         */
        public function pushAutoloader($callback, $namespace = '')
        {
        }
        /**
         * @param array<array-key, mixed>|object|string $callback
         * @param array<array-key, mixed>|null|string $namespace
         *
         * @return Zend_Loader_Autoloader
         */
        public function removeAutoloader($callback, $namespace = null)
        {
        }
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param string $class
         *
         * @return bool
         */
        public function _autoload($class)
        {
        }
        /**
         * @param array<array-key, mixed> $autoloaders
         * @param string $namespace
         *
         * @return Zend_Loader_Autoloader
         */
        public function _setNamespaceAutoloaders(array $autoloaders, $namespace = '')
        {
        }
        /**
         * @param string $path
         * @param string $version
         *
         * @return void
         */
        public function _getVersionPath($path, $version)
        {
        }
        /**
         * @param string $version
         *
         * @return string
         *
         * @throws Zend_Loader_Exception
         */
        public function _getVersionType($version)
        {
        }
        /**
         * @param string $path
         * @param string $version
         *
         * @return array<array-key, mixed>
         */
        public function _getAvailableVersions($path, $version)
        {
        }
    }
    class Zend_Loader_AutoloaderFactory
    {
        public const STANDARD_AUTOLOADER = 'Zend_Loader_StandardAutoloader';
        public const CLASS_MAP_AUTOLOADER = 'Zend_Loader_ClassMapAutoloader';
        /**
         * @var array<array-key, mixed>
         */
        public static $loaders;
        /**
         * @var Zend_Loader_StandardAutoloader
         */
        public static $standardAutoloader;
        /**
         * @param Traversable|array<array-key, mixed>|null $options
         *
         * @return void
         *
         * @throws Zend_Loader_Exception_InvalidArgumentException
         */
        public static function factory($options = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getRegisteredAutoloaders()
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Loader_SplAutoloader
         *
         * @throws Zend_Loader_Exception_InvalidArgumentException
         */
        public static function getRegisteredAutoloader($class)
        {
        }
        /**
         * @return void
         */
        public static function unregisterAutoloaders()
        {
        }
        /**
         * @param string $autoloaderClass
         *
         * @return bool
         */
        public static function unregisterAutoloader($autoloaderClass)
        {
        }
        /**
         * @return Zend_Loader_SplAutoloader
         */
        public static function getStandardAutoloader()
        {
        }
    }
    interface Zend_Loader_Autoloader_Interface
    {
        /**
         * @param string $class
         *
         * @return mixed
         */
        public function autoload($class);
    }
    class Zend_Loader_Autoloader_Resource implements \Zend_Loader_Autoloader_Interface
    {
        /**
         * @var string
         */
        public $_basePath;
        /**
         * @var array<array-key, mixed>
         */
        public $_components;
        /**
         * @var string
         */
        public $_defaultResourceType;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @var array<array-key, mixed>
         */
        public $_resourceTypes;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Loader_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $class
         *
         * @return false
         */
        public function getClassPath($class)
        {
        }
        /**
         * @param string $class
         *
         * @return mixed
         */
        public function autoload($class)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Loader_Autoloader_Resource
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $namespace
         *
         * @return Zend_Loader_Autoloader_Resource
         */
        public function setNamespace($namespace)
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Loader_Autoloader_Resource
         */
        public function setBasePath($path)
        {
        }
        /**
         * @return string
         */
        public function getBasePath()
        {
        }
        /**
         * @param string $type
         * @param string $path
         * @param null|string $namespace
         *
         * @return Zend_Loader_Autoloader_Resource
         */
        public function addResourceType($type, $path, $namespace = null)
        {
        }
        /**
         * @param array<array-key, mixed> $types
         *
         * @return Zend_Loader_Autoloader_Resource
         */
        public function addResourceTypes(array $types)
        {
        }
        /**
         * @param array<array-key, mixed> $types
         *
         * @return Zend_Loader_Autoloader_Resource
         */
        public function setResourceTypes(array $types)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getResourceTypes()
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function hasResourceType($type)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_Autoloader_Resource
         */
        public function removeResourceType($type)
        {
        }
        /**
         * @return Zend_Loader_Autoloader_Resource
         */
        public function clearResourceTypes()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_Autoloader_Resource
         */
        public function setDefaultResourceType($type)
        {
        }
        /**
         * @return null|string
         */
        public function getDefaultResourceType()
        {
        }
        /**
         * @param string $resource
         * @param null|string $type
         *
         * @return object
         *
         * @throws Zend_Loader_Exception
         */
        public function load($resource, $type = null)
        {
        }
    }
    class Zend_Loader_ClassMapAutoloader implements \Zend_Loader_SplAutoloader
    {
        /**
         * @var array<array-key, mixed>
         */
        public $mapsLoaded;
        /**
         * @var array<array-key, mixed>
         */
        public $map;
        /**
         * @param Traversable|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param Traversable|array<array-key, mixed> $options
         *
         * @return Zend_Loader_ClassMapAutoloader
         */
        public function setOptions($options)
        {
        }
        /**
         * @return Zend_Loader_ClassMapAutoloader
         */
        public function registerAutoloadMap($map)
        {
        }
        /**
         * @param array<array-key, mixed> $locations
         *
         * @return Zend_Loader_ClassMapAutoloader
         */
        public function registerAutoloadMaps($locations)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAutoloadMap()
        {
        }
        /**
         * @param string $class
         *
         * @return void
         */
        public function autoload($class)
        {
        }
        /**
         * @return void
         */
        public function register()
        {
        }
        /**
         * @param string $location
         *
         * @return Zend_Loader_ClassMapAutoloader|mixed
         *
         * @throws Zend_Loader_Exception_InvalidArgumentException
         */
        public function loadMapFromFile($location)
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        public static function realPharPath($path)
        {
        }
        /**
         * @param string $part
         *
         * @return bool
         */
        public static function concatPharParts($part)
        {
        }
        /**
         * @param string $value
         * @param int $key
         * @param array<array-key, mixed> $parts
         *
         * @return void
         */
        public static function resolvePharParentPath($value, $key, &$parts)
        {
        }
    }
    class Zend_Loader_Exception extends \Zend_Exception
    {
    }
    class Zend_Loader_Exception_InvalidArgumentException extends \Zend_Loader_Exception
    {
    }
    class Zend_Loader_PluginLoader implements \Zend_Loader_PluginLoader_Interface
    {
        /**
         * @var string
         */
        public static $_includeFileCache;
        /**
         * @var resource
         */
        public static $_includeFileCacheHandler;
        /**
         * @var array<array-key, mixed>
         */
        public $_loadedPluginPaths;
        /**
         * @var array<array-key, mixed>
         */
        public $_loadedPlugins;
        /**
         * @var array<array-key, mixed>
         */
        public $_prefixToPaths;
        /**
         * @var array<array-key, mixed>
         */
        public static $_staticLoadedPluginPaths;
        /**
         * @var array<array-key, mixed>
         */
        public static $_staticLoadedPlugins;
        /**
         * @var array<array-key, mixed>
         */
        public static $_staticPrefixToPaths;
        /**
         * @var null|string
         */
        public $_useStaticRegistry;
        /**
         * @param array<array-key, mixed> $prefixToPaths
         * @param null|string $staticRegistryName
         */
        public function __construct(array $prefixToPaths = array(), $staticRegistryName = null)
        {
        }
        /**
         * @param string $prefix
         *
         * @return string
         */
        public function _formatPrefix($prefix)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Loader_PluginLoader
         */
        public function addPrefixPath($prefix, $path)
        {
        }
        /**
         * @param null|string $prefix
         *
         * @return array<array-key, mixed>|false
         */
        public function getPaths($prefix = null)
        {
        }
        /**
         * @param null|string $prefix
         *
         * @return bool
         */
        public function clearPaths($prefix = null)
        {
        }
        /**
         * @param string $prefix
         * @param null|string $path
         *
         * @return Zend_Loader_PluginLoader
         */
        public function removePrefixPath($prefix, $path = null)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _formatName($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Loader_PluginLoader
         */
        public function isLoaded($name)
        {
        }
        /**
         * @param string $name
         *
         * @return false|string
         */
        public function getClassName($name)
        {
        }
        /**
         * @param mixed $name
         *
         * @return false|string
         */
        public function getClassPath($name)
        {
        }
        /**
         * @param string $name
         * @param bool $throwExceptions
         *
         * @return false|string
         *
         * @throws Zend_Loader_Exception
         */
        public function load($name, $throwExceptions = true)
        {
        }
        /**
         * @param string $file
         *
         * @return void
         *
         * @throws Zend_Loader_PluginLoader_Exception
         */
        public static function setIncludeFileCache($file)
        {
        }
        /**
         * @return null|string
         */
        public static function getIncludeFileCache()
        {
        }
        /**
         * @param string $incFile
         *
         * @return void
         */
        public static function _appendIncFile($incFile)
        {
        }
    }
    class Zend_Loader_PluginLoader_Exception extends \Zend_Loader_Exception
    {
    }
    interface Zend_Loader_PluginLoader_Interface
    {
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Loader_PluginLoader
         */
        public function addPrefixPath($prefix, $path);
        /**
         * @param string $prefix
         * @param null|string $path
         *
         * @return Zend_Loader_PluginLoader
         */
        public function removePrefixPath($prefix, $path = null);
        /**
         * @param string $name
         *
         * @return Zend_Loader_PluginLoader
         */
        public function isLoaded($name);
        /**
         * @param string $name
         *
         * @return string
         */
        public function getClassName($name);
        /**
         * @param string $name
         *
         * @return string
         */
        public function load($name);
    }
    interface Zend_Loader_SplAutoloader
    {
        /**
         * @param Traversable|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null);
        /**
         * @param Traversable|array<array-key, mixed> $options
         *
         * @return SplAutoloader
         */
        public function setOptions($options);
        /**
         * @return mixed
         */
        public function autoload($class);
        /**
         * @return void
         */
        public function register();
    }
    class Zend_Loader_StandardAutoloader implements \Zend_Loader_SplAutoloader
    {
        public const NS_SEPARATOR = '\\';
        public const PREFIX_SEPARATOR = '_';
        public const LOAD_NS = 'namespaces';
        public const LOAD_PREFIX = 'prefixes';
        public const ACT_AS_FALLBACK = 'fallback_autoloader';
        public const AUTOREGISTER_ZF = 'autoregister_zf';
        /**
         * @var array<array-key, mixed>
         */
        public $namespaces;
        /**
         * @var array<array-key, mixed>
         */
        public $prefixes;
        /**
         * @var bool
         */
        public $fallbackAutoloaderFlag;
        /**
         * @var bool
         */
        public $error;
        /**
         * @param Traversable|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param Traversable|array<array-key, mixed> $options
         *
         * @return Zend_Loader_StandardAutoloader
         */
        public function setOptions($options)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Loader_StandardAutoloader
         */
        public function setFallbackAutoloader($flag)
        {
        }
        /**
         * @return bool
         */
        public function isFallbackAutoloader()
        {
        }
        /**
         * @param string $namespace
         * @param string $directory
         *
         * @return Zend_Loader_StandardAutoloader
         */
        public function registerNamespace($namespace, $directory)
        {
        }
        /**
         * @param array<array-key, mixed> $namespaces
         *
         * @return Zend_Loader_StandardAutoloader
         */
        public function registerNamespaces($namespaces)
        {
        }
        /**
         * @param string $prefix
         * @param string $directory
         *
         * @return Zend_Loader_StandardAutoloader
         */
        public function registerPrefix($prefix, $directory)
        {
        }
        /**
         * @param array<array-key, mixed> $prefixes
         *
         * @return Zend_Loader_StandardAutoloader
         */
        public function registerPrefixes($prefixes)
        {
        }
        /**
         * @param string $class
         *
         * @return false|string
         */
        public function autoload($class)
        {
        }
        /**
         * @return void
         */
        public function register()
        {
        }
        /**
         * @param mixed $errno
         * @param mixed $errstr
         *
         * @return void
         */
        public function handleError($errno, $errstr)
        {
        }
        /**
         * @param string $class
         * @param string $directory
         *
         * @return string
         */
        public function transformClassNameToFilename($class, $directory)
        {
        }
        /**
         * @param string $class
         * @param string $type
         *
         * @return void
         */
        public function loadClass($class, $type)
        {
        }
        /**
         * @param string $directory
         *
         * @return string
         */
        public function normalizeDirectory($directory)
        {
        }
    }
    class Zend_Locale
    {
        public const BROWSER = 'browser';
        public const ENVIRONMENT = 'environment';
        public const ZFDEFAULT = 'default';
        /**
         * @var array<array-key, mixed>
         */
        public static $_localeAliases;
        /**
         * @var array<array-key, mixed>
         */
        public static $_localeData;
        /**
         * @var array<array-key, mixed>
         */
        public static $_territoryData;
        /**
         * @var bool
         */
        public static $compatibilityMode;
        /**
         * @var bool
         */
        public static $_breakChain;
        /**
         * @var string
         */
        public $_locale;
        /**
         * @var string
         */
        public static $_auto;
        /**
         * @var string
         */
        public static $_browser;
        /**
         * @var string
         */
        public static $_environment;
        /**
         * @var string
         */
        public static $_default;
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @throws Zend_Locale_Exception
         */
        public function __construct($locale = null)
        {
        }
        /**
         * @return string
         */
        public function serialize()
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getDefault()
        {
        }
        /**
         * @param Zend_Locale|string $locale
         * @param float $quality
         *
         * @return void
         *
         * @throws Zend_Locale_Exception
         */
        public static function setDefault($locale, $quality = 1)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getEnvironment()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getBrowser()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return void
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @return string
         */
        public function getLanguage()
        {
        }
        /**
         * @return false|string
         */
        public function getRegion()
        {
        }
        /**
         * @return string
         */
        public static function getHttpCharset()
        {
        }
        /**
         * @param Zend_Locale $object
         *
         * @return bool
         */
        public function equals(\Zend_Locale $object)
        {
        }
        /**
         * @param null|string $path
         * @param Zend_Locale|null|string $locale
         * @param null|string $value
         *
         * @return array<array-key, mixed>
         */
        public static function getTranslationList($path = null, $locale = null, $value = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getLanguageTranslationList($locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getScriptTranslationList($locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getCountryTranslationList($locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getTerritoryTranslationList($locale = null)
        {
        }
        /**
         * @param null|string $value
         * @param null|string $path
         * @param Zend_Locale|null|string $locale
         *
         * @return false|string
         */
        public static function getTranslation($value = null, $path = null, $locale = null)
        {
        }
        /**
         * @param string $value
         * @param null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getLanguageTranslation($value, $locale = null)
        {
        }
        /**
         * @param string $value
         * @param null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getScriptTranslation($value, $locale = null)
        {
        }
        /**
         * @param string $value
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getCountryTranslation($value, $locale = null)
        {
        }
        /**
         * @param string $value
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getTerritoryTranslation($value, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public static function getQuestion($locale = null)
        {
        }
        /**
         * @param string $input
         *
         * @return string
         */
        public static function _prepareQuestionString($input)
        {
        }
        /**
         * @param Zend_Locale|string $locale
         * @param bool $strict
         * @param bool $compatible
         *
         * @return bool
         */
        public static function isLocale($locale, $strict = false, $compatible = true)
        {
        }
        /**
         * @param null|string $locale
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function findLocale($locale = null)
        {
        }
        /**
         * @param string $territory
         *
         * @return null|string
         */
        public static function getLocaleToTerritory($territory)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getLocaleList()
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public static function getCache()
        {
        }
        /**
         * @param Zend_Cache_Core $cache
         *
         * @return void
         */
        public static function setCache(\Zend_Cache_Core $cache)
        {
        }
        /**
         * @return bool
         */
        public static function hasCache()
        {
        }
        /**
         * @return void
         */
        public static function removeCache()
        {
        }
        /**
         * @param null|string $tag
         *
         * @return void
         */
        public static function clearCache($tag = null)
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public static function disableCache($flag)
        {
        }
        /**
         * @param Zend_Locale|string $locale
         * @param bool $strict
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function _prepareLocale($locale, $strict = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getOrder($order = null)
        {
        }
        /**
         * @param Zend_Locale|string $locale
         *
         * @return bool
         */
        public static function isAlias($locale)
        {
        }
        /**
         * @param Zend_Locale|string $locale
         *
         * @return string
         */
        public static function getAlias($locale)
        {
        }
    }
    class Zend_Locale_Data
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_ldml;
        /**
         * @var array<array-key, mixed>
         */
        public static $_list;
        /**
         * @var Zend_Cache_Core
         */
        public static $_cache;
        /**
         * @var bool
         */
        public static $_cacheTags;
        /**
         * @var bool
         */
        public static $_cacheDisabled;
        /**
         * @param string $locale
         * @param string $path
         * @param string $attribute
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public static function _readFile($locale, $path, $attribute, $value, $temp)
        {
        }
        /**
         * @param string $locale
         * @param string $path
         * @param string $attribute
         * @param string $value
         * @param array<array-key, mixed> $temp
         *
         * @return bool
         *
         * @throws Zend_Locale_Exception
         */
        public static function _findRoute($locale, $path, $attribute, $value, &$temp)
        {
        }
        /**
         * @param string $locale
         * @param string $path
         * @param bool|string $attribute
         * @param bool|string $value
         * @param array<array-key, mixed> $temp
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Locale_Exception
         */
        public static function _getFile($locale, $path, $attribute = false, $value = false, $temp = array())
        {
        }
        /**
         * @param string $locale
         * @param array<array-key, mixed> $list
         *
         * @return string
         */
        public static function _calendarDetail($locale, $list)
        {
        }
        /**
         * @param Zend_Locale|string $locale
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function _checkLocale($locale)
        {
        }
        /**
         * @param string $locale
         * @param string $path
         * @param bool|string $value
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Locale_Exception
         */
        public static function getList($locale, $path, $value = false)
        {
        }
        /**
         * @param string $locale
         * @param string $path
         * @param bool|string $value
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function getContent($locale, $path, $value = false)
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public static function getCache()
        {
        }
        /**
         * @param Zend_Cache_Core $cache
         */
        public static function setCache(\Zend_Cache_Core $cache)
        {
        }
        /**
         * @return bool
         */
        public static function hasCache()
        {
        }
        /**
         * @return void
         */
        public static function removeCache()
        {
        }
        /**
         * @return void
         */
        public static function clearCache()
        {
        }
        /**
         * @param bool $flag
         */
        public static function disableCache($flag)
        {
        }
        /**
         * @return bool
         */
        public static function _getTagSupportForCache()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function _filterCacheId($value)
        {
        }
    }
    class Zend_Locale_Data_Translation
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $languageTranslation;
        public static $regionTranslation = array();
    }
    class Zend_Locale_Exception extends \Zend_Exception
    {
    }
    class Zend_Locale_Format
    {
        public const STANDARD = 'auto';
        public static $_options = 'Psalm could not infer this type';
        /**
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Locale_Exception
         */
        public static function setOptions(array $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Locale_Exception
         */
        public static function _checkOptions(array $options = array())
        {
        }
        /**
         * @param string $input
         * @param string $from
         * @param null|string $to
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function convertNumerals($input, $from, $to = null)
        {
        }
        /**
         * @param string $input
         * @param array<array-key, mixed> $options
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function getNumber($input, array $options = array())
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function toNumber($value, array $options = array())
        {
        }
        /**
         * @param string $format
         * @param string $value
         * @param int $precision
         *
         * @return string
         */
        public static function _seperateFormat($format, $value, $precision)
        {
        }
        /**
         * @param string $input
         * @param array<array-key, mixed> $options
         *
         * @return bool
         */
        public static function isNumber($input, array $options = array())
        {
        }
        /**
         * @param string $type
         * @param array<array-key, mixed> $options
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function _getRegexForType($type, $options)
        {
        }
        /**
         * @param string $input
         * @param array<array-key, mixed> $options
         *
         * @return float
         */
        public static function getFloat($input, array $options = array())
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public static function toFloat($value, array $options = array())
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @return bool
         */
        public static function isFloat($value, array $options = array())
        {
        }
        /**
         * @param string $input
         * @param array<array-key, mixed> $options
         *
         * @return int
         */
        public static function getInteger($input, array $options = array())
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public static function toInteger($value, array $options = array())
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed> $options
         *
         * @return bool
         */
        public static function isInteger($value, array $options = array())
        {
        }
        /**
         * @param string $format
         *
         * @return string
         */
        public static function convertPhpToIsoFormat($format)
        {
        }
        /**
         * @param string $date
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Locale_Exception
         */
        public static function _parseDate($date, $options)
        {
        }
        /**
         * @param string $number
         * @param array<array-key, mixed> $monthlist
         *
         * @return false|int
         */
        public static function _replaceMonth(&$number, $monthlist)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function getDateFormat($locale = null)
        {
        }
        /**
         * @param string $date
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public static function getDate($date, array $options = array())
        {
        }
        /**
         * @param string $date
         * @param array<array-key, mixed> $options
         *
         * @return bool
         */
        public static function checkDateFormat($date, array $options = array())
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function getTimeFormat($locale = null)
        {
        }
        /**
         * @param string $time
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public static function getTime($time, array $options = array())
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         *
         * @throws Zend_Locale_Exception
         */
        public static function getDateTimeFormat($locale = null)
        {
        }
        /**
         * @param string $datetime
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public static function getDateTime($datetime, array $options = array())
        {
        }
        /**
         * @return bool
         */
        public static function _getUniCodeSupport()
        {
        }
        /**
         * @return string
         */
        public static function _getEncoding()
        {
        }
        /**
         * @param string $encoding
         *
         * @return void
         */
        public static function _setEncoding($encoding)
        {
        }
    }
    class Zend_Locale_Math
    {
        public static $_bcmathDisabled = false;
        public static $add = 'Psalm could not infer this type';
        public static $sub = 'Psalm could not infer this type';
        public static $pow = 'Psalm could not infer this type';
        public static $mul = 'Psalm could not infer this type';
        public static $div = 'Psalm could not infer this type';
        public static $comp = 'Psalm could not infer this type';
        public static $sqrt = 'Psalm could not infer this type';
        public static $mod = 'Psalm could not infer this type';
        public static $scale = 'bcscale';
        public static function isBcmathDisabled()
        {
        }
        public static function round($op1, $precision = 0)
        {
        }
        /**
         * @param string $value
         */
        public static function floatalize($value)
        {
        }
        /**
         * @param int $value
         *
         * @return string
         */
        public static function normalize($value)
        {
        }
        /**
         * @param int $value
         *
         * @return string
         */
        public static function localize($value)
        {
        }
        /**
         * @param int $value
         * @param int|null $scale
         *
         * @return string
         */
        public static function exponent($value, $scale = null)
        {
        }
        /**
         * @param string $op1
         * @param string $op2
         * @param int|null $scale
         *
         * @return string
         */
        public static function Add($op1, $op2, $scale = null)
        {
        }
        /**
         * @param string $op1
         * @param string $op2
         * @param int|null $scale
         *
         * @return string
         */
        public static function Sub($op1, $op2, $scale = null)
        {
        }
        /**
         * @param string $op1
         * @param string $op2
         * @param int|null $scale
         *
         * @return string
         */
        public static function Pow($op1, $op2, $scale = null)
        {
        }
        /**
         * @param string $op1
         * @param string $op2
         * @param int|null $scale
         *
         * @return string
         */
        public static function Mul($op1, $op2, $scale = null)
        {
        }
        /**
         * @param string $op1
         * @param string $op2
         * @param int|null $scale
         *
         * @return string
         */
        public static function Div($op1, $op2, $scale = null)
        {
        }
        /**
         * @param string $op1
         * @param int|null $scale
         *
         * @return string
         */
        public static function Sqrt($op1, $scale = null)
        {
        }
        /**
         * @param string $op1
         * @param string $op2
         *
         * @return string
         */
        public static function Mod($op1, $op2)
        {
        }
        /**
         * @param string $op1
         * @param string $op2
         * @param int|null $scale
         *
         * @return string
         */
        public static function Comp($op1, $op2, $scale = null)
        {
        }
    }
    class Zend_Locale_Math_Exception extends \Zend_Locale_Exception
    {
        public $op1 = null;
        public $op2 = null;
        public $result = null;
        public function __construct($message, $op1 = null, $op2 = null, $result = null)
        {
        }
        public function getResults()
        {
        }
    }
    class Zend_Locale_Math_PhpMath extends \Zend_Locale_Math
    {
        public static $defaultScale;
        public static $defaultPrecision;
        public static function disable()
        {
        }
        public static function Add($op1, $op2, $scale = null)
        {
        }
        public static function Sub($op1, $op2, $scale = null)
        {
        }
        public static function Pow($op1, $op2, $scale = null)
        {
        }
        public static function Mul($op1, $op2, $scale = null)
        {
        }
        public static function Div($op1, $op2, $scale = null)
        {
        }
        public static function Sqrt($op1, $scale = null)
        {
        }
        public static function Mod($op1, $op2)
        {
        }
        public static function Comp($op1, $op2, $scale = null)
        {
        }
        public static function Scale($scale)
        {
        }
    }
    class Zend_Log
    {
        public const EMERG = 0;
        public const ALERT = 1;
        public const CRIT = 2;
        public const ERR = 3;
        public const WARN = 4;
        public const NOTICE = 5;
        public const INFO = 6;
        public const DEBUG = 7;
        /**
         * @var array<array-key, mixed>
         */
        public $_priorities;
        /**
         * @var array<array-key, mixed>
         */
        public $_writers;
        /**
         * @var array<array-key, mixed>
         */
        public $_filters;
        /**
         * @var array<array-key, mixed>
         */
        public $_extras;
        /**
         * @var string
         */
        public $_defaultWriterNamespace;
        /**
         * @var string
         */
        public $_defaultFilterNamespace;
        /**
         * @var string
         */
        public $_defaultFormatterNamespace;
        /**
         * @var callback
         */
        public $_origErrorHandler;
        /**
         * @var bool
         */
        public $_registeredErrorHandler;
        /**
         * @var array<array-key, mixed>|bool
         */
        public $_errorHandlerMap;
        /**
         * @var string
         */
        public $_timestampFormat;
        /**
         * @param Zend_Log_Writer_Abstract|null $writer
         */
        public function __construct(?\Zend_Log_Writer_Abstract $writer = null)
        {
        }
        /**
         * @return Zend_Log
         *
         * @throws Zend_Log_Exception
         */
        public static function factory($config = array())
        {
        }
        /**
         * @param array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_Abstract
         *
         * @throws Zend_Log_Exception
         */
        public function _constructWriterFromConfig($config)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Filter_Interface
         *
         * @throws Zend_Log_Exception
         */
        public function _constructFilterFromConfig($config)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Formatter_Interface
         *
         * @throws Zend_Log_Exception
         */
        public function _constructFormatterFromConfig($config)
        {
        }
        /**
         * @param string $type
         * @param mixed $config
         * @param string $namespace
         *
         * @return object
         *
         * @throws Zend_Log_Exception
         */
        public function _constructFromConfig($type, $config, $namespace)
        {
        }
        /**
         * @param array<array-key, mixed> $config
         * @param string $type
         * @param string $defaultNamespace
         *
         * @return string
         *
         * @throws Zend_Log_Exception
         */
        public function getClassName($config, $type, $defaultNamespace)
        {
        }
        /**
         * @param string $message
         * @param int $priority
         *
         * @return array<array-key, mixed>
         */
        public function _packEvent($message, $priority)
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @param string $method
         * @param string $params
         *
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function __call($method, $params)
        {
        }
        /**
         * @param string $message
         * @param int $priority
         * @param mixed|null $extras
         *
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function log($message, $priority, $extras = null)
        {
        }
        /**
         * @param string $name
         * @param int $priority
         *
         * @return static
         *
         * @throws Zend_Log_Exception
         */
        public function addPriority($name, $priority)
        {
        }
        /**
         * @param Zend_Config|Zend_Log_Filter_Interface|array<array-key, mixed>|int $filter
         *
         * @return static
         *
         * @throws Zend_Log_Exception
         */
        public function addFilter($filter)
        {
        }
        /**
         * @param mixed $writer
         *
         * @return Zend_Log
         *
         * @throws Zend_Log_Exception
         */
        public function addWriter($writer)
        {
        }
        /**
         * @param string $name
         * @param string $value
         *
         * @return Zend_Log
         */
        public function setEventItem($name, $value)
        {
        }
        /**
         * @return Zend_Log
         */
        public function registerErrorHandler()
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param string $errfile
         * @param int $errline
         * @param array<array-key, mixed> $errcontext
         *
         * @return bool
         */
        public function errorHandler($errno, $errstr, $errfile, $errline, $errcontext)
        {
        }
        /**
         * @param string $format
         *
         * @return Zend_Log
         */
        public function setTimestampFormat($format)
        {
        }
        /**
         * @return string
         */
        public function getTimestampFormat()
        {
        }
    }
    class Zend_Log_Exception extends \Zend_Exception
    {
    }
    interface Zend_Log_FactoryInterface
    {
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_FactoryInterface
         */
        public static function factory($config);
    }
    class Zend_Log_Filter_Abstract implements \Zend_Log_Filter_Interface, \Zend_Log_FactoryInterface
    {
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Log_Exception
         */
        public static function _parseConfig($config)
        {
        }
    }
    interface Zend_Log_Filter_Interface
    {
        /**
         * @param array<array-key, mixed> $event
         *
         * @return bool
         */
        public function accept($event);
    }
    class Zend_Log_Filter_Message extends \Zend_Log_Filter_Abstract
    {
        /**
         * @var string
         */
        public $_regexp;
        /**
         * @param string $regexp
         *
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function __construct($regexp)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Filter_Message
         */
        public static function factory($config)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return bool
         */
        public function accept($event)
        {
        }
    }
    class Zend_Log_Filter_Priority extends \Zend_Log_Filter_Abstract
    {
        /**
         * @var int
         */
        public $_priority;
        /**
         * @var string
         */
        public $_operator;
        /**
         * @param int $priority
         * @param null|string $operator
         *
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function __construct($priority, $operator = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Filter_Priority
         */
        public static function factory($config)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return bool
         */
        public function accept($event)
        {
        }
    }
    class Zend_Log_Filter_Suppress extends \Zend_Log_Filter_Abstract
    {
        /**
         * @var bool
         */
        public $_accept;
        /**
         * @param bool $suppress
         *
         * @return void
         */
        public function suppress($suppress)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return bool
         */
        public function accept($event)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Filter_Suppress
         *
         * @throws Zend_Log_Exception
         */
        public static function factory($config)
        {
        }
    }
    class Zend_Log_Formatter_Abstract implements \Zend_Log_Formatter_Interface, \Zend_Log_FactoryInterface
    {
    }
    class Zend_Log_Formatter_Firebug extends \Zend_Log_Formatter_Abstract
    {
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Log_Formatter_Firebug
         */
        public static function factory($options)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return mixed
         */
        public function format($event)
        {
        }
    }
    interface Zend_Log_Formatter_Interface
    {
        /**
         * @param array<array-key, mixed> $event
         *
         * @return string
         */
        public function format($event);
    }
    class Zend_Log_Formatter_Simple extends \Zend_Log_Formatter_Abstract
    {
        public const DEFAULT_FORMAT = '%timestamp% %priorityName% (%priority%): %message%';
        /**
         * @var string
         */
        public $_format;
        /**
         * @param null|string $format
         *
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function __construct($format = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Log_Formatter_Simple
         */
        public static function factory($options)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return string
         */
        public function format($event)
        {
        }
    }
    class Zend_Log_Formatter_Xml extends \Zend_Log_Formatter_Abstract
    {
        /**
         * @var string
         */
        public $_rootElement;
        /**
         * @var array<array-key, mixed>
         */
        public $_elementMap;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Log_Formatter_Xml
         */
        public static function factory($options)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Log_Formatter_Xml
         */
        public function setEncoding($value)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return string
         */
        public function format($event)
        {
        }
    }
    class Zend_Log_Writer_Abstract implements \Zend_Log_FactoryInterface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_filters;
        /**
         * @var Zend_Log_Formatter_Interface
         */
        public $_formatter;
        /**
         * @param Zend_Log_Filter_Interface|int $filter
         *
         * @return Zend_Log_Writer_Abstract
         *
         * @throws Zend_Log_Exception
         */
        public function addFilter($filter)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function write($event)
        {
        }
        /**
         * @param Zend_Log_Formatter_Interface $formatter
         *
         * @return Zend_Log_Writer_Abstract
         */
        public function setFormatter(\Zend_Log_Formatter_Interface $formatter)
        {
        }
        /**
         * @return void
         */
        public function shutdown()
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        protected abstract function _write($event);
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Log_Exception
         */
        public static function _parseConfig($config)
        {
        }
    }
    class Zend_Log_Writer_Db extends \Zend_Log_Writer_Abstract
    {
        /**
         * @var Zend_Db_Adapter
         */
        public $_db;
        /**
         * @var string
         */
        public $_table;
        /**
         * @var array<array-key, mixed>|null
         */
        public $_columnMap;
        /**
         * @param Zend_Db_Adapter $db
         * @param string $table
         * @param array<array-key, mixed>|null $columnMap
         *
         * @return void
         */
        public function __construct($db, $table, $columnMap = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_Db
         */
        public static function factory($config)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function setFormatter(\Zend_Log_Formatter_Interface $formatter)
        {
        }
        /**
         * @return void
         */
        public function shutdown()
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function _write($event)
        {
        }
    }
    class Zend_Log_Writer_Firebug extends \Zend_Log_Writer_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_priorityStyles;
        /**
         * @var string
         */
        public $_defaultPriorityStyle;
        /**
         * @var bool
         */
        public $_enabled;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_Firebug
         */
        public static function factory($config)
        {
        }
        /**
         * @param bool $enabled
         *
         * @return bool
         */
        public function setEnabled($enabled)
        {
        }
        /**
         * @return bool
         */
        public function getEnabled()
        {
        }
        /**
         * @param string $style
         *
         * @return string
         */
        public function setDefaultPriorityStyle($style)
        {
        }
        /**
         * @return string
         */
        public function getDefaultPriorityStyle()
        {
        }
        /**
         * @param int $priority
         * @param string $style
         *
         * @return bool|string
         */
        public function setPriorityStyle($priority, $style)
        {
        }
        /**
         * @param int $priority
         *
         * @return bool|string
         */
        public function getPriorityStyle($priority)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function _write($event)
        {
        }
    }
    class Zend_Log_Writer_Mail extends \Zend_Log_Writer_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_eventsToMail;
        /**
         * @var array<array-key, mixed>
         */
        public $_layoutEventsToMail;
        /**
         * @var Zend_Mail
         */
        public $_mail;
        /**
         * @var Zend_Layout
         */
        public $_layout;
        /**
         * @var Zend_Log_Formatter_Interface
         */
        public $_layoutFormatter;
        /**
         * @var array<array-key, mixed>
         */
        public $_numEntriesPerPriority;
        /**
         * @var null|string
         */
        public $_subjectPrependText;
        /**
         * @var array<array-key, mixed>
         */
        public static $_methodMapHeaders;
        /**
         * @param Zend_Mail $mail
         * @param Zend_Layout|null $layout
         *
         * @return void
         */
        public function __construct(\Zend_Mail $mail, ?\Zend_Layout $layout = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_Mail
         */
        public static function factory($config)
        {
        }
        /**
         * @param Zend_Layout|array<array-key, mixed> $layout
         *
         * @return Zend_Log_Writer_Mail
         *
         * @throws Zend_Log_Exception
         */
        public function setLayout($layout)
        {
        }
        /**
         * @param array<array-key, mixed> $config
         *
         * @return Zend_Mail
         *
         * @throws Zend_Log_Exception
         */
        public static function _constructMailFromConfig(array $config)
        {
        }
        /**
         * @param array<array-key, mixed> $config
         *
         * @return Zend_Layout
         *
         * @throws Zend_Log_Exception
         */
        public function _constructLayoutFromConfig(array $config)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function _write($event)
        {
        }
        /**
         * @return Zend_Log_Formatter_Interface|null
         */
        public function getLayoutFormatter()
        {
        }
        /**
         * @param Zend_Log_Formatter_Interface $formatter
         *
         * @return Zend_Log_Writer_Mail
         *
         * @throws Zend_Log_Exception
         */
        public function setLayoutFormatter(\Zend_Log_Formatter_Interface $formatter)
        {
        }
        /**
         * @param string $subject
         *
         * @return Zend_Log_Writer_Mail
         *
         * @throws Zend_Log_Exception
         */
        public function setSubjectPrependText($subject)
        {
        }
        /**
         * @return void
         */
        public function shutdown()
        {
        }
        /**
         * @return string
         */
        public function _getFormattedNumEntriesPerPriority()
        {
        }
    }
    class Zend_Log_Writer_Mock extends \Zend_Log_Writer_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $events;
        /**
         * @var bool
         */
        public $shutdown;
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function _write($event)
        {
        }
        /**
         * @return void
         */
        public function shutdown()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_Mock
         */
        public static function factory($config)
        {
        }
    }
    class Zend_Log_Writer_Null extends \Zend_Log_Writer_Abstract
    {
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function _write($event)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_Null
         */
        public static function factory($config)
        {
        }
    }
    class Zend_Log_Writer_Stream extends \Zend_Log_Writer_Abstract
    {
        /**
         * @var null|stream
         */
        public $_stream;
        /**
         * @param array<array-key, mixed>|resource|string $streamOrUrl
         * @param null|string $mode
         *
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function __construct($streamOrUrl, $mode = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_Stream
         */
        public static function factory($config)
        {
        }
        /**
         * @return void
         */
        public function shutdown()
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         *
         * @throws Zend_Log_Exception
         */
        public function _write($event)
        {
        }
    }
    class Zend_Log_Writer_Syslog extends \Zend_Log_Writer_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_priorities;
        /**
         * @var string
         */
        public $_defaultPriority;
        /**
         * @var string
         */
        public static $_lastApplication;
        /**
         * @var string
         */
        public static $_lastFacility;
        /**
         * @var string
         */
        public $_application;
        /**
         * @var int
         */
        public $_facility;
        /**
         * @var array<array-key, mixed>
         */
        public $_validFacilities;
        /**
         * @param array<array-key, mixed> $params
         *
         * @return void
         */
        public function __construct(array $params = array())
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_Syslog
         */
        public static function factory($config)
        {
        }
        /**
         * @return void
         */
        public function _initializeValidFacilities()
        {
        }
        /**
         * @return void
         */
        public function _initializeSyslog()
        {
        }
        /**
         * @param int $facility
         *
         * @return Zend_Log_Writer_Syslog
         *
         * @throws Zend_Log_Exception
         */
        public function setFacility($facility)
        {
        }
        /**
         * @param string $application
         *
         * @return Zend_Log_Writer_Syslog
         */
        public function setApplicationName($application)
        {
        }
        /**
         * @return void
         */
        public function shutdown()
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function _write($event)
        {
        }
    }
    class Zend_Log_Writer_ZendMonitor extends \Zend_Log_Writer_Abstract
    {
        /**
         * @var bool
         */
        public $_isEnabled;
        /**
         * @var bool
         */
        public $_isZendServer;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return Zend_Log_Writer_ZendMonitor
         */
        public static function factory($config)
        {
        }
        /**
         * @return bool
         */
        public function isEnabled()
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function write($event)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function _write($event)
        {
        }
    }
    class Zend_Mail extends \Zend_Mime_Message
    {
        /**
         * @var Zend_Mail_Transport_Abstract
         */
        public static $_defaultTransport;
        /**
         * @var array<array-key, mixed>
         */
        public static $_defaultFrom;
        /**
         * @var array<array-key, mixed>
         */
        public static $_defaultReplyTo;
        /**
         * @var string
         */
        public $_charset;
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var string
         */
        public $_headerEncoding;
        /**
         * @var string
         */
        public $_from;
        /**
         * @var array<array-key, mixed>
         */
        public $_to;
        /**
         * @var array<array-key, mixed>
         */
        public $_recipients;
        /**
         * @var string
         */
        public $_replyTo;
        /**
         * @var string
         */
        public $_returnPath;
        /**
         * @var string
         */
        public $_subject;
        /**
         * @var string
         */
        public $_date;
        /**
         * @var string
         */
        public $_messageId;
        /**
         * @var Zend_Mime_Part|false
         */
        public $_bodyText;
        /**
         * @var Zend_Mime_Part|false
         */
        public $_bodyHtml;
        /**
         * @var string
         */
        public $_mimeBoundary;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var bool
         */
        public $hasAttachments;
        /**
         * @param Zend_Mail_Transport_Abstract $transport
         */
        public static function setDefaultTransport(\Zend_Mail_Transport_Abstract $transport)
        {
        }
        public static function getDefaultTransport()
        {
        }
        public static function clearDefaultTransport()
        {
        }
        /**
         * @param null|string $charset
         */
        public function __construct($charset = null)
        {
        }
        /**
         * @return string
         */
        public function getCharset()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $boundary
         *
         * @return Zend_Mail
         */
        public function setMimeBoundary($boundary)
        {
        }
        /**
         * @return string
         */
        public function getMimeBoundary()
        {
        }
        /**
         * @return string
         */
        public function getEncodingOfHeaders()
        {
        }
        /**
         * @return string
         */
        public function getHeaderEncoding()
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Mail
         */
        public function setEncodingOfHeaders($encoding)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setHeaderEncoding($encoding)
        {
        }
        /**
         * @param string $txt
         * @param null|string $charset
         * @param string $encoding
         *
         * @return Zend_Mail
         */
        public function setBodyText($txt, $charset = null, $encoding)
        {
        }
        /**
         * @param bool $textOnly
         *
         * @return Zend_Mime_Part|false|string
         */
        public function getBodyText($textOnly = false)
        {
        }
        /**
         * @param string $html
         * @param null|string $charset
         * @param string $encoding
         *
         * @return Zend_Mail
         */
        public function setBodyHtml($html, $charset = null, $encoding)
        {
        }
        /**
         * @param bool $htmlOnly
         *
         * @return Zend_Mime_Part|false|string
         */
        public function getBodyHtml($htmlOnly = false)
        {
        }
        /**
         * @param Zend_Mime_Part $attachment
         *
         * @return Zend_Mail
         */
        public function addAttachment(\Zend_Mime_Part $attachment)
        {
        }
        /**
         * @param string $body
         * @param string $mimeType
         * @param string $disposition
         * @param string $encoding
         * @param null|string $filename
         *
         * @return Zend_Mime_Part
         */
        public function createAttachment($body, $mimeType, $disposition, $encoding, $filename = null)
        {
        }
        /**
         * @return int
         */
        public function getPartCount()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _encodeHeader($value)
        {
        }
        /**
         * @param string $headerName
         * @param string $value
         * @param bool $append
         */
        public function _storeHeader($headerName, $value, $append = false)
        {
        }
        /**
         * @param string $headerName
         */
        public function _clearHeader($headerName)
        {
        }
        /**
         * @param string $headerName
         * @param string $email
         * @param string $name
         */
        public function _addRecipientAndHeader($headerName, $email, $name)
        {
        }
        /**
         * @param array<array-key, mixed>|string $email
         * @param string $name
         *
         * @return Zend_Mail
         */
        public function addTo($email, $name = '')
        {
        }
        /**
         * @param array<array-key, mixed>|string $email
         * @param string $name
         *
         * @return Zend_Mail
         */
        public function addCc($email, $name = '')
        {
        }
        /**
         * @param array<array-key, mixed>|string $email
         *
         * @return Zend_Mail
         */
        public function addBcc($email)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRecipients()
        {
        }
        /**
         * @param string $headerName
         *
         * @return Zend_Mail
         */
        public function clearHeader($headerName)
        {
        }
        /**
         * @return Zend_Mail
         */
        public function clearRecipients()
        {
        }
        /**
         * @param string $email
         * @param null|string $name
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setFrom($email, $name = null)
        {
        }
        /**
         * @param string $email
         * @param null|string $name
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setReplyTo($email, $name = null)
        {
        }
        /**
         * @return string
         */
        public function getFrom()
        {
        }
        /**
         * @return null|string
         */
        public function getReplyTo()
        {
        }
        /**
         * @return Zend_Mail
         */
        public function clearFrom()
        {
        }
        /**
         * @return Zend_Mail
         */
        public function clearReplyTo()
        {
        }
        /**
         * @param string $email
         * @param null|string $name
         *
         * @return void
         */
        public static function setDefaultFrom($email, $name = null)
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public static function getDefaultFrom()
        {
        }
        /**
         * @return void
         */
        public static function clearDefaultFrom()
        {
        }
        /**
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setFromToDefaultFrom()
        {
        }
        /**
         * @param string $email
         * @param null|string $name
         *
         * @return void
         */
        public static function setDefaultReplyTo($email, $name = null)
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public static function getDefaultReplyTo()
        {
        }
        /**
         * @return void
         */
        public static function clearDefaultReplyTo()
        {
        }
        /**
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setReplyToFromDefault()
        {
        }
        /**
         * @param string $email
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setReturnPath($email)
        {
        }
        /**
         * @return string
         */
        public function getReturnPath()
        {
        }
        /**
         * @return Zend_Mail
         */
        public function clearReturnPath()
        {
        }
        /**
         * @param string $subject
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setSubject($subject)
        {
        }
        /**
         * @return string
         */
        public function getSubject()
        {
        }
        /**
         * @return Zend_Mail
         */
        public function clearSubject()
        {
        }
        /**
         * @param Zend_Date|int|null|string $date
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setDate($date = null)
        {
        }
        /**
         * @return string
         */
        public function getDate()
        {
        }
        /**
         * @return Zend_Mail
         */
        public function clearDate()
        {
        }
        /**
         * @param bool|string $id
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function setMessageId($id = true)
        {
        }
        /**
         * @return string
         */
        public function getMessageId()
        {
        }
        /**
         * @return Zend_Mail
         */
        public function clearMessageId()
        {
        }
        /**
         * @return string
         */
        public function createMessageId()
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param bool $append
         *
         * @return Zend_Mail
         *
         * @throws Zend_Mail_Exception
         */
        public function addHeader($name, $value, $append = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        /**
         * @param Zend_Mail_Transport_Abstract|null $transport
         *
         * @return Zend_Mail
         */
        public function send($transport = null)
        {
        }
        /**
         * @param string $email
         *
         * @return string
         */
        public function _filterEmail($email)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _filterName($name)
        {
        }
        /**
         * @param string $data
         *
         * @return string
         */
        public function _filterOther($data)
        {
        }
        /**
         * @param string $email
         * @param string $name
         *
         * @return string
         */
        public function _formatAddress($email, $name)
        {
        }
    }
    class Zend_Mail_Exception extends \Zend_Exception
    {
    }
    class Zend_Mail_Header_HeaderName
    {
        public function __construct()
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public static function filter($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public static function isValid($name)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         *
         * @throws \Exception\RuntimeException
         */
        public static function assertValid($name)
        {
        }
    }
    class Zend_Mail_Header_HeaderValue
    {
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function filter($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public static function isValid($value)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         *
         * @throws \Exception\RuntimeException
         */
        public static function assertValid($value)
        {
        }
    }
    class Zend_Mail_Message extends \Zend_Mail_Part
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_flags;
        /**
         * @throws Zend_Mail_Exception
         */
        public function __construct(array $params)
        {
        }
        /**
         * @return string
         */
        public function getTopLines()
        {
        }
        /**
         * @param mixed $flag
         *
         * @return bool
         */
        public function hasFlag($flag)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFlags()
        {
        }
    }
    class Zend_Mail_Message_File extends \Zend_Mail_Part_File
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_flags;
        /**
         * @throws Zend_Mail_Exception
         */
        public function __construct(array $params)
        {
        }
        /**
         * @return string
         */
        public function getTopLines()
        {
        }
        /**
         * @param mixed $flag
         *
         * @return bool
         */
        public function hasFlag($flag)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFlags()
        {
        }
    }
    interface Zend_Mail_Message_Interface
    {
        /**
         * @return string
         */
        public function getTopLines();
        /**
         * @param mixed $flag
         *
         * @return bool
         */
        public function hasFlag($flag);
        /**
         * @return array<array-key, mixed>
         */
        public function getFlags();
    }
    class Zend_Mail_Part implements \RecursiveIterator, \Zend_Mail_Part_Interface
    {
        /**
         * @var array<array-key, mixed>|null
         */
        public $_headers;
        /**
         * @var null|string
         */
        public $_content;
        /**
         * @var string
         */
        public $_topLines;
        /**
         * @var array<array-key, mixed>
         */
        public $_parts;
        /**
         * @var int|null
         */
        public $_countParts;
        /**
         * @var int
         */
        public $_iterationPos;
        /**
         * @var Zend_Mail_Storage_Abstract|null
         */
        public $_mail;
        /**
         * @var int
         */
        public $_messageNum;
        /**
         * @var string
         */
        public $_partClass;
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Exception
         */
        public function __construct(array $params)
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Mail_Part
         */
        public function setPartClass($class)
        {
        }
        /**
         * @return string
         */
        public function getPartClass()
        {
        }
        /**
         * @return bool
         */
        public function isMultipart()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Mail_Exception
         */
        public function getContent()
        {
        }
        /**
         * @return int
         */
        public function getSize()
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Exception
         */
        public function _cacheContent()
        {
        }
        /**
         * @param int $num
         *
         * @return Zend_Mail_Part
         *
         * @throws Zend_Mail_Exception
         */
        public function getPart($num)
        {
        }
        /**
         * @return int
         */
        public function countParts()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        /**
         * @param string $name
         * @param null|string $format
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Exception
         */
        public function getHeader($name, $format = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function headerExists($name)
        {
        }
        /**
         * @param string $name
         * @param string $wantedPart
         * @param string $firstName
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Exception,
         */
        public function getHeaderField($name, $wantedPart = 0, $firstName = 0)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         *
         * @throws Zend_Mail_Exception
         */
        public function __get($name)
        {
        }
        public function __isset($name)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return Zend_Mail_Part
         */
        public function getChildren()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return null
         */
        public function next()
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
        /**
         * @return Zend_Mail_Part
         */
        public function current()
        {
        }
        /**
         * @return null
         */
        public function rewind()
        {
        }
        /**
         * @param array<array-key, mixed> $headers
         * @param bool $assertNames
         */
        public function _validateHeaders(array $headers, $assertNames = true)
        {
        }
    }
    class Zend_Mail_Part_File extends \Zend_Mail_Part
    {
        public $_contentPos = array();
        public $_partPos = array();
        public $_fh;
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Exception
         */
        public function __construct(array $params)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Mail_Exception
         */
        public function getContent($stream = null)
        {
        }
        /**
         * @return int
         */
        public function getSize()
        {
        }
        /**
         * @param int $num
         *
         * @return Zend_Mail_Part
         *
         * @throws Zend_Mail_Exception
         */
        public function getPart($num)
        {
        }
    }
    interface Zend_Mail_Part_Interface extends \RecursiveIterator
    {
        /**
         * @return bool
         */
        public function isMultipart();
        /**
         * @return string
         *
         * @throws Zend_Mail_Exception
         */
        public function getContent();
        /**
         * @return int
         */
        public function getSize();
        /**
         * @param int $num
         *
         * @return Zend_Mail_Part
         *
         * @throws Zend_Mail_Exception
         */
        public function getPart($num);
        /**
         * @return int
         */
        public function countParts();
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders();
        /**
         * @param string $name
         * @param null|string $format
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Exception
         */
        public function getHeader($name, $format = null);
        /**
         * @param string $name
         * @param string $wantedPart
         * @param string $firstName
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Exception,
         */
        public function getHeaderField($name, $wantedPart = 0, $firstName = 0);
        /**
         * @param string $name
         *
         * @return string
         *
         * @throws Zend_Mail_Exception
         */
        public function __get($name);
        /**
         * @return string
         */
        public function __toString();
    }
    class Zend_Mail_Protocol_Abstract
    {
        public const EOL = '
';
        public const TIMEOUT_CONNECTION = 30;
        /**
         * @var int
         */
        public $_maximumLog;
        /**
         * @var string
         */
        public $_host;
        /**
         * @var int
         */
        public $_port;
        /**
         * @var Zend_Validate
         */
        public $_validHost;
        /**
         * @var resource
         */
        public $_socket;
        /**
         * @var string
         */
        public $_request;
        /**
         * @var array<array-key, mixed>
         */
        public $_response;
        /**
         * @var resource
         */
        public $_template;
        /**
         * @var array<array-key, mixed>
         */
        public $_log;
        /**
         * @param string $host
         * @param int|null $port
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function __construct($host = '127.0.0.1', $port = null)
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @param int $maximumLog
         *
         * @return void
         */
        public function setMaximumLog($maximumLog)
        {
        }
        /**
         * @return int
         */
        public function getMaximumLog()
        {
        }
        public abstract function connect();
        /**
         * @return string
         */
        public function getRequest()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getResponse()
        {
        }
        /**
         * @return string
         */
        public function getLog()
        {
        }
        /**
         * @return void
         */
        public function resetLog()
        {
        }
        /**
         * @return void
         */
        public function _addLog($value)
        {
        }
        /**
         * @param string $remote
         *
         * @return bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _connect($remote)
        {
        }
        /**
         * @return void
         */
        public function _disconnect()
        {
        }
        /**
         * @param string $request
         *
         * @return bool|int
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _send($request)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _receive($timeout = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $code
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _expect($code, $timeout = null)
        {
        }
        /**
         * @param int $timeout
         *
         * @return bool
         */
        public function _setStreamTimeout($timeout)
        {
        }
    }
    class Zend_Mail_Protocol_Exception extends \Zend_Mail_Exception
    {
    }
    class Zend_Mail_Protocol_Imap
    {
        public const TIMEOUT_CONNECTION = 30;
        /**
         * @var null|resource
         */
        public $_socket;
        /**
         * @var int
         */
        public $_tagCount;
        /**
         * @param string $host
         * @param int|null $port
         * @param bool $ssl
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function __construct($host = '', $port = null, $ssl = false)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param string $host
         * @param int|null $port
         * @param bool|string $ssl
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function connect($host, $port = null, $ssl = false)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _nextLine()
        {
        }
        /**
         * @param string $start
         *
         * @return bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _assumedNextLine($start)
        {
        }
        /**
         * @param string $tag
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _nextTaggedLine(&$tag)
        {
        }
        /**
         * @param string $line
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _decodeLine($line)
        {
        }
        /**
         * @param array<array-key, mixed>|string $tokens
         * @param string $wantedTag
         * @param bool $dontParse
         *
         * @return bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function readLine(&$tokens = array(), $wantedTag = '*', $dontParse = false)
        {
        }
        /**
         * @param string $tag
         * @param bool $dontParse
         *
         * @return array<array-key, mixed>|bool|null
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function readResponse($tag, $dontParse = false)
        {
        }
        /**
         * @param string $command
         * @param array<array-key, mixed> $tokens
         * @param null|string $tag
         *
         * @return null
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function sendRequest($command, $tokens = array(), &$tag = null)
        {
        }
        /**
         * @param string $command
         * @param array<array-key, mixed> $tokens
         * @param bool $dontParse
         *
         * @return mixed
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function requestAndResponse($command, $tokens = array(), $dontParse = false)
        {
        }
        /**
         * @param array<array-key, mixed>|string $string
         *
         * @return array<array-key, mixed>|string
         */
        public function escapeString($string)
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return string
         */
        public function escapeList($list)
        {
        }
        /**
         * @param string $user
         * @param string $password
         *
         * @return bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function login($user, $password)
        {
        }
        /**
         * @return bool
         */
        public function logout()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function capability()
        {
        }
        /**
         * @param string $command
         * @param string $box
         *
         * @return array<array-key, mixed>|bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function examineOrSelect($command = 'EXAMINE', $box = 'INBOX')
        {
        }
        /**
         * @param string $box
         *
         * @return array<array-key, mixed>|bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function select($box = 'INBOX')
        {
        }
        /**
         * @param string $box
         *
         * @return array<array-key, mixed>|bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function examine($box = 'INBOX')
        {
        }
        /**
         * @param array<array-key, mixed>|string $items
         * @param int $from
         * @param int|null $to
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function fetch($items, $from, $to = null)
        {
        }
        /**
         * @param string $reference
         * @param string $mailbox
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function listMailbox($reference = '', $mailbox = '*')
        {
        }
        /**
         * @param array<array-key, mixed> $flags
         * @param int $from
         * @param int|null $to
         * @param null|string $mode
         * @param bool $silent
         *
         * @return array<array-key, mixed>|bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function store(array $flags, $from, $to = null, $mode = null, $silent = true)
        {
        }
        /**
         * @param string $folder
         * @param string $message
         * @param array<array-key, mixed>|null $flags
         * @param null|string $date
         *
         * @return bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function append($folder, $message, $flags = null, $date = null)
        {
        }
        /**
         * @param string $folder
         * @param int|null $to
         *
         * @return bool
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function copy($folder, $from, $to = null)
        {
        }
        /**
         * @param string $folder
         *
         * @return bool
         */
        public function create($folder)
        {
        }
        /**
         * @param string $old
         * @param string $new
         *
         * @return bool
         */
        public function rename($old, $new)
        {
        }
        /**
         * @param string $folder
         *
         * @return bool
         */
        public function delete($folder)
        {
        }
        /**
         * @return bool
         */
        public function expunge()
        {
        }
        /**
         * @return bool
         */
        public function noop()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function search(array $params)
        {
        }
    }
    class Zend_Mail_Protocol_Pop3
    {
        public const TIMEOUT_CONNECTION = 30;
        /**
         * @var bool|null
         */
        public $hasTop;
        /**
         * @var null|resource
         */
        public $_socket;
        /**
         * @var null|string
         */
        public $_timestamp;
        /**
         * @param string $host
         * @param int|null $port
         * @param bool|string $ssl
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function __construct($host = '', $port = null, $ssl = false)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param string $host
         * @param int|null $port
         * @param bool|string $ssl
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function connect($host, $port = null, $ssl = false)
        {
        }
        /**
         * @param string $request
         *
         * @return null
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function sendRequest($request)
        {
        }
        /**
         * @param bool $multiline
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function readResponse($multiline = false)
        {
        }
        /**
         * @param string $request
         * @param bool $multiline
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function request($request, $multiline = false)
        {
        }
        /**
         * @return null
         */
        public function logout()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function capa()
        {
        }
        /**
         * @param string $user
         * @param string $password
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function login($user, $password, $tryApop = true)
        {
        }
        /**
         * @param int $messages
         * @param int $octets
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function status(&$messages, &$octets)
        {
        }
        /**
         * @param int|null $msgno
         *
         * @return array<array-key, mixed>|int
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function getList($msgno = null)
        {
        }
        /**
         * @param int|null $msgno
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function uniqueid($msgno = null)
        {
        }
        /**
         * @param int $msgno
         * @param int $lines
         * @param bool $fallback
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function top($msgno, $lines = 0, $fallback = false)
        {
        }
        /**
         * @param int $msgno
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function retrive($msgno)
        {
        }
        /**
         * @param int $msgno
         *
         * @return string
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function retrieve($msgno)
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function noop()
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function delete($msgno)
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function undelete()
        {
        }
    }
    class Zend_Mail_Protocol_Smtp extends \Zend_Mail_Protocol_Abstract
    {
        public const EOL = '
';
        public const TIMEOUT_CONNECTION = 30;
        /**
         * @var string
         */
        public $_transport;
        /**
         * @var string
         */
        public $_secure;
        /**
         * @var bool
         */
        public $_sess;
        /**
         * @var unknown_type
         */
        public $_helo;
        /**
         * @var unknown_type
         */
        public $_auth;
        /**
         * @var unknown_type
         */
        public $_mail;
        /**
         * @var unknown_type
         */
        public $_rcpt;
        /**
         * @var unknown_type
         */
        public $_data;
        /**
         * @param string $host
         * @param int|null $port
         * @param array<array-key, mixed> $config
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function __construct($host = '127.0.0.1', $port = null, array $config = array())
        {
        }
        /**
         * @return bool
         */
        public function connect()
        {
        }
        /**
         * @param string $host
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function helo($host = '127.0.0.1')
        {
        }
        /**
         * @param string $host
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function _ehlo($host)
        {
        }
        /**
         * @param string $from
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function mail($from)
        {
        }
        /**
         * @param string $to
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function rcpt($to)
        {
        }
        /**
         * @param string $data
         *
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function data($data)
        {
        }
        /**
         * @return void
         */
        public function rset()
        {
        }
        /**
         * @return void
         */
        public function noop()
        {
        }
        /**
         * @param string $user
         *
         * @return void
         */
        public function vrfy($user)
        {
        }
        /**
         * @return void
         */
        public function quit()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function auth()
        {
        }
        /**
         * @return void
         */
        public function disconnect()
        {
        }
        /**
         * @return void
         */
        public function _startSession()
        {
        }
        /**
         * @return void
         */
        public function _stopSession()
        {
        }
    }
    class Zend_Mail_Protocol_Smtp_Auth_Crammd5 extends \Zend_Mail_Protocol_Smtp
    {
        public const EOL = '
';
        public const TIMEOUT_CONNECTION = 30;
        /**
         * @param string $host
         * @param int|null $port
         * @param array<array-key, mixed>|null $config
         *
         * @return void
         */
        public function __construct($host = '127.0.0.1', $port = null, $config = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function auth()
        {
        }
        /**
         * @param string $key
         * @param string $data
         * @param string $block
         *
         * @return string
         */
        public function _hmacMd5($key, $data, $block = 64)
        {
        }
    }
    class Zend_Mail_Protocol_Smtp_Auth_Login extends \Zend_Mail_Protocol_Smtp
    {
        public const EOL = '
';
        public const TIMEOUT_CONNECTION = 30;
        /**
         * @var string
         */
        public $_username;
        /**
         * @var string
         */
        public $_password;
        /**
         * @param string $host
         * @param int|null $port
         * @param array<array-key, mixed>|null $config
         *
         * @return void
         */
        public function __construct($host = '127.0.0.1', $port = null, $config = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function auth()
        {
        }
    }
    class Zend_Mail_Protocol_Smtp_Auth_Plain extends \Zend_Mail_Protocol_Smtp
    {
        public const EOL = '
';
        public const TIMEOUT_CONNECTION = 30;
        /**
         * @var string
         */
        public $_username;
        /**
         * @var string
         */
        public $_password;
        /**
         * @param string $host
         * @param int|null $port
         * @param array<array-key, mixed>|null $config
         *
         * @return void
         */
        public function __construct($host = '127.0.0.1', $port = null, $config = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function auth()
        {
        }
    }
    class Zend_Mail_Storage
    {
        public const FLAG_PASSED = 'Passed';
        public const FLAG_SEEN = '\\Seen';
        public const FLAG_UNSEEN = '\\Unseen';
        public const FLAG_ANSWERED = '\\Answered';
        public const FLAG_FLAGGED = '\\Flagged';
        public const FLAG_DELETED = '\\Deleted';
        public const FLAG_DRAFT = '\\Draft';
        public const FLAG_RECENT = '\\Recent';
    }
    class Zend_Mail_Storage_Abstract implements \Countable, \ArrayAccess, \SeekableIterator
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_has;
        /**
         * @var int
         */
        public $_iterationPos;
        /**
         * @var int|null
         */
        public $_iterationMax;
        /**
         * @var string
         */
        public $_messageClass;
        /**
         * @param string $var
         *
         * @return bool
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __get($var)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public abstract function countMessages();
        /**
         * @param int $id
         *
         * @return array<array-key, mixed>|int
         */
        public abstract function getSize($id = 0);
        /**
         * @param int $id
         *
         * @return Zend_Mail_Message
         */
        public abstract function getMessage($id);
        /**
         * @param int $id
         * @param array<array-key, mixed>|null|string $part
         * @param int $topLines
         *
         * @return string
         */
        public abstract function getRawHeader($id, $part = null, $topLines = 0);
        /**
         * @param int $id
         * @param array<array-key, mixed>|null|string $part
         *
         * @return string
         */
        public abstract function getRawContent($id, $part = null);
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public abstract function __construct($params);
        public function __destruct()
        {
        }
        /**
         * @return null
         */
        public abstract function close();
        /**
         * @return null
         */
        public abstract function noop();
        /**
         * @return null
         */
        public abstract function removeMessage($id);
        /**
         * @param int|null $id
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public abstract function getUniqueId($id = null);
        /**
         * @param string $id
         *
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public abstract function getNumberByUniqueId($id);
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        public function offsetExists($id)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Mail_Message
         */
        public function offsetGet($id)
        {
        }
        /**
         * @param id $id
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function offsetSet($id, $value)
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        public function offsetUnset($id)
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return Zend_Mail_Message
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $pos
         *
         * @return void
         *
         * @throws OutOfBoundsException
         */
        public function seek($pos)
        {
        }
    }
    class Zend_Mail_Storage_Exception extends \Zend_Mail_Exception
    {
    }
    class Zend_Mail_Storage_Folder implements \RecursiveIterator
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_folders;
        /**
         * @var string
         */
        public $_localName;
        /**
         * @var string
         */
        public $_globalName;
        /**
         * @var bool
         */
        public $_selectable;
        /**
         * @param string $localName
         * @param string $globalName
         * @param bool $selectable
         * @param array<array-key, mixed> $folders
         */
        public function __construct($localName, $globalName = '', $selectable = true, array $folders = array())
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return Zend_Mail_Storage_Folder
         */
        public function getChildren()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return null
         */
        public function next()
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
        /**
         * @return Zend_Mail_Storage_Folder
         */
        public function current()
        {
        }
        /**
         * @return null
         */
        public function rewind()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Mail_Storage_Folder
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param Zend_Mail_Storage_Folder $folder
         *
         * @return null
         */
        public function __set($name, \Zend_Mail_Storage_Folder $folder)
        {
        }
        /**
         * @param string $name
         *
         * @return null
         */
        public function __unset($name)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function getLocalName()
        {
        }
        /**
         * @return string
         */
        public function getGlobalName()
        {
        }
        /**
         * @return bool
         */
        public function isSelectable()
        {
        }
        /**
         * @return bool
         */
        public function isLeaf()
        {
        }
    }
    interface Zend_Mail_Storage_Folder_Interface
    {
        /**
         * @param null|string $rootFolder
         *
         * @return Zend_Mail_Storage_Folder
         */
        public function getFolders($rootFolder = null);
        /**
         * @param Zend_Mail_Storage_Folder|string $globalName
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function selectFolder($globalName);
        /**
         * @return Zend_Mail_Storage_Folder
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getCurrentFolder();
    }
    class Zend_Mail_Storage_Folder_Maildir extends \Zend_Mail_Storage_Maildir
    {
        /**
         * @var Zend_Mail_Storage_Folder
         */
        public $_rootFolder;
        /**
         * @var string
         */
        public $_rootdir;
        /**
         * @var string
         */
        public $_currentFolder;
        /**
         * @var string
         */
        public $_delim;
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __construct($params)
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function _buildFolderTree()
        {
        }
        /**
         * @param null|string $rootFolder
         *
         * @return Zend_Mail_Storage_Folder
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getFolders($rootFolder = null)
        {
        }
        /**
         * @param Zend_Mail_Storage_Folder|string $globalName
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function selectFolder($globalName)
        {
        }
        /**
         * @return Zend_Mail_Storage_Folder
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getCurrentFolder()
        {
        }
    }
    class Zend_Mail_Storage_Folder_Mbox extends \Zend_Mail_Storage_Mbox
    {
        /**
         * @var Zend_Mail_Storage_Folder
         */
        public $_rootFolder;
        /**
         * @var string
         */
        public $_rootdir;
        /**
         * @var string
         */
        public $_currentFolder;
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __construct($params)
        {
        }
        /**
         * @param string $currentDir
         * @param Zend_Mail_Storage_Folder|null $parentFolder
         * @param string $parentGlobalName
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function _buildFolderTree($currentDir, $parentFolder = null, $parentGlobalName = '')
        {
        }
        /**
         * @param null|string $rootFolder
         *
         * @return Zend_Mail_Storage_Folder
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getFolders($rootFolder = null)
        {
        }
        /**
         * @param Zend_Mail_Storage_Folder|string $globalName
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function selectFolder($globalName)
        {
        }
        /**
         * @return Zend_Mail_Storage_Folder
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getCurrentFolder()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __wakeup()
        {
        }
    }
    class Zend_Mail_Storage_Imap extends \Zend_Mail_Storage_Abstract
    {
        /**
         * @var Zend_Mail_Protocol_Imap|null
         */
        public $_protocol;
        /**
         * @var string
         */
        public $_currentFolder;
        /**
         * @var array<array-key, mixed>
         */
        public static $_knownFlags;
        /**
         * @var array<array-key, mixed>
         */
        public static $_searchFlags;
        /**
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         * @throws Zend_Mail_Protocol_Exception
         */
        public function countMessages($flags = null)
        {
        }
        /**
         * @param int $id
         *
         * @return array<array-key, mixed>|int
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function getSize($id = 0)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Mail_Message
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function getMessage($id)
        {
        }
        public function getRawHeader($id, $part = null, $topLines = 0)
        {
        }
        public function getRawContent($id, $part = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Storage_Exception
         * @throws Zend_Mail_Protocol_Exception
         */
        public function __construct($params)
        {
        }
        /**
         * @return null
         */
        public function close()
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function noop()
        {
        }
        /**
         * @param int $id
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function removeMessage($id)
        {
        }
        /**
         * @param int|null $id
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getUniqueId($id = null)
        {
        }
        /**
         * @param string $id
         *
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getNumberByUniqueId($id)
        {
        }
        /**
         * @param null|string $rootFolder
         *
         * @return Zend_Mail_Storage_Folder
         *
         * @throws Zend_Mail_Storage_Exception
         * @throws Zend_Mail_Protocol_Exception
         */
        public function getFolders($rootFolder = null)
        {
        }
        /**
         * @param Zend_Mail_Storage_Folder|string $globalName
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         * @throws Zend_Mail_Protocol_Exception
         */
        public function selectFolder($globalName)
        {
        }
        /**
         * @return Zend_Mail_Storage_Folder
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getCurrentFolder()
        {
        }
        /**
         * @param string $name
         * @param Zend_Mail_Storage_Folder|null|string $parentFolder
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function createFolder($name, $parentFolder = null)
        {
        }
        /**
         * @param Zend_Mail_Storage_Folder|string $name
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function removeFolder($name)
        {
        }
        /**
         * @param Zend_Mail_Storage_Folder|string $oldName
         * @param string $newName
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function renameFolder($oldName, $newName)
        {
        }
        /**
         * @param string $message
         * @param Zend_Mail_Storage_Folder|null|string $folder
         * @param array<array-key, mixed>|null $flags
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function appendMessage($message, $folder = null, $flags = null)
        {
        }
        /**
         * @param int $id
         * @param Zend_Mail_Storage_Folder|string $folder
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function copyMessage($id, $folder)
        {
        }
        /**
         * @param int $id
         * @param Zend_Mail_Storage_Folder|string $folder
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function moveMessage($id, $folder)
        {
        }
        /**
         * @param int $id
         * @param array<array-key, mixed> $flags
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function setFlags($id, $flags)
        {
        }
    }
    class Zend_Mail_Storage_Maildir extends \Zend_Mail_Storage_Abstract
    {
        /**
         * @var string
         */
        public $_messageClass;
        /**
         * @var array<array-key, mixed>
         */
        public $_files;
        /**
         * @var array<array-key, mixed>
         */
        public static $_knownFlags;
        /**
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function countMessages($flags = null)
        {
        }
        /**
         * @param int $id
         * @param null|string $field
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function _getFileData($id, $field = null)
        {
        }
        /**
         * @param int|null $id
         *
         * @return array<array-key, mixed>|int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getSize($id = null)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Mail_Message_File
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getMessage($id)
        {
        }
        public function getRawHeader($id, $part = null, $topLines = 0)
        {
        }
        public function getRawContent($id, $part = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __construct($params)
        {
        }
        /**
         * @param string $dirname
         *
         * @return bool
         */
        public function _isMaildir($dirname)
        {
        }
        /**
         * @param string $dirname
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function _openMaildir($dirname)
        {
        }
        /**
         * @param resource $dh
         * @param string $dirname
         * @param array<array-key, mixed> $default_flags
         *
         * @return null
         */
        public function _getMaildirFiles($dh, $dirname, $default_flags = array())
        {
        }
        /**
         * @return void
         */
        public function close()
        {
        }
        /**
         * @return void
         */
        public function noop()
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function removeMessage($id)
        {
        }
        /**
         * @param int|null $id
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getUniqueId($id = null)
        {
        }
        /**
         * @param string $id
         *
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getNumberByUniqueId($id)
        {
        }
    }
    class Zend_Mail_Storage_Mbox extends \Zend_Mail_Storage_Abstract
    {
        /**
         * @var null|resource
         */
        public $_fh;
        /**
         * @var string
         */
        public $_filename;
        /**
         * @var int
         */
        public $_filemtime;
        /**
         * @var array<array-key, mixed>
         */
        public $_positions;
        /**
         * @var string
         */
        public $_messageClass;
        /**
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function countMessages()
        {
        }
        /**
         * @param int|null $id
         *
         * @return array<array-key, mixed>|int
         */
        public function getSize($id = 0)
        {
        }
        /**
         * @param int $id
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function _getPos($id)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Mail_Message_File
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getMessage($id)
        {
        }
        public function getRawHeader($id, $part = null, $topLines = 0)
        {
        }
        public function getRawContent($id, $part = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __construct($params)
        {
        }
        /**
         * @param resource|string $file
         * @param bool $fileIsString
         *
         * @return bool
         */
        public function _isMboxFile($file, $fileIsString = true)
        {
        }
        /**
         * @param string $filename
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function _openMboxFile($filename)
        {
        }
        /**
         * @return void
         */
        public function close()
        {
        }
        /**
         * @return void
         */
        public function noop()
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function removeMessage($id)
        {
        }
        /**
         * @param int|null $id
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getUniqueId($id = null)
        {
        }
        /**
         * @param string $id
         *
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getNumberByUniqueId($id)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __wakeup()
        {
        }
    }
    class Zend_Mail_Storage_Pop3 extends \Zend_Mail_Storage_Abstract
    {
        /**
         * @var Zend_Mail_Protocol_Pop3|null
         */
        public $_protocol;
        /**
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         * @throws Zend_Mail_Protocol_Exception
         */
        public function countMessages()
        {
        }
        /**
         * @param int $id
         *
         * @return array<array-key, mixed>|int
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function getSize($id = 0)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Mail_Message
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function getMessage($id)
        {
        }
        public function getRawHeader($id, $part = null, $topLines = 0)
        {
        }
        public function getRawContent($id, $part = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Storage_Exception
         * @throws Zend_Mail_Protocol_Exception
         */
        public function __construct($params)
        {
        }
        /**
         * @return null
         */
        public function close()
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function noop()
        {
        }
        /**
         * @param int $id
         *
         * @return null
         *
         * @throws Zend_Mail_Protocol_Exception
         */
        public function removeMessage($id)
        {
        }
        /**
         * @param int|null $id
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getUniqueId($id = null)
        {
        }
        /**
         * @param string $id
         *
         * @return int
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function getNumberByUniqueId($id)
        {
        }
        /**
         * @param string $var
         *
         * @return string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __get($var)
        {
        }
    }
    interface Zend_Mail_Storage_Writable_Interface
    {
        /**
         * @param string $name
         * @param Zend_Mail_Storage_Folder|null|string $parentFolder
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function createFolder($name, $parentFolder = null);
        /**
         * @param Zend_Mail_Storage_Folder|string $name
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function removeFolder($name);
        /**
         * @param Zend_Mail_Storage_Folder|string $oldName
         * @param string $newName
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function renameFolder($oldName, $newName);
        /**
         * @param Zend_Mail_Message|Zend_Mime_Message|string $message
         * @param Zend_Mail_Storage_Folder|null|string $folder
         * @param array<array-key, mixed>|null $flags
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function appendMessage($message, $folder = null, $flags = null);
        /**
         * @param int $id
         * @param Zend_Mail_Storage_Folder|string $folder
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function copyMessage($id, $folder);
        /**
         * @param int $id
         * @param Zend_Mail_Storage_Folder|string $folder
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function moveMessage($id, $folder);
        /**
         * @param int $id
         * @param array<array-key, mixed> $flags
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function setFlags($id, $flags);
    }
    class Zend_Mail_Storage_Writable_Maildir extends \Zend_Mail_Storage_Folder_Maildir
    {
        /**
         * @var bool|int
         */
        public $_quota;
        /**
         * @param string $dir
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public static function initMaildir($dir)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function __construct($params)
        {
        }
        /**
         * @param string $name
         * @param Zend_Mail_Storage_Folder|null|string $parentFolder
         *
         * @return string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function createFolder($name, $parentFolder = null)
        {
        }
        /**
         * @param Zend_Mail_Storage_Folder|string $name
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function removeFolder($name)
        {
        }
        /**
         * @param Zend_Mail_Storage_Folder|string $oldName
         * @param string $newName
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function renameFolder($oldName, $newName)
        {
        }
        /**
         * @return string
         */
        public function _createUniqueId()
        {
        }
        /**
         * @param string $folder
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function _createTmpFile($folder = 'INBOX')
        {
        }
        /**
         * @param array<array-key, mixed> $flags
         *
         * @return string
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function _getInfoString(&$flags)
        {
        }
        /**
         * @param stream|string $message
         * @param Zend_Mail_Storage_Folder|null|string $folder
         * @param array<array-key, mixed>|null $flags
         * @param bool $recent
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function appendMessage($message, $folder = null, $flags = null, $recent = false)
        {
        }
        /**
         * @param int $id
         * @param Zend_Mail_Storage_Folder|string $folder
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function copyMessage($id, $folder)
        {
        }
        /**
         * @param int $id
         * @param Zend_Mail_Storage_Folder|string $folder
         *
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function moveMessage($id, $folder)
        {
        }
        /**
         * @param int $id
         * @param array<array-key, mixed> $flags
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function setFlags($id, $flags)
        {
        }
        /**
         * @return null
         *
         * @throws Zend_Mail_Storage_Exception
         */
        public function removeMessage($id)
        {
        }
        /**
         * @param array<array-key, mixed>|bool $value
         *
         * @return null
         */
        public function setQuota($value)
        {
        }
        /**
         * @return array<array-key, mixed>|bool
         */
        public function getQuota($fromStorage = false)
        {
        }
        public function _calculateMaildirsize()
        {
        }
        public function _calculateQuota($forceRecalc = false)
        {
        }
        public function _addQuotaEntry($size, $count = 1)
        {
        }
        /**
         * @param bool $detailedResponse
         *
         * @return array<array-key, mixed>|bool
         */
        public function checkQuota($detailedResponse = false, $forceRecalc = false)
        {
        }
    }
    class Zend_Mail_Transport_Abstract
    {
        /**
         * @var string
         */
        public $body;
        /**
         * @var string
         */
        public $boundary;
        /**
         * @var string
         */
        public $header;
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var bool
         */
        public $_isMultipart;
        /**
         * @var Zend_Mail|false
         */
        public $_mail;
        /**
         * @var array<array-key, mixed>
         */
        public $_parts;
        /**
         * @var string
         */
        public $recipients;
        /**
         * @var string
         */
        public $EOL;
        public abstract function _sendMail();
        /**
         * @param string $boundary
         *
         * @return array<array-key, mixed>
         */
        public function _getHeaders($boundary)
        {
        }
        /**
         * @param string $item
         * @param string $key
         * @param string $prefix
         *
         * @return void
         */
        public static function _formatHeader(&$item, $key, $prefix)
        {
        }
        /**
         * @param mixed $headers
         *
         * @return void
         *
         * @throws Zend_Mail_Transport_Exception
         */
        public function _prepareHeaders($headers)
        {
        }
        /**
         * @return void
         */
        public function _buildBody()
        {
        }
        /**
         * @param Zend_Mail $mail
         *
         * @return void
         *
         * @throws Zend_Mail_Transport_Exception
         */
        public function send(\Zend_Mail $mail)
        {
        }
    }
    class Zend_Mail_Transport_Exception extends \Zend_Mail_Exception
    {
    }
    class Zend_Mail_Transport_File extends \Zend_Mail_Transport_Abstract
    {
        /**
         * @var string
         */
        public $_path;
        /**
         * @var array<array-key, mixed>|string
         */
        public $_callback;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Mail_Transport_Exception
         */
        public function _sendMail()
        {
        }
        /**
         * @return string
         */
        public function defaultCallback($transport)
        {
        }
    }
    class Zend_Mail_Transport_Sendmail extends \Zend_Mail_Transport_Abstract
    {
        /**
         * @var string
         */
        public $subject;
        /**
         * @var string
         */
        public $parameters;
        /**
         * @var string
         */
        public $EOL;
        /**
         * @var string
         */
        public $_errstr;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $parameters
         *
         * @return void
         */
        public function __construct($parameters = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Mail_Transport_Exception
         */
        public function _sendMail()
        {
        }
        /**
         * @param array<array-key, mixed> $headers
         *
         * @return void
         *
         * @throws Zend_Mail_Transport_Exception
         */
        public function _prepareHeaders($headers)
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param null|string $errfile
         * @param null|string $errline
         * @param array<array-key, mixed>|null $errcontext
         *
         * @return true
         */
        public function _handleMailErrors($errno, $errstr, $errfile = null, $errline = null, ?array $errcontext = null)
        {
        }
    }
    class Zend_Mail_Transport_Smtp extends \Zend_Mail_Transport_Abstract
    {
        /**
         * @var string
         */
        public $EOL;
        /**
         * @var string
         */
        public $_host;
        /**
         * @var int|null
         */
        public $_port;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var string
         */
        public $_auth;
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var Zend_Mail_Protocol_Smtp
         */
        public $_connection;
        /**
         * @param string $host
         * @param array<array-key, mixed>|null $config
         *
         * @return void
         */
        public function __construct($host = '127.0.0.1', array $config = array())
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @return void
         */
        public function setConnection(\Zend_Mail_Protocol_Abstract $connection)
        {
        }
        /**
         * @return Zend_Mail_Protocol|null
         */
        public function getConnection()
        {
        }
        /**
         * @return void
         */
        public function _sendMail()
        {
        }
        /**
         * @param array<array-key, mixed> $headers
         *
         * @return void
         *
         * @throws Zend_Transport_Exception
         */
        public function _prepareHeaders($headers)
        {
        }
    }
    class Zend_Markup
    {
        public const CALLBACK = 'callback';
        public const REPLACE = 'replace';
        /**
         * @var Zend_Loader_PluginLoader
         */
        public static $_parserLoader;
        /**
         * @var Zend_Loader_PluginLoader
         */
        public static $_rendererLoader;
        public function __construct()
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function getParserLoader()
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function getRendererLoader()
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Loader_PluginLoader
         */
        public static function addParserPath($prefix, $path)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Loader_PluginLoader
         */
        public static function addRendererPath($prefix, $path)
        {
        }
        /**
         * @param string $parser
         * @param string $renderer
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Markup_Renderer_RendererAbstract
         */
        public static function factory($parser, $renderer = 'Html', array $options = array())
        {
        }
    }
    class Zend_Markup_Exception extends \Zend_Exception
    {
    }
    class Zend_Markup_Parser_Bbcode implements \Zend_Markup_Parser_ParserInterface
    {
        public const NEWLINE = '[newline ]';
        public const TYPE_DEFAULT = 'default';
        public const TYPE_SINGLE = 'single';
        public const NAME_CHARSET = '^\\[\\]=\\s';
        public const STATE_SCAN = 0;
        public const STATE_SCANATTRS = 1;
        public const STATE_PARSEVALUE = 2;
        /**
         * @var Zend_Markup_TokenList
         */
        public $_tree;
        /**
         * @var Zend_Markup_Token
         */
        public $_current;
        /**
         * @var string
         */
        public $_value;
        /**
         * @var int
         */
        public $_valueLen;
        /**
         * @var int
         */
        public $_pointer;
        /**
         * @var string
         */
        public $_buffer;
        /**
         * @var array<array-key, mixed>
         */
        public $_temp;
        /**
         * @var array<array-key, mixed>
         */
        public $_searchedStoppers;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        /**
         * @var array<array-key, mixed>
         */
        public $_tokens;
        /**
         * @var int
         */
        public $_state;
        /**
         * @param string $value
         *
         * @return Zend_Markup_TokenList
         */
        public function parse($value)
        {
        }
        /**
         * @return void
         */
        public function _tokenize()
        {
        }
        /**
         * @return void
         */
        public function _createTree()
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function _checkTagDeclaration($name)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _getType($name)
        {
        }
        /**
         * @param string $tag
         *
         * @return bool
         */
        public function _isStopper($tag)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         *
         * @return void
         */
        public function _addToSearchedStoppers(\Zend_Markup_Token $token)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         *
         * @return void
         */
        public function _removeFromSearchedStoppers(\Zend_Markup_Token $token)
        {
        }
    }
    class Zend_Markup_Parser_Exception extends \Zend_Markup_Exception
    {
    }
    interface Zend_Markup_Parser_ParserInterface
    {
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function parse($value);
    }
    class Zend_Markup_Renderer_Exception extends \Zend_Markup_Exception
    {
    }
    class Zend_Markup_Renderer_Html extends \Zend_Markup_Renderer_RendererAbstract
    {
        public const TYPE_CALLBACK = 4;
        public const TYPE_REPLACE = 8;
        public const TYPE_ALIAS = 16;
        /**
         * @var array<array-key, mixed>
         */
        public $_groups;
        /**
         * @var string
         */
        public $_group;
        /**
         * @var array<array-key, mixed>
         */
        public static $_defaultAttributes;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return void
         */
        public function _defineDefaultMarkups()
        {
        }
        /**
         * @return void
         */
        public function addDefaultFilters()
        {
        }
        /**
         * @param Zend_Markup_Token $token
         * @param array<array-key, mixed> $markup
         *
         * @return string
         */
        public function _executeReplace(\Zend_Markup_Token $token, $markup)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         * @param array<array-key, mixed> $markup
         *
         * @return string
         */
        public function _executeSingleReplace(\Zend_Markup_Token $token, $markup)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         * @param array<array-key, mixed> $attributes
         *
         * @return string
         */
        public static function renderAttributes(\Zend_Markup_Token $token, array $attributes = array())
        {
        }
        /**
         * @param string $color
         *
         * @return bool
         */
        public static function checkColor($color)
        {
        }
        /**
         * @param string $uri
         *
         * @return bool
         */
        public static function isValidUri($uri)
        {
        }
    }
    class Zend_Markup_Renderer_Html_Code extends \Zend_Markup_Renderer_Html_HtmlAbstract
    {
        /**
         * @param Zend_Markup_Token $token
         * @param string $text
         *
         * @return string
         */
        public function convert(\Zend_Markup_Token $token, $text)
        {
        }
    }
    class Zend_Markup_Renderer_Html_HtmlAbstract implements \Zend_Markup_Renderer_TokenConverterInterface
    {
        /**
         * @var Zend_Markup_Renderer_Html
         */
        public $_renderer;
        /**
         * @param Zend_Markup_Renderer_Html $renderer
         *
         * @return Zend_Markup_Renderer_Html_HtmlAbstract
         */
        public function setRenderer(\Zend_Markup_Renderer_Html $renderer)
        {
        }
        /**
         * @return Zend_Markup_Renderer_Html
         */
        public function getRenderer()
        {
        }
    }
    class Zend_Markup_Renderer_Html_Img extends \Zend_Markup_Renderer_Html_HtmlAbstract
    {
        /**
         * @param Zend_Markup_Token $token
         * @param string $text
         *
         * @return string
         */
        public function convert(\Zend_Markup_Token $token, $text)
        {
        }
    }
    class Zend_Markup_Renderer_Html_List extends \Zend_Markup_Renderer_Html_HtmlAbstract
    {
        /**
         * @param Zend_Markup_Token $token
         * @param string $text
         *
         * @return string
         */
        public function convert(\Zend_Markup_Token $token, $text)
        {
        }
    }
    class Zend_Markup_Renderer_Html_Url extends \Zend_Markup_Renderer_Html_HtmlAbstract
    {
        /**
         * @param Zend_Markup_Token $token
         * @param string $text
         *
         * @return string
         */
        public function convert(\Zend_Markup_Token $token, $text)
        {
        }
    }
    class Zend_Markup_Renderer_RendererAbstract
    {
        public const TYPE_CALLBACK = 4;
        public const TYPE_REPLACE = 8;
        public const TYPE_ALIAS = 16;
        /**
         * @var array<array-key, mixed>
         */
        public $_markups;
        /**
         * @var Zend_Markup_Parser_ParserInterface
         */
        public $_parser;
        /**
         * @var bool
         */
        public $_filter;
        /**
         * @var Zend_Filter
         */
        public $_defaultFilter;
        /**
         * @var string
         */
        public $_group;
        /**
         * @var array<array-key, mixed>
         */
        public $_groups;
        /**
         * @var Zend_Loader_PluginLoader
         */
        public $_pluginLoader;
        /**
         * @var Zend_Markup_Token
         */
        public $_token;
        /**
         * @var string
         */
        public static $_encoding;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param Zend_Markup_Parser_ParserInterface $parser
         *
         * @return Zend_Markup_Renderer_RendererAbstract
         */
        public function setParser(\Zend_Markup_Parser_ParserInterface $parser)
        {
        }
        /**
         * @return Zend_Markup_Parser_ParserInterface
         */
        public function getParser()
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public function getPluginLoader()
        {
        }
        /**
         * @param string $encoding
         *
         * @return void
         */
        public static function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public static function getEncoding()
        {
        }
        /**
         * @param string $name
         * @param string $type
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Markup_Renderer_RendererAbstract
         */
        public function addMarkup($name, $type, array $options)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function removeMarkup($name)
        {
        }
        /**
         * @return void
         */
        public function clearMarkups()
        {
        }
        /**
         * @return string
         */
        public function render($value)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         *
         * @return string
         */
        public function _render(\Zend_Markup_Token $token)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         *
         * @return bool|string
         */
        public function _getGroup(\Zend_Markup_Token $token)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         *
         * @return string
         */
        public function _execute(\Zend_Markup_Token $token)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _filter($value)
        {
        }
        public function _getMarkupName(\Zend_Markup_Token $token)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function _resolveMarkupName($name)
        {
        }
        /**
         * @param string $name
         *
         * @return false|int
         */
        public function _getMarkupType($name)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         * @param array<array-key, mixed> $tag
         *
         * @return string
         */
        public function _executeReplace(\Zend_Markup_Token $token, $tag)
        {
        }
        /**
         * @param Zend_Markup_Token $token
         * @param array<array-key, mixed> $tag
         *
         * @return string
         */
        public function _executeSingleReplace(\Zend_Markup_Token $token, $tag)
        {
        }
        /**
         * @return void
         */
        public function getDefaultFilter()
        {
        }
        /**
         * @param string $filter
         *
         * @return void
         */
        public function addDefaultFilter(\Zend_Filter_Interface $filter, $placement)
        {
        }
        /**
         * @param Zend_Filter_Interface $filter
         *
         * @return void
         */
        public function setDefaultFilter(\Zend_Filter_Interface $filter)
        {
        }
        /**
         * @param string $markup
         *
         * @return Zend_Filter_Interface
         */
        public function getFilter($markup)
        {
        }
        /**
         * @param Zend_Filter_Interface $filter
         * @param string $markup
         * @param string $placement
         *
         * @return Zend_Markup_Renderer_RendererAbstract
         */
        public function addFilter(\Zend_Filter_Interface $filter, $markup, $placement)
        {
        }
        /**
         * @param Zend_Filter_Interface $filter
         * @param string $markup
         *
         * @return Zend_Markup_Renderer_RendererAbstract
         */
        public function setFilter(\Zend_Filter_Interface $filter, $markup)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $allowedInside
         * @param array<array-key, mixed> $allowsInside
         *
         * @return void
         */
        public function addGroup($name, array $allowedInside = array(), array $allowsInside = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getGroups()
        {
        }
        /**
         * @return void
         */
        public abstract function addDefaultFilters();
    }
    interface Zend_Markup_Renderer_TokenConverterInterface
    {
        /**
         * @param Zend_Markup_Token $token
         * @param string $text
         *
         * @return string
         */
        public function convert(\Zend_Markup_Token $token, $text);
    }
    class Zend_Markup_Token
    {
        public const TYPE_NONE = 'none';
        public const TYPE_TAG = 'tag';
        /**
         * @var Zend_Markup_TokenList
         */
        public $_children;
        /**
         * @var string
         */
        public $_tag;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var array<array-key, mixed>
         */
        public $_attributes;
        /**
         * @var string
         */
        public $_stopper;
        /**
         * @var Zend_Markup_Token
         */
        public $_parent;
        /**
         * @param string $tag
         * @param string $type
         * @param string $name
         * @param array<array-key, mixed> $attributes
         * @param Zend_Markup_Token|null $parent
         *
         * @return void
         */
        public function __construct($tag, $type, $name = '', array $attributes = array(), ?\Zend_Markup_Token $parent = null)
        {
        }
        /**
         * @param string $stopper
         *
         * @return Zend_Markup_Token
         */
        public function setStopper($stopper)
        {
        }
        /**
         * @return string
         */
        public function getStopper()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function getTag()
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getAttribute($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasAttribute($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttributes()
        {
        }
        /**
         * @return Zend_Markup_Token
         */
        public function addAttribute($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function attributeIsEmpty($name)
        {
        }
        /**
         * @return void
         */
        public function addChild(\Zend_Markup_Token $child)
        {
        }
        /**
         * @param Zend_Markup_TokenList $children
         *
         * @return Zend_Markup_Token
         */
        public function setChildren(\Zend_Markup_TokenList $children)
        {
        }
        /**
         * @return Zend_Markup_TokenList
         */
        public function getChildren()
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return Zend_Markup_Token
         */
        public function getParent()
        {
        }
        /**
         * @param Zend_Markup_Token $parent
         *
         * @return Zend_Markup_Token
         */
        public function setParent(\Zend_Markup_Token $parent)
        {
        }
        /**
         * @return void
         */
        public function __clone()
        {
        }
    }
    class Zend_Markup_TokenList implements \RecursiveIterator
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_tokens;
        /**
         * @return Zend_Markup_Token
         */
        public function current()
        {
        }
        /**
         * @return Zend_Markup_TokenList
         */
        public function getChildren()
        {
        }
        /**
         * @param Zend_Markup_Token $child
         *
         * @return void
         */
        public function addChild(\Zend_Markup_Token $child)
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return Zend_Markup_Token
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return void
         */
        public function valid()
        {
        }
    }
    class Zend_Measure_Abstract
    {
        /**
         * @var string
         */
        public $_value;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_locale;
        public $_units = array();
        /**
         * @param mixed $value
         * @param int|null $type
         * @param Zend_Locale|null $locale
         *
         * @throws Zend_Measure_Exception
         */
        public function __construct($value, $type = null, $locale = null)
        {
        }
        /**
         * @return string
         */
        public function getLocale()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         * @param bool $check
         *
         * @return Zend_Measure_Abstract
         */
        public function setLocale($locale = null, $check = false)
        {
        }
        /**
         * @param int $round
         * @param Zend_Locale|null|string $locale
         *
         * @return int|string
         */
        public function getValue($round = -1, $locale = null)
        {
        }
        /**
         * @param int|string $value
         * @param null|string $type
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Measure_Abstract
         *
         * @throws Zend_Measure_Exception
         */
        public function setValue($value, $type = null, $locale = null)
        {
        }
        /**
         * @return type
         */
        public function getType()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Measure_Abstract
         *
         * @throws Zend_Measure_Exception
         */
        public function setType($type)
        {
        }
        /**
         * @param Zend_Measure_Abstract $object
         *
         * @return bool
         */
        public function equals($object)
        {
        }
        /**
         * @param int $round
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function toString($round = -1, $locale = null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getConversionList()
        {
        }
        /**
         * @param string $type
         * @param int $round
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function convertTo($type, $round = 2, $locale = null)
        {
        }
        /**
         * @param Zend_Measure_Abstract $object
         *
         * @return Zend_Measure_Abstract
         */
        public function add($object)
        {
        }
        /**
         * @param Zend_Measure_Abstract $object
         *
         * @return Zend_Measure_Abstract
         */
        public function sub($object)
        {
        }
        /**
         * @param Zend_Measure_Abstract $object
         *
         * @return bool
         */
        public function compare($object)
        {
        }
    }
    class Zend_Measure_Acceleration extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'METER_PER_SQUARE_SECOND';
        public const CENTIGAL = 'CENTIGAL';
        public const CENTIMETER_PER_SQUARE_SECOND = 'CENTIMETER_PER_SQUARE_SECOND';
        public const DECIGAL = 'DECIGAL';
        public const DECIMETER_PER_SQUARE_SECOND = 'DECIMETER_PER_SQUARE_SECOND';
        public const DEKAMETER_PER_SQUARE_SECOND = 'DEKAMETER_PER_SQUARE_SECOND';
        public const FOOT_PER_SQUARE_SECOND = 'FOOT_PER_SQUARE_SECOND';
        public const G = 'G';
        public const GAL = 'GAL';
        public const GALILEO = 'GALILEO';
        public const GRAV = 'GRAV';
        public const HECTOMETER_PER_SQUARE_SECOND = 'HECTOMETER_PER_SQUARE_SECOND';
        public const INCH_PER_SQUARE_SECOND = 'INCH_PER_SQUARE_SECOND';
        public const KILOMETER_PER_HOUR_SECOND = 'KILOMETER_PER_HOUR_SECOND';
        public const KILOMETER_PER_SQUARE_SECOND = 'KILOMETER_PER_SQUARE_SECOND';
        public const METER_PER_SQUARE_SECOND = 'METER_PER_SQUARE_SECOND';
        public const MILE_PER_HOUR_MINUTE = 'MILE_PER_HOUR_MINUTE';
        public const MILE_PER_HOUR_SECOND = 'MILE_PER_HOUR_SECOND';
        public const MILE_PER_SQUARE_SECOND = 'MILE_PER_SQUARE_SECOND';
        public const MILLIGAL = 'MILLIGAL';
        public const MILLIMETER_PER_SQUARE_SECOND = 'MILLIMETER_PER_SQUARE_SECOND';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Angle extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'RADIAN';
        public const RADIAN = 'RADIAN';
        public const MIL = 'MIL';
        public const GRAD = 'GRAD';
        public const DEGREE = 'DEGREE';
        public const MINUTE = 'MINUTE';
        public const SECOND = 'SECOND';
        public const POINT = 'POINT';
        public const CIRCLE_16 = 'CIRCLE_16';
        public const CIRCLE_10 = 'CIRCLE_10';
        public const CIRCLE_8 = 'CIRCLE_8';
        public const CIRCLE_6 = 'CIRCLE_6';
        public const CIRCLE_4 = 'CIRCLE_4';
        public const CIRCLE_2 = 'CIRCLE_2';
        public const FULL_CIRCLE = 'FULL_CIRCLE';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Area extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'SQUARE_METER';
        public const ACRE = 'ACRE';
        public const ACRE_COMMERCIAL = 'ACRE_COMMERCIAL';
        public const ACRE_SURVEY = 'ACRE_SURVEY';
        public const ACRE_IRELAND = 'ACRE_IRELAND';
        public const ARE = 'ARE';
        public const ARPENT = 'ARPENT';
        public const BARN = 'BARN';
        public const BOVATE = 'BOVATE';
        public const BUNDER = 'BUNDER';
        public const CABALLERIA = 'CABALLERIA';
        public const CABALLERIA_AMERICA = 'CABALLERIA_AMERICA';
        public const CABALLERIA_CUBA = 'CABALLERIA_CUBA';
        public const CARREAU = 'CARREAU';
        public const CARUCATE = 'CARUCATE';
        public const CAWNEY = 'CAWNEY';
        public const CENTIARE = 'CENTIARE';
        public const CONG = 'CONG';
        public const COVER = 'COVER';
        public const CUERDA = 'CUERDA';
        public const DEKARE = 'DEKARE';
        public const DESSIATINA = 'DESSIATINA';
        public const DHUR = 'DHUR';
        public const DUNUM = 'DUNUM';
        public const DUNHAM = 'DUNHAM';
        public const FALL_SCOTS = 'FALL_SCOTS';
        public const FALL = 'FALL';
        public const FANEGA = 'FANEGA';
        public const FARTHINGDALE = 'FARTHINGDALE';
        public const HACIENDA = 'HACIENDA';
        public const HECTARE = 'HECTARE';
        public const HIDE = 'HIDE';
        public const HOMESTEAD = 'HOMESTEAD';
        public const HUNDRED = 'HUNDRED';
        public const JERIB = 'JERIB';
        public const JITRO = 'JITRO';
        public const JOCH = 'JOCH';
        public const JUTRO = 'JUTRO';
        public const JO = 'JO';
        public const KAPPLAND = 'KAPPLAND';
        public const KATTHA = 'KATTHA';
        public const LABOR = 'LABOR';
        public const LEGUA = 'LEGUA';
        public const MANZANA_COSTA_RICA = 'MANZANA_COSTA_RICA';
        public const MANZANA = 'MANZANA';
        public const MORGEN = 'MORGEN';
        public const MORGEN_AFRICA = 'MORGEN_AFRICA';
        public const MU = 'MU';
        public const NGARN = 'NGARN';
        public const NOOK = 'NOOK';
        public const OXGANG = 'OXGANG';
        public const PERCH = 'PERCH';
        public const PERCHE = 'PERCHE';
        public const PING = 'PING';
        public const PYONG = 'PYONG';
        public const RAI = 'RAI';
        public const ROOD = 'ROOD';
        public const SECTION = 'SECTION';
        public const SHED = 'SHED';
        public const SITIO = 'SITIO';
        public const SQUARE = 'SQUARE';
        public const SQUARE_ANGSTROM = 'SQUARE_ANGSTROM';
        public const SQUARE_ASTRONOMICAL_UNIT = 'SQUARE_ASTRONOMICAL_UNIT';
        public const SQUARE_ATTOMETER = 'SQUARE_ATTOMETER';
        public const SQUARE_BICRON = 'SQUARE_BICRON';
        public const SQUARE_CENTIMETER = 'SQUARE_CENTIMETER';
        public const SQUARE_CHAIN = 'SQUARE_CHAIN';
        public const SQUARE_CHAIN_ENGINEER = 'SQUARE_CHAIN_ENGINEER';
        public const SQUARE_CITY_BLOCK_US_EAST = 'SQUARE_CITY_BLOCK_US_EAST';
        public const SQUARE_CITY_BLOCK_US_WEST = 'SQUARE_CITY_BLOCK_US_WEST';
        public const SQUARE_CITY_BLOCK_US_SOUTH = 'SQUARE_CITY_BLOCK_US_SOUTH';
        public const SQUARE_CUBIT = 'SQUARE_CUBIT';
        public const SQUARE_DECIMETER = 'SQUARE_DECIMETER';
        public const SQUARE_DEKAMETER = 'SQUARE_DEKAMETER';
        public const SQUARE_EXAMETER = 'SQUARE_EXAMETER';
        public const SQUARE_FATHOM = 'SQUARE_FATHOM';
        public const SQUARE_FEMTOMETER = 'SQUARE_FEMTOMETER';
        public const SQUARE_FERMI = 'SQUARE_FERMI';
        public const SQUARE_FOOT = 'SQUARE_FOOT';
        public const SQUARE_FOOT_SURVEY = 'SQUARE_FOOT_SURVEY';
        public const SQUARE_FURLONG = 'SQUARE_FURLONG';
        public const SQUARE_GIGAMETER = 'SQUARE_GIGAMETER';
        public const SQUARE_HECTOMETER = 'SQUARE_HECTOMETER';
        public const SQUARE_INCH = 'SQUARE_INCH';
        public const SQUARE_INCH_SURVEY = 'SQUARE_INCH_SURVEY';
        public const SQUARE_KILOMETER = 'SQUARE_KILOMETER';
        public const SQUARE_LEAGUE_NAUTIC = 'SQUARE_LEAGUE_NAUTIC';
        public const SQUARE_LEAGUE = 'SQUARE_LEAGUE';
        public const SQUARE_LIGHT_YEAR = 'SQUARE_LIGHT_YEAR';
        public const SQUARE_LINK = 'SQUARE_LINK';
        public const SQUARE_LINK_ENGINEER = 'SQUARE_LINK_ENGINEER';
        public const SQUARE_MEGAMETER = 'SQUARE_MEGAMETER';
        public const SQUARE_METER = 'SQUARE_METER';
        public const SQUARE_MICROINCH = 'SQUARE_MICROINCH';
        public const SQUARE_MICROMETER = 'SQUARE_MICROMETER';
        public const SQUARE_MICROMICRON = 'SQUARE_MICROMICRON';
        public const SQUARE_MICRON = 'SQUARE_MICRON';
        public const SQUARE_MIL = 'SQUARE_MIL';
        public const SQUARE_MILE = 'SQUARE_MILE';
        public const SQUARE_MILE_NAUTIC = 'SQUARE_MILE_NAUTIC';
        public const SQUARE_MILE_SURVEY = 'SQUARE_MILE_SURVEY';
        public const SQUARE_MILLIMETER = 'SQUARE_MILLIMETER';
        public const SQUARE_MILLIMICRON = 'SQUARE_MILLIMICRON';
        public const SQUARE_MYRIAMETER = 'SQUARE_MYRIAMETER';
        public const SQUARE_NANOMETER = 'SQUARE_NANOMETER';
        public const SQUARE_PARIS_FOOT = 'SQUARE_PARIS_FOOT';
        public const SQUARE_PARSEC = 'SQUARE_PARSEC';
        public const SQUARE_PERCH = 'SQUARE_PERCH';
        public const SQUARE_PERCHE = 'SQUARE_PERCHE';
        public const SQUARE_PETAMETER = 'SQUARE_PETAMETER';
        public const SQUARE_PICOMETER = 'SQUARE_PICOMETER';
        public const SQUARE_ROD = 'SQUARE_ROD';
        public const SQUARE_TENTHMETER = 'SQUARE_TENTHMETER';
        public const SQUARE_TERAMETER = 'SQUARE_TERAMETER';
        public const SQUARE_THOU = 'SQUARE_THOU';
        public const SQUARE_VARA = 'SQUARE_VARA';
        public const SQUARE_VARA_TEXAS = 'SQUARE_VARA_TEXAS';
        public const SQUARE_YARD = 'SQUARE_YARD';
        public const SQUARE_YARD_SURVEY = 'SQUARE_YARD_SURVEY';
        public const SQUARE_YOCTOMETER = 'SQUARE_YOCTOMETER';
        public const SQUARE_YOTTAMETER = 'SQUARE_YOTTAMETER';
        public const STANG = 'STANG';
        public const STREMMA = 'STREMMA';
        public const TAREA = 'TAREA';
        public const TATAMI = 'TATAMI';
        public const TONDE_LAND = 'TONDE_LAND';
        public const TOWNSHIP = 'TOWNSHIP';
        public const TSUBO = 'TSUBO';
        public const TUNNLAND = 'TUNNLAND';
        public const YARD = 'YARD';
        public const VIRGATE = 'VIRGATE';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Binary extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'BYTE';
        public const BIT = 'BIT';
        public const CRUMB = 'CRUMB';
        public const NIBBLE = 'NIBBLE';
        public const BYTE = 'BYTE';
        public const KILOBYTE = 'KILOBYTE';
        public const KIBIBYTE = 'KIBIBYTE';
        public const KILO_BINARY_BYTE = 'KILO_BINARY_BYTE';
        public const KILOBYTE_SI = 'KILOBYTE_SI';
        public const MEGABYTE = 'MEGABYTE';
        public const MEBIBYTE = 'MEBIBYTE';
        public const MEGA_BINARY_BYTE = 'MEGA_BINARY_BYTE';
        public const MEGABYTE_SI = 'MEGABYTE_SI';
        public const GIGABYTE = 'GIGABYTE';
        public const GIBIBYTE = 'GIBIBYTE';
        public const GIGA_BINARY_BYTE = 'GIGA_BINARY_BYTE';
        public const GIGABYTE_SI = 'GIGABYTE_SI';
        public const TERABYTE = 'TERABYTE';
        public const TEBIBYTE = 'TEBIBYTE';
        public const TERA_BINARY_BYTE = 'TERA_BINARY_BYTE';
        public const TERABYTE_SI = 'TERABYTE_SI';
        public const PETABYTE = 'PETABYTE';
        public const PEBIBYTE = 'PEBIBYTE';
        public const PETA_BINARY_BYTE = 'PETA_BINARY_BYTE';
        public const PETABYTE_SI = 'PETABYTE_SI';
        public const EXABYTE = 'EXABYTE';
        public const EXBIBYTE = 'EXBIBYTE';
        public const EXA_BINARY_BYTE = 'EXA_BINARY_BYTE';
        public const EXABYTE_SI = 'EXABYTE_SI';
        public const ZETTABYTE = 'ZETTABYTE';
        public const ZEBIBYTE = 'ZEBIBYTE';
        public const ZETTA_BINARY_BYTE = 'ZETTA_BINARY_BYTE';
        public const ZETTABYTE_SI = 'ZETTABYTE_SI';
        public const YOTTABYTE = 'YOTTABYTE';
        public const YOBIBYTE = 'YOBIBYTE';
        public const YOTTA_BINARY_BYTE = 'YOTTA_BINARY_BYTE';
        public const YOTTABYTE_SI = 'YOTTABYTE_SI';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Capacitance extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'FARAD';
        public const ABFARAD = 'ABFARAD';
        public const AMPERE_PER_SECOND_VOLT = 'AMPERE_PER_SECOND_VOLT';
        public const CENTIFARAD = 'CENTIFARAD';
        public const COULOMB_PER_VOLT = 'COULOMB_PER_VOLT';
        public const DECIFARAD = 'DECIFARAD';
        public const DEKAFARAD = 'DEKAFARAD';
        public const ELECTROMAGNETIC_UNIT = 'ELECTROMAGNETIC_UNIT';
        public const ELECTROSTATIC_UNIT = 'ELECTROSTATIC_UNIT';
        public const FARAD = 'FARAD';
        public const FARAD_INTERNATIONAL = 'FARAD_INTERNATIONAL';
        public const GAUSSIAN = 'GAUSSIAN';
        public const GIGAFARAD = 'GIGAFARAD';
        public const HECTOFARAD = 'HECTOFARAD';
        public const JAR = 'JAR';
        public const KILOFARAD = 'KILOFARAD';
        public const MEGAFARAD = 'MEGAFARAD';
        public const MICROFARAD = 'MICROFARAD';
        public const MILLIFARAD = 'MILLIFARAD';
        public const NANOFARAD = 'NANOFARAD';
        public const PICOFARAD = 'PICOFARAD';
        public const PUFF = 'PUFF';
        public const SECOND_PER_OHM = 'SECOND_PER_OHM';
        public const STATFARAD = 'STATFARAD';
        public const TERAFARAD = 'TERAFARAD';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Cooking_Volume extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'CUBIC_METER';
        public const CAN_2POINT5 = 'CAN_2POINT5';
        public const CAN_10 = 'CAN_10';
        public const BARREL_WINE = 'BARREL_WINE';
        public const BARREL = 'BARREL';
        public const BARREL_US_DRY = 'BARREL_US_DRY';
        public const BARREL_US_FEDERAL = 'BARREL_US_FEDERAL';
        public const BARREL_US = 'BARREL_US';
        public const BUCKET = 'BUCKET';
        public const BUCKET_US = 'BUCKET_US';
        public const BUSHEL = 'BUSHEL';
        public const BUSHEL_US = 'BUSHEL_US';
        public const CENTILITER = 'CENTILITER';
        public const COFFEE_SPOON = 'COFFEE_SPOON';
        public const CUBIC_CENTIMETER = 'CUBIC_CENTIMETER';
        public const CUBIC_DECIMETER = 'CUBIC_DECIMETER';
        public const CUBIC_FOOT = 'CUBIC_FOOT';
        public const CUBIC_INCH = 'CUBIC_INCH';
        public const CUBIC_METER = 'CUBIC_METER';
        public const CUBIC_MICROMETER = 'CUBIC_MICROMETER';
        public const CUBIC_MILLIMETER = 'CUBIC_MILLIMETER';
        public const CUP_CANADA = 'CUP_CANADA';
        public const CUP = 'CUP';
        public const CUP_US = 'CUP_US';
        public const DASH = 'DASH';
        public const DECILITER = 'DECILITER';
        public const DEKALITER = 'DEKALITER';
        public const DEMI = 'DEMI';
        public const DRAM = 'DRAM';
        public const DROP = 'DROP';
        public const FIFTH = 'FIFTH';
        public const GALLON = 'GALLON';
        public const GALLON_US_DRY = 'GALLON_US_DRY';
        public const GALLON_US = 'GALLON_US';
        public const GILL = 'GILL';
        public const GILL_US = 'GILL_US';
        public const HECTOLITER = 'HECTOLITER';
        public const HOGSHEAD = 'HOGSHEAD';
        public const HOGSHEAD_US = 'HOGSHEAD_US';
        public const JIGGER = 'JIGGER';
        public const KILOLITER = 'KILOLITER';
        public const LITER = 'LITER';
        public const MEASURE = 'MEASURE';
        public const MEGALITER = 'MEGALITER';
        public const MICROLITER = 'MICROLITER';
        public const MILLILITER = 'MILLILITER';
        public const MINIM = 'MINIM';
        public const MINIM_US = 'MINIM_US';
        public const OUNCE = 'OUNCE';
        public const OUNCE_US = 'OUNCE_US';
        public const PECK = 'PECK';
        public const PECK_US = 'PECK_US';
        public const PINCH = 'PINCH';
        public const PINT = 'PINT';
        public const PINT_US_DRY = 'PINT_US_DRY';
        public const PINT_US = 'PINT_US';
        public const PIPE = 'PIPE';
        public const PIPE_US = 'PIPE_US';
        public const PONY = 'PONY';
        public const QUART_GERMANY = 'QUART_GERMANY';
        public const QUART_ANCIENT = 'QUART_ANCIENT';
        public const QUART = 'QUART';
        public const QUART_US_DRY = 'QUART_US_DRY';
        public const QUART_US = 'QUART_US';
        public const SHOT = 'SHOT';
        public const TABLESPOON = 'TABLESPOON';
        public const TABLESPOON_UK = 'TABLESPOON_UK';
        public const TABLESPOON_US = 'TABLESPOON_US';
        public const TEASPOON = 'TEASPOON';
        public const TEASPOON_UK = 'TEASPOON_UK';
        public const TEASPOON_US = 'TEASPOON_US';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Cooking_Weight extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'GRAM';
        public const HALF_STICK = 'HALF_STICK';
        public const STICK = 'STICK';
        public const CUP = 'CUP';
        public const GRAM = 'GRAM';
        public const OUNCE = 'OUNCE';
        public const POUND = 'POUND';
        public const TEASPOON = 'TEASPOON';
        public const TEASPOON_US = 'TEASPOON_US';
        public const TABLESPOON = 'TABLESPOON';
        public const TABLESPOON_US = 'TABLESPOON_US';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Current extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'AMPERE';
        public const ABAMPERE = 'ABAMPERE';
        public const AMPERE = 'AMPERE';
        public const BIOT = 'BIOT';
        public const CENTIAMPERE = 'CENTIAMPERE';
        public const COULOMB_PER_SECOND = 'COULOMB_PER_SECOND';
        public const DECIAMPERE = 'DECIAMPERE';
        public const DEKAAMPERE = 'DEKAAMPERE';
        public const ELECTROMAGNETIC_UNIT = 'ELECTROMAGNATIC_UNIT';
        public const ELECTROSTATIC_UNIT = 'ELECTROSTATIC_UNIT';
        public const FRANCLIN_PER_SECOND = 'FRANCLIN_PER_SECOND';
        public const GAUSSIAN = 'GAUSSIAN';
        public const GIGAAMPERE = 'GIGAAMPERE';
        public const GILBERT = 'GILBERT';
        public const HECTOAMPERE = 'HECTOAMPERE';
        public const KILOAMPERE = 'KILOAMPERE';
        public const MEGAAMPERE = 'MEGAAMPERE';
        public const MICROAMPERE = 'MICROAMPERE';
        public const MILLIAMPERE = 'MILLIAMPERE';
        public const NANOAMPERE = 'NANOAMPERE';
        public const PICOAMPERE = 'PICOAMPERE';
        public const SIEMENS_VOLT = 'SIEMENS_VOLT';
        public const STATAMPERE = 'STATAMPERE';
        public const TERAAMPERE = 'TERAAMPERE';
        public const VOLT_PER_OHM = 'VOLT_PER_OHM';
        public const WATT_PER_VOLT = 'WATT_PER_VOLT';
        public const WEBER_PER_HENRY = 'WEBER_PER_HENRY';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Density extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'KILOGRAM_PER_CUBIC_METER';
        public const ALUMINIUM = 'ALUMINIUM';
        public const COPPER = 'COPPER';
        public const GOLD = 'GOLD';
        public const GRAIN_PER_CUBIC_FOOT = 'GRAIN_PER_CUBIC_FOOT';
        public const GRAIN_PER_CUBIC_INCH = 'GRAIN_PER_CUBIC_INCH';
        public const GRAIN_PER_CUBIC_YARD = 'GRAIN_PER_CUBIC_YARD';
        public const GRAIN_PER_GALLON = 'GRAIN_PER_GALLON';
        public const GRAIN_PER_GALLON_US = 'GRAIN_PER_GALLON_US';
        public const GRAM_PER_CUBIC_CENTIMETER = 'GRAM_PER_CUBIC_CENTIMETER';
        public const GRAM_PER_CUBIC_DECIMETER = 'GRAM_PER_CUBIC_DECIMETER';
        public const GRAM_PER_CUBIC_METER = 'GRAM_PER_CUBIC_METER';
        public const GRAM_PER_LITER = 'GRAM_PER_LITER';
        public const GRAM_PER_MILLILITER = 'GRAM_PER_MILLILITER';
        public const IRON = 'IRON';
        public const KILOGRAM_PER_CUBIC_CENTIMETER = 'KILOGRAM_PER_CUBIC_CENTIMETER';
        public const KILOGRAM_PER_CUBIC_DECIMETER = 'KILOGRAM_PER_CUBIC_DECIMETER';
        public const KILOGRAM_PER_CUBIC_METER = 'KILOGRAM_PER_CUBIC_METER';
        public const KILOGRAM_PER_CUBIC_MILLIMETER = 'KILOGRAM_PER_CUBIC_MILLIMETER';
        public const KILOGRAM_PER_LITER = 'KILOGRAM_PER_LITER';
        public const KILOGRAM_PER_MILLILITER = 'KILOGRAM_PER_MILLILITER';
        public const LEAD = 'LEAD';
        public const MEGAGRAM_PER_CUBIC_CENTIMETER = 'MEGAGRAM_PER_CUBIC_CENTIMETER';
        public const MEGAGRAM_PER_CUBIC_DECIMETER = 'MEGAGRAM_PER_CUBIC_DECIMETER';
        public const MEGAGRAM_PER_CUBIC_METER = 'MEGAGRAM_PER_CUBIC_METER';
        public const MEGAGRAM_PER_LITER = 'MEGAGRAM_PER_LITER';
        public const MEGAGRAM_PER_MILLILITER = 'MEGAGRAM_PER_MILLILITER';
        public const MICROGRAM_PER_CUBIC_CENTIMETER = 'MICROGRAM_PER_CUBIC_CENTIMETER';
        public const MICROGRAM_PER_CUBIC_DECIMETER = 'MICROGRAM_PER_CUBIC_DECIMETER';
        public const MICROGRAM_PER_CUBIC_METER = 'MICROGRAM_PER_CUBIC_METER';
        public const MICROGRAM_PER_LITER = 'MICROGRAM_PER_LITER';
        public const MICROGRAM_PER_MILLILITER = 'MICROGRAM_PER_MILLILITER';
        public const MILLIGRAM_PER_CUBIC_CENTIMETER = 'MILLIGRAM_PER_CUBIC_CENTIMETER';
        public const MILLIGRAM_PER_CUBIC_DECIMETER = 'MILLIGRAM_PER_CUBIC_DECIMETER';
        public const MILLIGRAM_PER_CUBIC_METER = 'MILLIGRAM_PER_CUBIC_METER';
        public const MILLIGRAM_PER_LITER = 'MILLIGRAM_PER_LITER';
        public const MILLIGRAM_PER_MILLILITER = 'MILLIGRAM_PER_MILLILITER';
        public const OUNCE_PER_CUBIC_FOOT = 'OUNCE_PER_CUBIC_FOOT';
        public const OUNCR_PER_CUBIC_FOOT_TROY = 'OUNCE_PER_CUBIC_FOOT_TROY';
        public const OUNCE_PER_CUBIC_INCH = 'OUNCE_PER_CUBIC_INCH';
        public const OUNCE_PER_CUBIC_INCH_TROY = 'OUNCE_PER_CUBIC_INCH_TROY';
        public const OUNCE_PER_CUBIC_YARD = 'OUNCE_PER_CUBIC_YARD';
        public const OUNCE_PER_CUBIC_YARD_TROY = 'OUNCE_PER_CUBIC_YARD_TROY';
        public const OUNCE_PER_GALLON = 'OUNCE_PER_GALLON';
        public const OUNCE_PER_GALLON_US = 'OUNCE_PER_GALLON_US';
        public const OUNCE_PER_GALLON_TROY = 'OUNCE_PER_GALLON_TROY';
        public const OUNCE_PER_GALLON_US_TROY = 'OUNCE_PER_GALLON_US_TROY';
        public const POUND_PER_CIRCULAR_MIL_FOOT = 'POUND_PER_CIRCULAR_MIL_FOOT';
        public const POUND_PER_CUBIC_FOOT = 'POUND_PER_CUBIC_FOOT';
        public const POUND_PER_CUBIC_INCH = 'POUND_PER_CUBIC_INCH';
        public const POUND_PER_CUBIC_YARD = 'POUND_PER_CUBIC_YARD';
        public const POUND_PER_GALLON = 'POUND_PER_GALLON';
        public const POUND_PER_KILOGALLON = 'POUND_PER_KILOGALLON';
        public const POUND_PER_MEGAGALLON = 'POUND_PER_MEGAGALLON';
        public const POUND_PER_GALLON_US = 'POUND_PER_GALLON_US';
        public const POUND_PER_KILOGALLON_US = 'POUND_PER_KILOGALLON_US';
        public const POUND_PER_MEGAGALLON_US = 'POUND_PER_MEGAGALLON_US';
        public const SILVER = 'SILVER';
        public const SLUG_PER_CUBIC_FOOT = 'SLUG_PER_CUBIC_FOOT';
        public const SLUG_PER_CUBIC_INCH = 'SLUG_PER_CUBIC_INCH';
        public const SLUG_PER_CUBIC_YARD = 'SLUG_PER_CUBIC_YARD';
        public const SLUG_PER_GALLON = 'SLUG_PER_GALLON';
        public const SLUG_PER_GALLON_US = 'SLUG_PER_GALLON_US';
        public const TON_PER_CUBIC_FOOT_LONG = 'TON_PER_CUBIC_FOOT_LONG';
        public const TON_PER_CUBIC_FOOT = 'TON_PER_CUBIC_FOOT';
        public const TON_PER_CUBIC_INCH_LONG = 'TON_PER_CUBIC_INCH_LONG';
        public const TON_PER_CUBIC_INCH = 'TON_PER_CUBIC_INCH';
        public const TON_PER_CUBIC_YARD_LONG = 'TON_PER_CUBIC_YARD_LONG';
        public const TON_PER_CUBIC_YARD = 'TON_PER_CUBIC_YARD';
        public const TON_PER_GALLON_LONG = 'TON_PER_GALLON_LONG';
        public const TON_PER_GALLON_US_LONG = 'TON_PER_GALLON_US_LONG';
        public const TON_PER_GALLON = 'TON_PER_GALLON';
        public const TON_PER_GALLON_US = 'TON_PER_GALLON_US';
        public const TONNE_PER_CUBIC_CENTIMETER = 'TONNE_PER_CUBIC_CENTIMETER';
        public const TONNE_PER_CUBIC_DECIMETER = 'TONNE_PER_CUBIC_DECIMETER';
        public const TONNE_PER_CUBIC_METER = 'TONNE_PER_CUBIC_METER';
        public const TONNE_PER_LITER = 'TONNE_PER_LITER';
        public const TONNE_PER_MILLILITER = 'TONNE_PER_MILLILITER';
        public const WATER = 'WATER';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Energy extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'JOULE';
        public const ATTOJOULE = 'ATTOJOULE';
        public const BOARD_OF_TRADE_UNIT = 'BOARD_OF_TRADE_UNIT';
        public const BTU = 'BTU';
        public const BTU_THERMOCHEMICAL = 'BTU_TERMOCHEMICAL';
        public const CALORIE = 'CALORIE';
        public const CALORIE_15C = 'CALORIE_15C';
        public const CALORIE_NUTRITIONAL = 'CALORIE_NUTRITIONAL';
        public const CALORIE_THERMOCHEMICAL = 'CALORIE_THERMOCHEMICAL';
        public const CELSIUS_HEAT_UNIT = 'CELSIUS_HEAT_UNIT';
        public const CENTIJOULE = 'CENTIJOULE';
        public const CHEVAL_VAPEUR_HEURE = 'CHEVAL_VAPEUR_HEURE';
        public const DECIJOULE = 'DECIJOULE';
        public const DEKAJOULE = 'DEKAJOULE';
        public const DEKAWATT_HOUR = 'DEKAWATT_HOUR';
        public const DEKATHERM = 'DEKATHERM';
        public const ELECTRONVOLT = 'ELECTRONVOLT';
        public const ERG = 'ERG';
        public const EXAJOULE = 'EXAJOULE';
        public const EXAWATT_HOUR = 'EXAWATT_HOUR';
        public const FEMTOJOULE = 'FEMTOJOULE';
        public const FOOT_POUND = 'FOOT_POUND';
        public const FOOT_POUNDAL = 'FOOT_POUNDAL';
        public const GALLON_UK_AUTOMOTIVE = 'GALLON_UK_AUTOMOTIVE';
        public const GALLON_US_AUTOMOTIVE = 'GALLON_US_AUTOMOTIVE';
        public const GALLON_UK_AVIATION = 'GALLON_UK_AVIATION';
        public const GALLON_US_AVIATION = 'GALLON_US_AVIATION';
        public const GALLON_UK_DIESEL = 'GALLON_UK_DIESEL';
        public const GALLON_US_DIESEL = 'GALLON_US_DIESEL';
        public const GALLON_UK_DISTILATE = 'GALLON_UK_DISTILATE';
        public const GALLON_US_DISTILATE = 'GALLON_US_DISTILATE';
        public const GALLON_UK_KEROSINE_JET = 'GALLON_UK_KEROSINE_JET';
        public const GALLON_US_KEROSINE_JET = 'GALLON_US_KEROSINE_JET';
        public const GALLON_UK_LPG = 'GALLON_UK_LPG';
        public const GALLON_US_LPG = 'GALLON_US_LPG';
        public const GALLON_UK_NAPHTA = 'GALLON_UK_NAPHTA';
        public const GALLON_US_NAPHTA = 'GALLON_US_NAPHTA';
        public const GALLON_UK_KEROSENE = 'GALLON_UK_KEROSINE';
        public const GALLON_US_KEROSENE = 'GALLON_US_KEROSINE';
        public const GALLON_UK_RESIDUAL = 'GALLON_UK_RESIDUAL';
        public const GALLON_US_RESIDUAL = 'GALLON_US_RESIDUAL';
        public const GIGAELECTRONVOLT = 'GIGAELECTRONVOLT';
        public const GIGACALORIE = 'GIGACALORIE';
        public const GIGACALORIE_15C = 'GIGACALORIE_15C';
        public const GIGAJOULE = 'GIGAJOULE';
        public const GIGAWATT_HOUR = 'GIGAWATT_HOUR';
        public const GRAM_CALORIE = 'GRAM_CALORIE';
        public const HARTREE = 'HARTREE';
        public const HECTOJOULE = 'HECTOJOULE';
        public const HECTOWATT_HOUR = 'HECTOWATT_HOUR';
        public const HORSEPOWER_HOUR = 'HORSEPOWER_HOUR';
        public const HUNDRED_CUBIC_FOOT_GAS = 'HUNDRED_CUBIC_FOOT_GAS';
        public const INCH_OUNCE = 'INCH_OUNCE';
        public const INCH_POUND = 'INCH_POUND';
        public const JOULE = 'JOULE';
        public const KILOCALORIE_15C = 'KILOCALORIE_15C';
        public const KILOCALORIE = 'KILOCALORIE';
        public const KILOCALORIE_THERMOCHEMICAL = 'KILOCALORIE_THERMOCHEMICAL';
        public const KILOELECTRONVOLT = 'KILOELECTRONVOLT';
        public const KILOGRAM_CALORIE = 'KILOGRAM_CALORIE';
        public const KILOGRAM_FORCE_METER = 'KILOGRAM_FORCE_METER';
        public const KILOJOULE = 'KILOJOULE';
        public const KILOPOND_METER = 'KILOPOND_METER';
        public const KILOTON = 'KILOTON';
        public const KILOWATT_HOUR = 'KILOWATT_HOUR';
        public const LITER_ATMOSPHERE = 'LITER_ATMOSPHERE';
        public const MEGAELECTRONVOLT = 'MEGAELECTRONVOLT';
        public const MEGACALORIE = 'MEGACALORIE';
        public const MEGACALORIE_15C = 'MEGACALORIE_15C';
        public const MEGAJOULE = 'MEGAJOULE';
        public const MEGALERG = 'MEGALERG';
        public const MEGATON = 'MEGATON';
        public const MEGAWATTHOUR = 'MEGAWATTHOUR';
        public const METER_KILOGRAM_FORCE = 'METER_KILOGRAM_FORCE';
        public const MICROJOULE = 'MICROJOULE';
        public const MILLIJOULE = 'MILLIJOULE';
        public const MYRIAWATT_HOUR = 'MYRIAWATT_HOUR';
        public const NANOJOULE = 'NANOJOULE';
        public const NEWTON_METER = 'NEWTON_METER';
        public const PETAJOULE = 'PETAJOULE';
        public const PETAWATTHOUR = 'PETAWATTHOUR';
        public const PFERDESTAERKENSTUNDE = 'PFERDESTAERKENSTUNDE';
        public const PICOJOULE = 'PICOJOULE';
        public const Q_UNIT = 'Q_UNIT';
        public const QUAD = 'QUAD';
        public const TERAELECTRONVOLT = 'TERAELECTRONVOLT';
        public const TERAJOULE = 'TERAJOULE';
        public const TERAWATTHOUR = 'TERAWATTHOUR';
        public const THERM = 'THERM';
        public const THERM_US = 'THERM_US';
        public const THERMIE = 'THERMIE';
        public const TON = 'TON';
        public const TONNE_COAL = 'TONNE_COAL';
        public const TONNE_OIL = 'TONNE_OIL';
        public const WATTHOUR = 'WATTHOUR';
        public const WATTSECOND = 'WATTSECOND';
        public const YOCTOJOULE = 'YOCTOJOULE';
        public const YOTTAJOULE = 'YOTTAJOULE';
        public const YOTTAWATTHOUR = 'YOTTAWATTHOUR';
        public const ZEPTOJOULE = 'ZEPTOJOULE';
        public const ZETTAJOULE = 'ZETTAJOULE';
        public const ZETTAWATTHOUR = 'ZETTAWATTHOUR';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Exception extends \Zend_Exception
    {
    }
    class Zend_Measure_Flow_Mass extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'KILOGRAM_PER_SECOND';
        public const CENTIGRAM_PER_DAY = 'CENTIGRAM_PER_DAY';
        public const CENTIGRAM_PER_HOUR = 'CENTIGRAM_PER_HOUR';
        public const CENTIGRAM_PER_MINUTE = 'CENTIGRAM_PER_MINUTE';
        public const CENTIGRAM_PER_SECOND = 'CENTIGRAM_PER_SECOND';
        public const GRAM_PER_DAY = 'GRAM_PER_DAY';
        public const GRAM_PER_HOUR = 'GRAM_PER_HOUR';
        public const GRAM_PER_MINUTE = 'GRAM_PER_MINUTE';
        public const GRAM_PER_SECOND = 'GRAM_PER_SECOND';
        public const KILOGRAM_PER_DAY = 'KILOGRAM_PER_DAY';
        public const KILOGRAM_PER_HOUR = 'KILOGRAM_PER_HOUR';
        public const KILOGRAM_PER_MINUTE = 'KILOGRAM_PER_MINUTE';
        public const KILOGRAM_PER_SECOND = 'KILOGRAM_PER_SECOND';
        public const MILLIGRAM_PER_DAY = 'MILLIGRAM_PER_DAY';
        public const MILLIGRAM_PER_HOUR = 'MILLIGRAM_PER_HOUR';
        public const MILLIGRAM_PER_MINUTE = 'MILLIGRAM_PER_MINUTE';
        public const MILLIGRAM_PER_SECOND = 'MILLIGRAM_PER_SECOND';
        public const OUNCE_PER_DAY = 'OUNCE_PER_DAY';
        public const OUNCE_PER_HOUR = 'OUNCE_PER_HOUR';
        public const OUNCE_PER_MINUTE = 'OUNCE_PER_MINUTE';
        public const OUNCE_PER_SECOND = 'OUNCE_PER_SECOND';
        public const POUND_PER_DAY = 'POUND_PER_DAY';
        public const POUND_PER_HOUR = 'POUND_PER_HOUR';
        public const POUND_PER_MINUTE = 'POUND_PER_MINUTE';
        public const POUND_PER_SECOND = 'POUND_PER_SECOND';
        public const TON_LONG_PER_DAY = 'TON_LONG_PER_DAY';
        public const TON_LONG_PER_HOUR = 'TON_LONG_PER_HOUR';
        public const TON_LONG_PER_MINUTE = 'TON_LONG_PER_MINUTE';
        public const TON_LONG_PER_SECOND = 'TON_LONG_PER_SECOND';
        public const TON_PER_DAY = 'TON_PER_DAY';
        public const TON_PER_HOUR = 'TON_PER_HOUR';
        public const TON_PER_MINUTE = 'TON_PER_MINUTE';
        public const TON_PER_SECOND = 'TON_PER_SECOND';
        public const TON_SHORT_PER_DAY = 'TON_SHORT_PER_DAY';
        public const TON_SHORT_PER_HOUR = 'TON_SHORT_PER_HOUR';
        public const TON_SHORT_PER_MINUTE = 'TON_SHORT_PER_MINUTE';
        public const TON_SHORT_PER_SECOND = 'TON_SHORT_PER_SECOND';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Flow_Mole extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'MOLE_PER_SECOND';
        public const CENTIMOLE_PER_DAY = 'CENTIMOLE_PER_DAY';
        public const CENTIMOLE_PER_HOUR = 'CENTIMOLE_PER_HOUR';
        public const CENTIMOLE_PER_MINUTE = 'CENTIMOLE_PER_MINUTE';
        public const CENTIMOLE_PER_SECOND = 'CENTIMOLE_PER_SECOND';
        public const MEGAMOLE_PER_DAY = 'MEGAMOLE_PER_DAY';
        public const MEGAMOLE_PER_HOUR = 'MEGAMOLE_PER_HOUR';
        public const MEGAMOLE_PER_MINUTE = 'MEGAMOLE_PER_MINUTE';
        public const MEGAMOLE_PER_SECOND = 'MEGAMOLE_PER_SECOND';
        public const MICROMOLE_PER_DAY = 'MICROMOLE_PER_DAY';
        public const MICROMOLE_PER_HOUR = 'MICROMOLE_PER_HOUR';
        public const MICROMOLE_PER_MINUTE = 'MICROMOLE_PER_MINUTE';
        public const MICROMOLE_PER_SECOND = 'MICROMOLE_PER_SECOND';
        public const MILLIMOLE_PER_DAY = 'MILLIMOLE_PER_DAY';
        public const MILLIMOLE_PER_HOUR = 'MILLIMOLE_PER_HOUR';
        public const MILLIMOLE_PER_MINUTE = 'MILLIMOLE_PER_MINUTE';
        public const MILLIMOLE_PER_SECOND = 'MILLIMOLE_PER_SECOND';
        public const MOLE_PER_DAY = 'MOLE_PER_DAY';
        public const MOLE_PER_HOUR = 'MOLE_PER_HOUR';
        public const MOLE_PER_MINUTE = 'MOLE_PER_MINUTE';
        public const MOLE_PER_SECOND = 'MOLE_PER_SECOND';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Flow_Volume extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'CUBIC_METER_PER_SECOND';
        public const ACRE_FOOT_PER_DAY = 'ACRE_FOOT_PER_DAY';
        public const ACRE_FOOT_PER_HOUR = 'ACRE_FOOT_PER_HOUR';
        public const ACRE_FOOT_PER_MINUTE = 'ACRE_FOOT_PER_MINUTE';
        public const ACRE_FOOT_PER_SECOND = 'ACRE_FOOT_PER_SECOND';
        public const ACRE_FOOT_SURVEY_PER_DAY = 'ACRE_FOOT_SURVEY_PER_DAY';
        public const ACRE_FOOT_SURVEY_PER_HOUR = 'ACRE_FOOT_SURVEY_PER_HOUR';
        public const ACRE_FOOT_SURVEY_PER_MINUTE = 'ACRE_FOOT_SURVEY_PER_MINUTE';
        public const ACRE_FOOT_SURVEY_PER_SECOND = 'ACRE_FOOT_SURVEY_PER_SECOND';
        public const ACRE_INCH_PER_DAY = 'ACRE_INCH_PER_DAY';
        public const ACRE_INCH_PER_HOUR = 'ACRE_INCH_PER_HOUR';
        public const ACRE_INCH_PER_MINUTE = 'ACRE_INCH_PER_MINUTE';
        public const ACRE_INCH_PER_SECOND = 'ACRE_INCH_PER_SECOND';
        public const ACRE_INCH_SURVEY_PER_DAY = 'ACRE_INCH_SURVEY_PER_DAY';
        public const ACRE_INCH_SURVEY_PER_HOUR = 'ACRE_INCH_SURVEY_PER_HOUR';
        public const ACRE_INCH_SURVEY_PER_MINUTE = 'ACRE_INCH_SURVEY_PER_MINUTE';
        public const ACRE_INCH_SURVEY_PER_SECOND = 'ACRE_INCH_SURVEY_PER_SECOND';
        public const BARREL_PETROLEUM_PER_DAY = 'BARREL_PETROLEUM_PER_DAY';
        public const BARREL_PETROLEUM_PER_HOUR = 'BARREL_PETROLEUM_PER_HOUR';
        public const BARREL_PETROLEUM_PER_MINUTE = 'BARREL_PETROLEUM_PER_MINUTE';
        public const BARREL_PETROLEUM_PER_SECOND = 'BARREL_PETROLEUM_PER_SECOND';
        public const BARREL_PER_DAY = 'BARREL_PER_DAY';
        public const BARREL_PER_HOUR = 'BARREL_PER_HOUR';
        public const BARREL_PER_MINUTE = 'BARREL_PER_MINUTE';
        public const BARREL_PER_SECOND = 'BARREL_PER_SECOND';
        public const BARREL_US_PER_DAY = 'BARREL_US_PER_DAY';
        public const BARREL_US_PER_HOUR = 'BARREL_US_PER_HOUR';
        public const BARREL_US_PER_MINUTE = 'BARREL_US_PER_MINUTE';
        public const BARREL_US_PER_SECOND = 'BARREL_US_PER_SECOND';
        public const BARREL_WINE_PER_DAY = 'BARREL_WINE_PER_DAY';
        public const BARREL_WINE_PER_HOUR = 'BARREL_WINE_PER_HOUR';
        public const BARREL_WINE_PER_MINUTE = 'BARREL_WINE_PER_MINUTE';
        public const BARREL_WINE_PER_SECOND = 'BARREL_WINE_PER_SECOND';
        public const BARREL_BEER_PER_DAY = 'BARREL_BEER_PER_DAY';
        public const BARREL_BEER_PER_HOUR = 'BARREL_BEER_PER_HOUR';
        public const BARREL_BEER_PER_MINUTE = 'BARREL_BEER_PER_MINUTE';
        public const BARREL_BEER_PER_SECOND = 'BARREL_BEER_PER_SECOND';
        public const BILLION_CUBIC_FOOT_PER_DAY = 'BILLION_CUBIC_FOOT_PER_DAY';
        public const BILLION_CUBIC_FOOT_PER_HOUR = 'BILLION_CUBIC_FOOT_PER_HOUR';
        public const BILLION_CUBIC_FOOT_PER_MINUTE = 'BILLION_CUBIC_FOOT_PER_MINUTE';
        public const BILLION_CUBIC_FOOT_PER_SECOND = 'BILLION_CUBIC_FOOT_PER_SECOND';
        public const CENTILITER_PER_DAY = 'CENTILITER_PER_DAY';
        public const CENTILITER_PER_HOUR = 'CENTILITER_PER_HOUR';
        public const CENTILITER_PER_MINUTE = 'CENTILITER_PER_MINUTE';
        public const CENTILITER_PER_SECOND = 'CENTILITER_PER_SECOND';
        public const CUBEM_PER_DAY = 'CUBEM_PER_DAY';
        public const CUBEM_PER_HOUR = 'CUBEM_PER_HOUR';
        public const CUBEM_PER_MINUTE = 'CUBEM_PER_MINUTE';
        public const CUBEM_PER_SECOND = 'CUBEM_PER_SECOND';
        public const CUBIC_CENTIMETER_PER_DAY = 'CUBIC_CENTIMETER_PER_DAY';
        public const CUBIC_CENTIMETER_PER_HOUR = 'CUBIC_CENTIMETER_PER_HOUR';
        public const CUBIC_CENTIMETER_PER_MINUTE = 'CUBIC_CENTIMETER_PER_MINUTE';
        public const CUBIC_CENTIMETER_PER_SECOND = 'CUBIC_CENTIMETER_PER_SECOND';
        public const CUBIC_DECIMETER_PER_DAY = 'CUBIC_DECIMETER_PER_DAY';
        public const CUBIC_DECIMETER_PER_HOUR = 'CUBIC_DECIMETER_PER_HOUR';
        public const CUBIC_DECIMETER_PER_MINUTE = 'CUBIC_DECIMETER_PER_MINUTE';
        public const CUBIC_DECIMETER_PER_SECOND = 'CUBIC_DECIMETER_PER_SECOND';
        public const CUBIC_DEKAMETER_PER_DAY = 'CUBIC_DEKAMETER_PER_DAY';
        public const CUBIC_DEKAMETER_PER_HOUR = 'CUBIC_DEKAMETER_PER_HOUR';
        public const CUBIC_DEKAMETER_PER_MINUTE = 'CUBIC_DEKAMETER_PER_MINUTE';
        public const CUBIC_DEKAMETER_PER_SECOND = 'CUBIC_DEKAMETER_PER_SECOND';
        public const CUBIC_FOOT_PER_DAY = 'CUBIC_FOOT_PER_DAY';
        public const CUBIC_FOOT_PER_HOUR = 'CUBIC_FOOT_PER_HOUR';
        public const CUBIC_FOOT_PER_MINUTE = 'CUBIC_FOOT_PER_MINUTE';
        public const CUBIC_FOOT_PER_SECOND = 'CUBIC_FOOT_PER_SECOND';
        public const CUBIC_INCH_PER_DAY = 'CUBIC_INCH_PER_DAY';
        public const CUBIC_INCH_PER_HOUR = 'CUBIC_INCH_PER_HOUR';
        public const CUBIC_INCH_PER_MINUTE = 'CUBIC_INCH_PER_MINUTE';
        public const CUBIC_INCH_PER_SECOND = 'CUBIC_INCH_PER_SECOND';
        public const CUBIC_KILOMETER_PER_DAY = 'CUBIC_KILOMETER_PER_DAY';
        public const CUBIC_KILOMETER_PER_HOUR = 'CUBIC_KILOMETER_PER_HOUR';
        public const CUBIC_KILOMETER_PER_MINUTE = 'CUBIC_KILOMETER_PER_MINUTE';
        public const CUBIC_KILOMETER_PER_SECOND = 'CUBIC_KILOMETER_PER_SECOND';
        public const CUBIC_METER_PER_DAY = 'CUBIC_METER_PER_DAY';
        public const CUBIC_METER_PER_HOUR = 'CUBIC_METER_PER_HOUR';
        public const CUBIC_METER_PER_MINUTE = 'CUBIC_METER_PER_MINUTE';
        public const CUBIC_METER_PER_SECOND = 'CUBIC_METER_PER_SECOND';
        public const CUBIC_MILE_PER_DAY = 'CUBIC_MILE_PER_DAY';
        public const CUBIC_MILE_PER_HOUR = 'CUBIC_MILE_PER_HOUR';
        public const CUBIC_MILE_PER_MINUTE = 'CUBIC_MILE_PER_MINUTE';
        public const CUBIC_MILE_PER_SECOND = 'CUBIC_MILE_PER_SECOND';
        public const CUBIC_MILLIMETER_PER_DAY = 'CUBIC_MILLIMETER_PER_DAY';
        public const CUBIC_MILLIMETER_PER_HOUR = 'CUBIC_MILLIMETER_PER_HOUR';
        public const CUBIC_MILLIMETER_PER_MINUTE = 'CUBIC_MILLIMETER_PER_MINUTE';
        public const CUBIC_MILLIMETER_PER_SECOND = 'CUBIC_MILLIMETER_PER_SECOND';
        public const CUBIC_YARD_PER_DAY = 'CUBIC_YARD_PER_DAY';
        public const CUBIC_YARD_PER_HOUR = 'CUBIC_YARD_PER_HOUR';
        public const CUBIC_YARD_PER_MINUTE = 'CUBIC_YARD_PER_MINUTE';
        public const CUBIC_YARD_PER_SECOND = 'CUBIC_YARD_PER_SECOND';
        public const CUSEC = 'CUSEC';
        public const DECILITER_PER_DAY = 'DECILITER_PER_DAY';
        public const DECILITER_PER_HOUR = 'DECILITER_PER_HOUR';
        public const DECILITER_PER_MINUTE = 'DECILITER_PER_MINUTE';
        public const DECILITER_PER_SECOND = 'DECILITER_PER_SECOND';
        public const DEKALITER_PER_DAY = 'DEKALITER_PER_DAY';
        public const DEKALITER_PER_HOUR = 'DEKALITER_PER_HOUR';
        public const DEKALITER_PER_MINUTE = 'DEKALITER_PER_MINUTE';
        public const DEKALITER_PER_SECOND = 'DEKALITER_PER_SECOND';
        public const GALLON_PER_DAY = 'GALLON_PER_DAY';
        public const GALLON_PER_HOUR = 'GALLON_PER_HOUR';
        public const GALLON_PER_MINUTE = 'GALLON_PER_MINUTE';
        public const GALLON_PER_SECOND = 'GALLON_PER_SECOND';
        public const GALLON_US_PER_DAY = 'GALLON_US_PER_DAY';
        public const GALLON_US_PER_HOUR = 'GALLON_US_PER_HOUR';
        public const GALLON_US_PER_MINUTE = 'GALLON_US_PER_MINUTE';
        public const GALLON_US_PER_SECOND = 'GALLON_US_PER_SECOND';
        public const HECTARE_METER_PER_DAY = 'HECTARE_METER_PER_DAY';
        public const HECTARE_METER_PER_HOUR = 'HECTARE_METER_PER_HOUR';
        public const HECTARE_METER_PER_MINUTE = 'HECTARE_METER_PER_MINUTE';
        public const HECTARE_METER_PER_SECOND = 'HECTARE_METER_PER_SECOND';
        public const HECTOLITER_PER_DAY = 'HECTOLITER_PER_DAY';
        public const HECTOLITER_PER_HOUR = 'HECTOLITER_PER_HOUR';
        public const HECTOLITER_PER_MINUTE = 'HECTOLITER_PER_MINUTE';
        public const HECTOLITER_PER_SECOND = 'HECTOLITER_PER_SECOND';
        public const KILOLITER_PER_DAY = 'KILOLITER_PER_DAY';
        public const KILOLITER_PER_HOUR = 'KILOLITER_PER_HOUR';
        public const KILOLITER_PER_MINUTE = 'KILOLITER_PER_MINUTE';
        public const KILOLITER_PER_SECOND = 'KILOLITER_PER_SECOND';
        public const LAMBDA_PER_DAY = 'LAMBDA_PER_DAY';
        public const LAMBDA_PER_HOUR = 'LAMBDA_PER_HOUR';
        public const LAMBDA_PER_MINUTE = 'LAMBDA_PER_MINUTE';
        public const LAMBDA_PER_SECOND = 'LAMBDA_PER_SECOND';
        public const LITER_PER_DAY = 'LITER_PER_DAY';
        public const LITER_PER_HOUR = 'LITER_PER_HOUR';
        public const LITER_PER_MINUTE = 'LITER_PER_MINUTE';
        public const LITER_PER_SECOND = 'LITER_PER_SECOND';
        public const MILLILITER_PER_DAY = 'MILLILITER_PER_DAY';
        public const MILLILITER_PER_HOUR = 'MILLILITER_PER_HOUR';
        public const MILLILITER_PER_MINUTE = 'MILLILITER_PER_MINUTE';
        public const MILLILITER_PER_SECOND = 'MILLILITER_PER_SECOND';
        public const MILLION_ACRE_FOOT_PER_DAY = 'MILLION_ACRE_FOOT_PER_DAY';
        public const MILLION_ACRE_FOOT_PER_HOUR = 'MILLION_ACRE_FOOT_PER_HOUR';
        public const MILLION_ACRE_FOOT_PER_MINUTE = 'MILLION_ACRE_FOOT_PER_MINUTE';
        public const MILLION_ACRE_FOOT_PER_SECOND = 'MILLION_ACRE_FOOT_PER_SECOND';
        public const MILLION_CUBIC_FOOT_PER_DAY = 'MILLION_CUBIC_FOOT_PER_DAY';
        public const MILLION_CUBIC_FOOT_PER_HOUR = 'MILLION_CUBIC_FOOT_PER_HOUR';
        public const MILLION_CUBIC_FOOT_PER_MINUTE = 'MILLION_CUBIC_FOOT_PER_MINUTE';
        public const MILLION_CUBIC_FOOT_PER_SECOND = 'MILLION_CUBIC_FOOT_PER_SECOND';
        public const MILLION_GALLON_PER_DAY = 'MILLION_GALLON_PER_DAY';
        public const MILLION_GALLON_PER_HOUR = 'MILLION_GALLON_PER_HOUR';
        public const MILLION_GALLON_PER_MINUTE = 'MILLION_GALLON_PER_MINUTE';
        public const MILLION_GALLON_PER_SECOND = 'MILLION_GALLON_PER_SECOND';
        public const MILLION_GALLON_US_PER_DAY = 'MILLION_GALLON_US_PER_DAY';
        public const MILLION_GALLON_US_PER_HOUR = 'MILLION_GALLON_US_PER_HOUR';
        public const MILLION_GALLON_US_PER_MINUTE = 'MILLION_GALLON_US_PER_MINUTE';
        public const MILLION_GALLON_US_PER_SECOND = 'MILLION_GALLON_US_PER_SECOND';
        public const MINERS_INCH_AZ = 'MINERS_INCH_AZ';
        public const MINERS_INCH_CA = 'MINERS_INCH_CA';
        public const MINERS_INCH_OR = 'MINERS_INCH_OR';
        public const MINERS_INCH_CO = 'MINERS_INCH_CO';
        public const MINERS_INCH_ID = 'MINERS_INCH_ID';
        public const MINERS_INCH_WA = 'MINERS_INCH_WA';
        public const MINERS_INCH_NM = 'MINERS_INCH_NM';
        public const OUNCE_PER_DAY = 'OUNCE_PER_DAY';
        public const OUNCE_PER_HOUR = 'OUNCE_PER_HOUR';
        public const OUNCE_PER_MINUTE = 'OUNCE_PER_MINUTE';
        public const OUNCE_PER_SECOND = 'OUNCE_PER_SECOND';
        public const OUNCE_US_PER_DAY = 'OUNCE_US_PER_DAY';
        public const OUNCE_US_PER_HOUR = 'OUNCE_US_PER_HOUR';
        public const OUNCE_US_PER_MINUTE = 'OUNCE_US_PER_MINUTE';
        public const OUNCE_US_PER_SECOND = 'OUNCE_US_PER_SECOND';
        public const PETROGRAD_STANDARD_PER_DAY = 'PETROGRAD_STANDARD_PER_DAY';
        public const PETROGRAD_STANDARD_PER_HOUR = 'PETROGRAD_STANDARD_PER_HOUR';
        public const PETROGRAD_STANDARD_PER_MINUTE = 'PETROGRAD_STANDARD_PER_MINUTE';
        public const PETROGRAD_STANDARD_PER_SECOND = 'PETROGRAD_STANDARD_PER_SECOND';
        public const STERE_PER_DAY = 'STERE_PER_DAY';
        public const STERE_PER_HOUR = 'STERE_PER_HOUR';
        public const STERE_PER_MINUTE = 'STERE_PER_MINUTE';
        public const STERE_PER_SECOND = 'STERE_PER_SECOND';
        public const THOUSAND_CUBIC_FOOT_PER_DAY = 'THOUSAND_CUBIC_FOOT_PER_DAY';
        public const THOUSAND_CUBIC_FOOT_PER_HOUR = 'THOUSAND_CUBIC_FOOT_PER_HOUR';
        public const THOUSAND_CUBIC_FOOT_PER_MINUTE = 'THOUSAND_CUBIC_FOOT_PER_MINUTE';
        public const THOUSAND_CUBIC_FOOT_PER_SECOND = 'THOUSAND_CUBIC_FOOT_PER_SECOND';
        public const TRILLION_CUBIC_FOOT_PER_DAY = 'TRILLION_CUBIC_FOOT_PER_DAY';
        public const TRILLION_CUBIC_FOOT_PER_HOUR = 'TRILLION_CUBIC_FOOT_PER_HOUR';
        public const TRILLION_CUBIC_FOOT_PER_MINUTE = 'TRILLION_CUBIC_FOOT_PER_MINUTE';
        public const TRILLION_CUBIC_FOOT_PER_SECOND = 'TRILLION_CUBIC_FOOT_PER_';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Force extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'NEWTON';
        public const ATTONEWTON = 'ATTONEWTON';
        public const CENTINEWTON = 'CENTINEWTON';
        public const DECIGRAM_FORCE = 'DECIGRAM_FORCE';
        public const DECINEWTON = 'DECINEWTON';
        public const DEKAGRAM_FORCE = 'DEKAGRAM_FORCE';
        public const DEKANEWTON = 'DEKANEWTON';
        public const DYNE = 'DYNE';
        public const EXANEWTON = 'EXANEWTON';
        public const FEMTONEWTON = 'FEMTONEWTON';
        public const GIGANEWTON = 'GIGANEWTON';
        public const GRAM_FORCE = 'GRAM_FORCE';
        public const HECTONEWTON = 'HECTONEWTON';
        public const JOULE_PER_METER = 'JOULE_PER_METER';
        public const KILOGRAM_FORCE = 'KILOGRAM_FORCE';
        public const KILONEWTON = 'KILONEWTON';
        public const KILOPOND = 'KILOPOND';
        public const KIP = 'KIP';
        public const MEGANEWTON = 'MEGANEWTON';
        public const MEGAPOND = 'MEGAPOND';
        public const MICRONEWTON = 'MICRONEWTON';
        public const MILLINEWTON = 'MILLINEWTON';
        public const NANONEWTON = 'NANONEWTON';
        public const NEWTON = 'NEWTON';
        public const OUNCE_FORCE = 'OUNCE_FORCE';
        public const PETANEWTON = 'PETANEWTON';
        public const PICONEWTON = 'PICONEWTON';
        public const POND = 'POND';
        public const POUND_FORCE = 'POUND_FORCE';
        public const POUNDAL = 'POUNDAL';
        public const STHENE = 'STHENE';
        public const TERANEWTON = 'TERANEWTON';
        public const TON_FORCE_LONG = 'TON_FORCE_LONG';
        public const TON_FORCE = 'TON_FORCE';
        public const TON_FORCE_SHORT = 'TON_FORCE_SHORT';
        public const YOCTONEWTON = 'YOCTONEWTON';
        public const YOTTANEWTON = 'YOTTANEWTON';
        public const ZEPTONEWTON = 'ZEPTONEWTON';
        public const ZETTANEWTON = 'ZETTANEWTON';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Frequency extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'HERTZ';
        public const ONE_PER_SECOND = 'ONE_PER_SECOND';
        public const CYCLE_PER_SECOND = 'CYCLE_PER_SECOND';
        public const DEGREE_PER_HOUR = 'DEGREE_PER_HOUR';
        public const DEGREE_PER_MINUTE = 'DEGREE_PER_MINUTE';
        public const DEGREE_PER_SECOND = 'DEGREE_PER_SECOND';
        public const GIGAHERTZ = 'GIGAHERTZ';
        public const HERTZ = 'HERTZ';
        public const KILOHERTZ = 'KILOHERTZ';
        public const MEGAHERTZ = 'MEGAHERTZ';
        public const MILLIHERTZ = 'MILLIHERTZ';
        public const RADIAN_PER_HOUR = 'RADIAN_PER_HOUR';
        public const RADIAN_PER_MINUTE = 'RADIAN_PER_MINUTE';
        public const RADIAN_PER_SECOND = 'RADIAN_PER_SECOND';
        public const REVOLUTION_PER_HOUR = 'REVOLUTION_PER_HOUR';
        public const REVOLUTION_PER_MINUTE = 'REVOLUTION_PER_MINUTE';
        public const REVOLUTION_PER_SECOND = 'REVOLUTION_PER_SECOND';
        public const RPM = 'RPM';
        public const TERRAHERTZ = 'TERRAHERTZ';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Illumination extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'LUX';
        public const FOOTCANDLE = 'FOOTCANDLE';
        public const KILOLUX = 'KILOLUX';
        public const LUMEN_PER_SQUARE_CENTIMETER = 'LUMEN_PER_SQUARE_CENTIMETER';
        public const LUMEN_PER_SQUARE_FOOT = 'LUMEN_PER_SQUARE_FOOT';
        public const LUMEN_PER_SQUARE_INCH = 'LUMEN_PER_SQUARE_INCH';
        public const LUMEN_PER_SQUARE_METER = 'LUMEN_PER_SQUARE_METER';
        public const LUX = 'LUX';
        public const METERCANDLE = 'METERCANDLE';
        public const MILLIPHOT = 'MILLIPHOT';
        public const NOX = 'NOX';
        public const PHOT = 'PHOT';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Length extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'METER';
        public const AGATE = 'AGATE';
        public const ALEN_DANISH = 'ALEN_DANISH';
        public const ALEN = 'ALEN';
        public const ALEN_SWEDISH = 'ALEN_SWEDISH';
        public const ANGSTROM = 'ANGSTROM';
        public const ARMS = 'ARMS';
        public const ARPENT_CANADIAN = 'ARPENT_CANADIAN';
        public const ARPENT = 'ARPENT';
        public const ARSHEEN = 'ARSHEEN';
        public const ARSHIN = 'ARSHIN';
        public const ARSHIN_IRAQ = 'ARSHIN_IRAQ';
        public const ASTRONOMICAL_UNIT = 'ASTRONOMICAL_UNIT';
        public const ATTOMETER = 'ATTOMETER';
        public const BAMBOO = 'BAMBOO';
        public const BARLEYCORN = 'BARLEYCORN';
        public const BEE_SPACE = 'BEE_SPACE';
        public const BICRON = 'BICRON';
        public const BLOCK_US_EAST = 'BLOCK_US_EAST';
        public const BLOCK_US_WEST = 'BLOCK_US_WEST';
        public const BLOCK_US_SOUTH = 'BLOCK_US_SOUTH';
        public const BOHR = 'BOHR';
        public const BRACCIO = 'BRACCIO';
        public const BRAZA_ARGENTINA = 'BRAZA_ARGENTINA';
        public const BRAZA = 'BRAZA';
        public const BRAZA_US = 'BRAZA_US';
        public const BUTTON = 'BUTTON';
        public const CABLE_US = 'CABLE_US';
        public const CABLE_UK = 'CABLE_UK';
        public const CALIBER = 'CALIBER';
        public const CANA = 'CANA';
        public const CAPE_FOOT = 'CAPE_FOOT';
        public const CAPE_INCH = 'CAPE_INCH';
        public const CAPE_ROOD = 'CAPE_ROOD';
        public const CENTIMETER = 'CENTIMETER';
        public const CHAIN = 'CHAIN';
        public const CHAIN_ENGINEER = 'CHAIN_ENGINEER';
        public const CHIH = 'CHIH';
        public const CHINESE_FOOT = 'CHINESE_FOOT';
        public const CHINESE_INCH = 'CHINESE_INCH';
        public const CHINESE_MILE = 'CHINESE_MILE';
        public const CHINESE_YARD = 'CHINESE_YARD';
        public const CITY_BLOCK_US_EAST = 'CITY_BLOCK_US_EAST';
        public const CITY_BLOCK_US_WEST = 'CITY_BLOCK_US_WEST';
        public const CITY_BLOCK_US_SOUTH = 'CITY_BLOCK_US_SOUTH';
        public const CLICK = 'CLICK';
        public const CUADRA = 'CUADRA';
        public const CUADRA_ARGENTINA = 'CUADRA_ARGENTINA';
        public const CUBIT_EGYPT = 'Length:CUBIT_EGYPT';
        public const CUBIT_ROYAL = 'CUBIT_ROYAL';
        public const CUBIT_UK = 'CUBIT_UK';
        public const CUBIT = 'CUBIT';
        public const CUERDA = 'CUERDA';
        public const DECIMETER = 'DECIMETER';
        public const DEKAMETER = 'DEKAMETER';
        public const DIDOT_POINT = 'DIDOT_POINT';
        public const DIGIT = 'DIGIT';
        public const DIRAA = 'DIRAA';
        public const DONG = 'DONG';
        public const DOUZIEME_WATCH = 'DOUZIEME_WATCH';
        public const DOUZIEME = 'DOUZIEME';
        public const DRA_IRAQ = 'DRA_IRAQ';
        public const DRA = 'DRA';
        public const EL = 'EL';
        public const ELL = 'ELL';
        public const ELL_SCOTTISH = 'ELL_SCOTTISH';
        public const ELLE = 'ELLE';
        public const ELLE_VIENNA = 'ELLE_VIENNA';
        public const EM = 'EM';
        public const ESTADIO_PORTUGAL = 'ESTADIO_PORTUGAL';
        public const ESTADIO = 'ESTADIO';
        public const EXAMETER = 'EXAMETER';
        public const FADEN_AUSTRIA = 'FADEN_AUSTRIA';
        public const FADEN = 'FADEN';
        public const FALL = 'FALL';
        public const FALL_SCOTTISH = 'FALL_SCOTTISH';
        public const FATHOM = 'FATHOM';
        public const FATHOM_ANCIENT = 'FATHOM_ANCIENT';
        public const FAUST = 'FAUST';
        public const FEET_OLD_CANADIAN = 'FEET_OLD_CANADIAN';
        public const FEET_EGYPT = 'FEET_EGYPT';
        public const FEET_FRANCE = 'FEET_FRANCE';
        public const FEET = 'FEET';
        public const FEET_IRAQ = 'FEET_IRAQ';
        public const FEET_NETHERLAND = 'FEET_NETHERLAND';
        public const FEET_ITALIC = 'FEET_ITALIC';
        public const FEET_SURVEY = 'FEET_SURVEY';
        public const FEMTOMETER = 'FEMTOMETER';
        public const FERMI = 'FERMI';
        public const FINGER = 'FINGER';
        public const FINGERBREADTH = 'FINGERBREADTH';
        public const FIST = 'FIST';
        public const FOD = 'FOD';
        public const FOOT_EGYPT = 'FOOT_EGYPT';
        public const FOOT_FRANCE = 'FOOT_FRANCE';
        public const FOOT = 'FOOT';
        public const FOOT_IRAQ = 'FOOT_IRAQ';
        public const FOOT_NETHERLAND = 'FOOT_NETHERLAND';
        public const FOOT_ITALIC = 'FOOT_ITALIC';
        public const FOOT_SURVEY = 'FOOT_SURVEY';
        public const FOOTBALL_FIELD_CANADA = 'FOOTBALL_FIELD_CANADA';
        public const FOOTBALL_FIELD_US = 'FOOTBALL_FIELD_US';
        public const FOOTBALL_FIELD = 'FOOTBALL_FIELD';
        public const FURLONG = 'FURLONG';
        public const FURLONG_SURVEY = 'FURLONG_SURVEY';
        public const FUSS = 'FUSS';
        public const GIGAMETER = 'GIGAMETER';
        public const GIGAPARSEC = 'GIGAPARSEC';
        public const GNATS_EYE = 'GNATS_EYE';
        public const GOAD = 'GOAD';
        public const GRY = 'GRY';
        public const HAIRS_BREADTH = 'HAIRS_BREADTH';
        public const HAND = 'HAND';
        public const HANDBREADTH = 'HANDBREADTH';
        public const HAT = 'HAT';
        public const HECTOMETER = 'HECTOMETER';
        public const HEER = 'HEER';
        public const HIRO = 'HIRO';
        public const HUBBLE = 'HUBBLE';
        public const HVAT = 'HVAT';
        public const INCH = 'INCH';
        public const IRON = 'IRON';
        public const KEN = 'KEN';
        public const KERAT = 'KERAT';
        public const KILOFOOT = 'KILOFOOT';
        public const KILOMETER = 'KILOMETER';
        public const KILOPARSEC = 'KILOPARSEC';
        public const KILOYARD = 'KILOYARD';
        public const KIND = 'KIND';
        public const KLAFTER = 'KLAFTER';
        public const KLAFTER_SWISS = 'KLAFTER_SWISS';
        public const KLICK = 'KLICK';
        public const KYU = 'KYU';
        public const LAP_ANCIENT = 'LAP_ANCIENT';
        public const LAP = 'LAP';
        public const LAP_POOL = 'LAP_POOL';
        public const LEAGUE_ANCIENT = 'LEAGUE_ANCIENT';
        public const LEAGUE_NAUTIC = 'LEAGUE_NAUTIC';
        public const LEAGUE_UK_NAUTIC = 'LEAGUE_UK_NAUTIC';
        public const LEAGUE = 'LEAGUE';
        public const LEAGUE_US = 'LEAGUE_US';
        public const LEAP = 'LEAP';
        public const LEGOA = 'LEGOA';
        public const LEGUA = 'LEGUA';
        public const LEGUA_US = 'LEGUA_US';
        public const LEGUA_SPAIN_OLD = 'LEGUA_SPAIN_OLD';
        public const LEGUA_SPAIN = 'LEGUA_SPAIN';
        public const LI_ANCIENT = 'LI_ANCIENT';
        public const LI_IMPERIAL = 'LI_IMPERIAL';
        public const LI = 'LI';
        public const LIEUE = 'LIEUE';
        public const LIEUE_METRIC = 'LIEUE_METRIC';
        public const LIEUE_NAUTIC = 'LIEUE_NAUTIC';
        public const LIGHT_SECOND = 'LIGHT_SECOND';
        public const LIGHT_MINUTE = 'LIGHT_MINUTE';
        public const LIGHT_HOUR = 'LIGHT_HOUR';
        public const LIGHT_DAY = 'LIGHT_DAY';
        public const LIGHT_YEAR = 'LIGHT_YEAR';
        public const LIGNE = 'LIGNE';
        public const LIGNE_SWISS = 'LIGNE_SWISS';
        public const LINE = 'LINE';
        public const LINE_SMALL = 'LINE_SMALL';
        public const LINK = 'LINK';
        public const LINK_ENGINEER = 'LINK_ENGINEER';
        public const LUG = 'LUG';
        public const LUG_GREAT = 'LUG_GREAT';
        public const MARATHON = 'MARATHON';
        public const MARK_TWAIN = 'MARK_TWAIN';
        public const MEGAMETER = 'MEGAMETER';
        public const MEGAPARSEC = 'MEGAPARSEC';
        public const MEILE_AUSTRIAN = 'MEILE_AUSTRIAN';
        public const MEILE = 'MEILE';
        public const MEILE_GERMAN = 'MEILE_GERMAN';
        public const METER = 'METER';
        public const METRE = 'METRE';
        public const METRIC_MILE = 'METRIC_MILE';
        public const METRIC_MILE_US = 'METRIC_MILE_US';
        public const MICROINCH = 'MICROINCH';
        public const MICROMETER = 'MICROMETER';
        public const MICROMICRON = 'MICROMICRON';
        public const MICRON = 'MICRON';
        public const MIGLIO = 'MIGLIO';
        public const MIIL = 'MIIL';
        public const MIIL_DENMARK = 'MIIL_DENMARK';
        public const MIIL_SWEDISH = 'MIIL_SWEDISH';
        public const MIL = 'MIL';
        public const MIL_SWEDISH = 'MIL_SWEDISH';
        public const MILE_UK = 'MILE_UK';
        public const MILE_IRISH = 'MILE_IRISH';
        public const MILE = 'MILE';
        public const MILE_NAUTIC = 'MILE_NAUTIC';
        public const MILE_NAUTIC_UK = 'MILE_NAUTIC_UK';
        public const MILE_NAUTIC_US = 'MILE_NAUTIC_US';
        public const MILE_ANCIENT = 'MILE_ANCIENT';
        public const MILE_SCOTTISH = 'MILE_SCOTTISH';
        public const MILE_STATUTE = 'MILE_STATUTE';
        public const MILE_US = 'MILE_US';
        public const MILHA = 'MILHA';
        public const MILITARY_PACE = 'MILITARY_PACE';
        public const MILITARY_PACE_DOUBLE = 'MILITARY_PACE_DOUBLE';
        public const MILLA = 'MILLA';
        public const MILLE = 'MILLE';
        public const MILLIARE = 'MILLIARE';
        public const MILLIMETER = 'MILLIMETER';
        public const MILLIMICRON = 'MILLIMICRON';
        public const MKONO = 'MKONO';
        public const MOOT = 'MOOT';
        public const MYRIAMETER = 'MYRIAMETER';
        public const NAIL = 'NAIL';
        public const NANOMETER = 'NANOMETER';
        public const NANON = 'NANON';
        public const PACE = 'PACE';
        public const PACE_ROMAN = 'PACE_ROMAN';
        public const PALM_DUTCH = 'PALM_DUTCH';
        public const PALM_UK = 'PALM_UK';
        public const PALM = 'PALM';
        public const PALMO_PORTUGUESE = 'PALMO_PORTUGUESE';
        public const PALMO = 'PALMO';
        public const PALMO_US = 'PALMO_US';
        public const PARASANG = 'PARASANG';
        public const PARIS_FOOT = 'PARIS_FOOT';
        public const PARSEC = 'PARSEC';
        public const PE = 'PE';
        public const PEARL = 'PEARL';
        public const PERCH = 'PERCH';
        public const PERCH_IRELAND = 'PERCH_IRELAND';
        public const PERTICA = 'PERTICA';
        public const PES = 'PES';
        public const PETAMETER = 'PETAMETER';
        public const PICA = 'PICA';
        public const PICOMETER = 'PICOMETER';
        public const PIE_ARGENTINA = 'PIE_ARGENTINA';
        public const PIE_ITALIC = 'PIE_ITALIC';
        public const PIE = 'PIE';
        public const PIE_US = 'PIE_US';
        public const PIED_DE_ROI = 'PIED_DE_ROI';
        public const PIK = 'PIK';
        public const PIKE = 'PIKE';
        public const POINT_ADOBE = 'POINT_ADOBE';
        public const POINT = 'POINT';
        public const POINT_DIDOT = 'POINT_DIDOT';
        public const POINT_TEX = 'POINT_TEX';
        public const POLE = 'POLE';
        public const POLEGADA = 'POLEGADA';
        public const POUCE = 'POUCE';
        public const PU = 'PU';
        public const PULGADA = 'PULGADA';
        public const PYGME = 'PYGME';
        public const Q = 'Q';
        public const QUADRANT = 'QUADRANT';
        public const QUARTER = 'QUARTER';
        public const QUARTER_CLOTH = 'QUARTER_CLOTH';
        public const QUARTER_PRINT = 'QUARTER_PRINT';
        public const RANGE = 'RANGE';
        public const REED = 'REED';
        public const RI = 'RI';
        public const RIDGE = 'RIDGE';
        public const RIVER = 'RIVER';
        public const ROD = 'ROD';
        public const ROD_SURVEY = 'ROD_SURVEY';
        public const ROEDE = 'ROEDE';
        public const ROOD = 'ROOD';
        public const ROPE = 'ROPE';
        public const ROYAL_FOOT = 'ROYAL_FOOT';
        public const RUTE = 'RUTE';
        public const SADZHEN = 'SADZHEN';
        public const SAGENE = 'SAGENE';
        public const SCOTS_FOOT = 'SCOTS_FOOT';
        public const SCOTS_MILE = 'SCOTS_MILE';
        public const SEEMEILE = 'SEEMEILE';
        public const SHACKLE = 'SHACKLE';
        public const SHAFTMENT = 'SHAFTMENT';
        public const SHAFTMENT_ANCIENT = 'SHAFTMENT_ANCIENT';
        public const SHAKU = 'SHAKU';
        public const SIRIOMETER = 'SIRIOMETER';
        public const SMOOT = 'SMOOT';
        public const SPAN = 'SPAN';
        public const SPAT = 'SPAT';
        public const STADIUM = 'STADIUM';
        public const STEP = 'STEP';
        public const STICK = 'STICK';
        public const STORY = 'STORY';
        public const STRIDE = 'STRIDE';
        public const STRIDE_ROMAN = 'STRIDE_ROMAN';
        public const TENTHMETER = 'TENTHMETER';
        public const TERAMETER = 'TERAMETER';
        public const THOU = 'THOU';
        public const TOISE = 'TOISE';
        public const TOWNSHIP = 'TOWNSHIP';
        public const T_SUN = 'T_SUN';
        public const TU = 'TU';
        public const TWAIN = 'TWAIN';
        public const TWIP = 'TWIP';
        public const U = 'U';
        public const VARA_CALIFORNIA = 'VARA_CALIFORNIA';
        public const VARA_MEXICAN = 'VARA_MEXICAN';
        public const VARA_PORTUGUESE = 'VARA_PORTUGUESE';
        public const VARA_AMERICA = 'VARA_AMERICA';
        public const VARA = 'VARA';
        public const VARA_TEXAS = 'VARA_TEXAS';
        public const VERGE = 'VERGE';
        public const VERSHOK = 'VERSHOK';
        public const VERST = 'VERST';
        public const WAH = 'WAH';
        public const WERST = 'WERST';
        public const X_UNIT = 'X_UNIT';
        public const YARD = 'YARD';
        public const YOCTOMETER = 'YOCTOMETER';
        public const YOTTAMETER = 'YOTTAMETER';
        public const ZEPTOMETER = 'ZEPTOMETER';
        public const ZETTAMETER = 'ZETTAMETER';
        public const ZOLL = 'ZOLL';
        public const ZOLL_SWISS = 'ZOLL_SWISS';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Lightness extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'CANDELA_PER_SQUARE_METER';
        public const APOSTILB = 'APOSTILB';
        public const BLONDEL = 'BLONDEL';
        public const CANDELA_PER_SQUARE_CENTIMETER = 'CANDELA_PER_SQUARE_CENTIMETER';
        public const CANDELA_PER_SQUARE_FOOT = 'CANDELA_PER_SQUARE_FOOT';
        public const CANDELA_PER_SQUARE_INCH = 'CANDELA_PER_SQUARE_INCH';
        public const CANDELA_PER_SQUARE_METER = 'CANDELA_PER_SQUARE_METER';
        public const FOOTLAMBERT = 'FOOTLAMBERT';
        public const KILOCANDELA_PER_SQUARE_CENTIMETER = 'KILOCANDELA_PER_SQUARE_CENTIMETER';
        public const KILOCANDELA_PER_SQUARE_FOOT = 'KILOCANDELA_PER_SQUARE_FOOT';
        public const KILOCANDELA_PER_SQUARE_INCH = 'KILOCANDELA_PER_SQUARE_INCH';
        public const KILOCANDELA_PER_SQUARE_METER = 'KILOCANDELA_PER_SQUARE_METER';
        public const LAMBERT = 'LAMBERT';
        public const MILLILAMBERT = 'MILLILAMBERT';
        public const NIT = 'NIT';
        public const STILB = 'STILB';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Number extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'DECIMAL';
        public const BINARY = 'BINARY';
        public const TERNARY = 'TERNARY';
        public const QUATERNARY = 'QUATERNARY';
        public const QUINARY = 'QUINARY';
        public const SENARY = 'SENARY';
        public const SEPTENARY = 'SEPTENARY';
        public const OCTAL = 'OCTAL';
        public const NONARY = 'NONARY';
        public const DECIMAL = 'DECIMAL';
        public const DUODECIMAL = 'DUODECIMAL';
        public const HEXADECIMAL = 'HEXADECIMAL';
        public const ROMAN = 'ROMAN';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
        /**
         * @var array<array-key, mixed>
         */
        public static $_roman;
        /**
         * @var array<array-key, mixed>
         */
        public static $_romanconvert;
        /**
         * @param int $value
         * @param string $type
         * @param Zend_Locale|null|string $locale
         *
         * @throws Zend_Measure_Exception
         */
        public function __construct($value, $type, $locale = null)
        {
        }
        /**
         * @param int $value
         * @param null|string $type
         * @param Zend_Locale|null|string $locale
         *
         * @throws Zend_Measure_Exception
         */
        public function setValue($value, $type = null, $locale = null)
        {
        }
        /**
         * @param int $input
         * @param string $type
         *
         * @return string
         */
        public function _toDecimal($input, $type)
        {
        }
        /**
         * @param int $value
         * @param string $type
         *
         * @return string
         *
         * @throws Zend_Measure_Exception
         */
        public function _fromDecimal($value, $type)
        {
        }
        /**
         * @param string $type
         *
         * @return void
         *
         * @throws Zend_Measure_Exception
         */
        public function setType($type)
        {
        }
        /**
         * @param string $type
         * @param int $round
         *
         * @return string
         */
        public function convertTo($type, $round = 0, $locale = null)
        {
        }
    }
    class Zend_Measure_Power extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'WATT';
        public const ATTOWATT = 'ATTOWATT';
        public const BTU_PER_HOUR = 'BTU_PER_HOUR';
        public const BTU_PER_MINUTE = 'BTU_PER_MINUTE';
        public const BTU_PER_SECOND = 'BTU_PER_SECOND';
        public const CALORIE_PER_HOUR = 'CALORIE_PER_HOUR';
        public const CALORIE_PER_MINUTE = 'CALORIE_PER_MINUTE';
        public const CALORIE_PER_SECOND = 'CALORIE_PER_SECOND';
        public const CENTIWATT = 'CENTIWATT';
        public const CHEVAL_VAPEUR = 'CHEVAL_VAPEUR';
        public const CLUSEC = 'CLUSEC';
        public const DECIWATT = 'DECIWATT';
        public const DEKAWATT = 'DEKAWATT';
        public const DYNE_CENTIMETER_PER_HOUR = 'DYNE_CENTIMETER_PER_HOUR';
        public const DYNE_CENTIMETER_PER_MINUTE = 'DYNE_CENTIMETER_PER_MINUTE';
        public const DYNE_CENTIMETER_PER_SECOND = 'DYNE_CENTIMETER_PER_SECOND';
        public const ERG_PER_HOUR = 'ERG_PER_HOUR';
        public const ERG_PER_MINUTE = 'ERG_PER_MINUTE';
        public const ERG_PER_SECOND = 'ERG_PER_SECOND';
        public const EXAWATT = 'EXAWATT';
        public const FEMTOWATT = 'FEMTOWATT';
        public const FOOT_POUND_FORCE_PER_HOUR = 'FOOT_POUND_FORCE_PER_HOUR';
        public const FOOT_POUND_FORCE_PER_MINUTE = 'FOOT_POUND_FORCE_PER_MINUTE';
        public const FOOT_POUND_FORCE_PER_SECOND = 'FOOT_POUND_FORCE_PER_SECOND';
        public const FOOT_POUNDAL_PER_HOUR = 'FOOT_POUNDAL_PER_HOUR';
        public const FOOT_POUNDAL_PER_MINUTE = 'FOOT_POUNDAL_PER_MINUTE';
        public const FOOT_POUNDAL_PER_SECOND = 'FOOT_POUNDAL_PER_SECOND';
        public const GIGAWATT = 'GIGAWATT';
        public const GRAM_FORCE_CENTIMETER_PER_HOUR = 'GRAM_FORCE_CENTIMETER_PER_HOUR';
        public const GRAM_FORCE_CENTIMETER_PER_MINUTE = 'GRAM_FORCE_CENTIMETER_PER_MINUTE';
        public const GRAM_FORCE_CENTIMETER_PER_SECOND = 'GRAM_FORCE_CENTIMETER_PER_SECOND';
        public const HECTOWATT = 'HECTOWATT';
        public const HORSEPOWER_INTERNATIONAL = 'HORSEPOWER_INTERNATIONAL';
        public const HORSEPOWER_ELECTRIC = 'HORSEPOWER_ELECTRIC';
        public const HORSEPOWER = 'HORSEPOWER';
        public const HORSEPOWER_WATER = 'HORSEPOWER_WATER';
        public const INCH_OUNCE_FORCE_REVOLUTION_PER_MINUTE = 'INCH_OUNCH_FORCE_REVOLUTION_PER_MINUTE';
        public const JOULE_PER_HOUR = 'JOULE_PER_HOUR';
        public const JOULE_PER_MINUTE = 'JOULE_PER_MINUTE';
        public const JOULE_PER_SECOND = 'JOULE_PER_SECOND';
        public const KILOCALORIE_PER_HOUR = 'KILOCALORIE_PER_HOUR';
        public const KILOCALORIE_PER_MINUTE = 'KILOCALORIE_PER_MINUTE';
        public const KILOCALORIE_PER_SECOND = 'KILOCALORIE_PER_SECOND';
        public const KILOGRAM_FORCE_METER_PER_HOUR = 'KILOGRAM_FORCE_METER_PER_HOUR';
        public const KILOGRAM_FORCE_METER_PER_MINUTE = 'KILOGRAM_FORCE_METER_PER_MINUTE';
        public const KILOGRAM_FORCE_METER_PER_SECOND = 'KILOGRAM_FORCE_METER_PER_SECOND';
        public const KILOPOND_METER_PER_HOUR = 'KILOPOND_METER_PER_HOUR';
        public const KILOPOND_METER_PER_MINUTE = 'KILOPOND_METER_PER_MINUTE';
        public const KILOPOND_METER_PER_SECOND = 'KILOPOND_METER_PER_SECOND';
        public const KILOWATT = 'KILOWATT';
        public const MEGAWATT = 'MEGAWATT';
        public const MICROWATT = 'MICROWATT';
        public const MILLION_BTU_PER_HOUR = 'MILLION_BTU_PER_HOUR';
        public const MILLIWATT = 'MILLIWATT';
        public const NANOWATT = 'NANOWATT';
        public const NEWTON_METER_PER_HOUR = 'NEWTON_METER_PER_HOUR';
        public const NEWTON_METER_PER_MINUTE = 'NEWTON_METER_PER_MINUTE';
        public const NEWTON_METER_PER_SECOND = 'NEWTON_METER_PER_SECOND';
        public const PETAWATT = 'PETAWATT';
        public const PFERDESTAERKE = 'PFERDESTAERKE';
        public const PICOWATT = 'PICOWATT';
        public const PONCELET = 'PONCELET';
        public const POUND_SQUARE_FOOR_PER_CUBIC_SECOND = 'POUND_SQUARE_FOOT_PER_CUBIC_SECOND';
        public const TERAWATT = 'TERAWATT';
        public const TON_OF_REFRIGERATION = 'TON_OF_REFRIGERATION';
        public const WATT = 'WATT';
        public const YOCTOWATT = 'YOCTOWATT';
        public const YOTTAWATT = 'YOTTAWATT';
        public const ZEPTOWATT = 'ZEPTOWATT';
        public const ZETTAWATT = 'ZETTAWATT';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Pressure extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'NEWTON_PER_SQUARE_METER';
        public const ATMOSPHERE = 'ATMOSPHERE';
        public const ATMOSPHERE_TECHNICAL = 'ATMOSPHERE_TECHNICAL';
        public const ATTOBAR = 'ATTOBAR';
        public const ATTOPASCAL = 'ATTOPASCAL';
        public const BAR = 'BAR';
        public const BARAD = 'BARAD';
        public const BARYE = 'BARYE';
        public const CENTIBAR = 'CENTIBAR';
        public const CENTIHG = 'CENTIHG';
        public const CENTIMETER_MERCURY_0C = 'CENTIMETER_MERCURY_0C';
        public const CENTIMETER_WATER_4C = 'CENTIMETER_WATER_4C';
        public const CENTIPASCAL = 'CENTIPASCAL';
        public const CENTITORR = 'CENTITORR';
        public const DECIBAR = 'DECIBAR';
        public const DECIPASCAL = 'DECIPASCAL';
        public const DECITORR = 'DECITORR';
        public const DEKABAR = 'DEKABAR';
        public const DEKAPASCAL = 'DEKAPASCAL';
        public const DYNE_PER_SQUARE_CENTIMETER = 'DYNE_PER_SQUARE_CENTIMETER';
        public const EXABAR = 'EXABAR';
        public const EXAPASCAL = 'EXAPASCAL';
        public const FEMTOBAR = 'FEMTOBAR';
        public const FEMTOPASCAL = 'FEMTOPASCAL';
        public const FOOT_AIR_0C = 'FOOT_AIR_0C';
        public const FOOT_AIR_15C = 'FOOT_AIR_15C';
        public const FOOT_HEAD = 'FOOT_HEAD';
        public const FOOT_MERCURY_0C = 'FOOT_MERCURY_0C';
        public const FOOT_WATER_4C = 'FOOT_WATER_4C';
        public const GIGABAR = 'GIGABAR';
        public const GIGAPASCAL = 'GIGAPASCAL';
        public const GRAM_FORCE_SQUARE_CENTIMETER = 'GRAM_FORCE_SQUARE_CENTIMETER';
        public const HECTOBAR = 'HECTOBAR';
        public const HECTOPASCAL = 'HECTOPASCAL';
        public const INCH_AIR_0C = 'INCH_AIR_0C';
        public const INCH_AIR_15C = 'INCH_AIR_15C';
        public const INCH_MERCURY_0C = 'INCH_MERCURY_0C';
        public const INCH_WATER_4C = 'INCH_WATER_4C';
        public const KILOBAR = 'KILOBAR';
        public const KILOGRAM_FORCE_PER_SQUARE_CENTIMETER = 'KILOGRAM_FORCE_PER_SQUARE_CENTIMETER';
        public const KILOGRAM_FORCE_PER_SQUARE_METER = 'KILOGRAM_FORCE_PER_SQUARE_METER';
        public const KILOGRAM_FORCE_PER_SQUARE_MILLIMETER = 'KILOGRAM_FORCE_PER_SQUARE_MILLIMETER';
        public const KILONEWTON_PER_SQUARE_METER = 'KILONEWTON_PER_SQUARE_METER';
        public const KILOPASCAL = 'KILOPASCAL';
        public const KILOPOND_PER_SQUARE_CENTIMETER = 'KILOPOND_PER_SQUARE_CENTIMETER';
        public const KILOPOND_PER_SQUARE_METER = 'KILOPOND_PER_SQUARE_METER';
        public const KILOPOND_PER_SQUARE_MILLIMETER = 'KILOPOND_PER_SQUARE_MILLIMETER';
        public const KIP_PER_SQUARE_FOOT = 'KIP_PER_SQUARE_FOOT';
        public const KIP_PER_SQUARE_INCH = 'KIP_PER_SQUARE_INCH';
        public const MEGABAR = 'MEGABAR';
        public const MEGANEWTON_PER_SQUARE_METER = 'MEGANEWTON_PER_SQUARE_METER';
        public const MEGAPASCAL = 'MEGAPASCAL';
        public const METER_AIR_0C = 'METER_AIR_0C';
        public const METER_AIR_15C = 'METER_AIR_15C';
        public const METER_HEAD = 'METER_HEAD';
        public const MICROBAR = 'MICROBAR';
        public const MICROMETER_MERCURY_0C = 'MICROMETER_MERCURY_0C';
        public const MICROMETER_WATER_4C = 'MICROMETER_WATER_4C';
        public const MICRON_MERCURY_0C = 'MICRON_MERCURY_0C';
        public const MICROPASCAL = 'MICROPASCAL';
        public const MILLIBAR = 'MILLIBAR';
        public const MILLIHG = 'MILLIHG';
        public const MILLIMETER_MERCURY_0C = 'MILLIMETER_MERCURY_0C';
        public const MILLIMETER_WATER_4C = 'MILLIMETER_WATER_4C';
        public const MILLIPASCAL = 'MILLIPASCAL';
        public const MILLITORR = 'MILLITORR';
        public const NANOBAR = 'NANOBAR';
        public const NANOPASCAL = 'NANOPASCAL';
        public const NEWTON_PER_SQUARE_METER = 'NEWTON_PER_SQUARE_METER';
        public const NEWTON_PER_SQUARE_MILLIMETER = 'NEWTON_PER_SQUARE_MILLIMETER';
        public const OUNCE_PER_SQUARE_INCH = 'OUNCE_PER_SQUARE_INCH';
        public const PASCAL = 'PASCAL';
        public const PETABAR = 'PETABAR';
        public const PETAPASCAL = 'PETAPASCAL';
        public const PICOBAR = 'PICOBAR';
        public const PICOPASCAL = 'PICOPASCAL';
        public const PIEZE = 'PIEZE';
        public const POUND_PER_SQUARE_FOOT = 'POUND_PER_SQUARE_FOOT';
        public const POUND_PER_SQUARE_INCH = 'POUND_PER_SQUARE_INCH';
        public const POUNDAL_PER_SQUARE_FOOT = 'POUNDAL_PER_SQUARE_FOOT';
        public const STHENE_PER_SQUARE_METER = 'STHENE_PER_SQUARE_METER';
        public const TECHNICAL_ATMOSPHERE = 'TECHNICAL_ATMOSPHERE';
        public const TERABAR = 'TERABAR';
        public const TERAPASCAL = 'TERAPASCAL';
        public const TON_PER_SQUARE_FOOT = 'TON_PER_SQUARE_FOOT';
        public const TON_PER_SQUARE_FOOT_SHORT = 'TON_PER_SQUARE_FOOT_SHORT';
        public const TON_PER_SQUARE_INCH = 'TON_PER_SQUARE_INCH';
        public const TON_PER_SQUARE_INCH_SHORT = 'TON_PER_SQUARE_INCH_SHORT';
        public const TON_PER_SQUARE_METER = 'TON_PER_SQUARE_METER';
        public const TORR = 'TORR';
        public const WATER_COLUMN_CENTIMETER = 'WATER_COLUMN_CENTIMETER';
        public const WATER_COLUMN_INCH = 'WATER_COLUMN_INCH';
        public const WATER_COLUMN_MILLIMETER = 'WATER_COLUMN_MILLIMETER';
        public const YOCTOBAR = 'YOCTOBAR';
        public const YOCTOPASCAL = 'YOCTOPASCAL';
        public const YOTTABAR = 'YOTTABAR';
        public const YOTTAPASCAL = 'YOTTAPASCAL';
        public const ZEPTOBAR = 'ZEPTOBAR';
        public const ZEPTOPASCAL = 'ZEPTOPASCAL';
        public const ZETTABAR = 'ZETTABAR';
        public const ZETTAPASCAL = 'ZETTAPASCAL';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Speed extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'METER_PER_SECOND';
        public const BENZ = 'BENZ';
        public const CENTIMETER_PER_DAY = 'CENTIMETER_PER_DAY';
        public const CENTIMETER_PER_HOUR = 'CENTIMETER_PER_HOUR';
        public const CENTIMETER_PER_MINUTE = 'CENTIMETER_PER_MINUTE';
        public const CENTIMETER_PER_SECOND = 'CENTIMETER_PER_SECOND';
        public const DEKAMETER_PER_DAY = 'DEKAMETER_PER_DAY';
        public const DEKAMETER_PER_HOUR = 'DEKAMETER_PER_HOUR';
        public const DEKAMETER_PER_MINUTE = 'DEKAMETER_PER_MINUTE';
        public const DEKAMETER_PER_SECOND = 'DEKAMETER_PER_SECOND';
        public const FOOT_PER_DAY = 'FOOT_PER_DAY';
        public const FOOT_PER_HOUR = 'FOOT_PER_HOUR';
        public const FOOT_PER_MINUTE = 'FOOT_PER_MINUTE';
        public const FOOT_PER_SECOND = 'FOOT_PER_SECOND';
        public const FURLONG_PER_DAY = 'FURLONG_PER_DAY';
        public const FURLONG_PER_FORTNIGHT = 'FURLONG_PER_FORTNIGHT';
        public const FURLONG_PER_HOUR = 'FURLONG_PER_HOUR';
        public const FURLONG_PER_MINUTE = 'FURLONG_PER_MINUTE';
        public const FURLONG_PER_SECOND = 'FURLONG_PER_SECOND';
        public const HECTOMETER_PER_DAY = 'HECTOMETER_PER_DAY';
        public const HECTOMETER_PER_HOUR = 'HECTOMETER_PER_HOUR';
        public const HECTOMETER_PER_MINUTE = 'HECTOMETER_PER_MINUTE';
        public const HECTOMETER_PER_SECOND = 'HECTOMETER_PER_SECOND';
        public const INCH_PER_DAY = 'INCH_PER_DAY';
        public const INCH_PER_HOUR = 'INCH_PER_HOUR';
        public const INCH_PER_MINUTE = 'INCH_PER_MINUTE';
        public const INCH_PER_SECOND = 'INCH_PER_SECOND';
        public const KILOMETER_PER_DAY = 'KILOMETER_PER_DAY';
        public const KILOMETER_PER_HOUR = 'KILOMETER_PER_HOUR';
        public const KILOMETER_PER_MINUTE = 'KILOMETER_PER_MINUTE';
        public const KILOMETER_PER_SECOND = 'KILOMETER_PER_SECOND';
        public const KNOT = 'KNOT';
        public const LEAGUE_PER_DAY = 'LEAGUE_PER_DAY';
        public const LEAGUE_PER_HOUR = 'LEAGUE_PER_HOUR';
        public const LEAGUE_PER_MINUTE = 'LEAGUE_PER_MINUTE';
        public const LEAGUE_PER_SECOND = 'LEAGUE_PER_SECOND';
        public const MACH = 'MACH';
        public const MEGAMETER_PER_DAY = 'MEGAMETER_PER_DAY';
        public const MEGAMETER_PER_HOUR = 'MEGAMETER_PER_HOUR';
        public const MEGAMETER_PER_MINUTE = 'MEGAMETER_PER_MINUTE';
        public const MEGAMETER_PER_SECOND = 'MEGAMETER_PER_SECOND';
        public const METER_PER_DAY = 'METER_PER_DAY';
        public const METER_PER_HOUR = 'METER_PER_HOUR';
        public const METER_PER_MINUTE = 'METER_PER_MINUTE';
        public const METER_PER_SECOND = 'METER_PER_SECOND';
        public const MILE_PER_DAY = 'MILE_PER_DAY';
        public const MILE_PER_HOUR = 'MILE_PER_HOUR';
        public const MILE_PER_MINUTE = 'MILE_PER_MINUTE';
        public const MILE_PER_SECOND = 'MILE_PER_SECOND';
        public const MILLIMETER_PER_DAY = 'MILLIMETER_PER_DAY';
        public const MILLIMETER_PER_HOUR = 'MILLIMETER_PER_HOUR';
        public const MILLIMETER_PER_MINUTE = 'MILLIMETER_PER_MINUTE';
        public const MILLIMETER_PER_SECOND = 'MILLIMETER_PER_SECOND';
        public const MILLIMETER_PER_MICROSECOND = 'MILLIMETER_PER_MICROSECOND';
        public const MILLIMETER_PER_100_MICROSECOND = 'MILLIMETER_PER_100_MICROSECOND';
        public const NAUTIC_MILE_PER_DAY = 'NAUTIC_MILE_PER_DAY';
        public const NAUTIC_MILE_PER_HOUR = 'NAUTIC_MILE_PER_HOUR';
        public const NAUTIC_MILE_PER_MINUTE = 'NAUTIC_MILE_PER_MINUTE';
        public const NAUTIC_MILE_PER_SECOND = 'NAUTIC_MILE_PER_SECOND';
        public const LIGHTSPEED_AIR = 'LIGHTSPEED_AIR';
        public const LIGHTSPEED_GLASS = 'LIGHTSPEED_GLASS';
        public const LIGHTSPEED_ICE = 'LIGHTSPEED_ICE';
        public const LIGHTSPEED_VACUUM = 'LIGHTSPEED_VACUUM';
        public const LIGHTSPEED_WATER = 'LIGHTSPEED_WATER';
        public const SOUNDSPEED_AIR = 'SOUNDSPEED_AIT';
        public const SOUNDSPEED_METAL = 'SOUNDSPEED_METAL';
        public const SOUNDSPEED_WATER = 'SOUNDSPEED_WATER';
        public const YARD_PER_DAY = 'YARD_PER_DAY';
        public const YARD_PER_HOUR = 'YARD_PER_HOUR';
        public const YARD_PER_MINUTE = 'YARD_PER_MINUTE';
        public const YARD_PER_SECOND = 'YARD_PER_SECOND';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Temperature extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'KELVIN';
        public const CELSIUS = 'CELSIUS';
        public const FAHRENHEIT = 'FAHRENHEIT';
        public const RANKINE = 'RANKINE';
        public const REAUMUR = 'REAUMUR';
        public const KELVIN = 'KELVIN';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Time extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'SECOND';
        public const ANOMALISTIC_YEAR = 'ANOMALISTIC_YEAR';
        public const ATTOSECOND = 'ATTOSECOND';
        public const CENTURY = 'CENTURY';
        public const DAY = 'DAY';
        public const DECADE = 'DECADE';
        public const DRACONIC_YEAR = 'DRACONTIC_YEAR';
        public const EXASECOND = 'EXASECOND';
        public const FEMTOSECOND = 'FEMTOSECOND';
        public const FORTNIGHT = 'FORTNIGHT';
        public const GAUSSIAN_YEAR = 'GAUSSIAN_YEAR';
        public const GIGASECOND = 'GIGASECOND';
        public const GREGORIAN_YEAR = 'GREGORIAN_YEAR';
        public const HOUR = 'HOUR';
        public const JULIAN_YEAR = 'JULIAN_YEAR';
        public const KILOSECOND = 'KILOSECOND';
        public const LEAPYEAR = 'LEAPYEAR';
        public const MEGASECOND = 'MEGASECOND';
        public const MICROSECOND = 'MICROSECOND';
        public const MILLENIUM = 'MILLENIUM';
        public const MILLISECOND = 'MILLISECOND';
        public const MINUTE = 'MINUTE';
        public const MONTH = 'MONTH';
        public const NANOSECOND = 'NANOSECOND';
        public const PETASECOND = 'PETASECOND';
        public const PICOSECOND = 'PICOSECOND';
        public const QUARTER = 'QUARTER';
        public const SECOND = 'SECOND';
        public const SHAKE = 'SHAKE';
        public const SIDEREAL_YEAR = 'SYNODIC_MONTH';
        public const TERASECOND = 'TERASECOND';
        public const TROPICAL_YEAR = 'TROPIC_YEAR';
        public const WEEK = 'WEEK';
        public const YEAR = 'YEAR';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Torque extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'NEWTON_METER';
        public const DYNE_CENTIMETER = 'DYNE_CENTIMETER';
        public const GRAM_CENTIMETER = 'GRAM_CENTIMETER';
        public const KILOGRAM_CENTIMETER = 'KILOGRAM_CENTIMETER';
        public const KILOGRAM_METER = 'KILOGRAM_METER';
        public const KILONEWTON_METER = 'KILONEWTON_METER';
        public const KILOPOND_METER = 'KILOPOND_METER';
        public const MEGANEWTON_METER = 'MEGANEWTON_METER';
        public const MICRONEWTON_METER = 'MICRONEWTON_METER';
        public const MILLINEWTON_METER = 'MILLINEWTON_METER';
        public const NEWTON_CENTIMETER = 'NEWTON_CENTIMETER';
        public const NEWTON_METER = 'NEWTON_METER';
        public const OUNCE_FOOT = 'OUNCE_FOOT';
        public const OUNCE_INCH = 'OUNCE_INCH';
        public const POUND_FOOT = 'POUND_FOOT';
        public const POUNDAL_FOOT = 'POUNDAL_FOOT';
        public const POUND_INCH = 'POUND_INCH';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Viscosity_Dynamic extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'KILOGRAM_PER_METER_SECOND';
        public const CENTIPOISE = 'CENTIPOISE';
        public const DECIPOISE = 'DECIPOISE';
        public const DYNE_SECOND_PER_SQUARE_CENTIMETER = 'DYNE_SECOND_PER_SQUARE_CENTIMETER';
        public const GRAM_FORCE_SECOND_PER_SQUARE_CENTIMETER = 'GRAM_FORCE_SECOND_PER_SQUARE_CENTIMETER';
        public const GRAM_PER_CENTIMETER_SECOND = 'GRAM_PER_CENTIMETER_SECOND';
        public const KILOGRAM_FORCE_SECOND_PER_SQUARE_METER = 'KILOGRAM_FORCE_SECOND_PER_SQUARE_METER';
        public const KILOGRAM_PER_METER_HOUR = 'KILOGRAM_PER_METER_HOUR';
        public const KILOGRAM_PER_METER_SECOND = 'KILOGRAM_PER_METER_SECOND';
        public const MILLIPASCAL_SECOND = 'MILLIPASCAL_SECOND';
        public const MILLIPOISE = 'MILLIPOISE';
        public const NEWTON_SECOND_PER_SQUARE_METER = 'NEWTON_SECOND_PER_SQUARE_METER';
        public const PASCAL_SECOND = 'PASCAL_SECOND';
        public const POISE = 'POISE';
        public const POISEUILLE = 'POISEUILLE';
        public const POUND_FORCE_SECOND_PER_SQUARE_FEET = 'POUND_FORCE_SECOND_PER_SQUARE_FEET';
        public const POUND_FORCE_SECOND_PER_SQUARE_INCH = 'POUND_FORCE_SECOND_PER_SQUARE_INCH';
        public const POUND_PER_FOOT_HOUR = 'POUND_PER_FOOT_HOUR';
        public const POUND_PER_FOOT_SECOND = 'POUND_PER_FOOT_SECOND';
        public const POUNDAL_HOUR_PER_SQUARE_FOOT = 'POUNDAL_HOUR_PER_SQUARE_FOOT';
        public const POUNDAL_SECOND_PER_SQUARE_FOOT = 'POUNDAL_SECOND_PER_SQUARE_FOOT';
        public const REYN = 'REYN';
        public const SLUG_PER_FOOT_SECOND = 'SLUG_PER_FOOT_SECOND';
        public const LBFS_PER_SQUARE_FOOT = 'LBFS_PER_SQUARE_FOOT';
        public const NS_PER_SQUARE_METER = 'NS_PER_SQUARE_METER';
        public const WATER_20C = 'WATER_20C';
        public const WATER_40C = 'WATER_40C';
        public const HEAVY_OIL_20C = 'HEAVY_OIL_20C';
        public const HEAVY_OIL_40C = 'HEAVY_OIL_40C';
        public const GLYCERIN_20C = 'GLYCERIN_20C';
        public const GLYCERIN_40C = 'GLYCERIN_40C';
        public const SAE_5W_MINUS18C = 'SAE_5W_MINUS18C';
        public const SAE_10W_MINUS18C = 'SAE_10W_MINUS18C';
        public const SAE_20W_MINUS18C = 'SAE_20W_MINUS18C';
        public const SAE_5W_99C = 'SAE_5W_99C';
        public const SAE_10W_99C = 'SAE_10W_99C';
        public const SAE_20W_99C = 'SAE_20W_99C';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Viscosity_Kinematic extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'SQUARE_METER_PER_SECOND';
        public const CENTISTOKES = 'CENTISTOKES';
        public const LENTOR = 'LENTOR';
        public const LITER_PER_CENTIMETER_DAY = 'LITER_PER_CENTIMETER_DAY';
        public const LITER_PER_CENTIMETER_HOUR = 'LITER_PER_CENTIMETER_HOUR';
        public const LITER_PER_CENTIMETER_MINUTE = 'LITER_PER_CENTIMETER_MINUTE';
        public const LITER_PER_CENTIMETER_SECOND = 'LITER_PER_CENTIMETER_SECOND';
        public const POISE_CUBIC_CENTIMETER_PER_GRAM = 'POISE_CUBIC_CENTIMETER_PER_GRAM';
        public const SQUARE_CENTIMETER_PER_DAY = 'SQUARE_CENTIMETER_PER_DAY';
        public const SQUARE_CENTIMETER_PER_HOUR = 'SQUARE_CENTIMETER_PER_HOUR';
        public const SQUARE_CENTIMETER_PER_MINUTE = 'SQUARE_CENTIMETER_PER_MINUTE';
        public const SQUARE_CENTIMETER_PER_SECOND = 'SQUARE_CENTIMETER_PER_SECOND';
        public const SQUARE_FOOT_PER_DAY = 'SQUARE_FOOT_PER_DAY';
        public const SQUARE_FOOT_PER_HOUR = 'SQUARE_FOOT_PER_HOUR';
        public const SQUARE_FOOT_PER_MINUTE = 'SQUARE_FOOT_PER_MINUTE';
        public const SQUARE_FOOT_PER_SECOND = 'SQUARE_FOOT_PER_SECOND';
        public const SQUARE_INCH_PER_DAY = 'SQUARE_INCH_PER_DAY';
        public const SQUARE_INCH_PER_HOUR = 'SQUARE_INCH_PER_HOUR';
        public const SQUARE_INCH_PER_MINUTE = 'SQUARE_INCH_PER_MINUTE';
        public const SQUARE_INCH_PER_SECOND = 'SQUARE_INCH_PER_SECOND';
        public const SQUARE_METER_PER_DAY = 'SQUARE_METER_PER_DAY';
        public const SQUARE_METER_PER_HOUR = 'SQUARE_METER_PER_HOUR';
        public const SQUARE_METER_PER_MINUTE = 'SQUARE_METER_PER_MINUTE';
        public const SQUARE_METER_PER_SECOND = 'SQUARE_METER_PER_SECOND';
        public const SQUARE_MILLIMETER_PER_DAY = 'SQUARE_MILLIMETER_PER_DAY';
        public const SQUARE_MILLIMETER_PER_HOUR = 'SQUARE_MILLIMETER_PER_HOUR';
        public const SQUARE_MILLIMETER_PER_MINUTE = 'SQUARE_MILLIMETER_PER_MINUTE';
        public const SQUARE_MILLIMETER_PER_SECOND = 'SQUARE_MILLIMETER_PER_SECOND';
        public const STOKES = 'STOKES';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Volume extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'CUBIC_METER';
        public const ACRE_FOOT = 'ACRE_FOOT';
        public const ACRE_FOOT_SURVEY = 'ACRE_FOOT_SURVEY';
        public const ACRE_INCH = 'ACRE_INCH';
        public const BARREL_WINE = 'BARREL_WINE';
        public const BARREL = 'BARREL';
        public const BARREL_US_DRY = 'BARREL_US_DRY';
        public const BARREL_US_FEDERAL = 'BARREL_US_FEDERAL';
        public const BARREL_US = 'BARREL_US';
        public const BARREL_US_PETROLEUM = 'BARREL_US_PETROLEUM';
        public const BOARD_FOOT = 'BOARD_FOOT';
        public const BUCKET = 'BUCKET';
        public const BUCKET_US = 'BUCKET_US';
        public const BUSHEL = 'BUSHEL';
        public const BUSHEL_US = 'BUSHEL_US';
        public const CENTILTER = 'CENTILITER';
        public const CORD = 'CORD';
        public const CORD_FOOT = 'CORD_FOOT';
        public const CUBIC_CENTIMETER = 'CUBIC_CENTIMETER';
        public const CUBIC_CUBIT = 'CUBIC_CUBIT';
        public const CUBIC_DECIMETER = 'CUBIC_DECIMETER';
        public const CUBIC_DEKAMETER = 'CUBIC_DEKAMETER';
        public const CUBIC_FOOT = 'CUBIC_FOOT';
        public const CUBIC_INCH = 'CUBIC_INCH';
        public const CUBIC_KILOMETER = 'CUBIC_KILOMETER';
        public const CUBIC_METER = 'CUBIC_METER';
        public const CUBIC_MILE = 'CUBIC_MILE';
        public const CUBIC_MICROMETER = 'CUBIC_MICROMETER';
        public const CUBIC_MILLIMETER = 'CUBIC_MILLIMETER';
        public const CUBIC_YARD = 'CUBIC_YARD';
        public const CUP_CANADA = 'CUP_CANADA';
        public const CUP = 'CUP';
        public const CUP_US = 'CUP_US';
        public const DECILITER = 'DECILITER';
        public const DEKALITER = 'DEKALITER';
        public const DRAM = 'DRAM';
        public const DRUM_US = 'DRUM_US';
        public const DRUM = 'DRUM';
        public const FIFTH = 'FIFTH';
        public const GALLON = 'GALLON';
        public const GALLON_US_DRY = 'GALLON_US_DRY';
        public const GALLON_US = 'GALLON_US';
        public const GILL = 'GILL';
        public const GILL_US = 'GILL_US';
        public const HECTARE_METER = 'HECTARE_METER';
        public const HECTOLITER = 'HECTOLITER';
        public const HOGSHEAD = 'HOGSHEAD';
        public const HOGSHEAD_US = 'HOGSHEAD_US';
        public const JIGGER = 'JIGGER';
        public const KILOLITER = 'KILOLITER';
        public const LITER = 'LITER';
        public const MEASURE = 'MEASURE';
        public const MEGALITER = 'MEGALITER';
        public const MICROLITER = 'MICROLITER';
        public const MILLILITER = 'MILLILITER';
        public const MINIM = 'MINIM';
        public const MINIM_US = 'MINIM_US';
        public const OUNCE = 'OUNCE';
        public const OUNCE_US = 'OUNCE_US';
        public const PECK = 'PECK';
        public const PECK_US = 'PECK_US';
        public const PINT = 'PINT';
        public const PINT_US_DRY = 'PINT_US_DRY';
        public const PINT_US = 'PINT_US';
        public const PIPE = 'PIPE';
        public const PIPE_US = 'PIPE_US';
        public const PONY = 'PONY';
        public const QUART_GERMANY = 'QUART_GERMANY';
        public const QUART_ANCIENT = 'QUART_ANCIENT';
        public const QUART = 'QUART';
        public const QUART_US_DRY = 'QUART_US_DRY';
        public const QUART_US = 'QUART_US';
        public const QUART_UK = 'QUART_UK';
        public const SHOT = 'SHOT';
        public const STERE = 'STERE';
        public const TABLESPOON = 'TABLESPOON';
        public const TABLESPOON_UK = 'TABLESPOON_UK';
        public const TABLESPOON_US = 'TABLESPOON_US';
        public const TEASPOON = 'TEASPOON';
        public const TEASPOON_UK = 'TEASPOON_UK';
        public const TEASPOON_US = 'TEASPOON_US';
        public const YARD = 'YARD';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Measure_Weight extends \Zend_Measure_Abstract
    {
        public const STANDARD = 'KILOGRAM';
        public const ARRATEL = 'ARRATEL';
        public const ARTEL = 'ARTEL';
        public const ARROBA_PORTUGUESE = 'ARROBA_PORTUGUESE';
        public const ARROBA = 'ARROBA';
        public const AS_ = 'AS_';
        public const ASS = 'ASS';
        public const ATOMIC_MASS_UNIT_1960 = 'ATOMIC_MASS_UNIT_1960';
        public const ATOMIC_MASS_UNIT_1973 = 'ATOMIC_MASS_UNIT_1973';
        public const ATOMIC_MASS_UNIT_1986 = 'ATOMIC_MASS_UNIT_1986';
        public const ATOMIC_MASS_UNIT = 'ATOMIC_MASS_UNIT';
        public const AVOGRAM = 'AVOGRAM';
        public const BAG = 'BAG';
        public const BAHT = 'BAHT';
        public const BALE = 'BALE';
        public const BALE_US = 'BALE_US';
        public const BISMAR_POUND = 'BISMAR_POUND';
        public const CANDY = 'CANDY';
        public const CARAT_INTERNATIONAL = 'CARAT_INTERNATIONAL';
        public const CARAT = 'CARAT';
        public const CARAT_UK = 'CARAT_UK';
        public const CARAT_US_1913 = 'CARAT_US_1913';
        public const CARGA = 'CARGA';
        public const CATTI = 'CATTI';
        public const CATTI_JAPANESE = 'CATTI_JAPANESE';
        public const CATTY = 'CATTY';
        public const CATTY_JAPANESE = 'CATTY_JAPANESE';
        public const CATTY_THAI = 'CATTY_THAI';
        public const CENTAL = 'CENTAL';
        public const CENTIGRAM = 'CENTIGRAM';
        public const CENTNER = 'CENTNER';
        public const CENTNER_RUSSIAN = 'CENTNER_RUSSIAN';
        public const CHALDER = 'CHALDER';
        public const CHALDRON = 'CHALDRON';
        public const CHIN = 'CHIN';
        public const CHIN_JAPANESE = 'CHIN_JAPANESE';
        public const CLOVE = 'CLOVE';
        public const CRITH = 'CRITH';
        public const DALTON = 'DALTON';
        public const DAN = 'DAN';
        public const DAN_JAPANESE = 'DAN_JAPANESE';
        public const DECIGRAM = 'DECIGRAM';
        public const DECITONNE = 'DECITONNE';
        public const DEKAGRAM = 'DEKAGRAM';
        public const DEKATONNE = 'DEKATONNE';
        public const DENARO = 'DENARO';
        public const DENIER = 'DENIER';
        public const DRACHME = 'DRACHME';
        public const DRAM = 'DRAM';
        public const DRAM_APOTHECARIES = 'DRAM_APOTHECARIES';
        public const DYNE = 'DYNE';
        public const ELECTRON = 'ELECTRON';
        public const ELECTRONVOLT = 'ELECTRONVOLT';
        public const ETTO = 'ETTO';
        public const EXAGRAM = 'EXAGRAM';
        public const FEMTOGRAM = 'FEMTOGRAM';
        public const FIRKIN = 'FIRKIN';
        public const FLASK = 'FLASK';
        public const FOTHER = 'FOTHER';
        public const FOTMAL = 'FOTMAL';
        public const FUNT = 'FUNT';
        public const FUNTE = 'FUNTE';
        public const GAMMA = 'GAMMA';
        public const GIGAELECTRONVOLT = 'GIGAELECTRONVOLT';
        public const GIGAGRAM = 'GIGAGRAM';
        public const GIGATONNE = 'GIGATONNE';
        public const GIN = 'GIN';
        public const GIN_JAPANESE = 'GIN_JAPANESE';
        public const GRAIN = 'GRAIN';
        public const GRAM = 'GRAM';
        public const GRAN = 'GRAN';
        public const GRANO = 'GRANO';
        public const GRANI = 'GRANI';
        public const GROS = 'GROS';
        public const HECTOGRAM = 'HECTOGRAM';
        public const HUNDRETWEIGHT = 'HUNDRETWEIGHT';
        public const HUNDRETWEIGHT_US = 'HUNDRETWEIGHT_US';
        public const HYL = 'HYL';
        public const JIN = 'JIN';
        public const JUPITER = 'JUPITER';
        public const KATI = 'KATI';
        public const KATI_JAPANESE = 'KATI_JAPANESE';
        public const KEEL = 'KEEL';
        public const KEG = 'KEG';
        public const KILODALTON = 'KILODALTON';
        public const KILOGRAM = 'KILOGRAM';
        public const KILOGRAM_FORCE = 'KILOGRAM_FORCE';
        public const KILOTON = 'KILOTON';
        public const KILOTON_US = 'KILOTON_US';
        public const KILOTONNE = 'KILOTONNE';
        public const KIN = 'KIN';
        public const KIP = 'KIP';
        public const KOYAN = 'KOYAN';
        public const KWAN = 'KWAN';
        public const LAST_GERMANY = 'LAST_GERMANY';
        public const LAST = 'LAST';
        public const LAST_WOOL = 'LAST_WOOL';
        public const LB = 'LB';
        public const LBS = 'LBS';
        public const LIANG = 'LIANG';
        public const LIBRA_ITALIAN = 'LIBRE_ITALIAN';
        public const LIBRA_SPANISH = 'LIBRA_SPANISH';
        public const LIBRA_PORTUGUESE = 'LIBRA_PORTUGUESE';
        public const LIBRA_ANCIENT = 'LIBRA_ANCIENT';
        public const LIBRA = 'LIBRA';
        public const LIVRE = 'LIVRE';
        public const LONG_TON = 'LONG_TON';
        public const LOT = 'LOT';
        public const MACE = 'MACE';
        public const MAHND = 'MAHND';
        public const MARC = 'MARC';
        public const MARCO = 'MARCO';
        public const MARK = 'MARK';
        public const MARK_GERMAN = 'MARK_GERMANY';
        public const MAUND = 'MAUND';
        public const MAUND_PAKISTAN = 'MAUND_PAKISTAN';
        public const MEGADALTON = 'MEGADALTON';
        public const MEGAGRAM = 'MEGAGRAM';
        public const MEGATONNE = 'MEGATONNE';
        public const MERCANTILE_POUND = 'MERCANTILE_POUND';
        public const METRIC_TON = 'METRIC_TON';
        public const MIC = 'MIC';
        public const MICROGRAM = 'MICROGRAM';
        public const MILLIDALTON = 'MILLIDALTON';
        public const MILLIER = 'MILLIER';
        public const MILLIGRAM = 'MILLIGRAM';
        public const MILLIMASS_UNIT = 'MILLIMASS_UNIT';
        public const MINA = 'MINA';
        public const MOMME = 'MOMME';
        public const MYRIAGRAM = 'MYRIAGRAM';
        public const NANOGRAM = 'NANOGRAM';
        public const NEWTON = 'NEWTON';
        public const OBOL = 'OBOL';
        public const OBOLOS = 'OBOLOS';
        public const OBOLUS = 'OBOLUS';
        public const OBOLOS_ANCIENT = 'OBOLOS_ANCIENT';
        public const OBOLUS_ANCIENT = 'OBOLUS_ANCIENT';
        public const OKA = 'OKA';
        public const ONCA = 'ONCA';
        public const ONCE = 'ONCE';
        public const ONCIA = 'ONCIA';
        public const ONZA = 'ONZA';
        public const ONS = 'ONS';
        public const OUNCE = 'OUNCE';
        public const OUNCE_FORCE = 'OUNCE_FORCE';
        public const OUNCE_TROY = 'OUNCE_TROY';
        public const PACKEN = 'PACKEN';
        public const PENNYWEIGHT = 'PENNYWEIGHT';
        public const PETAGRAM = 'PETAGRAM';
        public const PFUND = 'PFUND';
        public const PICOGRAM = 'PICOGRAM';
        public const POINT = 'POINT';
        public const POND = 'POND';
        public const POUND = 'POUND';
        public const POUND_FORCE = 'POUND_FORCE';
        public const POUND_METRIC = 'POUND_METRIC';
        public const POUND_TROY = 'POUND_TROY';
        public const PUD = 'PUD';
        public const POOD = 'POOD';
        public const PUND = 'PUND';
        public const QIAN = 'QIAN';
        public const QINTAR = 'QINTAR';
        public const QUARTER = 'QUARTER';
        public const QUARTER_US = 'QUARTER_US';
        public const QUARTER_TON = 'QUARTER_TON';
        public const QUARTERN = 'QUARTERN';
        public const QUARTERN_LOAF = 'QUARTERN_LOAF';
        public const QUINTAL_FRENCH = 'QUINTAL_FRENCH';
        public const QUINTAL = 'QUINTAL';
        public const QUINTAL_PORTUGUESE = 'QUINTAL_PORTUGUESE';
        public const QUINTAL_SPAIN = 'QUINTAL_SPAIN';
        public const REBAH = 'REBAH';
        public const ROTL = 'ROTL';
        public const ROTEL = 'ROTEL';
        public const ROTTLE = 'ROTTLE';
        public const RATEL = 'RATEL';
        public const SACK = 'SACK';
        public const SCRUPLE = 'SCRUPLE';
        public const SEER = 'SEER';
        public const SEER_PAKISTAN = 'SEER_PAKISTAN';
        public const SHEKEL = 'SHEKEL';
        public const SHORT_TON = 'SHORT_TON';
        public const SLINCH = 'SLINCH';
        public const SLUG = 'SLUG';
        public const STONE = 'STONE';
        public const TAEL = 'TAEL';
        public const TAHIL_JAPANESE = 'TAHIL_JAPANESE';
        public const TAHIL = 'TAHIL';
        public const TALENT = 'TALENT';
        public const TAN = 'TAN';
        public const TECHNISCHE_MASS_EINHEIT = 'TECHNISCHE_MASS_EINHEIT';
        public const TERAGRAM = 'TERAGRAM';
        public const TETRADRACHM = 'TETRADRACHM';
        public const TICAL = 'TICAL';
        public const TOD = 'TOD';
        public const TOLA = 'TOLA';
        public const TOLA_PAKISTAN = 'TOLA_PAKISTAN';
        public const TON_UK = 'TON_UK';
        public const TON = 'TON';
        public const TON_US = 'TON_US';
        public const TONELADA_PORTUGUESE = 'TONELADA_PORTUGUESE';
        public const TONELADA = 'TONELADA';
        public const TONNE = 'TONNE';
        public const TONNEAU = 'TONNEAU';
        public const TOVAR = 'TOVAR';
        public const TROY_OUNCE = 'TROY_OUNCE';
        public const TROY_POUND = 'TROY_POUND';
        public const TRUSS = 'TRUSS';
        public const UNCIA = 'UNCIA';
        public const UNZE = 'UNZE';
        public const VAGON = 'VAGON';
        public const YOCTOGRAM = 'YOCTOGRAM';
        public const YOTTAGRAM = 'YOTTAGRAM';
        public const ZENTNER = 'ZENTNER';
        public const ZEPTOGRAM = 'ZEPTOGRAM';
        public const ZETTAGRAM = 'ZETTAGRAM';
        /**
         * @var array<array-key, mixed>
         */
        public $_units;
    }
    class Zend_Memory
    {
        /**
         * @param string $backend
         * @param array<array-key, mixed> $backendOptions
         *
         * @return Zend_Memory_Manager
         *
         * @throws Zend_Memory_Exception
         */
        public static function factory($backend, $backendOptions = array())
        {
        }
    }
    class Zend_Memory_AccessController implements \Zend_Memory_Container_Interface
    {
        /**
         * @var Zend_Memory_Container
         */
        public $_memContainer;
        public function __construct(\Zend_Memory_Container_Movable $memContainer)
        {
        }
        public function __destruct()
        {
        }
        public function getRef()
        {
        }
        public function touch()
        {
        }
        public function lock()
        {
        }
        public function unlock()
        {
        }
        /**
         * @return bool
         */
        public function isLocked()
        {
        }
        /**
         * @param string $property
         *
         * @return string
         *
         * @throws Zend_Memory_Exception
         */
        public function __get($property)
        {
        }
        /**
         * @param string $property
         * @param string $value
         *
         * @throws Zend_Exception
         */
        public function __set($property, $value)
        {
        }
    }
    class Zend_Memory_Container implements \Zend_Memory_Container_Interface
    {
    }
    interface Zend_Memory_Container_Interface
    {
        public function getRef();
        public function touch();
        public function lock();
        public function unlock();
        /**
         * @return bool
         */
        public function isLocked();
    }
    class Zend_Memory_Container_Locked extends \Zend_Memory_Container
    {
        /**
         * @var string
         */
        public $value;
        /**
         * @param string $value
         */
        public function __construct($value)
        {
        }
        public function lock()
        {
        }
        public function unlock()
        {
        }
        /**
         * @return bool
         */
        public function isLocked()
        {
        }
        public function getRef()
        {
        }
        public function touch()
        {
        }
        public function destroy()
        {
        }
    }
    class Zend_Memory_Container_Movable extends \Zend_Memory_Container
    {
        public const LOADED = 1;
        public const SWAPPED = 2;
        public const LOCKED = 4;
        /**
         * @var int
         */
        public $_id;
        /**
         * @var Zend_Memory_Manager
         */
        public $_memManager;
        /**
         * @var Zend_Memory_Value
         */
        public $_value;
        /**
         * @var int
         */
        public $_state;
        /**
         * @param Zend_Memory_Manager $memoryManager
         * @param int $id
         * @param string $value
         */
        public function __construct(\Zend_Memory_Manager $memoryManager, $id, $value)
        {
        }
        public function lock()
        {
        }
        public function unlock()
        {
        }
        /**
         * @return bool
         */
        public function isLocked()
        {
        }
        /**
         * @param string $property
         *
         * @return string
         *
         * @throws Zend_Memory_Exception
         */
        public function __get($property)
        {
        }
        /**
         * @param string $property
         * @param string $value
         *
         * @throws Zend_Exception
         */
        public function __set($property, $value)
        {
        }
        public function getRef()
        {
        }
        public function touch()
        {
        }
        public function processUpdate()
        {
        }
        public function startTrace()
        {
        }
        public function setValue($value)
        {
        }
        public function unloadValue()
        {
        }
        public function markAsSwapped()
        {
        }
        /**
         * @return bool
         */
        public function isSwapped()
        {
        }
        /**
         * @return int
         */
        public function getId()
        {
        }
        public function destroy()
        {
        }
    }
    class Zend_Memory_Exception extends \Zend_Exception
    {
    }
    class Zend_Memory_Manager
    {
        /**
         * @var Zend_Cache_Backend_Interface
         */
        public $_backend;
        /**
         * @var int
         */
        public $_memoryLimit;
        /**
         * @var int
         */
        public $_minSize;
        /**
         * @var int
         */
        public $_memorySize;
        /**
         * @var int
         */
        public $_nextId;
        /**
         * @var array<array-key, mixed>
         */
        public $_unloadCandidates;
        /**
         * @var array<array-key, mixed>
         */
        public $_sizes;
        /**
         * @var Zend_Memory_Container_Movable
         */
        public $_lastModified;
        /**
         * @var int
         */
        public $_managerId;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        public function _generateMemManagerId()
        {
        }
        /**
         * @param Zend_Cache_Backend|null $backend
         */
        public function __construct($backend = null)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param int $newLimit
         *
         * @throws Zend_Exception
         */
        public function setMemoryLimit($newLimit)
        {
        }
        /**
         * @return int
         */
        public function getMemoryLimit()
        {
        }
        /**
         * @param int $newSize
         */
        public function setMinSize($newSize)
        {
        }
        /**
         * @return int
         */
        public function getMinSize()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Memory_Container_Interface
         *
         * @throws Zend_Memory_Exception
         */
        public function create($value = '')
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Memory_Container_Interface
         *
         * @throws Zend_Memory_Exception
         */
        public function createLocked($value = '')
        {
        }
        /**
         * @param string $value
         * @param bool $locked
         *
         * @return Zend_Memory_Container_Interface
         *
         * @throws Zend_Memory_Exception
         */
        public function _create($value, $locked)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Memory_Container
         */
        public function unlink(\Zend_Memory_Container_Movable $container, $id)
        {
        }
        /**
         * @param Zend_Memory_Container_Movable $container
         * @param int $id
         */
        public function processUpdate(\Zend_Memory_Container_Movable $container, $id)
        {
        }
        public function _commit()
        {
        }
        /**
         * @throws Zend_MemoryException
         */
        public function _swapCheck()
        {
        }
        /**
         * @param Zend_Memory_Container_Movable $container
         * @param int $id
         */
        public function _swap(\Zend_Memory_Container_Movable $container, $id)
        {
        }
        /**
         * @param Zend_Memory_Container_Movable $container
         * @param int $id
         */
        public function load(\Zend_Memory_Container_Movable $container, $id)
        {
        }
    }
    class Zend_Memory_Value implements \ArrayAccess
    {
        /**
         * @var string
         */
        public $_value;
        /**
         * @var Zend_Memory_Container_Interface
         */
        public $_container;
        /**
         * @var bool
         */
        public $_trace;
        /**
         * @param string $value
         * @param Zend_Memory_Container_Movable $container
         */
        public function __construct($value, \Zend_Memory_Container_Movable $container)
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return string
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $char
         */
        public function offsetSet($offset, $char)
        {
        }
        /**
         * @param int $offset
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function getRef()
        {
        }
        public function startTrace()
        {
        }
    }
    class Zend_Mime
    {
        public const TYPE_OCTETSTREAM = 'application/octet-stream';
        public const TYPE_TEXT = 'text/plain';
        public const TYPE_HTML = 'text/html';
        public const ENCODING_7BIT = '7bit';
        public const ENCODING_8BIT = '8bit';
        public const ENCODING_QUOTEDPRINTABLE = 'quoted-printable';
        public const ENCODING_BASE64 = 'base64';
        public const DISPOSITION_ATTACHMENT = 'attachment';
        public const DISPOSITION_INLINE = 'inline';
        public const LINELENGTH = 72;
        public const LINEEND = '
';
        public const MULTIPART_ALTERNATIVE = 'multipart/alternative';
        public const MULTIPART_MIXED = 'multipart/mixed';
        public const MULTIPART_RELATED = 'multipart/related';
        /**
         * @var null|string
         */
        public $_boundary;
        /**
         * @var int
         */
        public static $makeUnique;
        /**
         * @var array<array-key, mixed>
         */
        public static $qpKeys;
        /**
         * @var array<array-key, mixed>
         */
        public static $qpReplaceValues;
        /**
         * @var string
         */
        public static $qpKeysString;
        /**
         * @param string $str
         *
         * @return bool
         */
        public static function isPrintable($str)
        {
        }
        /**
         * @param string $str
         * @param int $lineLength
         * @param string $lineEnd
         *
         * @return string
         */
        public static function encodeQuotedPrintable($str, $lineLength, $lineEnd)
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public static function _encodeQuotedPrintable($str)
        {
        }
        /**
         * @param string $str
         * @param string $charset
         * @param int $lineLength
         * @param string $lineEnd
         *
         * @return string
         */
        public static function encodeQuotedPrintableHeader($str, $charset, $lineLength, $lineEnd)
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public static function getNextQuotedPrintableToken($str)
        {
        }
        /**
         * @param string $str
         * @param string $charset
         * @param int $lineLength
         * @param string $lineEnd
         *
         * @return string
         */
        public static function encodeBase64Header($str, $charset, $lineLength, $lineEnd)
        {
        }
        /**
         * @param string $str
         * @param int $lineLength
         * @param string $lineEnd
         *
         * @return string
         */
        public static function encodeBase64($str, $lineLength, $lineEnd)
        {
        }
        /**
         * @param null|string $boundary
         */
        public function __construct($boundary = null)
        {
        }
        /**
         * @param string $str
         * @param string $encoding
         * @param string $EOL
         *
         * @return string
         */
        public static function encode($str, $encoding, $EOL)
        {
        }
        /**
         * @return string
         */
        public function boundary()
        {
        }
        /**
         * @param string $EOL
         *
         * @return string
         */
        public function boundaryLine($EOL)
        {
        }
        /**
         * @param string $EOL
         *
         * @return string
         */
        public function mimeEnd($EOL)
        {
        }
    }
    class Zend_Mime_Decode
    {
        /**
         * @param string $body
         * @param string $boundary
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Exception
         */
        public static function splitMime($body, $boundary)
        {
        }
        /**
         * @param string $message
         * @param string $boundary
         * @param string $EOL
         *
         * @return array<array-key, mixed>|null
         *
         * @throws Zend_Exception
         */
        public static function splitMessageStruct($message, $boundary, $EOL)
        {
        }
        /**
         * @param string $message
         * @param array<array-key, mixed> $headers
         * @param string $body
         * @param string $EOL
         *
         * @return null
         */
        public static function splitMessage($message, &$headers, &$body, $EOL)
        {
        }
        /**
         * @param string $type
         * @param null|string $wantedPart
         *
         * @return array<array-key, mixed>|string
         */
        public static function splitContentType($type, $wantedPart = null)
        {
        }
        /**
         * @param string $field
         * @param null|string $wantedPart
         * @param int|string $firstName
         *
         * @return array<array-key, mixed>|string
         *
         * @throws Zend_Exception
         */
        public static function splitHeaderField($field, $wantedPart = null, $firstName = 0)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function decodeQuotedPrintable($string)
        {
        }
    }
    class Zend_Mime_Exception extends \Zend_Exception
    {
    }
    class Zend_Mime_Message
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_parts;
        /**
         * @var Zend_Mime|null
         */
        public $_mime;
        /**
         * @return array<array-key, mixed>
         */
        public function getParts()
        {
        }
        /**
         * @param array<array-key, mixed> $parts
         */
        public function setParts($parts)
        {
        }
        /**
         * @param Zend_Mime_Part $part
         */
        public function addPart(\Zend_Mime_Part $part)
        {
        }
        /**
         * @return bool
         */
        public function isMultiPart()
        {
        }
        /**
         * @param Zend_Mime $mime
         */
        public function setMime(\Zend_Mime $mime)
        {
        }
        /**
         * @return Zend_Mime
         */
        public function getMime()
        {
        }
        /**
         * @param string $EOL
         *
         * @return string
         */
        public function generateMessage($EOL)
        {
        }
        /**
         * @param int $partnum
         *
         * @return array<array-key, mixed>
         */
        public function getPartHeadersArray($partnum)
        {
        }
        /**
         * @param int $partnum
         * @param string $EOL
         *
         * @return string
         */
        public function getPartHeaders($partnum, $EOL)
        {
        }
        /**
         * @param int $partnum
         * @param string $EOL
         *
         * @return string
         */
        public function getPartContent($partnum, $EOL)
        {
        }
        /**
         * @param string $body
         * @param string $boundary
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Exception
         */
        public static function _disassembleMime($body, $boundary)
        {
        }
        /**
         * @param string $message
         * @param string $boundary
         * @param string $EOL
         *
         * @return Zend_Mime_Message
         *
         * @throws Zend_Exception
         */
        public static function createFromMessage($message, $boundary, $EOL)
        {
        }
    }
    class Zend_Mime_Part
    {
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $encoding;
        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $disposition;
        /**
         * @var string
         */
        public $filename;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $charset;
        /**
         * @var string
         */
        public $boundary;
        /**
         * @var string
         */
        public $location;
        /**
         * @var string
         */
        public $language;
        /**
         * @var mixed
         */
        public $_content;
        /**
         * @var bool
         */
        public $_isStream;
        /**
         * @param mixed $content
         */
        public function __construct($content)
        {
        }
        /**
         * @return bool
         */
        public function isStream()
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Mime_Exception
         */
        public function getEncodedStream()
        {
        }
        /**
         * @param string $EOL
         *
         * @return string
         *
         * @throws Zend_Mime_Exception
         */
        public function getContent($EOL)
        {
        }
        /**
         * @return string
         */
        public function getRawContent()
        {
        }
        /**
         * @param string $EOL
         *
         * @return array<array-key, mixed>
         */
        public function getHeadersArray($EOL)
        {
        }
        /**
         * @param string $EOL
         *
         * @return string
         */
        public function getHeaders($EOL)
        {
        }
    }
    class Zend_Mobile_Exception extends \Zend_Exception
    {
    }
    class Zend_Mobile_Push_Abstract implements \Zend_Mobile_Push_Interface
    {
        /**
         * @var bool
         */
        public $_isConnected;
        /**
         * @return Zend_Mobile_Push_Abstract
         */
        public function connect()
        {
        }
        /**
         * @param Zend_Mobile_Push_Message_Abstract $message
         *
         * @return bool
         *
         * @throws DomainException
         */
        public function send(\Zend_Mobile_Push_Message_Abstract $message)
        {
        }
        /**
         * @return void
         */
        public function close()
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Mobile_Push_Abstract
         *
         * @throws Zend_Mobile_Push_Exception
         */
        public function setOptions(array $options)
        {
        }
    }
    class Zend_Mobile_Push_Apns extends \Zend_Mobile_Push_Abstract
    {
        public const SERVER_SANDBOX_URI = 0;
        public const SERVER_PRODUCTION_URI = 1;
        public const SERVER_FEEDBACK_SANDBOX_URI = 2;
        public const SERVER_FEEDBACK_PRODUCTION_URI = 3;
        /**
         * @var array<array-key, mixed>
         */
        public $_serverUriList;
        /**
         * @var int
         */
        public $_currentEnv;
        /**
         * @var resource
         */
        public $_socket;
        /**
         * @var string
         */
        public $_certificate;
        /**
         * @var string
         */
        public $_certificatePassphrase;
        /**
         * @return string
         */
        public function getCertificate()
        {
        }
        /**
         * @param string $cert
         *
         * @return Zend_Mobile_Push_Apns
         *
         * @throws Zend_Mobile_Push_Exception
         */
        public function setCertificate($cert)
        {
        }
        /**
         * @return string
         */
        public function getCertificatePassphrase()
        {
        }
        /**
         * @param string $passphrase
         *
         * @return Zend_Mobile_Push_Apns
         *
         * @throws Zend_Mobile_Push_Exception
         */
        public function setCertificatePassphrase($passphrase)
        {
        }
        /**
         * @param string $uri
         *
         * @return bool
         *
         * @throws Zend_Mobile_Push_Exception_ServerUnavailable
         */
        public function _connect($uri)
        {
        }
        /**
         * @param int $length
         *
         * @return string
         */
        public function _read($length)
        {
        }
        /**
         * @param string $payload
         *
         * @return int
         */
        public function _write($payload)
        {
        }
        /**
         * @param int|string $env
         *
         * @return Zend_Mobile_Push_Abstract
         *
         * @throws Zend_Mobile_Push_Exception
         * @throws Zend_Mobile_Push_Exception_ServerUnavailable
         */
        public function connect($env)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Mobile_Push_Exception
         * @throws Zend_Mobile_Push_Exception_ServerUnavailable
         */
        public function feedback()
        {
        }
        /**
         * @param Zend_Mobile_Push_Message_Abstract $message
         *
         * @return bool
         *
         * @throws Zend_Mobile_Push_Exception
         * @throws Zend_Mobile_Push_Exception_InvalidPayload
         * @throws Zend_Mobile_Push_Exception_InvalidToken
         * @throws Zend_Mobile_Push_Exception_InvalidTopic
         * @throws Zend_Mobile_Push_Exception_ServerUnavailable
         */
        public function send(\Zend_Mobile_Push_Message_Abstract $message)
        {
        }
        /**
         * @return void
         */
        public function close()
        {
        }
    }
    class Zend_Mobile_Push_Exception extends \Zend_Mobile_Exception
    {
    }
    class Zend_Mobile_Push_Exception_DeviceQuotaExceeded extends \Zend_Mobile_Push_Exception
    {
    }
    class Zend_Mobile_Push_Exception_InvalidAuthToken extends \Zend_Mobile_Push_Exception
    {
    }
    class Zend_Mobile_Push_Exception_InvalidPayload extends \Zend_Mobile_Push_Exception
    {
    }
    class Zend_Mobile_Push_Exception_InvalidRegistration extends \Zend_Mobile_Push_Exception
    {
    }
    class Zend_Mobile_Push_Exception_InvalidToken extends \Zend_Mobile_Push_Exception
    {
    }
    class Zend_Mobile_Push_Exception_InvalidTopic extends \Zend_Mobile_Push_Exception
    {
    }
    class Zend_Mobile_Push_Exception_QuotaExceeded extends \Zend_Mobile_Push_Exception
    {
    }
    class Zend_Mobile_Push_Exception_ServerUnavailable extends \Zend_Mobile_Push_Exception
    {
    }
    class Zend_Mobile_Push_Gcm extends \Zend_Mobile_Push_Abstract
    {
        public const SERVER_URI = 'https://android.googleapis.com/gcm/send';
        /**
         * @var Zend_Http_Client
         */
        public $_httpClient;
        /**
         * @var string
         */
        public $_apiKey;
        /**
         * @return string
         */
        public function getApiKey()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Mobile_Push_Gcm
         *
         * @throws Zend_Mobile_Push_Exception
         */
        public function setApiKey($key)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        /**
         * @return Zend_Mobile_Push_Gcm
         */
        public function setHttpClient(\Zend_Http_Client $client)
        {
        }
        /**
         * @param Zend_Mobile_Push_Message_Abstract $message
         *
         * @return Zend_Mobile_Push_Response_Gcm
         *
         * @throws Zend_Http_Client_Exception
         * @throws Zend_Mobile_Push_Exception
         * @throws Zend_Mobile_Push_Exception_InvalidAuthToken
         * @throws Zend_Mobile_Push_Exception_InvalidPayload
         * @throws Zend_Mobile_Push_Exception_ServerUnavailable
         */
        public function send(\Zend_Mobile_Push_Message_Abstract $message)
        {
        }
    }
    interface Zend_Mobile_Push_Interface
    {
        /**
         * @return Push
         */
        public function connect();
        /**
         * @param Zend_Mobile_Push_Message_Abstract $message
         *
         * @return bool
         */
        public function send(\Zend_Mobile_Push_Message_Abstract $message);
        /**
         * @return void
         */
        public function close();
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Mobile_Push_Abstract
         */
        public function setOptions(array $options);
    }
    class Zend_Mobile_Push_Message_Abstract implements \Zend_Mobile_Push_Message_Interface
    {
        /**
         * @var string
         */
        public $_token;
        /**
         * @var scalar
         */
        public $_id;
        /**
         * @return string
         */
        public function getToken()
        {
        }
        /**
         * @param string $token
         *
         * @return Zend_Mobile_Push_Message_Abstract
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setToken($token)
        {
        }
        /**
         * @return scalar
         */
        public function getId()
        {
        }
        /**
         * @param scalar $id
         *
         * @return Zend_Mobile_Push_Message_Abstract
         *
         * @throws Exception
         */
        public function setId($id)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Mobile_Push_Message_Abstract
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return bool
         */
        public function validate()
        {
        }
    }
    class Zend_Mobile_Push_Message_Apns extends \Zend_Mobile_Push_Message_Abstract
    {
        /**
         * @var int
         */
        public $_badge;
        /**
         * @var array<array-key, mixed>
         */
        public $_alert;
        /**
         * @var int
         */
        public $_expire;
        /**
         * @var string
         */
        public $_sound;
        /**
         * @var array<array-key, mixed>
         */
        public $_custom;
        /**
         * @return array<array-key, mixed>
         */
        public function getAlert()
        {
        }
        /**
         * @param string $text
         * @param null|string $actionLocKey
         * @param null|string $locKey
         * @param array<array-key, mixed>|null $locArgs
         * @param null|string $launchImage
         *
         * @return Zend_Mobile_Push_Message_Apns
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setAlert($text, $actionLocKey = null, $locKey = null, $locArgs = null, $launchImage = null)
        {
        }
        /**
         * @return int
         */
        public function getBadge()
        {
        }
        /**
         * @param int $badge
         *
         * @return Zend_Mobile_Push_Message_Apns
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setBadge($badge)
        {
        }
        /**
         * @return int
         */
        public function getExpire()
        {
        }
        /**
         * @param int $expire
         *
         * @return Zend_Mobile_Push_Message_Apns
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setExpire($expire)
        {
        }
        /**
         * @return string
         */
        public function getSound()
        {
        }
        /**
         * @param string $sound
         *
         * @return Zend_Mobile_Push_Message_Apns
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setSound($sound)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return Zend_Mobile_Push_Message_Apns
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function addCustomData($key, $value)
        {
        }
        /**
         * @return throw
         */
        public function clearCustomData()
        {
        }
        /**
         * @param array<array-key, mixed> $array
         *
         * @return Zend_Mobile_Push_Message_Apns
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setCustomData($array)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCustomData()
        {
        }
        /**
         * @return bool
         */
        public function validate()
        {
        }
    }
    class Zend_Mobile_Push_Message_Exception extends \Zend_Mobile_Exception
    {
    }
    class Zend_Mobile_Push_Message_Gcm extends \Zend_Mobile_Push_Message_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_token;
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var bool
         */
        public $_delay;
        /**
         * @var int
         */
        public $_ttl;
        /**
         * @param string $token
         *
         * @return Zend_Mobile_Push_Message_Gcm
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function addToken($token)
        {
        }
        /**
         * @param array<array-key, mixed>|string $token
         *
         * @return Zend_Mobile_Push_Message_Gcm
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setToken($token)
        {
        }
        /**
         * @return Zend_Mobile_Push_Message_Gcm
         */
        public function clearToken()
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return Zend_Mobile_Push_Message_Gcm
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function addData($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return Zend_Mobile_Push_Message_Gcm
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setData(array $data)
        {
        }
        /**
         * @return Zend_Mobile_Push_Message_Gcm
         */
        public function clearData()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getData()
        {
        }
        /**
         * @param bool $delay
         *
         * @return Zend_Mobile_Push_Message_Gcm
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setDelayWhileIdle($delay)
        {
        }
        /**
         * @return bool
         */
        public function getDelayWhileIdle()
        {
        }
        /**
         * @param int $secs
         *
         * @return Zend_Mobile_Push_Message_Gcm
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setTtl($secs)
        {
        }
        /**
         * @return int
         */
        public function getTtl()
        {
        }
        /**
         * @return bool
         */
        public function validate()
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
    }
    interface Zend_Mobile_Push_Message_Interface
    {
        /**
         * @return string
         */
        public function getToken();
        /**
         * @param string $token
         *
         * @return Zend_Mobile_Push_Message_Abstract
         */
        public function setToken($token);
        /**
         * @return scalar
         */
        public function getId();
        /**
         * @param scalar $id
         *
         * @return Zend_Mobile_Push_Message_Abstract
         */
        public function setId($id);
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Mobile_Push_Message_Abstract
         */
        public function setOptions(array $options);
        /**
         * @return bool
         */
        public function validate();
    }
    class Zend_Mobile_Push_Message_Mpns extends \Zend_Mobile_Push_Message_Abstract
    {
        public const TYPE_RAW = 'raw';
        public const TYPE_TILE = 'token';
        public const TYPE_TOAST = 'toast';
        /**
         * @var int
         */
        public $_delay;
        /**
         * @return int
         */
        public abstract function getDelay();
        /**
         * @param int $delay
         *
         * @return Zend_Mobile_Push_Message_Mpns
         */
        public abstract function setDelay($delay);
        /**
         * @return string
         */
        public static function getNotificationType()
        {
        }
        /**
         * @param string $token
         *
         * @return Zend_Mobile_Push_Message_Mpns
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setToken($token)
        {
        }
        /**
         * @return string
         */
        public abstract function getXmlPayload();
        /**
         * @return bool
         */
        public function validate()
        {
        }
    }
    class Zend_Mobile_Push_Message_Mpns_Raw extends \Zend_Mobile_Push_Message_Mpns
    {
        public const TYPE_RAW = 'raw';
        public const TYPE_TILE = 'token';
        public const TYPE_TOAST = 'toast';
        public const DELAY_IMMEDIATE = 3;
        public const DELAY_450S = 13;
        public const DELAY_900S = 23;
        /**
         * @var string
         */
        public $_msg;
        /**
         * @return int
         */
        public function getDelay()
        {
        }
        /**
         * @param int $delay
         *
         * @return Zend_Mobile_Push_Message_Mpns_Raw
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setDelay($delay)
        {
        }
        /**
         * @param string $msg
         *
         * @return Zend_Mobile_Push_Message_Mpns_Raw
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setMessage($msg)
        {
        }
        /**
         * @return string
         */
        public function getMessage()
        {
        }
        /**
         * @return string
         */
        public static function getNotificationType()
        {
        }
        /**
         * @return string
         */
        public function getXmlPayload()
        {
        }
        /**
         * @return bool
         */
        public function validate()
        {
        }
    }
    class Zend_Mobile_Push_Message_Mpns_Tile extends \Zend_Mobile_Push_Message_Mpns
    {
        public const TYPE_RAW = 'raw';
        public const TYPE_TILE = 'token';
        public const TYPE_TOAST = 'toast';
        public const DELAY_IMMEDIATE = 1;
        public const DELAY_450S = 11;
        public const DELAY_900S = 21;
        /**
         * @var string
         */
        public $_backgroundImage;
        /**
         * @var int
         */
        public $_count;
        /**
         * @var string
         */
        public $_title;
        /**
         * @var string
         */
        public $_backBackgroundImage;
        /**
         * @var string
         */
        public $_backTitle;
        /**
         * @var string
         */
        public $_backContent;
        /**
         * @var string
         */
        public $_tileId;
        /**
         * @return string
         */
        public function getBackgroundImage()
        {
        }
        /**
         * @param string $bgImg
         *
         * @return Zend_Mobile_Push_Message_Mpns_Tile
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setBackgroundImage($bgImg)
        {
        }
        /**
         * @return int
         */
        public function getCount()
        {
        }
        /**
         * @param int $count
         *
         * @return Zend_Mobile_Push_Message_Mpns_Tile
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setCount($count)
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @param string $title
         *
         * @return Zend_Mobile_Push_Message_Mpns_Tile
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setTitle($title)
        {
        }
        /**
         * @return string
         */
        public function getBackBackgroundImage()
        {
        }
        /**
         * @param string $bgImg
         *
         * @return Zend_Mobile_Push_Message_Mpns_Tile
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setBackBackgroundImage($bgImg)
        {
        }
        /**
         * @return string
         */
        public function getBackTitle()
        {
        }
        /**
         * @param string $title
         *
         * @return Zend_Mobile_Push_Message_Mpns_Tile
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setBackTitle($title)
        {
        }
        /**
         * @return string
         */
        public function getBackContent()
        {
        }
        /**
         * @param string $content
         *
         * @return Zend_Mobile_Push_Message_Mpns_Tile
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setBackContent($content)
        {
        }
        /**
         * @return string
         */
        public function getTileId()
        {
        }
        /**
         * @param string $tileId
         *
         * @return Zend_Mobile_Push_Message_Mpns_Tile
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setTileId($tileId)
        {
        }
        /**
         * @return int
         */
        public function getDelay()
        {
        }
        /**
         * @param int $delay
         *
         * @return Zend_Mobile_Push_Message_Mpns_Tile
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setDelay($delay)
        {
        }
        /**
         * @return string
         */
        public static function getNotificationType()
        {
        }
        /**
         * @return string
         */
        public function getXmlPayload()
        {
        }
        /**
         * @return bool
         */
        public function validate()
        {
        }
    }
    class Zend_Mobile_Push_Message_Mpns_Toast extends \Zend_Mobile_Push_Message_Mpns
    {
        public const TYPE_RAW = 'raw';
        public const TYPE_TILE = 'token';
        public const TYPE_TOAST = 'toast';
        public const DELAY_IMMEDIATE = 2;
        public const DELAY_450S = 12;
        public const DELAY_900S = 22;
        /**
         * @var string
         */
        public $_title;
        /**
         * @var string
         */
        public $_msg;
        /**
         * @var string
         */
        public $_params;
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @param string $title
         *
         * @return Zend_Mobile_Push_Message_Mpns_Toast
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setTitle($title)
        {
        }
        /**
         * @return string
         */
        public function getMessage()
        {
        }
        /**
         * @param string $msg
         *
         * @return Zend_Mobile_Push_Message_Mpns_Toast
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setMessage($msg)
        {
        }
        /**
         * @return string
         */
        public function getParams()
        {
        }
        /**
         * @param string $params
         *
         * @return Zend_Mobile_Push_Message_Mpns_Toast
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setParams($params)
        {
        }
        /**
         * @return int
         */
        public function getDelay()
        {
        }
        /**
         * @param int $delay
         *
         * @return Zend_Mobile_Push_Message_Mpns_Toast
         *
         * @throws Zend_Mobile_Push_Message_Exception
         */
        public function setDelay($delay)
        {
        }
        /**
         * @return string
         */
        public static function getNotificationType()
        {
        }
        /**
         * @return string
         */
        public function getXmlPayload()
        {
        }
        /**
         * @return bool
         */
        public function validate()
        {
        }
    }
    class Zend_Mobile_Push_Mpns extends \Zend_Mobile_Push_Abstract
    {
        /**
         * @var Zend_Http_Client
         */
        public $_httpClient;
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        /**
         * @return Zend_Mobile_Push_Mpns
         */
        public function setHttpClient(\Zend_Http_Client $client)
        {
        }
        /**
         * @param Zend_Mobile_Push_Message_Abstract $message
         *
         * @return bool
         *
         * @throws Zend_Http_Client_Exception
         * @throws Zend_Mobile_Push_Exception
         * @throws Zend_Mobile_Push_Exception_DeviceQuotaExceeded
         * @throws Zend_Mobile_Push_Exception_InvalidPayload
         * @throws Zend_Mobile_Push_Exception_InvalidToken
         * @throws Zend_Mobile_Push_Exception_QuotaExceeded
         * @throws Zend_Mobile_Push_Exception_ServerUnavailable
         */
        public function send(\Zend_Mobile_Push_Message_Abstract $message)
        {
        }
    }
    class Zend_Mobile_Push_Response_Gcm
    {
        public const RESULT_MESSAGE_ID = 'message_id';
        public const RESULT_ERROR = 'error';
        public const RESULT_CANONICAL = 'registration_id';
        /**
         * @var int
         */
        public $_id;
        /**
         * @var int
         */
        public $_successCnt;
        /**
         * @var int
         */
        public $_failureCnt;
        /**
         * @var int
         */
        public $_canonicalCnt;
        /**
         * @var Zend_Mobile_Push_Message_Gcm
         */
        public $_message;
        /**
         * @var array<array-key, mixed>
         */
        public $_results;
        /**
         * @var array<array-key, mixed>
         */
        public $_response;
        /**
         * @param null|string $responseString
         * @param Zend_Mobile_Push_Message_Gcm|null $message
         *
         * @return Zend_Mobile_Push_Response_Gcm
         *
         * @throws Zend_Mobile_Push_Exception_ServerUnavailable
         */
        public function __construct($responseString = null, ?\Zend_Mobile_Push_Message_Gcm $message = null)
        {
        }
        /**
         * @return Zend_Mobile_Push_Message_Gcm
         */
        public function getMessage()
        {
        }
        /**
         * @param Zend_Mobile_Push_Message_Gcm $message
         *
         * @return Zend_Mobile_Push_Response_Gcm
         */
        public function setMessage(\Zend_Mobile_Push_Message_Gcm $message)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getResponse()
        {
        }
        /**
         * @param array<array-key, mixed> $response
         *
         * @return Zend_Mobile_Push_Response_Gcm
         *
         * @throws Zend_Mobile_Push_Exception
         */
        public function setResponse(array $response)
        {
        }
        /**
         * @return int
         */
        public function getSuccessCount()
        {
        }
        /**
         * @return int
         */
        public function getFailureCount()
        {
        }
        /**
         * @return int
         */
        public function getCanonicalCount()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getResults()
        {
        }
        /**
         * @param int $flag
         *
         * @return array<array-key, mixed>
         */
        public function getResult($flag)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _correlate()
        {
        }
    }
    class Zend_Mobile_Push_Test_ApnsProxy extends \Zend_Mobile_Push_Apns
    {
        public const SERVER_SANDBOX_URI = 0;
        public const SERVER_PRODUCTION_URI = 1;
        public const SERVER_FEEDBACK_SANDBOX_URI = 2;
        public const SERVER_FEEDBACK_PRODUCTION_URI = 3;
        /**
         * @var string
         */
        public $_readResponse;
        /**
         * @var mixed
         */
        public $_writeResponse;
        /**
         * @param string $str
         */
        public function setReadResponse($str)
        {
        }
        /**
         * @param mixed $resp
         *
         * @return void
         */
        public function setWriteResponse($resp)
        {
        }
        /**
         * @return true
         *
         * @throws Zend_Mobile_Push_Exception_ServerUnavailable
         */
        public function _connect($uri)
        {
        }
        /**
         * @param string $length
         *
         * @return string
         */
        public function _read($length)
        {
        }
        /**
         * @param string $payload
         *
         * @return int
         */
        public function _write($payload)
        {
        }
    }
    class Zend_Navigation extends \Zend_Navigation_Container
    {
        /**
         * @param Zend_Config|array<array-key, mixed>|null $pages
         *
         * @throws Zend_Navigation_Exception
         */
        public function __construct($pages = null)
        {
        }
    }
    class Zend_Navigation_Container implements \RecursiveIterator, \Countable
    {
        /**
         * @var array<array-key, Zend_Navigation_Page>
         */
        public $_pages;
        /**
         * @var array<array-key, mixed>
         */
        public $_index;
        /**
         * @var bool
         */
        public $_dirtyIndex;
        /**
         * @return void
         */
        public function _sort()
        {
        }
        /**
         * @return void
         */
        public function notifyOrderUpdated()
        {
        }
        /**
         * @param Zend_Config|Zend_Navigation_Page|array<array-key, mixed> $page
         *
         * @return Zend_Navigation_Container
         *
         * @throws Zend_Navigation_Exception
         */
        public function addPage($page)
        {
        }
        /**
         * @param Zend_Config|Zend_Navigation_Container|array<array-key, Zend_Navigation_Page> $pages
         *
         * @return Zend_Navigation_Container
         *
         * @throws Zend_Navigation_Exception
         */
        public function addPages($pages)
        {
        }
        /**
         * @param array<array-key, Zend_Navigation_Page> $pages
         *
         * @return Zend_Navigation_Container
         */
        public function setPages(array $pages)
        {
        }
        /**
         * @return array<array-key, Zend_Navigation_Page>
         */
        public function getPages()
        {
        }
        /**
         * @param Zend_Navigation_Page|int $page
         * @param bool $recursive
         *
         * @return bool
         */
        public function removePage($page, $recursive = false)
        {
        }
        /**
         * @return Zend_Navigation_Container
         */
        public function removePages()
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         * @param bool $recursive
         *
         * @return bool
         */
        public function hasPage(\Zend_Navigation_Page $page, $recursive = false)
        {
        }
        /**
         * @return bool
         */
        public function hasPages()
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         * @param bool $useRegex
         *
         * @return Zend_Navigation_Page|null
         */
        public function findOneBy($property, $value, $useRegex = false)
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         * @param bool $useRegex
         *
         * @return array<array-key, Zend_Navigation_Page>
         */
        public function findAllBy($property, $value, $useRegex = false)
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         * @param bool $all
         * @param bool $useRegex
         *
         * @return Zend_Navigation_Page|null
         */
        public function findBy($property, $value, $all = false, $useRegex = false)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $arguments
         *
         * @return mixed
         *
         * @throws Zend_Navigation_Exception
         */
        public function __call($method, $arguments)
        {
        }
        /**
         * @return array<array-key, Zend_Navigation_Page>
         */
        public function toArray()
        {
        }
        /**
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function current()
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return Zend_Navigation_Page|null
         */
        public function getChildren()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Navigation_Exception extends \Zend_Exception
    {
    }
    class Zend_Navigation_Page extends \Zend_Navigation_Container
    {
        /**
         * @var null|string
         */
        public $_label;
        /**
         * @var null|string
         */
        public $_fragment;
        /**
         * @var null|string
         */
        public $_id;
        /**
         * @var null|string
         */
        public $_class;
        /**
         * @var null|string
         */
        public $_title;
        /**
         * @var null|string
         */
        public $_target;
        /**
         * @var null|string
         */
        public $_accesskey;
        /**
         * @var array<array-key, mixed>
         */
        public $_rel;
        /**
         * @var array<array-key, mixed>
         */
        public $_rev;
        /**
         * @var int|null
         */
        public $_order;
        /**
         * @var Zend_Acl_Resource_Interface|null|string
         */
        public $_resource;
        /**
         * @var null|string
         */
        public $_privilege;
        /**
         * @var bool
         */
        public $_active;
        /**
         * @var bool
         */
        public $_visible;
        /**
         * @var Zend_Navigation_Container|null
         */
        public $_parent;
        /**
         * @var array<array-key, mixed>
         */
        public $_properties;
        /**
         * @var array<array-key, mixed>
         */
        public $_customHtmlAttribs;
        /**
         * @var string
         */
        public static $_defaultPageType;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         * @throws Zend_Exception
         */
        public static function factory($options)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @throws Zend_Navigation_Exception
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $label
         *
         * @return $this
         *
         * @throws Zend_Navigation_Exception
         */
        public function setLabel($label)
        {
        }
        /**
         * @return string
         */
        public function getLabel()
        {
        }
        /**
         * @param string $fragment
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setFragment($fragment)
        {
        }
        /**
         * @return null|string
         */
        public function getFragment()
        {
        }
        /**
         * @param null|string $id
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setId($id = null)
        {
        }
        /**
         * @return null|string
         */
        public function getId()
        {
        }
        /**
         * @param null|string $class
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setClass($class = null)
        {
        }
        /**
         * @return null|string
         */
        public function getClass()
        {
        }
        /**
         * @param null|string $title
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setTitle($title = null)
        {
        }
        /**
         * @return null|string
         */
        public function getTitle()
        {
        }
        /**
         * @param null|string $target
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setTarget($target = null)
        {
        }
        /**
         * @return null|string
         */
        public function getTarget()
        {
        }
        /**
         * @param null|string $character
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setAccesskey($character = null)
        {
        }
        /**
         * @return null|string
         */
        public function getAccesskey()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|null $relations
         *
         * @return Zend_Navigation_Page
         */
        public function setRel($relations = null)
        {
        }
        /**
         * @param null|string $relation
         *
         * @return array<array-key, mixed>
         */
        public function getRel($relation = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|null $relations
         *
         * @return Zend_Navigation_Page
         */
        public function setRev($relations = null)
        {
        }
        /**
         * @param null|string $relation
         *
         * @return array<array-key, mixed>
         */
        public function getRev($relation = null)
        {
        }
        /**
         * @param string $name
         * @param null|string $value
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setCustomHtmlAttrib($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return null|string
         *
         * @throws Zend_Navigation_Exception
         */
        public function getCustomHtmlAttrib($name)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_Navigation_Page
         */
        public function setCustomHtmlAttribs(array $attribs)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCustomHtmlAttribs()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Navigation_Page
         */
        public function removeCustomHtmlAttrib($name)
        {
        }
        /**
         * @return Zend_Navigation_Page
         */
        public function clearCustomHtmlAttribs()
        {
        }
        /**
         * @param int|null $order
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setOrder($order = null)
        {
        }
        /**
         * @return int|null
         */
        public function getOrder()
        {
        }
        /**
         * @param Zend_Acl_Resource_Interface|null|string $resource
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function setResource($resource = null)
        {
        }
        /**
         * @return Zend_Acl_Resource_Interface|null|string
         */
        public function getResource()
        {
        }
        /**
         * @param null|string $privilege
         *
         * @return Zend_Navigation_Page
         */
        public function setPrivilege($privilege = null)
        {
        }
        /**
         * @return null|string
         */
        public function getPrivilege()
        {
        }
        /**
         * @param bool $active
         *
         * @return Zend_Navigation_Page
         */
        public function setActive($active = true)
        {
        }
        /**
         * @param bool $recursive
         *
         * @return bool
         */
        public function isActive($recursive = false)
        {
        }
        /**
         * @param bool $recursive
         *
         * @return bool
         */
        public function getActive($recursive = false)
        {
        }
        /**
         * @param bool $visible
         *
         * @return Zend_Navigation_Page
         */
        public function setVisible($visible = true)
        {
        }
        /**
         * @param bool $recursive
         *
         * @return bool
         */
        public function isVisible($recursive = false)
        {
        }
        /**
         * @param bool $recursive
         *
         * @return bool
         */
        public function getVisible($recursive = false)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $parent
         *
         * @return Zend_Navigation_Page
         */
        public function setParent(?\Zend_Navigation_Container $parent = null)
        {
        }
        /**
         * @return Zend_Navigation_Container|null
         */
        public function getParent()
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         *
         * @return Zend_Navigation_Page
         *
         * @throws Zend_Navigation_Exception
         */
        public function set($property, $value)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         *
         * @throws Zend_Navigation_Exception
         */
        public function get($property)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Navigation_Exception
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         *
         * @throws Zend_Navigation_Exception
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         *
         * @throws Zend_Navigation_Exception
         */
        public function __unset($name)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $relation
         * @param mixed $value
         *
         * @return Zend_Navigation_Page
         */
        public function addRel($relation, $value)
        {
        }
        /**
         * @param string $relation
         * @param mixed $value
         *
         * @return Zend_Navigation_Page
         */
        public function addRev($relation, $value)
        {
        }
        /**
         * @param string $relation
         *
         * @return Zend_Navigation_Page
         */
        public function removeRel($relation)
        {
        }
        /**
         * @param string $relation
         *
         * @return Zend_Navigation_Page
         */
        public function removeRev($relation)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefinedRel()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefinedRev()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCustomProperties()
        {
        }
        /**
         * @return string
         */
        public function hashCode()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @param string $property
         *
         * @return string
         */
        public static function _normalizePropertyName($property)
        {
        }
        public static function setDefaultPageType($type = null)
        {
        }
        public static function getDefaultPageType()
        {
        }
        /**
         * @return string
         */
        public abstract function getHref();
    }
    class Zend_Navigation_Page_Mvc extends \Zend_Navigation_Page
    {
        /**
         * @var string
         */
        public $_action;
        /**
         * @var string
         */
        public $_controller;
        /**
         * @var string
         */
        public $_module;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var string
         */
        public $_route;
        /**
         * @var bool
         */
        public $_resetParams;
        /**
         * @var bool
         */
        public $_encodeUrl;
        /**
         * @var bool
         */
        public $_active;
        /**
         * @var string
         */
        public $_scheme;
        /**
         * @var string
         */
        public $_hrefCache;
        /**
         * @var Zend_Controller_Action_Helper_Url
         */
        public static $_urlHelper;
        /**
         * @var Zend_View_Helper_ServerUrl
         */
        public static $_schemeHelper;
        /**
         * @param bool $recursive
         *
         * @return bool
         */
        public function isActive($recursive = false)
        {
        }
        /**
         * @return string
         */
        public function getHref()
        {
        }
        /**
         * @param string $action
         *
         * @return Zend_Navigation_Page_Mvc
         *
         * @throws Zend_Navigation_Exception
         */
        public function setAction($action)
        {
        }
        /**
         * @return null|string
         */
        public function getAction()
        {
        }
        /**
         * @param null|string $controller
         *
         * @return Zend_Navigation_Page_Mvc
         *
         * @throws Zend_Navigation_Exception
         */
        public function setController($controller)
        {
        }
        /**
         * @return null|string
         */
        public function getController()
        {
        }
        /**
         * @param null|string $module
         *
         * @return Zend_Navigation_Page_Mvc
         *
         * @throws Zend_Navigation_Exception
         */
        public function setModule($module)
        {
        }
        /**
         * @return null|string
         */
        public function getModule()
        {
        }
        /**
         * @param array<array-key, mixed>|null $params
         *
         * @return Zend_Navigation_Page_Mvc
         */
        public function setParams(?array $params = null)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Navigation_Page_Mvc
         */
        public function setParam($name, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Navigation_Page_Mvc
         */
        public function addParams(array $params)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function removeParam($name)
        {
        }
        /**
         * @return Zend_Navigation_Page_Mvc
         */
        public function clearParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getParam($name)
        {
        }
        /**
         * @param string $route
         *
         * @return Zend_Navigation_Page_Mvc
         *
         * @throws Zend_Navigation_Exception
         */
        public function setRoute($route)
        {
        }
        /**
         * @return string
         */
        public function getRoute()
        {
        }
        /**
         * @param bool $resetParams
         *
         * @return Zend_Navigation_Page_Mvc
         */
        public function setResetParams($resetParams)
        {
        }
        /**
         * @return bool
         */
        public function getResetParams()
        {
        }
        /**
         * @return Zend_Navigation_Page_Mvc
         */
        public function setEncodeUrl($encodeUrl)
        {
        }
        /**
         * @return bool
         */
        public function getEncodeUrl()
        {
        }
        /**
         * @param null|string $scheme
         *
         * @return Zend_Navigation_Page_Mvc
         *
         * @throws Zend_Navigation_Exception
         */
        public function setScheme($scheme)
        {
        }
        /**
         * @return null|string
         */
        public function getScheme()
        {
        }
        /**
         * @param Zend_Controller_Action_Helper_Url $uh
         *
         * @return void
         */
        public static function setUrlHelper(\Zend_Controller_Action_Helper_Url $uh)
        {
        }
        /**
         * @param Zend_View_Helper_ServerUrl $sh
         *
         * @return void
         */
        public static function setSchemeHelper(\Zend_View_Helper_ServerUrl $sh)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Navigation_Page_Uri extends \Zend_Navigation_Page
    {
        /**
         * @var null|string
         */
        public $_uri;
        /**
         * @param string $uri
         *
         * @return Zend_Navigation_Page_Uri
         *
         * @throws Zend_Navigation_Exception
         */
        public function setUri($uri)
        {
        }
        /**
         * @return string
         */
        public function getUri()
        {
        }
        /**
         * @return string
         */
        public function getHref()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Oauth
    {
        public const REQUEST_SCHEME_HEADER = 'header';
        public const REQUEST_SCHEME_POSTBODY = 'postbody';
        public const REQUEST_SCHEME_QUERYSTRING = 'querystring';
        public const GET = 'GET';
        public const POST = 'POST';
        public const PUT = 'PUT';
        public const DELETE = 'DELETE';
        public const HEAD = 'HEAD';
        public const OPTIONS = 'OPTIONS';
        /**
         * @var Zend_Http_Client
         */
        public static $httpClient;
        /**
         * @param Zend_Http_Client $httpClient
         *
         * @return void
         */
        public static function setHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public static function getHttpClient()
        {
        }
        /**
         * @return void
         */
        public static function clearHttpClient()
        {
        }
    }
    class Zend_Oauth_Client extends \Zend_Http_Client
    {
        public const GET = 'GET';
        public const POST = 'POST';
        public const PUT = 'PUT';
        public const HEAD = 'HEAD';
        public const DELETE = 'DELETE';
        public const TRACE = 'TRACE';
        public const OPTIONS = 'OPTIONS';
        public const CONNECT = 'CONNECT';
        public const MERGE = 'MERGE';
        public const PATCH = 'PATCH';
        public const AUTH_BASIC = 'basic';
        public const HTTP_1 = '1.1';
        public const HTTP_0 = '1.0';
        public const CONTENT_TYPE = 'Content-Type';
        public const CONTENT_LENGTH = 'Content-Length';
        public const ENC_URLENCODED = 'application/x-www-form-urlencoded';
        public const ENC_FORMDATA = 'multipart/form-data';
        public const VTYPE_SCALAR = 'SCALAR';
        public const VTYPE_FILE = 'FILE';
        public static $supportsRevisionA = false;
        /**
         * @var Zend_Oauth_Config
         */
        public $_config;
        /**
         * @var bool
         */
        public $_streamingRequest;
        /**
         * @param Zend_Config|array<array-key, mixed> $oauthOptions
         * @param null|string $uri
         * @param Zend_Config|array<array-key, mixed>|null $config
         *
         * @return void
         */
        public function __construct($oauthOptions, $uri = null, $config = null)
        {
        }
        /**
         * @param Zend_Http_Client_Adapter_Interface $adapter
         *
         * @return void
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setAdapter($adapter)
        {
        }
        /**
         * @param bool $value
         *
         * @return void
         */
        public function setStreamingRequest($value)
        {
        }
        /**
         * @return bool
         */
        public function getStreamingRequest()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Http_Client_Exception
         */
        public function _prepareBody()
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function resetParameters($clearAll = false)
        {
        }
        /**
         * @param string $data
         * @param null|string $enctype
         *
         * @return Zend_Http_Client
         */
        public function setRawDataStream($data, $enctype = null)
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Http_Client
         *
         * @throws Zend_Http_Client_Exception
         */
        public function setMethod($method)
        {
        }
        /**
         * @param null|string $method
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Http_Client_Exception
         */
        public function request($method = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Oauth_Exception
         */
        public function prepareOauth()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getSignableParametersAsQueryString()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Oauth_Exception
         */
        public function __call($method, array $args)
        {
        }
    }
    class Zend_Oauth_Config implements \Zend_Oauth_Config_ConfigInterface
    {
        /**
         * @var string
         */
        public $_signatureMethod;
        /**
         * @var string
         */
        public $_requestScheme;
        /**
         * @var string
         */
        public $_requestMethod;
        /**
         * @var string
         */
        public $_version;
        /**
         * @var string
         */
        public $_callbackUrl;
        /**
         * @var string
         */
        public $_siteUrl;
        /**
         * @var string
         */
        public $_requestTokenUrl;
        /**
         * @var string
         */
        public $_accessTokenUrl;
        /**
         * @var string
         */
        public $_authorizeUrl;
        /**
         * @var string
         */
        public $_consumerKey;
        /**
         * @var string
         */
        public $_consumerSecret;
        /**
         * @var Zend_Crypt_Rsa_Key_Private
         */
        public $_rsaPrivateKey;
        /**
         * @var Zend_Crypt_Rsa_Key_Public
         */
        public $_rsaPublicKey;
        /**
         * @var Zend_Oauth_Token
         */
        public $_token;
        /**
         * @var string
         */
        public $_realm;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Oauth_Config
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Oauth_Config
         */
        public function setConsumerKey($key)
        {
        }
        /**
         * @return string
         */
        public function getConsumerKey()
        {
        }
        /**
         * @param string $secret
         *
         * @return Zend_Oauth_Config
         */
        public function setConsumerSecret($secret)
        {
        }
        /**
         * @return string
         */
        public function getConsumerSecret()
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setSignatureMethod($method)
        {
        }
        /**
         * @return string
         */
        public function getSignatureMethod()
        {
        }
        /**
         * @param string $scheme
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setRequestScheme($scheme)
        {
        }
        /**
         * @return string
         */
        public function getRequestScheme()
        {
        }
        /**
         * @param string $version
         *
         * @return Zend_Oauth_Config
         */
        public function setVersion($version)
        {
        }
        /**
         * @return string
         */
        public function getVersion()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setCallbackUrl($url)
        {
        }
        /**
         * @return string
         */
        public function getCallbackUrl()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setSiteUrl($url)
        {
        }
        /**
         * @return string
         */
        public function getSiteUrl()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setRequestTokenUrl($url)
        {
        }
        /**
         * @return string
         */
        public function getRequestTokenUrl()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setAccessTokenUrl($url)
        {
        }
        /**
         * @return string
         */
        public function getAccessTokenUrl()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setUserAuthorizationUrl($url)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setAuthorizeUrl($url)
        {
        }
        /**
         * @return string
         */
        public function getUserAuthorizationUrl()
        {
        }
        /**
         * @return string
         */
        public function getAuthorizeUrl()
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Oauth_Config
         *
         * @throws Zend_Oauth_Exception
         */
        public function setRequestMethod($method)
        {
        }
        /**
         * @return string
         */
        public function getRequestMethod()
        {
        }
        /**
         * @param Zend_Crypt_Rsa_Key_Public $key
         *
         * @return Zend_Oauth_Config
         */
        public function setRsaPublicKey(\Zend_Crypt_Rsa_Key_Public $key)
        {
        }
        /**
         * @return Zend_Crypt_Rsa_Key_Public
         */
        public function getRsaPublicKey()
        {
        }
        /**
         * @param Zend_Crypt_Rsa_Key_Private $key
         *
         * @return Zend_Oauth_Config
         */
        public function setRsaPrivateKey(\Zend_Crypt_Rsa_Key_Private $key)
        {
        }
        /**
         * @return Zend_Crypt_Rsa_Key_Private
         */
        public function getRsaPrivateKey()
        {
        }
        /**
         * @param Zend_Oauth_Token $token
         *
         * @return Zend_Oauth_Config
         */
        public function setToken(\Zend_Oauth_Token $token)
        {
        }
        /**
         * @return Zend_Oauth_Token
         */
        public function getToken()
        {
        }
        /**
         * @param string $realm
         *
         * @return Zend_Oauth_Config
         */
        public function setRealm($realm)
        {
        }
        /**
         * @return string
         */
        public function getRealm()
        {
        }
    }
    interface Zend_Oauth_Config_ConfigInterface
    {
        public function setOptions(array $options);
        public function setConsumerKey($key);
        public function getConsumerKey();
        public function setConsumerSecret($secret);
        public function getConsumerSecret();
        public function setSignatureMethod($method);
        public function getSignatureMethod();
        public function setRequestScheme($scheme);
        public function getRequestScheme();
        public function setVersion($version);
        public function getVersion();
        public function setCallbackUrl($url);
        public function getCallbackUrl();
        public function setRequestTokenUrl($url);
        public function getRequestTokenUrl();
        public function setRequestMethod($method);
        public function getRequestMethod();
        public function setAccessTokenUrl($url);
        public function getAccessTokenUrl();
        public function setUserAuthorizationUrl($url);
        public function getUserAuthorizationUrl();
        public function setToken(\Zend_Oauth_Token $token);
        public function getToken();
        public function setRealm($realm);
        public function getRealm();
    }
    class Zend_Oauth_Consumer extends \Zend_Oauth
    {
        public const REQUEST_SCHEME_HEADER = 'header';
        public const REQUEST_SCHEME_POSTBODY = 'postbody';
        public const REQUEST_SCHEME_QUERYSTRING = 'querystring';
        public const GET = 'GET';
        public const POST = 'POST';
        public const PUT = 'PUT';
        public const DELETE = 'DELETE';
        public const HEAD = 'HEAD';
        public const OPTIONS = 'OPTIONS';
        public $switcheroo = false;
        /**
         * @var Zend_Oauth_Token_Request
         */
        public $_requestToken;
        /**
         * @var Zend_Oauth_Token_Access
         */
        public $_accessToken;
        /**
         * @var Zend_Oauth_Config
         */
        public $_config;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $customServiceParameters
         * @param null|string $httpMethod
         * @param Zend_Oauth_Http_RequestToken|null $request
         *
         * @return Zend_Oauth_Token_Request
         */
        public function getRequestToken(?array $customServiceParameters = null, $httpMethod = null, ?\Zend_Oauth_Http_RequestToken $request = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $customServiceParameters
         * @param Zend_Oauth_Token_Request|null $token
         * @param Zend_OAuth_Http_UserAuthorization|null $redirect
         *
         * @return string
         */
        public function getRedirectUrl(?array $customServiceParameters = null, ?\Zend_Oauth_Token_Request $token = null, ?\Zend_Oauth_Http_UserAuthorization $redirect = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $customServiceParameters
         * @param Zend_Oauth_Token_Request|null $token
         * @param Zend_Oauth_Http_UserAuthorization|null $request
         *
         * @return void
         */
        public function redirect(?array $customServiceParameters = null, ?\Zend_Oauth_Token_Request $token = null, ?\Zend_Oauth_Http_UserAuthorization $request = null)
        {
        }
        /**
         * @param array<array-key, mixed> $queryData
         * @param null|string $httpMethod
         * @param Zend_Oauth_Http_AccessToken|null $request
         *
         * @return Zend_Oauth_Token_Access
         *
         * @throws Zend_Oauth_Exception
         */
        public function getAccessToken($queryData, \Zend_Oauth_Token_Request $token, $httpMethod = null, ?\Zend_Oauth_Http_AccessToken $request = null)
        {
        }
        /**
         * @return Zend_Oauth_Token_Request
         */
        public function getLastRequestToken()
        {
        }
        /**
         * @return Zend_Oauth_Token_Access
         */
        public function getLastAccessToken()
        {
        }
        /**
         * @return Zend_Oauth_Token_Access
         */
        public function getToken()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Oauth_Exception
         */
        public function __call($method, array $args)
        {
        }
    }
    class Zend_Oauth_Exception extends \Zend_Exception
    {
    }
    class Zend_Oauth_Http
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_parameters;
        /**
         * @var string
         */
        public $_consumer;
        /**
         * @var string
         */
        public $_preferredRequestScheme;
        /**
         * @var string
         */
        public $_preferredRequestMethod;
        /**
         * @var Zend_Oauth_Http_Utility
         */
        public $_httpUtility;
        /**
         * @param Zend_Oauth_Consumer $consumer
         * @param array<array-key, mixed>|null $parameters
         * @param Zend_Oauth_Http_Utility|null $utility
         *
         * @return void
         */
        public function __construct(\Zend_Oauth_Consumer $consumer, ?array $parameters = null, ?\Zend_Oauth_Http_Utility $utility = null)
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Oauth_Http
         */
        public function setMethod($method)
        {
        }
        /**
         * @return string
         */
        public function getMethod()
        {
        }
        /**
         * @param array<array-key, mixed> $customServiceParameters
         *
         * @return Zend_Oauth_Http
         */
        public function setParameters(array $customServiceParameters)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParameters()
        {
        }
        /**
         * @return Zend_Oauth_Consumer
         */
        public function getConsumer()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Oauth_Exception
         */
        public function startRequestCycle(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param string $url
         *
         * @return Zend_Http_Client
         */
        public function getRequestSchemeQueryStringClient(array $params, $url)
        {
        }
        public function _assessRequestAttempt(?\Zend_Http_Response $response = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param null|string $realm
         *
         * @return string
         */
        public function _toAuthorizationHeader(array $params, $realm = null)
        {
        }
    }
    class Zend_Oauth_Http_AccessToken extends \Zend_Oauth_Http
    {
        /**
         * @var Zend_Http_Client
         */
        public $_httpClient;
        /**
         * @return Zend_Oauth_Token_Access
         */
        public function execute()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function assembleParams()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Http_Client
         */
        public function getRequestSchemeHeaderClient(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Http_Client
         */
        public function getRequestSchemePostBodyClient(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param string $url
         *
         * @return Zend_Http_Client
         */
        public function getRequestSchemeQueryStringClient(array $params, $url)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Http_Response
         */
        public function _attemptRequest(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>
         */
        public function _cleanParamsOfIllegalCustomParameters(array $params)
        {
        }
    }
    class Zend_Oauth_Http_RequestToken extends \Zend_Oauth_Http
    {
        /**
         * @var Zend_Http_Client
         */
        public $_httpClient;
        /**
         * @return Zend_Oauth_Token_Request
         */
        public function execute()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function assembleParams()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Http_Client
         */
        public function getRequestSchemeHeaderClient(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Http_Client
         */
        public function getRequestSchemePostBodyClient(array $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Http_Response
         */
        public function _attemptRequest(array $params)
        {
        }
    }
    class Zend_Oauth_Http_UserAuthorization extends \Zend_Oauth_Http
    {
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function assembleParams()
        {
        }
    }
    class Zend_Oauth_Http_Utility
    {
        /**
         * @param string $url
         * @param Zend_Oauth_Config_ConfigInterface $config
         * @param array<array-key, mixed>|null $serviceProviderParams
         *
         * @return array<array-key, mixed>
         */
        public function assembleParams($url, \Zend_Oauth_Config_ConfigInterface $config, ?array $serviceProviderParams = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param bool $customParamsOnly
         *
         * @return string
         */
        public function toEncodedQueryString(array $params, $customParamsOnly = false)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param null|string $realm
         * @param bool $excludeCustomParams
         *
         * @return void
         */
        public function toAuthorizationHeader(array $params, $realm = null, $excludeCustomParams = true)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param string $signatureMethod
         * @param string $consumerSecret
         * @param null|string $tokenSecret
         * @param null|string $method
         * @param null|string $url
         *
         * @return string
         */
        public function sign(array $params, $signatureMethod, $consumerSecret, $tokenSecret = null, $method = null, $url = null)
        {
        }
        /**
         * @param mixed $query
         *
         * @return array<array-key, mixed>
         */
        public function parseQueryString($query)
        {
        }
        /**
         * @return string
         */
        public function generateNonce()
        {
        }
        /**
         * @return int
         */
        public function generateTimestamp()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function urlEncode($value)
        {
        }
    }
    class Zend_Oauth_Signature_Hmac extends \Zend_Oauth_Signature_SignatureAbstract
    {
        /**
         * @param array<array-key, mixed> $params
         * @param mixed|null $method
         * @param mixed|null $url
         *
         * @return string
         */
        public function sign(array $params, $method = null, $url = null)
        {
        }
    }
    class Zend_Oauth_Signature_Plaintext extends \Zend_Oauth_Signature_SignatureAbstract
    {
        /**
         * @param array<array-key, mixed> $params
         * @param null|string $method
         * @param null|string $url
         *
         * @return string
         */
        public function sign(array $params, $method = null, $url = null)
        {
        }
    }
    class Zend_Oauth_Signature_Rsa extends \Zend_Oauth_Signature_SignatureAbstract
    {
        /**
         * @param array<array-key, mixed> $params
         * @param null|string $method
         * @param null|string $url
         *
         * @return string
         */
        public function sign(array $params, $method = null, $url = null)
        {
        }
        /**
         * @return string
         */
        public function _assembleKey()
        {
        }
    }
    class Zend_Oauth_Signature_SignatureAbstract
    {
        /**
         * @var string
         */
        public $_hashAlgorithm;
        /**
         * @var string
         */
        public $_key;
        /**
         * @var string
         */
        public $_consumerSecret;
        /**
         * @var string
         */
        public $_tokenSecret;
        /**
         * @param string $consumerSecret
         * @param null|string $tokenSecret
         * @param null|string $hashAlgo
         *
         * @return void
         */
        public function __construct($consumerSecret, $tokenSecret = null, $hashAlgo = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param null|string $method
         * @param null|string $url
         *
         * @return string
         */
        public abstract function sign(array $params, $method = null, $url = null);
        /**
         * @param string $url
         *
         * @return string
         */
        public function normaliseBaseSignatureUrl($url)
        {
        }
        /**
         * @return string
         */
        public function _assembleKey()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param null|string $method
         * @param null|string $url
         *
         * @return string
         */
        public function _getBaseSignatureString(array $params, $method = null, $url = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return string
         */
        public function _toByteValueOrderedQueryString(array $params)
        {
        }
    }
    class Zend_Oauth_Token
    {
        public const TOKEN_PARAM_KEY = 'oauth_token';
        public const TOKEN_SECRET_PARAM_KEY = 'oauth_token_secret';
        public const TOKEN_PARAM_CALLBACK_CONFIRMED = 'oauth_callback_confirmed';
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var Zend_Http_Response
         */
        public $_response;
        /**
         * @var Zend_Oauth_Http_Utility
         */
        public $_httpUtility;
        /**
         * @param Zend_Http_Response|null $response
         * @param Zend_Oauth_Http_Utility|null $utility
         *
         * @return void
         */
        public function __construct(?\Zend_Http_Response $response = null, ?\Zend_Oauth_Http_Utility $utility = null)
        {
        }
        /**
         * @return bool
         */
        public function isValid()
        {
        }
        /**
         * @return Zend_Http_Response
         */
        public function getResponse()
        {
        }
        /**
         * @param string $secret
         *
         * @return Zend_Oauth_Token
         */
        public function setTokenSecret($secret)
        {
        }
        /**
         * @return string
         */
        public function getTokenSecret()
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return Zend_Oauth_Token
         */
        public function setParam($key, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Oauth_Token
         */
        public function setParams(array $params)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getParam($key)
        {
        }
        /**
         * @param string $token
         *
         * @return Zend_Oauth_Token
         */
        public function setToken($token)
        {
        }
        /**
         * @return string
         */
        public function getToken()
        {
        }
        /**
         * @return string
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return void
         */
        public function __set($key, $value)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param Zend_Http_Response $response
         *
         * @return array<array-key, mixed>
         */
        public function _parseParameters(\Zend_Http_Response $response)
        {
        }
        public function __sleep()
        {
        }
        public function __wakeup()
        {
        }
    }
    class Zend_Oauth_Token_Access extends \Zend_Oauth_Token
    {
        public const TOKEN_PARAM_KEY = 'oauth_token';
        public const TOKEN_SECRET_PARAM_KEY = 'oauth_token_secret';
        public const TOKEN_PARAM_CALLBACK_CONFIRMED = 'oauth_callback_confirmed';
        /**
         * @param string $url
         * @param Zend_Oauth_Config_ConfigInterface $config
         * @param array<array-key, mixed>|null $customParams
         * @param null|string $realm
         *
         * @return string
         */
        public function toHeader($url, \Zend_Oauth_Config_ConfigInterface $config, ?array $customParams = null, $realm = null)
        {
        }
        /**
         * @param mixed $url
         * @param Zend_Oauth_Config_ConfigInterface $config
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         */
        public function toQueryString($url, \Zend_Oauth_Config_ConfigInterface $config, ?array $params = null)
        {
        }
        /**
         * @param array<array-key, mixed> $oauthOptions
         * @param null|string $uri
         * @param Zend_Config|array<array-key, mixed>|null $config
         * @param bool $excludeCustomParamsFromHeader
         *
         * @return Zend_Oauth_Client
         */
        public function getHttpClient(array $oauthOptions, $uri = null, $config = null, $excludeCustomParamsFromHeader = true)
        {
        }
    }
    class Zend_Oauth_Token_AuthorizedRequest extends \Zend_Oauth_Token
    {
        public const TOKEN_PARAM_KEY = 'oauth_token';
        public const TOKEN_SECRET_PARAM_KEY = 'oauth_token_secret';
        public const TOKEN_PARAM_CALLBACK_CONFIRMED = 'oauth_callback_confirmed';
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param array<array-key, mixed>|null $data
         * @param Zend_Oauth_Http_Utility|null $utility
         *
         * @return void
         */
        public function __construct(?array $data = null, ?\Zend_Oauth_Http_Utility $utility = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getData()
        {
        }
        /**
         * @return bool
         */
        public function isValid()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _parseData()
        {
        }
    }
    class Zend_Oauth_Token_Request extends \Zend_Oauth_Token
    {
        public const TOKEN_PARAM_KEY = 'oauth_token';
        public const TOKEN_SECRET_PARAM_KEY = 'oauth_token_secret';
        public const TOKEN_PARAM_CALLBACK_CONFIRMED = 'oauth_callback_confirmed';
        /**
         * @param Zend_Http_Response|null $response
         * @param Zend_Oauth_Http_Utility|null $utility
         */
        public function __construct(?\Zend_Http_Response $response = null, ?\Zend_Oauth_Http_Utility $utility = null)
        {
        }
    }
    class Zend_OpenId
    {
        public const DH_P = 'dcf93a0b883972ec0e19989ac5a2ce310e1d37717e8d9571bb7623731866e61ef75a2e27898b057f9891c2e27a639c3f29b60814581cd3b2ca3986d2683705577d45c2e7e52dc81c7a171876e5cea74b1448bfdfaf18828efd2519f14e45e3826634af1949e5b535cc829a483b8a76223e5d490a257f05bdff16f2fb22c583ab';
        public const DH_G = '02';
        public const NS_2_0 = 'http://specs.openid.net/auth/2.0';
        public static $exitOnRedirect = true;
        public static $selfUrl = null;
        /**
         * @param null|string $selfUrl
         *
         * @return string
         */
        public static function setSelfUrl($selfUrl = null)
        {
        }
        /**
         * @return string
         */
        public static function selfUrl()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public static function absoluteUrl($url)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return string
         */
        public static function paramsToQuery($params)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public static function normalizeUrl(&$id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public static function normalize(&$id)
        {
        }
        /**
         * @param string $url
         * @param array<array-key, mixed>|null $params
         * @param Zend_Controller_Response_Abstract|null $response
         * @param string $method
         */
        public static function redirect($url, $params = null, ?\Zend_Controller_Response_Abstract $response = null, $method = 'GET')
        {
        }
        /**
         * @param int $len
         *
         * @return string
         */
        public static function randomBytes($len)
        {
        }
        /**
         * @param string $func
         * @param string $data
         *
         * @return string
         *
         * @throws Zend_OpenId_Exception
         */
        public static function digest($func, $data)
        {
        }
        /**
         * @param string $macFunc
         * @param string $data
         * @param string $secret
         *
         * @return string
         */
        public static function hashHmac($macFunc, $data, $secret)
        {
        }
        /**
         * @param string $bin
         *
         * @return mixed
         *
         * @throws Zend_OpenId_Exception
         */
        public static function binToBigNum($bin)
        {
        }
        /**
         * @param mixed $bn
         *
         * @return string
         *
         * @throws Zend_OpenId_Exception
         */
        public static function bigNumToBin($bn)
        {
        }
        /**
         * @param string $p
         * @param string $g
         * @param null|string $priv_key
         *
         * @return mixed
         */
        public static function createDhKey($p, $g, $priv_key = null)
        {
        }
        /**
         * @param mixed $dh
         *
         * @return array<array-key, mixed>
         */
        public static function getDhKeyDetails($dh)
        {
        }
        /**
         * @param string $pub_key
         * @param mixed $dh
         *
         * @return string
         *
         * @throws Zend_OpenId_Exception
         */
        public static function computeDhSecret($pub_key, $dh)
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public static function btwoc($str)
        {
        }
        /**
         * @param string $str
         *
         * @return int
         */
        public static function strlen($str)
        {
        }
    }
    class Zend_OpenId_Consumer
    {
        public $_signParams = 'Psalm could not infer this type';
        /**
         * @var Zend_OpenId_Consumer_Storage
         */
        public $_storage;
        /**
         * @var Zend_OpenId_Consumer_Storage
         */
        public $_dumbMode;
        /**
         * @var array<array-key, mixed>
         */
        public $_cache;
        /**
         * @var Zend_Http_Client
         */
        public $_httpClient;
        /**
         * @var Zend_Session_Namespace
         */
        public $_session;
        /**
         * @var string
         */
        public $_error;
        /**
         * @param Zend_OpenId_Consumer_Storage|null $storage
         * @param bool $dumbMode
         */
        public function __construct(?\Zend_OpenId_Consumer_Storage $storage = null, $dumbMode = false)
        {
        }
        /**
         * @param string $id
         * @param null|string $returnTo
         * @param null|string $root
         * @param mixed|null $extensions
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return bool
         */
        public function login($id, $returnTo = null, $root = null, $extensions = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @param string $id
         * @param null|string $returnTo
         * @param null|string $root
         * @param mixed|null $extensions
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return bool
         */
        public function check($id, $returnTo = null, $root = null, $extensions = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param string $identity
         * @param mixed|null $extensions
         *
         * @return bool
         */
        public function verify($params, &$identity = '', $extensions = null)
        {
        }
        /**
         * @param string $url
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param int $expires
         *
         * @return void
         */
        public function _addAssociation($url, $handle, $macFunc, $secret, $expires)
        {
        }
        /**
         * @param string $url
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param int $expires
         *
         * @return void
         */
        public function _getAssociation($url, &$handle, &$macFunc, &$secret, &$expires)
        {
        }
        /**
         * @param string $url
         * @param string $method
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         */
        public function _httpRequest($url, $method = 'GET', array $params = array(), &$status = null)
        {
        }
        /**
         * @param string $url
         * @param float $version
         * @param null|string $priv_key
         *
         * @return bool
         */
        public function _associate($url, $version, $priv_key = null)
        {
        }
        /**
         * @param string $id
         * @param string $server
         * @param float $version
         *
         * @return bool
         */
        public function _discovery(&$id, &$server, &$version)
        {
        }
        /**
         * @param bool $immediate
         * @param string $id
         * @param null|string $returnTo
         * @param null|string $root
         * @param mixed|null $extensions
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return bool
         */
        public function _checkId($immediate, $id, $returnTo = null, $root = null, $extensions = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @param Zend_Http_Client $client
         */
        public function setHttpClient($client)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        /**
         * @param Zend_Session_Namespace $session
         */
        public function setSession(\Zend_Session_Namespace $session)
        {
        }
        /**
         * @return Zend_Session_Namespace
         */
        public function getSession()
        {
        }
        /**
         * @param string $message
         */
        public function _setError($message)
        {
        }
        /**
         * @return string
         */
        public function getError()
        {
        }
    }
    class Zend_OpenId_Consumer_Storage
    {
        /**
         * @param string $url
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param long $expires
         *
         * @return void
         */
        public abstract function addAssociation($url, $handle, $macFunc, $secret, $expires);
        /**
         * @param string $url
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param long $expires
         *
         * @return bool
         */
        public abstract function getAssociation($url, &$handle, &$macFunc, &$secret, &$expires);
        /**
         * @param string $handle
         * @param string $url
         * @param string $macFunc
         * @param string $secret
         * @param long $expires
         *
         * @return bool
         */
        public abstract function getAssociationByHandle($handle, &$url, &$macFunc, &$secret, &$expires);
        /**
         * @param string $url
         *
         * @return void
         */
        public abstract function delAssociation($url);
        /**
         * @param string $id
         * @param string $realId
         * @param string $server
         * @param float $version
         * @param long $expires
         *
         * @return void
         */
        public abstract function addDiscoveryInfo($id, $realId, $server, $version, $expires);
        /**
         * @param string $id
         * @param string $realId
         * @param string $server
         * @param float $version
         * @param long $expires
         *
         * @return bool
         */
        public abstract function getDiscoveryInfo($id, &$realId, &$server, &$version, &$expires);
        /**
         * @param string $id
         *
         * @return bool
         */
        public abstract function delDiscoveryInfo($id);
        /**
         * @param string $provider
         * @param string $nonce
         *
         * @return bool
         */
        public abstract function isUniqueNonce($provider, $nonce);
        /**
         * @param null|string $date
         */
        public abstract function purgeNonces($date = null);
    }
    class Zend_OpenId_Consumer_Storage_File extends \Zend_OpenId_Consumer_Storage
    {
        /**
         * @var string
         */
        public $_dir;
        /**
         * @param null|string $dir
         *
         * @throws Zend_OpenId_Exception
         */
        public function __construct($dir = null)
        {
        }
        /**
         * @param string $url
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param long $expires
         *
         * @return bool
         */
        public function addAssociation($url, $handle, $macFunc, $secret, $expires)
        {
        }
        /**
         * @param string $url
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param long $expires
         *
         * @return bool
         */
        public function getAssociation($url, &$handle, &$macFunc, &$secret, &$expires)
        {
        }
        /**
         * @param string $handle
         * @param string $url
         * @param string $macFunc
         * @param string $secret
         * @param long $expires
         *
         * @return bool
         */
        public function getAssociationByHandle($handle, &$url, &$macFunc, &$secret, &$expires)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public function delAssociation($url)
        {
        }
        /**
         * @param string $id
         * @param string $realId
         * @param string $server
         * @param float $version
         * @param long $expires
         *
         * @return bool
         */
        public function addDiscoveryInfo($id, $realId, $server, $version, $expires)
        {
        }
        /**
         * @param string $id
         * @param string $realId
         * @param string $server
         * @param float $version
         * @param long $expires
         *
         * @return bool
         */
        public function getDiscoveryInfo($id, &$realId, &$server, &$version, &$expires)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function delDiscoveryInfo($id)
        {
        }
        /**
         * @param string $provider
         * @param string $nonce
         *
         * @return bool
         */
        public function isUniqueNonce($provider, $nonce)
        {
        }
        /**
         * @param mixed|null $date
         */
        public function purgeNonces($date = null)
        {
        }
    }
    class Zend_OpenId_Exception extends \Zend_Exception
    {
        public const UNSUPPORTED_DIGEST = 1;
        public const UNSUPPORTED_LONG_MATH = 2;
        public const ERROR_LONG_MATH = 3;
        public const ERROR_STORAGE = 4;
    }
    class Zend_OpenId_Extension
    {
        /**
         * @param mixed $extensions
         * @param string $func
         * @param mixed $params
         *
         * @return bool
         */
        public static function forAll($extensions, $func, &$params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function prepareRequest(&$params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function parseRequest($params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function prepareResponse(&$params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function parseResponse($params)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return bool
         */
        public function getTrustData(&$data)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return bool
         */
        public function checkTrustData($data)
        {
        }
    }
    class Zend_OpenId_Extension_Sreg extends \Zend_OpenId_Extension
    {
        public const NAMESPACE_1_1 = 'http://openid.net/extensions/sreg/1.1';
        /**
         * @var array<array-key, mixed>|null
         */
        public $_props;
        public $_policy_url;
        public $_version;
        /**
         * @param array<array-key, mixed>|null $props
         * @param null|string $policy_url
         * @param float $version
         *
         * @return array<array-key, mixed>
         */
        public function __construct(?array $props = null, $policy_url = null, $version = 1.0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getProperties()
        {
        }
        /**
         * @return string
         */
        public function getPolicyUrl()
        {
        }
        /**
         * @return float
         */
        public function getVersion()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getSregProperties()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function prepareRequest(&$params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function parseRequest($params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function prepareResponse(&$params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         */
        public function parseResponse($params)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return bool
         */
        public function getTrustData(&$data)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return bool
         */
        public function checkTrustData($data)
        {
        }
    }
    class Zend_OpenId_Provider
    {
        /**
         * @var Zend_OpenId_Provider_Storage
         */
        public $_storage;
        /**
         * @var Zend_OpenId_Provider_User
         */
        public $_user;
        /**
         * @var int
         */
        public $_sessionTtl;
        /**
         * @var string
         */
        public $_loginUrl;
        /**
         * @var string
         */
        public $_trustUrl;
        /**
         * @var string
         */
        public $_opEndpoint;
        /**
         * @param null|string $loginUrl
         * @param null|string $trustUrl
         * @param Zend_OpenId_Provider_User|null $user
         * @param Zend_OpenId_Provider_Storage|null $storage
         * @param int $sessionTtl
         */
        public function __construct($loginUrl = null, $trustUrl = null, ?\Zend_OpenId_Provider_User $user = null, ?\Zend_OpenId_Provider_Storage $storage = null, $sessionTtl = 3600)
        {
        }
        /**
         * @param string $url
         *
         * @return null
         */
        public function setOpEndpoint($url)
        {
        }
        /**
         * @param string $id
         * @param string $password
         *
         * @return bool
         */
        public function register($id, $password)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function hasUser($id)
        {
        }
        /**
         * @param string $id
         * @param string $password
         *
         * @return bool
         */
        public function login($id, $password)
        {
        }
        /**
         * @return void
         */
        public function logout()
        {
        }
        /**
         * @return mixed
         */
        public function getLoggedInUser()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         */
        public function getSiteRoot($params)
        {
        }
        /**
         * @param string $root
         * @param mixed|null $extensions
         *
         * @return bool
         */
        public function allowSite($root, $extensions = null)
        {
        }
        /**
         * @param string $root
         *
         * @return bool
         */
        public function denySite($root)
        {
        }
        /**
         * @param string $root
         *
         * @return bool
         */
        public function delSite($root)
        {
        }
        /**
         * @return mixed
         */
        public function getTrustedSites()
        {
        }
        /**
         * @param array<array-key, mixed>|null $params
         * @param mixed|null $extensions
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return mixed
         */
        public function handle($params = null, $extensions = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @param string $func
         *
         * @return mixed
         */
        public function _genSecret($func)
        {
        }
        /**
         * @param float $version
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>
         */
        public function _associate($version, $params)
        {
        }
        /**
         * @param float $version
         * @param array<array-key, mixed> $params
         * @param bool $immediate
         * @param mixed|null $extensions
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return array<array-key, mixed>
         */
        public function _checkId($version, $params, $immediate, $extensions = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         * @param mixed|null $extensions
         * @param Zend_Controller_Response_Abstract|null $response
         *
         * @return bool
         */
        public function respondToConsumer($params, $extensions = null, ?\Zend_Controller_Response_Abstract $response = null)
        {
        }
        /**
         * @param float $version
         * @param array<array-key, mixed> $ret
         * @param array<array-key, mixed> $params
         * @param mixed|null $extensions
         *
         * @return array<array-key, mixed>
         */
        public function _respond($version, $ret, $params, $extensions = null)
        {
        }
        /**
         * @param float $version
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>
         */
        public function _checkAuthentication($version, $params)
        {
        }
        /**
         * @param string $a
         * @param string $b
         *
         * @return bool
         */
        public function _secureStringCompare($a, $b)
        {
        }
    }
    class Zend_OpenId_Provider_Storage
    {
        /**
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param string $expires
         *
         * @return void
         */
        public abstract function addAssociation($handle, $macFunc, $secret, $expires);
        /**
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param string $expires
         *
         * @return bool
         */
        public abstract function getAssociation($handle, &$macFunc, &$secret, &$expires);
        /**
         * @param string $id
         * @param string $password
         *
         * @return bool
         */
        public abstract function addUser($id, $password);
        /**
         * @param string $id
         *
         * @return bool
         */
        public abstract function hasUser($id);
        /**
         * @param string $id
         * @param string $password
         *
         * @return bool
         */
        public abstract function checkUser($id, $password);
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public abstract function getTrustedSites($id);
        /**
         * @param string $id
         * @param string $site
         * @param mixed $trusted
         *
         * @return bool
         */
        public abstract function addSite($id, $site, $trusted);
    }
    class Zend_OpenId_Provider_Storage_File extends \Zend_OpenId_Provider_Storage
    {
        /**
         * @var string
         */
        public $_dir;
        /**
         * @param null|string $dir
         *
         * @throws Zend_OpenId_Exception
         */
        public function __construct($dir = null)
        {
        }
        /**
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param string $expires
         *
         * @return bool
         */
        public function addAssociation($handle, $macFunc, $secret, $expires)
        {
        }
        /**
         * @param string $handle
         * @param string $macFunc
         * @param string $secret
         * @param string $expires
         *
         * @return bool
         */
        public function getAssociation($handle, &$macFunc, &$secret, &$expires)
        {
        }
        /**
         * @param string $handle
         *
         * @return bool
         */
        public function delAssociation($handle)
        {
        }
        /**
         * @param string $id
         * @param string $password
         *
         * @return bool
         */
        public function addUser($id, $password)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function hasUser($id)
        {
        }
        /**
         * @param string $id
         * @param string $password
         *
         * @return bool
         */
        public function checkUser($id, $password)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function delUser($id)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         */
        public function getTrustedSites($id)
        {
        }
        /**
         * @param string $id
         * @param string $site
         * @param mixed $trusted
         *
         * @return bool
         */
        public function addSite($id, $site, $trusted)
        {
        }
    }
    class Zend_OpenId_Provider_User
    {
        /**
         * @param string $id
         *
         * @return bool
         */
        public abstract function setLoggedInUser($id);
        /**
         * @return mixed
         */
        public abstract function getLoggedInUser();
        /**
         * @return bool
         */
        public abstract function delLoggedInUser();
    }
    class Zend_OpenId_Provider_User_Session extends \Zend_OpenId_Provider_User
    {
        /**
         * @var Zend_Session_Namespace
         */
        public $_session;
        /**
         * @param Zend_Session_Namespace|null $session
         */
        public function __construct(?\Zend_Session_Namespace $session = null)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function setLoggedInUser($id)
        {
        }
        /**
         * @return mixed
         */
        public function getLoggedInUser()
        {
        }
        /**
         * @return bool
         */
        public function delLoggedInUser()
        {
        }
    }
    class Zend_Paginator implements \Countable, \IteratorAggregate
    {
        public const INTERNAL_ADAPTER = 'Zend_Paginator_Adapter_Internal';
        public const CACHE_TAG_PREFIX = 'Zend_Paginator_';
        /**
         * @var Zend_Loader_PluginLoader
         */
        public static $_adapterLoader;
        /**
         * @var Zend_Config
         */
        public static $_config;
        /**
         * @var string
         */
        public static $_defaultScrollingStyle;
        /**
         * @var int
         */
        public static $_defaultItemCountPerPage;
        /**
         * @var int
         */
        public static $_defaultPageRange;
        /**
         * @var Zend_Loader_PluginLoader
         */
        public static $_scrollingStyleLoader;
        /**
         * @var Zend_Cache_Core
         */
        public static $_cache;
        /**
         * @var bool
         */
        public $_cacheEnabled;
        /**
         * @var Zend_Paginator_Adapter_Interface
         */
        public $_adapter;
        /**
         * @var int
         */
        public $_currentItemCount;
        /**
         * @var Traversable
         */
        public $_currentItems;
        /**
         * @var int
         */
        public $_currentPageNumber;
        /**
         * @var Zend_Filter_Interface
         */
        public $_filter;
        /**
         * @var int
         */
        public $_itemCountPerPage;
        /**
         * @var int
         */
        public $_pageCount;
        /**
         * @var int
         */
        public $_pageRange;
        /**
         * @var array<array-key, mixed>
         */
        public $_pages;
        /**
         * @var Zend_View_Interface
         */
        public $_view;
        /**
         * @param string $prefix
         * @param string $path
         */
        public static function addAdapterPrefixPath($prefix, $path)
        {
        }
        /**
         * @param array<array-key, mixed> $prefixPaths
         */
        public static function addAdapterPrefixPaths(array $prefixPaths)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         */
        public static function addScrollingStylePrefixPath($prefix, $path)
        {
        }
        /**
         * @param array<array-key, mixed> $prefixPaths
         */
        public static function addScrollingStylePrefixPaths(array $prefixPaths)
        {
        }
        /**
         * @param mixed $data
         * @param string $adapter
         * @param array<array-key, mixed>|null $prefixPaths
         *
         * @return Zend_Paginator
         */
        public static function factory($data, $adapter, ?array $prefixPaths = null)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function getAdapterLoader()
        {
        }
        /**
         * @param Zend_Config $config
         */
        public static function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @return string
         */
        public static function getDefaultScrollingStyle()
        {
        }
        /**
         * @return int
         */
        public static function getDefaultItemCountPerPage()
        {
        }
        /**
         * @param int $count
         */
        public static function setDefaultItemCountPerPage($count)
        {
        }
        /**
         * @return int
         */
        public static function getDefaultPageRange()
        {
        }
        /**
         * @param int $count
         */
        public static function setDefaultPageRange($count)
        {
        }
        /**
         * @param Zend_Cache_Core $cache
         */
        public static function setCache(\Zend_Cache_Core $cache)
        {
        }
        /**
         * @param string $scrollingStyle
         */
        public static function setDefaultScrollingStyle($scrollingStyle = 'Sliding')
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function getScrollingStyleLoader()
        {
        }
        /**
         * @param Zend_Paginator_AdapterAggregate|Zend_Paginator_Adapter_Interface $adapter
         */
        public function __construct($adapter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param bool $enable
         *
         * @return Zend_Paginator
         */
        public function setCacheEnabled($enable)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return int
         */
        public function getTotalItemCount()
        {
        }
        /**
         * @param int|null $pageNumber
         *
         * @return Zend_Paginator
         */
        public function clearPageItemCache($pageNumber = null)
        {
        }
        /**
         * @param int $relativeItemNumber
         * @param int|null $pageNumber
         *
         * @return int
         */
        public function getAbsoluteItemNumber($relativeItemNumber, $pageNumber = null)
        {
        }
        /**
         * @return Zend_Paginator_Adapter_Interface
         */
        public function getAdapter()
        {
        }
        /**
         * @return int
         */
        public function getCurrentItemCount()
        {
        }
        /**
         * @return Traversable
         */
        public function getCurrentItems()
        {
        }
        /**
         * @return int
         */
        public function getCurrentPageNumber()
        {
        }
        /**
         * @param int $pageNumber
         *
         * @return Zend_Paginator
         */
        public function setCurrentPageNumber($pageNumber)
        {
        }
        /**
         * @return Zend_Filter_Interface
         */
        public function getFilter()
        {
        }
        /**
         * @param Zend_Filter_Interface $filter
         *
         * @return Zend_Paginator
         */
        public function setFilter(\Zend_Filter_Interface $filter)
        {
        }
        /**
         * @param int $itemNumber
         * @param int|null $pageNumber
         *
         * @return mixed
         */
        public function getItem($itemNumber, $pageNumber = null)
        {
        }
        /**
         * @return int
         */
        public function getItemCountPerPage()
        {
        }
        /**
         * @param int $itemCountPerPage
         *
         * @return Zend_Paginator
         */
        public function setItemCountPerPage($itemCountPerPage = -1)
        {
        }
        /**
         * @param mixed $items
         *
         * @return int
         */
        public function getItemCount($items)
        {
        }
        /**
         * @return Traversable
         */
        public function getItemsByPage($pageNumber)
        {
        }
        /**
         * @return Traversable
         */
        public function getIterator()
        {
        }
        /**
         * @return int
         */
        public function getPageRange()
        {
        }
        /**
         * @param int $pageRange
         *
         * @return Zend_Paginator
         */
        public function setPageRange($pageRange)
        {
        }
        /**
         * @param null|string $scrollingStyle
         *
         * @return array<array-key, mixed>
         */
        public function getPages($scrollingStyle = null)
        {
        }
        /**
         * @param int $lowerBound
         * @param int $upperBound
         *
         * @return array<array-key, mixed>
         */
        public function getPagesInRange($lowerBound, $upperBound)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPageItemCache()
        {
        }
        /**
         * @return Zend_View_Interface|null
         */
        public function getView()
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return Zend_Paginator
         */
        public function setView(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @param int $itemNumber
         *
         * @return int
         */
        public function normalizeItemNumber($itemNumber)
        {
        }
        /**
         * @param int $pageNumber
         *
         * @return int
         */
        public function normalizePageNumber($pageNumber)
        {
        }
        /**
         * @param Zend_View_Interface|null $view
         *
         * @return string
         */
        public function render(?\Zend_View_Interface $view = null)
        {
        }
        /**
         * @return string
         */
        public function toJson()
        {
        }
        /**
         * @return bool
         */
        public function _cacheEnabled()
        {
        }
        /**
         * @param int|null $page
         *
         * @return string
         */
        public function _getCacheId($page = null)
        {
        }
        /**
         * @return string
         */
        public function _getCacheInternalId()
        {
        }
        /**
         * @return int
         */
        public function _calculatePageCount()
        {
        }
        /**
         * @param null|string $scrollingStyle
         *
         * @return stdClass
         */
        public function _createPages($scrollingStyle = null)
        {
        }
        /**
         * @param null|string $scrollingStyle
         *
         * @return Zend_Paginator_ScrollingStyle_Interface
         */
        public function _loadScrollingStyle($scrollingStyle = null)
        {
        }
    }
    interface Zend_Paginator_AdapterAggregate
    {
        /**
         * @return Zend_Paginator_Adapter_Interface
         */
        public function getPaginatorAdapter();
    }
    class Zend_Paginator_Adapter_Array implements \Zend_Paginator_Adapter_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_array;
        /**
         * @var int
         */
        public $_count;
        /**
         * @param array<array-key, mixed> $array
         */
        public function __construct(array $array)
        {
        }
        /**
         * @param int $offset
         * @param int $itemCountPerPage
         *
         * @return array<array-key, mixed>
         */
        public function getItems($offset, $itemCountPerPage)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Paginator_Adapter_DbSelect implements \Zend_Paginator_Adapter_Interface
    {
        public const ROW_COUNT_COLUMN = 'zend_paginator_row_count';
        /**
         * @var Zend_Db_Select
         */
        public $_countSelect;
        /**
         * @var Zend_Db_Select
         */
        public $_select;
        /**
         * @var int
         */
        public $_rowCount;
        /**
         * @var string
         */
        public $_cacheIdentifier;
        /**
         * @param Zend_Db_Select $select
         */
        public function __construct(\Zend_Db_Select $select)
        {
        }
        /**
         * @return string
         */
        public function getCacheIdentifier()
        {
        }
        /**
         * @return Zend_Paginator_Adapter_DbSelect
         *
         * @throws Zend_Paginator_Exception
         */
        public function setRowCount($rowCount)
        {
        }
        /**
         * @param int $offset
         * @param int $itemCountPerPage
         *
         * @return array<array-key, mixed>
         */
        public function getItems($offset, $itemCountPerPage)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Db_Select
         */
        public function getCountSelect()
        {
        }
    }
    class Zend_Paginator_Adapter_DbTableSelect extends \Zend_Paginator_Adapter_DbSelect
    {
        public const ROW_COUNT_COLUMN = 'zend_paginator_row_count';
        /**
         * @param int $offset
         * @param int $itemCountPerPage
         *
         * @return Zend_Db_Table_Rowset_Abstract
         */
        public function getItems($offset, $itemCountPerPage)
        {
        }
    }
    interface Zend_Paginator_Adapter_Interface extends \Countable
    {
        /**
         * @param int $offset
         * @param int $itemCountPerPage
         *
         * @return array<array-key, mixed>
         */
        public function getItems($offset, $itemCountPerPage);
    }
    class Zend_Paginator_Adapter_Iterator implements \Zend_Paginator_Adapter_Interface
    {
        /**
         * @var Iterator
         */
        public $_iterator;
        /**
         * @var int
         */
        public $_count;
        /**
         * @param Iterator $iterator
         *
         * @throws Zend_Paginator_Exception
         */
        public function __construct(\Iterator $iterator)
        {
        }
        /**
         * @param int $offset
         * @param int $itemCountPerPage
         *
         * @return LimitIterator|array<array-key, mixed>
         */
        public function getItems($offset, $itemCountPerPage)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Paginator_Adapter_Null implements \Zend_Paginator_Adapter_Interface
    {
        /**
         * @var int
         */
        public $_count;
        /**
         * @param array<array-key, mixed> $count
         */
        public function __construct($count = 0)
        {
        }
        /**
         * @param int $offset
         * @param int $itemCountPerPage
         *
         * @return array<array-key, mixed>
         */
        public function getItems($offset, $itemCountPerPage)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Paginator_Exception extends \Zend_Exception
    {
    }
    class Zend_Paginator_ScrollingStyle_All implements \Zend_Paginator_ScrollingStyle_Interface
    {
        /**
         * @param Zend_Paginator $paginator
         * @param int|null $pageRange
         *
         * @return array<array-key, mixed>
         */
        public function getPages(\Zend_Paginator $paginator, $pageRange = null)
        {
        }
    }
    class Zend_Paginator_ScrollingStyle_Elastic extends \Zend_Paginator_ScrollingStyle_Sliding
    {
        /**
         * @param Zend_Paginator $paginator
         * @param int|null $pageRange
         *
         * @return array<array-key, mixed>
         */
        public function getPages(\Zend_Paginator $paginator, $pageRange = null)
        {
        }
    }
    interface Zend_Paginator_ScrollingStyle_Interface
    {
        /**
         * @param Zend_Paginator $paginator
         * @param int|null $pageRange
         *
         * @return array<array-key, mixed>
         */
        public function getPages(\Zend_Paginator $paginator, $pageRange = null);
    }
    class Zend_Paginator_ScrollingStyle_Jumping implements \Zend_Paginator_ScrollingStyle_Interface
    {
        /**
         * @param Zend_Paginator $paginator
         * @param int|null $pageRange
         *
         * @return array<array-key, mixed>
         */
        public function getPages(\Zend_Paginator $paginator, $pageRange = null)
        {
        }
    }
    class Zend_Paginator_ScrollingStyle_Sliding implements \Zend_Paginator_ScrollingStyle_Interface
    {
        /**
         * @param Zend_Paginator $paginator
         * @param int|null $pageRange
         *
         * @return array<array-key, mixed>
         */
        public function getPages(\Zend_Paginator $paginator, $pageRange = null)
        {
        }
    }
    class Zend_Paginator_SerializableLimitIterator extends \LimitIterator
    {
        /**
         * @var int
         */
        public $_offset;
        /**
         * @var int
         */
        public $_count;
        /**
         * @param Iterator $it
         * @param int $offset
         * @param int $count
         */
        public function __construct(\Iterator $it, $offset = 0, $count = -1)
        {
        }
        /**
         * @return string
         */
        public function serialize()
        {
        }
        /**
         * @param string $data
         */
        public function unserialize($data)
        {
        }
        /**
         * @param int $offset
         *
         * @return mixed
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param mixed $value
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Pdf
    {
        public const PDF_VERSION = '1.4';
        public const PDF_HEADER = '%PDF-1.4
%âãÏÓ
';
        public const PDF_FORM_FIELD_READONLY = 1;
        public const PDF_FORM_FIELD_REQUIRED = 2;
        public const PDF_FORM_FIELD_NOEXPORT = 4;
        /**
         * @var array<array-key, mixed>
         */
        public $pages;
        /**
         * @var array<array-key, mixed>
         */
        public $properties;
        /**
         * @var array<array-key, mixed>
         */
        public $_originalProperties;
        /**
         * @var string
         */
        public $_javaScript;
        /**
         * @var array<array-key, mixed>
         */
        public $_namedTargets;
        /**
         * @var array<array-key, mixed>
         */
        public $outlines;
        /**
         * @var array<array-key, mixed>
         */
        public $_originalOutlines;
        /**
         * @var int
         */
        public $_originalOpenOutlinesCount;
        /**
         * @var Zend_Pdf_Trailer
         */
        public $_trailer;
        /**
         * @var Zend_Pdf_ElementFactory_Interface
         */
        public $_objFactory;
        /**
         * @var Zend_Memory_Manager|null
         */
        public static $_memoryManager;
        /**
         * @var Zend_Pdf_Parser
         */
        public $_parser;
        /**
         * @var array<array-key, mixed>
         */
        public static $_inheritableAttributes;
        /**
         * @var array<array-key, mixed>
         */
        public $_formFields;
        /**
         * @var bool
         */
        public $_isNewDocument;
        /**
         * @var SplObjectStorage
         */
        public $_pageReferences;
        /**
         * @var array<array-key, mixed>
         */
        public $_pageNumbers;
        /**
         * @return Zend_Memory_Manager
         */
        public static function getMemoryManager()
        {
        }
        /**
         * @param Zend_Memory_Manager $memoryManager
         */
        public static function setMemoryManager(\Zend_Memory_Manager $memoryManager)
        {
        }
        /**
         * @param null|string $source
         * @param int|null $revision
         *
         * @return Zend_Pdf
         */
        public static function parse(&$source = null, $revision = null)
        {
        }
        /**
         * @param null|string $source
         * @param int|null $revision
         *
         * @return Zend_Pdf
         */
        public static function load($source = null, $revision = null)
        {
        }
        /**
         * @param string $filename
         * @param bool $updateOnly
         *
         * @throws Zend_Pdf_Exception
         */
        public function save($filename, $updateOnly = false)
        {
        }
        /**
         * @param null|string $source
         * @param int|null $revision
         * @param bool $load
         *
         * @return Zend_Pdf
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($source = null, $revision = null, $load = false)
        {
        }
        /**
         * @return int
         */
        public function revisions()
        {
        }
        /**
         * @param int $steps
         */
        public function rollback($steps)
        {
        }
        /**
         * @param Zend_Pdf_Element_Reference $pages
         * @param array<array-key, mixed>|null $attributes
         *
         * @throws Zend_Pdf_Exception
         */
        public function _loadPages(\Zend_Pdf_Element_Reference $pages, $attributes = array())
        {
        }
        /**
         * @param Zend_Pdf_Element_Reference $root
         * @param string $pdfHeaderVersion
         *
         * @throws Zend_Pdf_Exception
         */
        public function _loadNamedDestinations(\Zend_Pdf_Element_Reference $root, $pdfHeaderVersion)
        {
        }
        /**
         * @param Zend_Pdf_Element_Reference $root
         *
         * @throws Zend_Pdf_Exception
         */
        public function _loadOutlines(\Zend_Pdf_Element_Reference $root)
        {
        }
        /**
         * @param Zend_Pdf_Element_Reference $root
         */
        public function _loadJavaScript(\Zend_Pdf_Element_Reference $root)
        {
        }
        /**
         * @param Zend_Pdf_Element_Reference $root
         */
        public function _loadFormFields(\Zend_Pdf_Element_Reference $root)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTextFieldNames()
        {
        }
        /**
         * @param string $name
         * @param string $value
         *
         * @throws Zend_Pdf_Exception
         */
        public function setTextField($name, $value)
        {
        }
        /**
         * @param string $name
         * @param mixed $bitmask
         *
         * @throws Zend_Pdf_Exception
         */
        public function setTextFieldProperties($name, $bitmask)
        {
        }
        /**
         * @param string $name
         */
        public function markTextFieldAsReadOnly($name)
        {
        }
        public function _dumpPages()
        {
        }
        public function _dumpNamedDestinations()
        {
        }
        public function _dumpOutlines()
        {
        }
        /**
         * @param mixed $param1
         * @param mixed|null $param2
         *
         * @return Zend_Pdf_Page
         */
        public function newPage($param1, $param2 = null)
        {
        }
        /**
         * @return string
         */
        public function getMetadata()
        {
        }
        /**
         * @param string $metadata
         */
        public function setMetadata($metadata)
        {
        }
        /**
         * @return string
         */
        public function getJavaScript()
        {
        }
        /**
         * @return Zend_Pdf_Target
         */
        public function getOpenAction()
        {
        }
        /**
         * @param Zend_Pdf_Target|null $openAction
         */
        public function setOpenAction(?\Zend_Pdf_Target $openAction = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getNamedDestinations()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Pdf_Action_GoTo|Zend_Pdf_Destination_Explicit
         */
        public function getNamedDestination($name)
        {
        }
        /**
         * @param string $name
         * @param Zend_Pdf_Action_GoTo|Zend_Pdf_Destination_Explicit|null $destination
         *
         * @throws Zend_Pdf_Exception
         */
        public function setNamedDestination($name, $destination = null)
        {
        }
        /**
         * @return Zend_Pdf
         */
        public function _refreshPagesHash()
        {
        }
        /**
         * @param Zend_Pdf_Destination $destination
         * @param bool $refreshPageCollectionHashes
         *
         * @return Zend_Pdf_Page|null
         *
         * @throws Zend_Pdf_Exception
         */
        public function resolveDestination(\Zend_Pdf_Destination $destination, $refreshPageCollectionHashes = true)
        {
        }
        /**
         * @param Zend_Pdf_Action $action
         * @param bool $refreshPageCollectionHashes
         *
         * @return Zend_Pdf_Action|null
         */
        public function _cleanUpAction(\Zend_Pdf_Action $action, $refreshPageCollectionHashes = true)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Pdf_Exception
         */
        public function extractFonts()
        {
        }
        /**
         * @param string $fontName
         *
         * @return Zend_Pdf_Resource_Font_Extracted|null
         *
         * @throws Zend_Pdf_Exception
         */
        public function extractFont($fontName)
        {
        }
        /**
         * @param bool $newSegmentOnly
         * @param null|resource $outputStream
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function render($newSegmentOnly = false, $outputStream = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $javaScript
         */
        public function setJavaScript($javaScript)
        {
        }
        public function resetJavaScript()
        {
        }
        /**
         * @param array<array-key, mixed>|string $javaScript
         *
         * @throws Zend_Pdf_Exception
         */
        public function addJavaScript($javaScript)
        {
        }
        /**
         * @param int|null $timestamp
         *
         * @return string
         */
        public static function pdfDate($timestamp = null)
        {
        }
    }
    class Zend_Pdf_Action extends \Zend_Pdf_Target
    {
        /**
         * @var Zend_Pdf_Element_Dictionary|Zend_Pdf_Element_Object|Zend_Pdf_Element_Reference
         */
        public $_actionDictionary;
        /**
         * @var array<array-key, mixed>
         */
        public $_originalNextList;
        /**
         * @var array<array-key, mixed>
         */
        public $next;
        /**
         * @param Zend_Pdf_Element_Dictionary $dictionary
         * @param SplObjectStorage $processedActions
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $dictionary, \SplObjectStorage $processedActions)
        {
        }
        /**
         * @param Zend_Pdf_Element $dictionary
         * @param SplObjectStorage|null $processedActions
         *
         * @return Zend_Pdf_Action
         *
         * @throws Zend_Pdf_Exception
         */
        public static function load(\Zend_Pdf_Element $dictionary, ?\SplObjectStorage $processedActions = null)
        {
        }
        /**
         * @return Zend_Pdf_Element
         */
        public function getResource()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param SplObjectStorage|null $processedActions
         *
         * @return Zend_Pdf_Element_Object|Zend_Pdf_Element_Reference
         */
        public function dumpAction(\Zend_Pdf_ElementFactory_Interface $factory, ?\SplObjectStorage $processedActions = null)
        {
        }
        /**
         * @return Zend_Pdf_Action
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        public function next()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return Zend_Pdf_Action|null
         */
        public function getChildren()
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Pdf_Action_GoTo extends \Zend_Pdf_Action
    {
        /**
         * @var Zend_Pdf_Destination
         */
        public $_destination;
        /**
         * @param Zend_Pdf_Element_Dictionary $dictionary
         * @param SplObjectStorage $processedActions
         */
        public function __construct(\Zend_Pdf_Element $dictionary, \SplObjectStorage $processedActions)
        {
        }
        /**
         * @param Zend_Pdf_Destination|string $destination
         *
         * @return Zend_Pdf_Action_GoTo
         */
        public static function create($destination)
        {
        }
        /**
         * @param Zend_Pdf_Destination|string $destination
         *
         * @return Zend_Pdf_Action_GoTo
         */
        public function setDestination(\Zend_Pdf_Destination $destination)
        {
        }
        /**
         * @return Zend_Pdf_Destination
         */
        public function getDestination()
        {
        }
    }
    class Zend_Pdf_Action_GoTo3DView extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_GoToE extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_GoToR extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_Hide extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_ImportData extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_JavaScript extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_Launch extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_Movie extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_Named extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_Rendition extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_ResetForm extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_SetOCGState extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_Sound extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_SubmitForm extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_Thread extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_Trans extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Action_URI extends \Zend_Pdf_Action
    {
        /**
         * @param Zend_Pdf_Element_Dictionary $dictionary
         * @param SplObjectStorage $processedActions
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $dictionary, \SplObjectStorage $processedActions)
        {
        }
        /**
         * @param string $uri
         *
         * @return true
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _validateUri($uri)
        {
        }
        /**
         * @param string $uri
         * @param bool $isMap
         *
         * @return Zend_Pdf_Action_URI
         */
        public static function create($uri, $isMap = false)
        {
        }
        /**
         * @param string $uri
         *
         * @return Zend_Pdf_Action_URI
         */
        public function setUri($uri)
        {
        }
        /**
         * @return string
         */
        public function getUri()
        {
        }
        /**
         * @param bool $isMap
         *
         * @return Zend_Pdf_Action_URI
         */
        public function setIsMap($isMap)
        {
        }
        /**
         * @return bool
         */
        public function getIsMap()
        {
        }
    }
    class Zend_Pdf_Action_Unknown extends \Zend_Pdf_Action
    {
    }
    class Zend_Pdf_Annotation
    {
        /**
         * @var Zend_Pdf_Element_Dictionary|Zend_Pdf_Element_Object|Zend_Pdf_Element_Reference
         */
        public $_annotationDictionary;
        /**
         * @return Zend_Pdf_Element
         */
        public function getResource()
        {
        }
        /**
         * @param float $bottom
         *
         * @return Zend_Pdf_Annotation
         */
        public function setBottom($bottom)
        {
        }
        /**
         * @return float
         */
        public function getBottom()
        {
        }
        /**
         * @param float $top
         *
         * @return Zend_Pdf_Annotation
         */
        public function setTop($top)
        {
        }
        /**
         * @return float
         */
        public function getTop()
        {
        }
        /**
         * @param float $right
         *
         * @return Zend_Pdf_Annotation
         */
        public function setRight($right)
        {
        }
        /**
         * @return float
         */
        public function getRight()
        {
        }
        /**
         * @param float $left
         *
         * @return Zend_Pdf_Annotation
         */
        public function setLeft($left)
        {
        }
        /**
         * @return float
         */
        public function getLeft()
        {
        }
        /**
         * @return string
         */
        public function getText()
        {
        }
        /**
         * @param string $text
         *
         * @return Zend_Pdf_Annotation
         */
        public function setText($text)
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $annotationDictionary)
        {
        }
        /**
         * @param Zend_Pdf_Element $resource
         *
         * @return Zend_Pdf_Annotation
         */
        public static function load(\Zend_Pdf_Element $resource)
        {
        }
    }
    class Zend_Pdf_Annotation_FileAttachment extends \Zend_Pdf_Annotation
    {
        /**
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $annotationDictionary)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param string $fileSpecification
         *
         * @return Zend_Pdf_Annotation_FileAttachment
         */
        public static function create($x1, $y1, $x2, $y2, $fileSpecification)
        {
        }
    }
    class Zend_Pdf_Annotation_Link extends \Zend_Pdf_Annotation
    {
        /**
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $annotationDictionary)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param Zend_Pdf_Target|string $target
         *
         * @return Zend_Pdf_Annotation_Link
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($x1, $y1, $x2, $y2, $target)
        {
        }
        /**
         * @param Zend_Pdf_Target|string $target
         *
         * @return Zend_Pdf_Annotation_Link
         */
        public function setDestination($target)
        {
        }
        /**
         * @return Zend_Pdf_Target|null
         */
        public function getDestination()
        {
        }
    }
    class Zend_Pdf_Annotation_Markup extends \Zend_Pdf_Annotation
    {
        public const SUBTYPE_HIGHLIGHT = 'Highlight';
        public const SUBTYPE_UNDERLINE = 'Underline';
        public const SUBTYPE_SQUIGGLY = 'Squiggly';
        public const SUBTYPE_STRIKEOUT = 'StrikeOut';
        /**
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $annotationDictionary)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param string $text
         * @param string $subType
         * @param array<array-key, mixed> $quadPoints
         *
         * @return Zend_Pdf_Annotation_Markup
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($x1, $y1, $x2, $y2, $text, $subType, $quadPoints)
        {
        }
    }
    class Zend_Pdf_Annotation_Text extends \Zend_Pdf_Annotation
    {
        /**
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $annotationDictionary)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param string $text
         *
         * @return Zend_Pdf_Annotation_Text
         */
        public static function create($x1, $y1, $x2, $y2, $text)
        {
        }
    }
    class Zend_Pdf_Canvas extends \Zend_Pdf_Canvas_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_procSet;
        /**
         * @var float
         */
        public $_width;
        /**
         * @var float
         */
        public $_height;
        public $_resources = 'Psalm could not infer this type';
        /**
         * @param float $width
         * @param float $height
         */
        public function __construct($width, $height)
        {
        }
        /**
         * @param string $procSetName
         */
        public function _addProcSet($procSetName)
        {
        }
        /**
         * @param string $type
         * @param Zend_Pdf_Resource $resource
         *
         * @return string
         */
        public function _attachResource($type, \Zend_Pdf_Resource $resource)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getResources()
        {
        }
        public function getContents()
        {
        }
        /**
         * @return float
         */
        public function getHeight()
        {
        }
        /**
         * @return float
         */
        public function getWidth()
        {
        }
    }
    class Zend_Pdf_Canvas_Abstract implements \Zend_Pdf_Canvas_Interface
    {
        /**
         * @var string
         */
        public $_contents;
        /**
         * @var Zend_Pdf_Resource_Font
         */
        public $_font;
        /**
         * @var float
         */
        public $_fontSize;
        /**
         * @var Zend_Pdf_Style
         */
        public $_style;
        /**
         * @var int
         */
        public $_saveCount;
        /**
         * @param string $procSetName
         */
        public abstract function _addProcSet($procSetName);
        /**
         * @param string $type
         * @param Zend_Pdf_Resource $resource
         *
         * @return string
         */
        public abstract function _attachResource($type, \Zend_Pdf_Resource $resource);
        /**
         * @param Zend_Pdf_Canvas_Interface $canvas
         * @param float $x1
         * @param float $y1
         * @param float|null $x2
         * @param float|null $y2
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawCanvas(\Zend_Pdf_Canvas_Interface $canvas, $x1, $y1, $x2 = null, $y2 = null)
        {
        }
        /**
         * @param Zend_Pdf_Color $color
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setFillColor(\Zend_Pdf_Color $color)
        {
        }
        /**
         * @param Zend_Pdf_Color $color
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setLineColor(\Zend_Pdf_Color $color)
        {
        }
        /**
         * @param float $width
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setLineWidth($width)
        {
        }
        /**
         * @param mixed $pattern
         * @param array<array-key, mixed> $phase
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setLineDashingPattern($pattern, $phase = 0)
        {
        }
        /**
         * @param Zend_Pdf_Resource_Font $font
         * @param float $fontSize
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setFont(\Zend_Pdf_Resource_Font $font, $fontSize)
        {
        }
        /**
         * @param Zend_Pdf_Style $style
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setStyle(\Zend_Pdf_Style $style)
        {
        }
        /**
         * @return Zend_Pdf_Resource_Font
         */
        public function getFont()
        {
        }
        /**
         * @return float
         */
        public function getFontSize()
        {
        }
        /**
         * @return Zend_Pdf_Style
         */
        public function getStyle()
        {
        }
        /**
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function saveGS()
        {
        }
        /**
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function restoreGS()
        {
        }
        /**
         * @param float $alpha
         * @param string $mode
         *
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function setAlpha($alpha, $mode = 'Normal')
        {
        }
        /**
         * @param float $x
         * @param float $y
         * @param float $radius
         * @param float|null $startAngle
         * @param float|null $endAngle
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function clipCircle($x, $y, $radius, $startAngle = null, $endAngle = null)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param float|null $startAngle
         * @param float|null $endAngle
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function clipEllipse($x1, $y1, $x2, $y2, $startAngle = null, $endAngle = null)
        {
        }
        /**
         * @param array<array-key, mixed> $x
         * @param array<array-key, mixed> $y
         * @param int $fillMethod
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function clipPolygon($x, $y, $fillMethod)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function clipRectangle($x1, $y1, $x2, $y2)
        {
        }
        /**
         * @param float $x
         * @param float $y
         * @param float $radius
         * @param mixed|null $param4
         * @param mixed|null $param5
         * @param mixed|null $param6
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawCircle($x, $y, $radius, $param4 = null, $param5 = null, $param6 = null)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param mixed|null $param5
         * @param mixed|null $param6
         * @param mixed|null $param7
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawEllipse($x1, $y1, $x2, $y2, $param5 = null, $param6 = null, $param7 = null)
        {
        }
        /**
         * @param Zend_Pdf_Image $image
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawImage(\Zend_Pdf_Resource_Image $image, $x1, $y1, $x2, $y2)
        {
        }
        /**
         * @param Zend_Pdf_Element_LayoutBox $box
         * @param float $x
         * @param float $y
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawLayoutBox($box, $x, $y)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawLine($x1, $y1, $x2, $y2)
        {
        }
        /**
         * @param array<array-key, mixed> $x
         * @param array<array-key, mixed> $y
         * @param int $fillType
         * @param int $fillMethod
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawPolygon($x, $y, $fillType, $fillMethod)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param int $fillType
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawRectangle($x1, $y1, $x2, $y2, $fillType)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array<array-key, mixed>|int $radius
         * @param int $fillType
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawRoundedRectangle($x1, $y1, $x2, $y2, $radius, $fillType)
        {
        }
        /**
         * @param string $text
         * @param float $x
         * @param float $y
         * @param string $charEncoding
         *
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function drawText($text, $x, $y, $charEncoding = '')
        {
        }
        /**
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function pathClose()
        {
        }
        /**
         * @param float $x
         * @param float $y
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function pathLine($x, $y)
        {
        }
        /**
         * @param float $x
         * @param float $y
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function pathMove($x, $y)
        {
        }
        /**
         * @param float $x
         * @param float $y
         * @param float $angle
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function rotate($x, $y, $angle)
        {
        }
        /**
         * @param float $xScale
         * @param float $yScale
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function scale($xScale, $yScale)
        {
        }
        /**
         * @param float $xShift
         * @param float $yShift
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function translate($xShift, $yShift)
        {
        }
        /**
         * @param float $x
         * @param float $y
         * @param float $xAngle
         * @param float $yAngle
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function skew($x, $y, $xAngle, $yAngle)
        {
        }
        /**
         * @param string $data
         * @param null|string $procSet
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function rawWrite($data, $procSet = null)
        {
        }
    }
    interface Zend_Pdf_Canvas_Interface
    {
        /**
         * @return array<array-key, mixed>
         */
        public function getResources();
        public function getContents();
        /**
         * @return float
         */
        public function getHeight();
        /**
         * @return float
         */
        public function getWidth();
        /**
         * @param Zend_Pdf_Canvas_Interface $canvas
         * @param float $x1
         * @param float $y1
         * @param float|null $x2
         * @param float|null $y2
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawCanvas(\Zend_Pdf_Canvas_Interface $canvas, $x1, $y1, $x2 = null, $y2 = null);
        /**
         * @param Zend_Pdf_Color $color
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setFillColor(\Zend_Pdf_Color $color);
        /**
         * @param Zend_Pdf_Color $color
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setLineColor(\Zend_Pdf_Color $color);
        /**
         * @param float $width
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setLineWidth($width);
        /**
         * @param mixed $pattern
         * @param array<array-key, mixed> $phase
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setLineDashingPattern($pattern, $phase = 0);
        /**
         * @param Zend_Pdf_Resource_Font $font
         * @param float $fontSize
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setFont(\Zend_Pdf_Resource_Font $font, $fontSize);
        /**
         * @param Zend_Pdf_Style $style
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function setStyle(\Zend_Pdf_Style $style);
        /**
         * @return Zend_Pdf_Resource_Font
         */
        public function getFont();
        /**
         * @return float
         */
        public function getFontSize();
        /**
         * @return Zend_Pdf_Style|null
         */
        public function getStyle();
        /**
         * @return Zend_Pdf_Page
         *
         * @throws Zend_Pdf_Exception
         */
        public function saveGS();
        /**
         * @param float $alpha
         * @param string $mode
         *
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function setAlpha($alpha, $mode = 'Normal');
        /**
         * @param float $x
         * @param float $y
         * @param float $radius
         * @param float|null $startAngle
         * @param float|null $endAngle
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function clipCircle($x, $y, $radius, $startAngle = null, $endAngle = null);
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param float|null $startAngle
         * @param float|null $endAngle
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function clipEllipse($x1, $y1, $x2, $y2, $startAngle = null, $endAngle = null);
        /**
         * @param array<array-key, mixed> $x
         * @param array<array-key, mixed> $y
         * @param int $fillMethod
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function clipPolygon($x, $y, $fillMethod);
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function clipRectangle($x1, $y1, $x2, $y2);
        /**
         * @param float $x
         * @param float $y
         * @param float $radius
         * @param mixed|null $param4
         * @param mixed|null $param5
         * @param mixed|null $param6
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawCircle($x, $y, $radius, $param4 = null, $param5 = null, $param6 = null);
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param mixed|null $param5
         * @param mixed|null $param6
         * @param mixed|null $param7
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawEllipse($x1, $y1, $x2, $y2, $param5 = null, $param6 = null, $param7 = null);
        /**
         * @param Zend_Pdf_Image $image
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawImage(\Zend_Pdf_Resource_Image $image, $x1, $y1, $x2, $y2);
        /**
         * @param Zend_Pdf_Element_LayoutBox $box
         * @param float $x
         * @param float $y
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawLayoutBox($box, $x, $y);
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawLine($x1, $y1, $x2, $y2);
        /**
         * @param array<array-key, mixed> $x
         * @param array<array-key, mixed> $y
         * @param int $fillType
         * @param int $fillMethod
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawPolygon($x, $y, $fillType, $fillMethod);
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param int $fillType
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawRectangle($x1, $y1, $x2, $y2, $fillType);
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array<array-key, mixed>|int $radius
         * @param int $fillType
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function drawRoundedRectangle($x1, $y1, $x2, $y2, $radius, $fillType);
        /**
         * @param string $text
         * @param float $x
         * @param float $y
         * @param string $charEncoding
         *
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function drawText($text, $x, $y, $charEncoding = '');
        /**
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function pathClose();
        /**
         * @param float $x
         * @param float $y
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function pathLine($x, $y);
        /**
         * @param float $x
         * @param float $y
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function pathMove($x, $y);
        /**
         * @param float $x
         * @param float $y
         * @param float $angle
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function rotate($x, $y, $angle);
        /**
         * @param float $xScale
         * @param float $yScale
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function scale($xScale, $yScale);
        /**
         * @param float $xShift
         * @param float $yShift
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function translate($xShift, $yShift);
        /**
         * @param float $x
         * @param float $y
         * @param float $xAngle
         * @param float $yAngle
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function skew($x, $y, $xAngle, $yAngle);
        /**
         * @param string $data
         * @param null|string $procSet
         *
         * @return Zend_Pdf_Canvas_Interface
         */
        public function rawWrite($data, $procSet = null);
    }
    class Zend_Pdf_Cmap
    {
        public const TYPE_BYTE_ENCODING = 0;
        public const TYPE_HIGH_BYTE_MAPPING = 2;
        public const TYPE_SEGMENT_TO_DELTA = 4;
        public const TYPE_TRIMMED_TABLE = 6;
        public const TYPE_MIXED_COVERAGE = 8;
        public const TYPE_TRIMMED_ARRAY = 10;
        public const TYPE_SEGMENTED_COVERAGE = 12;
        public const TYPE_BYTE_ENCODING_STATIC = 241;
        public const TYPE_UNKNOWN = 255;
        public const MISSING_CHARACTER_GLYPH = 0;
        /**
         * @param int $cmapType
         * @param mixed $cmapData
         *
         * @return Zend_Pdf_Cmap
         *
         * @throws Zend_Pdf_Exception
         */
        public static function cmapWithTypeData($cmapType, $cmapData)
        {
        }
        /**
         * @param string $cmapData
         *
         * @throws Zend_Pdf_Exception
         */
        public abstract function __construct($cmapData);
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public abstract function glyphNumbersForCharacters($characterCodes);
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public abstract function glyphNumberForCharacter($characterCode);
        /**
         * @return array<array-key, mixed>
         */
        public abstract function getCoveredCharacters();
        /**
         * @return array<array-key, mixed>
         */
        public abstract function getCoveredCharactersGlyphs();
        /**
         * @param string $data
         * @param int $index
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function _extractInt2(&$data, $index)
        {
        }
        /**
         * @param string $data
         * @param int $index
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function _extractUInt2(&$data, $index)
        {
        }
        /**
         * @param string $data
         * @param int $index
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function _extractUInt4(&$data, $index)
        {
        }
    }
    class Zend_Pdf_Cmap_ByteEncoding extends \Zend_Pdf_Cmap
    {
        public const TYPE_BYTE_ENCODING = 0;
        public const TYPE_HIGH_BYTE_MAPPING = 2;
        public const TYPE_SEGMENT_TO_DELTA = 4;
        public const TYPE_TRIMMED_TABLE = 6;
        public const TYPE_MIXED_COVERAGE = 8;
        public const TYPE_TRIMMED_ARRAY = 10;
        public const TYPE_SEGMENTED_COVERAGE = 12;
        public const TYPE_BYTE_ENCODING_STATIC = 241;
        public const TYPE_UNKNOWN = 255;
        public const MISSING_CHARACTER_GLYPH = 0;
        /**
         * @var array<array-key, mixed>
         */
        public $_glyphIndexArray;
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public function glyphNumbersForCharacters($characterCodes)
        {
        }
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public function glyphNumberForCharacter($characterCode)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCoveredCharacters()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCoveredCharactersGlyphs()
        {
        }
        /**
         * @param string $cmapData
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($cmapData)
        {
        }
    }
    class Zend_Pdf_Cmap_ByteEncoding_Static extends \Zend_Pdf_Cmap_ByteEncoding
    {
        public const TYPE_BYTE_ENCODING = 0;
        public const TYPE_HIGH_BYTE_MAPPING = 2;
        public const TYPE_SEGMENT_TO_DELTA = 4;
        public const TYPE_TRIMMED_TABLE = 6;
        public const TYPE_MIXED_COVERAGE = 8;
        public const TYPE_TRIMMED_ARRAY = 10;
        public const TYPE_SEGMENTED_COVERAGE = 12;
        public const TYPE_BYTE_ENCODING_STATIC = 241;
        public const TYPE_UNKNOWN = 255;
        public const MISSING_CHARACTER_GLYPH = 0;
        /**
         * @param array<array-key, mixed> $cmapData
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($cmapData)
        {
        }
    }
    class Zend_Pdf_Cmap_SegmentToDelta extends \Zend_Pdf_Cmap
    {
        public const TYPE_BYTE_ENCODING = 0;
        public const TYPE_HIGH_BYTE_MAPPING = 2;
        public const TYPE_SEGMENT_TO_DELTA = 4;
        public const TYPE_TRIMMED_TABLE = 6;
        public const TYPE_MIXED_COVERAGE = 8;
        public const TYPE_TRIMMED_ARRAY = 10;
        public const TYPE_SEGMENTED_COVERAGE = 12;
        public const TYPE_BYTE_ENCODING_STATIC = 241;
        public const TYPE_UNKNOWN = 255;
        public const MISSING_CHARACTER_GLYPH = 0;
        /**
         * @var int
         */
        public $_segmentCount;
        /**
         * @var int
         */
        public $_searchRange;
        /**
         * @var int
         */
        public $_searchIterations;
        /**
         * @var array<array-key, mixed>
         */
        public $_segmentTableEndCodes;
        /**
         * @var int
         */
        public $_searchRangeEndCode;
        /**
         * @var array<array-key, mixed>
         */
        public $_segmentTableStartCodes;
        /**
         * @var array<array-key, mixed>
         */
        public $_segmentTableIdDeltas;
        /**
         * @var array<array-key, mixed>
         */
        public $_segmentTableIdRangeOffsets;
        /**
         * @var array<array-key, mixed>
         */
        public $_glyphIndexArray;
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public function glyphNumbersForCharacters($characterCodes)
        {
        }
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public function glyphNumberForCharacter($characterCode)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCoveredCharacters()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCoveredCharactersGlyphs()
        {
        }
        /**
         * @param string $cmapData
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($cmapData)
        {
        }
    }
    class Zend_Pdf_Cmap_TrimmedTable extends \Zend_Pdf_Cmap
    {
        public const TYPE_BYTE_ENCODING = 0;
        public const TYPE_HIGH_BYTE_MAPPING = 2;
        public const TYPE_SEGMENT_TO_DELTA = 4;
        public const TYPE_TRIMMED_TABLE = 6;
        public const TYPE_MIXED_COVERAGE = 8;
        public const TYPE_TRIMMED_ARRAY = 10;
        public const TYPE_SEGMENTED_COVERAGE = 12;
        public const TYPE_BYTE_ENCODING_STATIC = 241;
        public const TYPE_UNKNOWN = 255;
        public const MISSING_CHARACTER_GLYPH = 0;
        /**
         * @var int
         */
        public $_startCode;
        /**
         * @var int
         */
        public $_endCode;
        /**
         * @var array<array-key, mixed>
         */
        public $_glyphIndexArray;
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public function glyphNumbersForCharacters($characterCodes)
        {
        }
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public function glyphNumberForCharacter($characterCode)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCoveredCharacters()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCoveredCharactersGlyphs()
        {
        }
        /**
         * @param string $cmapData
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($cmapData)
        {
        }
    }
    class Zend_Pdf_Color
    {
        /**
         * @param bool $stroking
         *
         * @return string
         */
        public abstract function instructions($stroking);
        /**
         * @return array<array-key, mixed>
         */
        public abstract function getComponents();
    }
    class Zend_Pdf_Color_Cmyk extends \Zend_Pdf_Color
    {
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_c;
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_m;
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_y;
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_k;
        /**
         * @param float $c
         * @param float $m
         * @param float $y
         * @param float $k
         */
        public function __construct($c, $m, $y, $k)
        {
        }
        /**
         * @param bool $stroking
         *
         * @return string
         */
        public function instructions($stroking)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getComponents()
        {
        }
    }
    class Zend_Pdf_Color_GrayScale extends \Zend_Pdf_Color
    {
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_grayLevel;
        /**
         * @param float $grayLevel
         */
        public function __construct($grayLevel)
        {
        }
        /**
         * @param bool $stroking
         *
         * @return string
         */
        public function instructions($stroking)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getComponents()
        {
        }
    }
    class Zend_Pdf_Color_Html extends \Zend_Pdf_Color
    {
        /**
         * @var Zend_Pdf_Color
         */
        public $_color;
        /**
         * @param mixed $color
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($color)
        {
        }
        /**
         * @param bool $stroking
         *
         * @return string
         */
        public function instructions($stroking)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getComponents()
        {
        }
        /**
         * @param string $color
         *
         * @return Zend_Pdf_Color
         */
        public static function color($color)
        {
        }
        /**
         * @param string $color
         *
         * @return Zend_Pdf_Color
         */
        public static function namedColor($color)
        {
        }
    }
    class Zend_Pdf_Color_Rgb extends \Zend_Pdf_Color
    {
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_r;
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_g;
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_b;
        /**
         * @param float $r
         * @param float $g
         * @param float $b
         */
        public function __construct($r, $g, $b)
        {
        }
        /**
         * @param bool $stroking
         *
         * @return string
         */
        public function instructions($stroking)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getComponents()
        {
        }
    }
    class Zend_Pdf_Destination extends \Zend_Pdf_Target
    {
        /**
         * @param Zend_Pdf_Element $resource
         *
         * @return Zend_Pdf_Destination
         *
         * @throws Zend_Pdf_Exception
         */
        public static function load(\Zend_Pdf_Element $resource)
        {
        }
    }
    class Zend_Pdf_Destination_Explicit extends \Zend_Pdf_Destination
    {
        /**
         * @var Zend_Pdf_Element_Array
         */
        public $_destinationArray;
        /**
         * @var bool
         */
        public $_isRemote;
        /**
         * @param Zend_Pdf_Element $destinationArray
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $destinationArray)
        {
        }
        /**
         * @return bool
         */
        public function isRemote()
        {
        }
        /**
         * @return Zend_Pdf_Element
         */
        public function getResource()
        {
        }
    }
    class Zend_Pdf_Destination_Fit extends \Zend_Pdf_Destination_Explicit
    {
        /**
         * @param Zend_Pdf_Page|int $page
         *
         * @return Zend_Pdf_Destination_Fit
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($page)
        {
        }
    }
    class Zend_Pdf_Destination_FitBoundingBox extends \Zend_Pdf_Destination_Explicit
    {
        /**
         * @param Zend_Pdf_Page|int $page
         *
         * @return Zend_Pdf_Destination_FitBoundingBox
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($page)
        {
        }
    }
    class Zend_Pdf_Destination_FitBoundingBoxHorizontally extends \Zend_Pdf_Destination_Explicit
    {
        /**
         * @param Zend_Pdf_Page|int $page
         * @param float $top
         *
         * @return Zend_Pdf_Destination_FitBoundingBoxHorizontally
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($page, $top)
        {
        }
        /**
         * @return float
         */
        public function getTopEdge()
        {
        }
        /**
         * @param float $top
         *
         * @return Zend_Pdf_Action_FitBoundingBoxHorizontally
         */
        public function setTopEdge($top)
        {
        }
    }
    class Zend_Pdf_Destination_FitBoundingBoxVertically extends \Zend_Pdf_Destination_Explicit
    {
        /**
         * @param Zend_Pdf_Page|int $page
         * @param float $left
         *
         * @return Zend_Pdf_Destination_FitBoundingBoxVertically
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($page, $left)
        {
        }
        /**
         * @return float
         */
        public function getLeftEdge()
        {
        }
        /**
         * @param float $left
         *
         * @return Zend_Pdf_Action_FitBoundingBoxVertically
         */
        public function setLeftEdge($left)
        {
        }
    }
    class Zend_Pdf_Destination_FitHorizontally extends \Zend_Pdf_Destination_Explicit
    {
        /**
         * @param Zend_Pdf_Page|int $page
         * @param float $top
         *
         * @return Zend_Pdf_Destination_FitHorizontally
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($page, $top)
        {
        }
        /**
         * @return float
         */
        public function getTopEdge()
        {
        }
        /**
         * @param float $top
         *
         * @return Zend_Pdf_Action_FitHorizontally
         */
        public function setTopEdge($top)
        {
        }
    }
    class Zend_Pdf_Destination_FitRectangle extends \Zend_Pdf_Destination_Explicit
    {
        /**
         * @param Zend_Pdf_Page|int $page
         * @param float $left
         * @param float $bottom
         * @param float $right
         * @param float $top
         *
         * @return Zend_Pdf_Destination_FitRectangle
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($page, $left, $bottom, $right, $top)
        {
        }
        /**
         * @return float
         */
        public function getLeftEdge()
        {
        }
        /**
         * @param float $left
         *
         * @return Zend_Pdf_Action_FitRectangle
         */
        public function setLeftEdge($left)
        {
        }
        /**
         * @return float
         */
        public function getBottomEdge()
        {
        }
        /**
         * @param float $bottom
         *
         * @return Zend_Pdf_Action_FitRectangle
         */
        public function setBottomEdge($bottom)
        {
        }
        /**
         * @return float
         */
        public function getRightEdge()
        {
        }
        /**
         * @param float $right
         *
         * @return Zend_Pdf_Action_FitRectangle
         */
        public function setRightEdge($right)
        {
        }
        /**
         * @return float
         */
        public function getTopEdge()
        {
        }
        /**
         * @param float $top
         *
         * @return Zend_Pdf_Action_FitRectangle
         */
        public function setTopEdge($top)
        {
        }
    }
    class Zend_Pdf_Destination_FitVertically extends \Zend_Pdf_Destination_Explicit
    {
        /**
         * @param Zend_Pdf_Page|int $page
         * @param float $left
         *
         * @return Zend_Pdf_Destination_FitVertically
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($page, $left)
        {
        }
        /**
         * @return float
         */
        public function getLeftEdge()
        {
        }
        /**
         * @param float $left
         *
         * @return Zend_Pdf_Action_FitVertically
         */
        public function setLeftEdge($left)
        {
        }
    }
    class Zend_Pdf_Destination_Named extends \Zend_Pdf_Destination
    {
        /**
         * @var Zend_Pdf_Element_Name|Zend_Pdf_Element_String
         */
        public $_nameElement;
        /**
         * @param Zend_Pdf_Element $resource
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $resource)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Pdf_Destination_Named
         */
        public static function create($name)
        {
        }
        /**
         * @return Zend_Pdf_Element
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Pdf_Element
         */
        public function getResource()
        {
        }
    }
    class Zend_Pdf_Destination_Unknown extends \Zend_Pdf_Destination_Explicit
    {
    }
    class Zend_Pdf_Destination_Zoom extends \Zend_Pdf_Destination_Explicit
    {
        /**
         * @param Zend_Pdf_Page|int $page
         * @param float|null $left
         * @param float|null $top
         * @param float|null $zoom
         *
         * @return Zend_Pdf_Destination_Zoom
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($page, $left = null, $top = null, $zoom = null)
        {
        }
        /**
         * @return float
         */
        public function getLeftEdge()
        {
        }
        /**
         * @param float $left
         *
         * @return Zend_Pdf_Action_Zoom
         */
        public function setLeftEdge($left)
        {
        }
        /**
         * @return float
         */
        public function getTopEdge()
        {
        }
        /**
         * @param float $top
         *
         * @return Zend_Pdf_Action_Zoom
         */
        public function setTopEdge($top)
        {
        }
        /**
         * @return float
         */
        public function getZoomFactor()
        {
        }
        /**
         * @param float $zoom
         *
         * @return Zend_Pdf_Action_Zoom
         */
        public function setZoomFactor($zoom)
        {
        }
    }
    class Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var Zend_Pdf_Element_Object
         */
        public $_parentObject;
        /**
         * @return int
         */
        public abstract function getType();
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public abstract function toString($factory = null);
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param array<array-key, mixed> $processed
         * @param int $mode
         */
        public function makeClone(\Zend_Pdf_ElementFactory $factory, array &$processed, $mode)
        {
        }
        /**
         * @param Zend_Pdf_Element_Object $parent
         */
        public function setParentObject(\Zend_Pdf_Element_Object $parent)
        {
        }
        /**
         * @return Zend_Pdf_Element_Object
         */
        public function getParentObject()
        {
        }
        public function touch()
        {
        }
        public function cleanUp()
        {
        }
        /**
         * @return mixed
         */
        public function toPhp()
        {
        }
        /**
         * @param mixed $input
         *
         * @return Zend_Pdf_Element
         */
        public static function phpToPdf($input)
        {
        }
    }
    class Zend_Pdf_ElementFactory implements \Zend_Pdf_ElementFactory_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_modifiedObjects;
        /**
         * @var SplObjectStorage
         */
        public $_removedObjects;
        /**
         * @var array<array-key, mixed>
         */
        public $_registeredObjects;
        /**
         * @var int
         */
        public $_objectCount;
        /**
         * @var array<array-key, mixed>
         */
        public $_attachedFactories;
        /**
         * @var int
         */
        public $_factoryId;
        /**
         * @var int
         */
        public static $_identity;
        /**
         * @var array<array-key, mixed>
         */
        public $_shiftCalculationCache;
        /**
         * @param int $objCount
         */
        public function __construct($objCount)
        {
        }
        /**
         * @return Zend_Pdf_ElementFactory_Interface
         */
        public function getFactory()
        {
        }
        /**
         * @param int $objCount
         *
         * @return Zend_Pdf_ElementFactory_Interface
         */
        public static function createFactory($objCount)
        {
        }
        public function close()
        {
        }
        /**
         * @return Zend_Pdf_ElementFactory
         */
        public function resolve()
        {
        }
        /**
         * @return int
         */
        public function getId()
        {
        }
        /**
         * @param int $objCount
         */
        public function setObjectCount($objCount)
        {
        }
        /**
         * @return int
         */
        public function getObjectCount()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         */
        public function attach(\Zend_Pdf_ElementFactory_Interface $factory)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         *
         * @return int
         */
        public function calculateShift(\Zend_Pdf_ElementFactory_Interface $factory)
        {
        }
        public function cleanEnumerationShiftCache()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function getEnumerationShift(\Zend_Pdf_ElementFactory_Interface $factory)
        {
        }
        /**
         * @param Zend_Pdf_Element_Object $obj
         *
         * @throws Zend_Pdf_Exception
         */
        public function markAsModified(\Zend_Pdf_Element_Object $obj)
        {
        }
        /**
         * @param Zend_Pdf_Element_Object $obj
         *
         * @throws Zend_Pdf_Exception
         */
        public function remove(\Zend_Pdf_Element_Object $obj)
        {
        }
        /**
         * @param Zend_Pdf_Element $objectValue
         *
         * @return Zend_Pdf_Element_Object
         */
        public function newObject(\Zend_Pdf_Element $objectValue)
        {
        }
        /**
         * @return Zend_Pdf_Element_Object_Stream
         */
        public function newStreamObject($streamValue)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface|null $rootFactory
         *
         * @return array<array-key, mixed>
         */
        public function listModifiedObjects($rootFactory = null)
        {
        }
        /**
         * @param Zend_Pdf_Element_Object $obj
         * @param string $refString
         */
        public function registerObject(\Zend_Pdf_Element_Object $obj, $refString)
        {
        }
        /**
         * @param string $refString
         *
         * @return Zend_Pdf_Element_Object|null
         */
        public function fetchObject($refString)
        {
        }
        /**
         * @return bool
         */
        public function isModified()
        {
        }
    }
    interface Zend_Pdf_ElementFactory_Interface
    {
        /**
         * @return Zend_Pdf_ElementFactory_Interface
         */
        public function getFactory();
        public function close();
        /**
         * @return Zend_Pdf_ElementFactory
         */
        public function resolve();
        /**
         * @return int
         */
        public function getId();
        /**
         * @param int $objCount
         */
        public function setObjectCount($objCount);
        /**
         * @return int
         */
        public function getObjectCount();
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         */
        public function attach(\Zend_Pdf_ElementFactory_Interface $factory);
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         *
         * @return int
         */
        public function calculateShift(\Zend_Pdf_ElementFactory_Interface $factory);
        /**
         * @return int
         */
        public function cleanEnumerationShiftCache();
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function getEnumerationShift(\Zend_Pdf_ElementFactory_Interface $factory);
        /**
         * @param Zend_Pdf_Element_Object $obj
         *
         * @throws Zend_Pdf_Exception
         */
        public function markAsModified(\Zend_Pdf_Element_Object $obj);
        /**
         * @param Zend_Pdf_Element_Object $obj
         *
         * @throws Zend_Pdf_Exception
         */
        public function remove(\Zend_Pdf_Element_Object $obj);
        /**
         * @param Zend_Pdf_Element $objectValue
         *
         * @return Zend_Pdf_Element_Object
         */
        public function newObject(\Zend_Pdf_Element $objectValue);
        /**
         * @return Zend_Pdf_Element_Object_Stream
         */
        public function newStreamObject($streamValue);
        /**
         * @param Zend_Pdf_ElementFactory|null $rootFactory
         *
         * @return array<array-key, mixed>
         */
        public function listModifiedObjects($rootFactory = null);
        /**
         * @return bool
         */
        public function isModified();
    }
    class Zend_Pdf_ElementFactory_Proxy implements \Zend_Pdf_ElementFactory_Interface
    {
        /**
         * @var Zend_Pdf_ElementFactory_Interface
         */
        public $_factory;
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         */
        public function __construct(\Zend_Pdf_ElementFactory_Interface $factory)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @return Zend_Pdf_ElementFactory_Interface
         */
        public function getFactory()
        {
        }
        public function close()
        {
        }
        /**
         * @return Zend_Pdf_ElementFactory
         */
        public function resolve()
        {
        }
        /**
         * @return int
         */
        public function getId()
        {
        }
        /**
         * @param int $objCount
         */
        public function setObjectCount($objCount)
        {
        }
        /**
         * @return int
         */
        public function getObjectCount()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         */
        public function attach(\Zend_Pdf_ElementFactory_Interface $factory)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         *
         * @return int
         */
        public function calculateShift(\Zend_Pdf_ElementFactory_Interface $factory)
        {
        }
        /**
         * @return int
         */
        public function cleanEnumerationShiftCache()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function getEnumerationShift(\Zend_Pdf_ElementFactory_Interface $factory)
        {
        }
        /**
         * @param Zend_Pdf_Element_Object $obj
         *
         * @throws Zend_Pdf_Exception
         */
        public function markAsModified(\Zend_Pdf_Element_Object $obj)
        {
        }
        /**
         * @param Zend_Pdf_Element_Object $obj
         *
         * @throws Zend_Pdf_Exception
         */
        public function remove(\Zend_Pdf_Element_Object $obj)
        {
        }
        /**
         * @param Zend_Pdf_Element $objectValue
         *
         * @return Zend_Pdf_Element_Object
         */
        public function newObject(\Zend_Pdf_Element $objectValue)
        {
        }
        /**
         * @return Zend_Pdf_Element_Object_Stream
         */
        public function newStreamObject($streamValue)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory|null $rootFactory
         *
         * @return array<array-key, mixed>
         */
        public function listModifiedObjects($rootFactory = null)
        {
        }
        /**
         * @return bool
         */
        public function isModified()
        {
        }
    }
    class Zend_Pdf_Element_Array extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var array<array-key, mixed>
         */
        public $items;
        /**
         * @param array<array-key, mixed>|null $val
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($val = null)
        {
        }
        /**
         * @param string $property
         *
         * @throws Zend_Pdf_Exception
         */
        public function __get($property)
        {
        }
        /**
         * @param mixed $value
         *
         * @throws Zend_Pdf_Exception
         */
        public function __set($property, $value)
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param array<array-key, mixed> $processed
         * @param int $mode
         */
        public function makeClone(\Zend_Pdf_ElementFactory $factory, array &$processed, $mode)
        {
        }
        /**
         * @param Zend_Pdf_Element_Object $parent
         */
        public function setParentObject(\Zend_Pdf_Element_Object $parent)
        {
        }
        /**
         * @return mixed
         */
        public function toPhp()
        {
        }
    }
    class Zend_Pdf_Element_Boolean extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var bool
         */
        public $value;
        /**
         * @param bool $val
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($val)
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
    }
    class Zend_Pdf_Element_Dictionary extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var array<array-key, mixed>
         */
        public $_items;
        /**
         * @param array<array-key, mixed>|null $val
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($val = null)
        {
        }
        /**
         * @param Zend_Pdf_Element $val
         *
         * @throws Zend_Pdf_Exception
         */
        public function add(\Zend_Pdf_Element_Name $name, \Zend_Pdf_Element $val)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getKeys()
        {
        }
        /**
         * @return Zend_Pdf_Element|null
         */
        public function __get($item)
        {
        }
        /**
         * @param mixed $value
         */
        public function __set($item, $value)
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param array<array-key, mixed> $processed
         * @param int $mode
         *
         * @throws Zend_Pdf_Exception
         */
        public function makeClone(\Zend_Pdf_ElementFactory $factory, array &$processed, $mode)
        {
        }
        /**
         * @param Zend_Pdf_Element_Object $parent
         */
        public function setParentObject(\Zend_Pdf_Element_Object $parent)
        {
        }
        /**
         * @return mixed
         */
        public function toPhp()
        {
        }
    }
    class Zend_Pdf_Element_Name extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var string
         */
        public $value;
        /**
         * @param string $val
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($val)
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param string $inStr
         *
         * @return string
         */
        public static function escape($inStr)
        {
        }
        /**
         * @param string $inStr
         *
         * @return string
         */
        public static function unescape($inStr)
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
    }
    class Zend_Pdf_Element_Null extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var mixed
         */
        public $value;
        public function __construct()
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
    }
    class Zend_Pdf_Element_Numeric extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var numeric
         */
        public $value;
        /**
         * @param numeric $val
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($val)
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
    }
    class Zend_Pdf_Element_Object extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var Zend_Pdf_Element
         */
        public $_value;
        /**
         * @var int
         */
        public $_objNum;
        /**
         * @var int
         */
        public $_genNum;
        /**
         * @var Zend_Pdf_ElementFactory
         */
        public $_factory;
        /**
         * @param Zend_Pdf_Element $val
         * @param int $objNum
         * @param int $genNum
         * @param Zend_Pdf_ElementFactory $factory
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $val, $objNum, $genNum, \Zend_Pdf_ElementFactory $factory)
        {
        }
        /**
         * @return Zend_Pdf_ElementFactory
         */
        public function getFactory()
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @return int
         */
        public function getObjNum()
        {
        }
        /**
         * @return int
         */
        public function getGenNum()
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         *
         * @return string
         */
        public function dump(\Zend_Pdf_ElementFactory $factory)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function __get($property)
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         */
        public function __set($property, $value)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param array<array-key, mixed> $processed
         * @param int $mode
         */
        public function makeClone(\Zend_Pdf_ElementFactory $factory, array &$processed, $mode)
        {
        }
        public function touch()
        {
        }
        /**
         * @return Zend_Pdf_Element_Object
         */
        public function getObject()
        {
        }
        public function cleanUp()
        {
        }
        /**
         * @return mixed
         */
        public function toPhp()
        {
        }
    }
    class Zend_Pdf_Element_Object_Stream extends \Zend_Pdf_Element_Object
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var Zend_Pdf_Element_Dictionary
         */
        public $_dictionary;
        /**
         * @var bool
         */
        public $_streamDecoded;
        /**
         * @var array<array-key, mixed>|null
         */
        public $_initialDictionaryData;
        /**
         * @param mixed $val
         * @param int $objNum
         * @param int $genNum
         * @param Zend_Pdf_ElementFactory $factory
         * @param Zend_Pdf_Element_Dictionary|null $dictionary
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($val, $objNum, $genNum, \Zend_Pdf_ElementFactory $factory, $dictionary = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _extractDictionaryData()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _decodeStream()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _encodeStream()
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         *
         * @throws Zend_Pdf_Exception
         */
        public function __get($property)
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         */
        public function __set($property, $value)
        {
        }
        public function skipFilters()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param array<array-key, mixed> $processed
         * @param int $mode
         */
        public function makeClone(\Zend_Pdf_ElementFactory $factory, array &$processed, $mode)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         *
         * @return string
         */
        public function dump(\Zend_Pdf_ElementFactory $factory)
        {
        }
        public function cleanUp()
        {
        }
    }
    class Zend_Pdf_Element_Reference extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var mixed
         */
        public $_ref;
        /**
         * @var int
         */
        public $_objNum;
        /**
         * @var int
         */
        public $_genNum;
        /**
         * @var Zend_Pdf_Element_Reference_Context
         */
        public $_context;
        /**
         * @var Zend_Pdf_ElementFactory
         */
        public $_factory;
        /**
         * @param int $objNum
         * @param int $genNum
         * @param Zend_Pdf_Element_Reference_Context $context
         * @param Zend_Pdf_ElementFactory $factory
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($objNum, $genNum = 0, \Zend_Pdf_Element_Reference_Context $context, \Zend_Pdf_ElementFactory $factory)
        {
        }
        /**
         * @return Zend_Pdf_ElementFactory
         */
        public function getFactory()
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _dereference()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param array<array-key, mixed> $processed
         * @param int $mode
         */
        public function makeClone(\Zend_Pdf_ElementFactory $factory, array &$processed, $mode)
        {
        }
        public function touch()
        {
        }
        /**
         * @return Zend_Pdf_Element_Object
         */
        public function getObject()
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function __get($property)
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         */
        public function __set($property, $value)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        public function cleanUp()
        {
        }
        /**
         * @return mixed
         */
        public function toPhp()
        {
        }
    }
    class Zend_Pdf_Element_Reference_Context
    {
        /**
         * @var Zend_Pdf_StringParser
         */
        public $_stringParser;
        /**
         * @var Zend_Pdf_Element_Reference_Table
         */
        public $_refTable;
        /**
         * @param Zend_Pdf_StringParser $parser
         * @param Zend_Pdf_Element_Reference_Table $refTable
         */
        public function __construct(\Zend_Pdf_StringParser $parser, \Zend_Pdf_Element_Reference_Table $refTable)
        {
        }
        /**
         * @return Zend_Pdf_StringParser
         */
        public function getParser()
        {
        }
        /**
         * @return Zend_Pdf_Element_Reference_Table
         */
        public function getRefTable()
        {
        }
    }
    class Zend_Pdf_Element_Reference_Table
    {
        /**
         * @var Zend_Pdf_Element_Reference_Table
         */
        public $_parent;
        /**
         * @var array<array-key, mixed>
         */
        public $_free;
        /**
         * @var array<array-key, mixed>
         */
        public $_generations;
        /**
         * @var array<array-key, mixed>
         */
        public $_inuse;
        /**
         * @var array<array-key, mixed>
         */
        public $_usedObjects;
        public function __construct()
        {
        }
        /**
         * @param string $ref
         * @param int $offset
         * @param bool $inuse
         */
        public function addReference($ref, $offset, $inuse = true)
        {
        }
        /**
         * @param Zend_Pdf_Element_Reference_Table $parent
         */
        public function setParent(\Zend_Pdf_Element_Reference_Table $parent)
        {
        }
        /**
         * @param string $ref
         *
         * @return int
         */
        public function getOffset($ref)
        {
        }
        /**
         * @param string $ref
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function getNextFree($ref)
        {
        }
        /**
         * @param int $objNum
         *
         * @return unknown
         */
        public function getNewGeneration($objNum)
        {
        }
    }
    class Zend_Pdf_Element_Stream extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var Zend_Memory_Container
         */
        public $value;
        /**
         * @param string $val
         */
        public function __construct($val)
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @return int
         */
        public function length()
        {
        }
        public function clear()
        {
        }
        /**
         * @param mixed $val
         */
        public function append($val)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param array<array-key, mixed> $processed
         * @param int $mode
         */
        public function makeClone(\Zend_Pdf_ElementFactory $factory, array &$processed, $mode)
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
    }
    class Zend_Pdf_Element_String extends \Zend_Pdf_Element
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var string
         */
        public $value;
        /**
         * @param string $val
         */
        public function __construct($val)
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public static function escape($str)
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public static function unescape($str)
        {
        }
    }
    class Zend_Pdf_Element_String_Binary extends \Zend_Pdf_Element_String
    {
        public const TYPE_BOOL = 1;
        public const TYPE_NUMERIC = 2;
        public const TYPE_STRING = 3;
        public const TYPE_NAME = 4;
        public const TYPE_ARRAY = 5;
        public const TYPE_DICTIONARY = 6;
        public const TYPE_STREAM = 7;
        public const TYPE_NULL = 11;
        public const CLONE_MODE_SKIP_PAGES = 1;
        public const CLONE_MODE_FORCE_CLONING = 2;
        /**
         * @var string
         */
        public $value;
        /**
         * @param string $inStr
         *
         * @return string
         */
        public static function escape($inStr)
        {
        }
        /**
         * @param string $inStr
         *
         * @return string
         */
        public static function unescape($inStr)
        {
        }
        /**
         * @param Zend_Pdf_Factory|null $factory
         *
         * @return string
         */
        public function toString($factory = null)
        {
        }
    }
    class Zend_Pdf_Exception extends \Zend_Exception
    {
        public const NOT_IMPLEMENTED = 1;
        public const DEPRECATED = 2;
        public const TOO_FEW_PARAMETERS = 3;
        public const BAD_PARAMETER_TYPE = 4;
        public const BAD_PARAMETER_VALUE = 5;
        public const PARAMETER_VALUE_OUT_OF_RANGE = 6;
        public const BAD_METHOD_SIGNATURE = 7;
        public const INDEX_OUT_OF_RANGE = 8;
        public const BAD_FILE_PATH = 257;
        public const NOT_READABLE = 258;
        public const NOT_WRITEABLE = 259;
        public const FILE_NOT_OPEN = 260;
        public const CANT_OPEN_FILE = 261;
        public const CANT_GET_FILE_POSITION = 262;
        public const CANT_SET_FILE_POSITION = 263;
        public const MOVE_BEFORE_START_OF_FILE = 264;
        public const MOVE_BEYOND_END_OF_FILE = 265;
        public const CANT_GET_FILE_SIZE = 266;
        public const ERROR_DURING_READ = 267;
        public const ERROR_DURING_WRITE = 268;
        public const INVALID_PAGE_SIZE = 269;
        public const INSUFFICIENT_DATA = 270;
        public const BAD_DATA_SOURCE = 513;
        public const INVALID_BYTE_ORDER = 514;
        public const INVALID_INTEGER_SIZE = 515;
        public const BAD_FIXED_POINT_SIZE = 516;
        public const CANT_READ_STRING = 517;
        public const PARSED_OUT_OF_ORDER = 518;
        public const WRONG_FONT_TYPE = 769;
        public const BAD_TABLE_COUNT = 770;
        public const REQUIRED_TABLE_NOT_FOUND = 771;
        public const DONT_UNDERSTAND_TABLE_VERSION = 771;
        public const BAD_MAGIC_NUMBER = 772;
        public const CANT_FIND_GOOD_CMAP = 773;
        public const CMAP_TYPE_UNSUPPORTED = 1025;
        public const CMAP_UNKNOWN_TYPE = 1026;
        public const CMAP_TABLE_DATA_TOO_SMALL = 1027;
        public const CMAP_WRONG_TABLE_TYPE = 1028;
        public const CMAP_WRONG_TABLE_LENGTH = 1029;
        public const CMAP_NOT_LANGUAGE_INDEPENDENT = 1030;
        public const CMAP_FINAL_OFFSET_NOT_LENGTH = 1031;
        public const CMAP_WRONG_ENTRY_COUNT = 1032;
        public const GLYPH_OUT_OF_RANGE = 1281;
        public const FONT_CANT_BE_EMBEDDED = 1282;
        public const BAD_FONT_NAME = 1537;
        public const CANT_DETERMINE_FONT_TYPE = 1538;
        public const BAD_ATTRIBUTE_VALUE = 1793;
        public const CANT_DETERMINE_IMAGE_TYPE = 2049;
        public const WRONG_IMAGE_TYPE = 2050;
        public const UNSUPPORTED_IMAGE_ENCODING_OPTIONS = 2051;
        public const IMAGE_FILE_CORRUPT = 2052;
    }
    class Zend_Pdf_FileParser
    {
        public const BYTE_ORDER_LITTLE_ENDIAN = 0;
        public const BYTE_ORDER_BIG_ENDIAN = 1;
        /**
         * @var bool
         */
        public $_isScreened;
        /**
         * @var bool
         */
        public $_isParsed;
        /**
         * @var Zend_Pdf_FileParserDataSource
         */
        public $_dataSource;
        /**
         * @throws Zend_Pdf_Exception
         */
        public abstract function screen();
        /**
         * @throws Zend_Pdf_Exception
         */
        public abstract function parse();
        /**
         * @param Zend_Pdf_FileParserDataSource $dataSource
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_FileParserDataSource $dataSource)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @return bool
         */
        public function isScreened()
        {
        }
        /**
         * @return bool
         */
        public function isParsed()
        {
        }
        /**
         * @return Zend_Pdf_FileParserDataSource
         */
        public function getDataSource()
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Pdf_Exception
         */
        public function moveToOffset($offset)
        {
        }
        public function getOffset()
        {
        }
        public function getSize()
        {
        }
        /**
         * @param int $byteCount
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readBytes($byteCount)
        {
        }
        /**
         * @param int $byteCount
         *
         * @throws Zend_Pdf_Exception
         */
        public function skipBytes($byteCount)
        {
        }
        /**
         * @param int $size
         * @param int $byteOrder
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function readInt($size, $byteOrder)
        {
        }
        /**
         * @param int $size
         * @param int $byteOrder
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function readUInt($size, $byteOrder)
        {
        }
        /**
         * @param int $bit
         * @param int $bitField
         *
         * @return bool
         */
        public function isBitSet($bit, $bitField)
        {
        }
        /**
         * @param int $mantissaBits
         * @param int $fractionBits
         * @param int $byteOrder
         *
         * @return float
         *
         * @throws Zend_Pdf_Exception
         */
        public function readFixed($mantissaBits, $fractionBits, $byteOrder)
        {
        }
        /**
         * @param int $byteCount
         * @param int $byteOrder
         * @param string $characterSet
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readStringUTF16($byteCount, $byteOrder, $characterSet = '')
        {
        }
        /**
         * @param int $byteCount
         * @param string $characterSet
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readStringMacRoman($byteCount, $characterSet = '')
        {
        }
        /**
         * @param string $characterSet
         * @param int $lengthBytes
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readStringPascal($characterSet = '', $lengthBytes = 1)
        {
        }
    }
    class Zend_Pdf_FileParserDataSource
    {
        /**
         * @var int
         */
        public $_size;
        /**
         * @var int
         */
        public $_offset;
        public abstract function __destruct();
        /**
         * @param int $byteCount
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public abstract function readBytes($byteCount);
        /**
         * @return string
         */
        public abstract function readAllBytes();
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return int
         */
        public function getOffset()
        {
        }
        /**
         * @return int
         */
        public function getSize()
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Pdf_Exception
         */
        public function moveToOffset($offset)
        {
        }
        /**
         * @param int $byteCount
         *
         * @throws Zend_Pdf_Exception
         */
        public function skipBytes($byteCount)
        {
        }
    }
    class Zend_Pdf_FileParserDataSource_File extends \Zend_Pdf_FileParserDataSource
    {
        /**
         * @var string
         */
        public $_filePath;
        /**
         * @var resource
         */
        public $_fileResource;
        /**
         * @param string $filePath
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($filePath)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param int $byteCount
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readBytes($byteCount)
        {
        }
        /**
         * @return string
         */
        public function readAllBytes()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Pdf_Exception
         */
        public function moveToOffset($offset)
        {
        }
    }
    class Zend_Pdf_FileParserDataSource_String extends \Zend_Pdf_FileParserDataSource
    {
        /**
         * @var string
         */
        public $_string;
        /**
         * @param string $string
         */
        public function __construct($string)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param int $byteCount
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readBytes($byteCount)
        {
        }
        /**
         * @return string
         */
        public function readAllBytes()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Pdf_FileParser_Font extends \Zend_Pdf_FileParser
    {
        public const BYTE_ORDER_LITTLE_ENDIAN = 0;
        public const BYTE_ORDER_BIG_ENDIAN = 1;
        /**
         * @var array<array-key, mixed>
         */
        public $_fontProperties;
        /**
         * @var bool
         */
        public $_debug;
        /**
         * @param Zend_Pdf_FileParserDataSource $dataSource
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_FileParserDataSource $dataSource)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function __get($property)
        {
        }
        /**
         * @param int $byteCount
         * @param int $byteOrder
         * @param string $characterSet
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readStringUTF16($byteCount, $byteOrder, $characterSet = '')
        {
        }
        /**
         * @param int $byteCount
         * @param string $characterSet
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readStringMacRoman($byteCount, $characterSet = '')
        {
        }
        /**
         * @param string $characterSet
         * @param int $lengthBytes
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function readStringPascal($characterSet = '', $lengthBytes = 1)
        {
        }
        public function writeDebug()
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         */
        public function __set($property, $value)
        {
        }
        /**
         * @param string $message
         */
        public function _debugLog($message)
        {
        }
    }
    class Zend_Pdf_FileParser_Font_OpenType extends \Zend_Pdf_FileParser_Font
    {
        public const BYTE_ORDER_LITTLE_ENDIAN = 0;
        public const BYTE_ORDER_BIG_ENDIAN = 1;
        /**
         * @var int
         */
        public $_scalerType;
        /**
         * @var array<array-key, mixed>
         */
        public $_tableDirectory;
        /**
         * @throws Zend_Pdf_Exception
         */
        public function screen()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function parse()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parseTableDirectory()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parseHeadTable()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parseNameTable()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parsePostTable()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parseHheaTable()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parseMaxpTable()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parseOs2Table()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parseHmtxTable()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function _parseCmapTable()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function _readScalerType()
        {
        }
        /**
         * @param string $tableName
         *
         * @throws Zend_Pdf_Exception
         */
        public function _jumpToTable($tableName)
        {
        }
        /**
         * @param float $minVersion
         *
         * @return float
         *
         * @throws Zend_Pdf_Exception
         */
        public function _readTableVersion($minVersion, $maxVersion)
        {
        }
        /**
         * @param int $platformID
         *
         * @return null|string
         */
        public function _languageCodeForPlatform($platformID, $languageID)
        {
        }
    }
    class Zend_Pdf_FileParser_Font_OpenType_TrueType extends \Zend_Pdf_FileParser_Font_OpenType
    {
        public const BYTE_ORDER_LITTLE_ENDIAN = 0;
        public const BYTE_ORDER_BIG_ENDIAN = 1;
        /**
         * @throws Zend_Pdf_Exception
         */
        public function screen()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function parse()
        {
        }
    }
    class Zend_Pdf_FileParser_Image extends \Zend_Pdf_FileParser
    {
        public const BYTE_ORDER_LITTLE_ENDIAN = 0;
        public const BYTE_ORDER_BIG_ENDIAN = 1;
        /**
         * @var int
         */
        public $imageType;
        /**
         * @param Zend_Pdf_FileParserDataSource $dataSource
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_FileParserDataSource $dataSource)
        {
        }
    }
    class Zend_Pdf_FileParser_Image_Png extends \Zend_Pdf_FileParser_Image
    {
        public const BYTE_ORDER_LITTLE_ENDIAN = 0;
        public const BYTE_ORDER_BIG_ENDIAN = 1;
        public $_isPNG;
        public $_width;
        public $_height;
        public $_bits;
        public $_color;
        public $_compression;
        public $_preFilter;
        public $_interlacing;
        public $_imageData;
        public $_paletteData;
        public $_transparencyData;
        public function getWidth()
        {
        }
        public function getHeight()
        {
        }
        public function getBitDepth()
        {
        }
        public function getColorSpace()
        {
        }
        public function getCompressionStrategy()
        {
        }
        public function getPaethFilter()
        {
        }
        public function getInterlacingMode()
        {
        }
        public function getRawImageData()
        {
        }
        public function getRawPaletteData()
        {
        }
        public function getRawTransparencyData()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function screen()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function parse()
        {
        }
        public function _parseSignature()
        {
        }
        public function _checkSignature()
        {
        }
        public function _parseChunks()
        {
        }
        public function _parseIHDRChunk()
        {
        }
        public function _parseIDATChunk($chunkOffset, $chunkLength)
        {
        }
        public function _parsePLTEChunk($chunkOffset, $chunkLength)
        {
        }
        public function _parseTRNSChunk($chunkOffset, $chunkLength)
        {
        }
    }
    class Zend_Pdf_Filter_Ascii85 implements \Zend_Pdf_Filter_Interface
    {
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function encode($data, $params = null)
        {
        }
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function decode($data, $params = null)
        {
        }
    }
    class Zend_Pdf_Filter_AsciiHex implements \Zend_Pdf_Filter_Interface
    {
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function encode($data, $params = null)
        {
        }
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function decode($data, $params = null)
        {
        }
    }
    class Zend_Pdf_Filter_Compression implements \Zend_Pdf_Filter_Interface
    {
        /**
         * @param int $a
         * @param int $b
         * @param int $c
         *
         * @return int
         */
        public static function _paeth($a, $b, $c)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _getPredictorValue(&$params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _getColorsValue(&$params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _getBitsPerComponentValue(&$params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return int
         */
        public static function _getColumnsValue(&$params)
        {
        }
        /**
         * @param string $data
         * @param array<array-key, mixed> $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _applyEncodeParams($data, $params)
        {
        }
        /**
         * @param string $data
         * @param array<array-key, mixed> $params
         *
         * @return string
         */
        public static function _applyDecodeParams($data, $params)
        {
        }
    }
    class Zend_Pdf_Filter_Compression_Flate extends \Zend_Pdf_Filter_Compression
    {
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function encode($data, $params = null)
        {
        }
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function decode($data, $params = null)
        {
        }
    }
    class Zend_Pdf_Filter_Compression_Lzw extends \Zend_Pdf_Filter_Compression
    {
        /**
         * @param array<array-key, mixed> $params
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _getEarlyChangeValue($params)
        {
        }
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function encode($data, $params = null)
        {
        }
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function decode($data, $params = null)
        {
        }
    }
    interface Zend_Pdf_Filter_Interface
    {
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function encode($data, $params = null);
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function decode($data, $params = null);
    }
    class Zend_Pdf_Filter_RunLength implements \Zend_Pdf_Filter_Interface
    {
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function encode($data, $params = null)
        {
        }
        /**
         * @param string $data
         * @param array<array-key, mixed>|null $params
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public static function decode($data, $params = null)
        {
        }
    }
    class Zend_Pdf_Font
    {
        public const TYPE_UNKNOWN = 0;
        public const TYPE_STANDARD = 1;
        public const TYPE_TYPE_1 = 2;
        public const TYPE_TRUETYPE = 3;
        public const TYPE_TYPE_0 = 4;
        public const TYPE_CIDFONT_TYPE_0 = 5;
        public const TYPE_CIDFONT_TYPE_2 = 6;
        public const FONT_COURIER = 'Courier';
        public const FONT_COURIER_BOLD = 'Courier-Bold';
        public const FONT_COURIER_OBLIQUE = 'Courier-Oblique';
        public const FONT_COURIER_ITALIC = 'Courier-Oblique';
        public const FONT_COURIER_BOLD_OBLIQUE = 'Courier-BoldOblique';
        public const FONT_COURIER_BOLD_ITALIC = 'Courier-BoldOblique';
        public const FONT_HELVETICA = 'Helvetica';
        public const FONT_HELVETICA_BOLD = 'Helvetica-Bold';
        public const FONT_HELVETICA_OBLIQUE = 'Helvetica-Oblique';
        public const FONT_HELVETICA_ITALIC = 'Helvetica-Oblique';
        public const FONT_HELVETICA_BOLD_OBLIQUE = 'Helvetica-BoldOblique';
        public const FONT_HELVETICA_BOLD_ITALIC = 'Helvetica-BoldOblique';
        public const FONT_SYMBOL = 'Symbol';
        public const FONT_TIMES_ROMAN = 'Times-Roman';
        public const FONT_TIMES = 'Times-Roman';
        public const FONT_TIMES_BOLD = 'Times-Bold';
        public const FONT_TIMES_ITALIC = 'Times-Italic';
        public const FONT_TIMES_BOLD_ITALIC = 'Times-BoldItalic';
        public const FONT_ZAPFDINGBATS = 'ZapfDingbats';
        public const NAME_COPYRIGHT = 0;
        public const NAME_FAMILY = 1;
        public const NAME_STYLE = 2;
        public const NAME_ID = 3;
        public const NAME_FULL = 4;
        public const NAME_VERSION = 5;
        public const NAME_POSTSCRIPT = 6;
        public const NAME_TRADEMARK = 7;
        public const NAME_MANUFACTURER = 8;
        public const NAME_DESIGNER = 9;
        public const NAME_DESCRIPTION = 10;
        public const NAME_VENDOR_URL = 11;
        public const NAME_DESIGNER_URL = 12;
        public const NAME_LICENSE = 13;
        public const NAME_LICENSE_URL = 14;
        public const NAME_PREFERRED_FAMILY = 16;
        public const NAME_PREFERRED_STYLE = 17;
        public const NAME_SAMPLE_TEXT = 19;
        public const NAME_CID_NAME = 20;
        public const WEIGHT_THIN = 100;
        public const WEIGHT_EXTRA_LIGHT = 200;
        public const WEIGHT_LIGHT = 300;
        public const WEIGHT_NORMAL = 400;
        public const WEIGHT_MEDIUM = 500;
        public const WEIGHT_SEMI_BOLD = 600;
        public const WEIGHT_BOLD = 700;
        public const WEIGHT_EXTRA_BOLD = 800;
        public const WEIGHT_BLACK = 900;
        public const WIDTH_ULTRA_CONDENSED = 1;
        public const WIDTH_EXTRA_CONDENSED = 2;
        public const WIDTH_CONDENSED = 3;
        public const WIDTH_SEMI_CONDENSED = 4;
        public const WIDTH_NORMAL = 5;
        public const WIDTH_SEMI_EXPANDED = 6;
        public const WIDTH_EXPANDED = 7;
        public const WIDTH_EXTRA_EXPANDED = 8;
        public const WIDTH_ULTRA_EXPANDED = 9;
        public const EMBED_DONT_EMBED = 1;
        public const EMBED_DONT_SUBSET = 2;
        public const EMBED_DONT_COMPRESS = 4;
        public const EMBED_SUPPRESS_EMBED_EXCEPTION = 8;
        /**
         * @var array<array-key, mixed>
         */
        public static $_fontNames;
        /**
         * @var array<array-key, mixed>
         */
        public static $_fontFilePaths;
        /**
         * @param string $name
         * @param int $embeddingOptions
         *
         * @return Zend_Pdf_Resource_Font
         *
         * @throws Zend_Pdf_Exception
         */
        public static function fontWithName($name, $embeddingOptions = 0)
        {
        }
        /**
         * @param string $filePath
         * @param int $embeddingOptions
         *
         * @return Zend_Pdf_Resource_Font
         *
         * @throws Zend_Pdf_Exception
         */
        public static function fontWithPath($filePath, $embeddingOptions = 0)
        {
        }
        /**
         * @param Zend_Pdf_FileParserDataSource $dataSource
         * @param int $embeddingOptions
         *
         * @return Zend_Pdf_Resource_Font_OpenType_TrueType
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _extractTrueTypeFont($dataSource, $embeddingOptions)
        {
        }
    }
    class Zend_Pdf_Image
    {
        public const TYPE_UNKNOWN = 0;
        public const TYPE_JPEG = 1;
        public const TYPE_PNG = 2;
        public const TYPE_TIFF = 3;
        public const TIFF_FIELD_TYPE_BYTE = 1;
        public const TIFF_FIELD_TYPE_ASCII = 2;
        public const TIFF_FIELD_TYPE_SHORT = 3;
        public const TIFF_FIELD_TYPE_LONG = 4;
        public const TIFF_FIELD_TYPE_RATIONAL = 5;
        public const TIFF_TAG_IMAGE_WIDTH = 256;
        public const TIFF_TAG_IMAGE_LENGTH = 257;
        public const TIFF_TAG_BITS_PER_SAMPLE = 258;
        public const TIFF_TAG_COMPRESSION = 259;
        public const TIFF_TAG_PHOTOMETRIC_INTERPRETATION = 262;
        public const TIFF_TAG_STRIP_OFFSETS = 273;
        public const TIFF_TAG_SAMPLES_PER_PIXEL = 277;
        public const TIFF_TAG_STRIP_BYTE_COUNTS = 279;
        public const TIFF_COMPRESSION_UNCOMPRESSED = 1;
        public const TIFF_COMPRESSION_CCITT1D = 2;
        public const TIFF_COMPRESSION_GROUP_3_FAX = 3;
        public const TIFF_COMPRESSION_GROUP_4_FAX = 4;
        public const TIFF_COMPRESSION_LZW = 5;
        public const TIFF_COMPRESSION_JPEG = 6;
        public const TIFF_COMPRESSION_FLATE = 8;
        public const TIFF_COMPRESSION_FLATE_OBSOLETE_CODE = 32946;
        public const TIFF_COMPRESSION_PACKBITS = 32773;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO = 0;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO = 1;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_RGB = 2;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_RGB_INDEXED = 3;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_CMYK = 5;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_YCBCR = 6;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_CIELAB = 8;
        public const PNG_COMPRESSION_DEFAULT_STRATEGY = 0;
        public const PNG_COMPRESSION_FILTERED = 1;
        public const PNG_COMPRESSION_HUFFMAN_ONLY = 2;
        public const PNG_COMPRESSION_RLE = 3;
        public const PNG_FILTER_NONE = 0;
        public const PNG_FILTER_SUB = 1;
        public const PNG_FILTER_UP = 2;
        public const PNG_FILTER_AVERAGE = 3;
        public const PNG_FILTER_PAETH = 4;
        public const PNG_INTERLACING_DISABLED = 0;
        public const PNG_INTERLACING_ENABLED = 1;
        public const PNG_CHANNEL_GRAY = 0;
        public const PNG_CHANNEL_RGB = 2;
        public const PNG_CHANNEL_INDEXED = 3;
        public const PNG_CHANNEL_GRAY_ALPHA = 4;
        public const PNG_CHANNEL_RGB_ALPHA = 6;
        /**
         * @param string $filePath
         *
         * @return Zend_Pdf_Resource_Image
         *
         * @throws Zend_Pdf_Exception
         */
        public static function imageWithPath($filePath)
        {
        }
        /**
         * @param Zend_Pdf_FileParserDataSource $dataSource
         *
         * @return Zend_Pdf_Resource_Image_Jpeg
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _extractJpegImage($dataSource)
        {
        }
        /**
         * @param Zend_Pdf_FileParserDataSource $dataSource
         *
         * @return Zend_Pdf_Resource_Image_Png
         */
        public static function _extractPngImage($dataSource)
        {
        }
        /**
         * @param Zend_Pdf_FileParserDataSource $dataSource
         *
         * @return Zend_Pdf_Resource_Image_Tiff
         *
         * @throws Zend_Pdf_Exception
         */
        public static function _extractTiffImage($dataSource)
        {
        }
    }
    class Zend_Pdf_NameTree implements \ArrayAccess, \Iterator, \Countable
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_items;
        /**
         * @param Zend_Pdf_Element $rootDictionary
         */
        public function __construct(\Zend_Pdf_Element $rootDictionary)
        {
        }
        public function current()
        {
        }
        public function next()
        {
        }
        public function key()
        {
        }
        public function valid()
        {
        }
        public function rewind()
        {
        }
        public function offsetExists($offset)
        {
        }
        public function offsetGet($offset)
        {
        }
        public function offsetSet($offset, $value)
        {
        }
        public function offsetUnset($offset)
        {
        }
        public function clear()
        {
        }
        public function count()
        {
        }
    }
    class Zend_Pdf_Outline implements \RecursiveIterator, \Countable
    {
        /**
         * @var bool
         */
        public $_open;
        /**
         * @var array<array-key, mixed>
         */
        public $childOutlines;
        /**
         * @return string
         */
        public abstract function getTitle();
        /**
         * @param string $title
         *
         * @return Zend_Pdf_Outline
         */
        public abstract function setTitle($title);
        /**
         * @return bool
         */
        public function isOpen()
        {
        }
        /**
         * @param bool $isOpen
         *
         * @return Zend_Pdf_Outline
         */
        public function setIsOpen($isOpen)
        {
        }
        /**
         * @return bool
         */
        public abstract function isItalic();
        /**
         * @param bool $isItalic
         *
         * @return Zend_Pdf_Outline
         */
        public abstract function setIsItalic($isItalic);
        /**
         * @return bool
         */
        public abstract function isBold();
        /**
         * @param bool $isBold
         *
         * @return Zend_Pdf_Outline
         */
        public abstract function setIsBold($isBold);
        /**
         * @return Zend_Pdf_Color_Rgb
         */
        public abstract function getColor();
        /**
         * @param Zend_Pdf_Color_Rgb $color
         *
         * @return Zend_Pdf_Outline
         */
        public abstract function setColor(\Zend_Pdf_Color_Rgb $color);
        /**
         * @return Zend_Pdf_Target
         */
        public abstract function getTarget();
        /**
         * @param Zend_Pdf_Target|null|string $target
         *
         * @return Zend_Pdf_Outline
         */
        public abstract function setTarget($target = null);
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Pdf_Action
         *
         * @throws Zend_Pdf_Exception
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return Zend_Pdf_Outline
         *
         * @throws Zend_Pdf_Exception
         */
        public static function create($param1, $param2 = null)
        {
        }
        /**
         * @return int
         */
        public function openOutlinesCount()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param bool $updateNavigation
         * @param Zend_Pdf_Element $parent
         * @param Zend_Pdf_Element|null $prev
         * @param SplObjectStorage|null $processedOutlines
         *
         * @return Zend_Pdf_Element
         */
        public abstract function dumpOutline(\Zend_Pdf_ElementFactory_Interface $factory, $updateNavigation, \Zend_Pdf_Element $parent, ?\Zend_Pdf_Element $prev = null, ?\SplObjectStorage $processedOutlines = null);
        /**
         * @return Zend_Pdf_Outline
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        public function next()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return Zend_Pdf_Outline|null
         */
        public function getChildren()
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Pdf_Outline_Created extends \Zend_Pdf_Outline
    {
        /**
         * @var string
         */
        public $_title;
        /**
         * @var Zend_Pdf_Color_Rgb
         */
        public $_color;
        /**
         * @var bool
         */
        public $_italic;
        /**
         * @var bool
         */
        public $_bold;
        /**
         * @var Zend_Pdf_Action|Zend_Pdf_Destination
         */
        public $_target;
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @param string $title
         *
         * @return Zend_Pdf_Outline
         */
        public function setTitle($title)
        {
        }
        /**
         * @return bool
         */
        public function isItalic()
        {
        }
        /**
         * @param bool $isItalic
         *
         * @return Zend_Pdf_Outline
         */
        public function setIsItalic($isItalic)
        {
        }
        /**
         * @return bool
         */
        public function isBold()
        {
        }
        /**
         * @param bool $isBold
         *
         * @return Zend_Pdf_Outline
         */
        public function setIsBold($isBold)
        {
        }
        /**
         * @return Zend_Pdf_Color_Rgb
         */
        public function getColor()
        {
        }
        /**
         * @param Zend_Pdf_Color_Rgb $color
         *
         * @return Zend_Pdf_Outline
         */
        public function setColor(\Zend_Pdf_Color_Rgb $color)
        {
        }
        /**
         * @return Zend_Pdf_Target
         */
        public function getTarget()
        {
        }
        /**
         * @param Zend_Pdf_Target|null|string $target
         *
         * @return Zend_Pdf_Outline
         *
         * @throws Zend_Pdf_Exception
         */
        public function setTarget($target = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param bool $updateNavigation
         * @param Zend_Pdf_Element $parent
         * @param Zend_Pdf_Element|null $prev
         * @param SplObjectStorage|null $processedOutlines
         *
         * @return Zend_Pdf_Element
         *
         * @throws Zend_Pdf_Exception
         */
        public function dumpOutline(\Zend_Pdf_ElementFactory_Interface $factory, $updateNavigation, \Zend_Pdf_Element $parent, ?\Zend_Pdf_Element $prev = null, ?\SplObjectStorage $processedOutlines = null)
        {
        }
    }
    class Zend_Pdf_Outline_Loaded extends \Zend_Pdf_Outline
    {
        /**
         * @var Zend_Pdf_Element_Dictionary|Zend_Pdf_Element_Object|Zend_Pdf_Element_Reference
         */
        public $_outlineDictionary;
        /**
         * @var array<array-key, mixed>
         */
        public $_originalChildOutlines;
        /**
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function getTitle()
        {
        }
        /**
         * @param string $title
         *
         * @return Zend_Pdf_Outline
         */
        public function setTitle($title)
        {
        }
        /**
         * @param bool $isOpen
         *
         * @return Zend_Pdf_Outline
         */
        public function setIsOpen($isOpen)
        {
        }
        /**
         * @return bool
         */
        public function isItalic()
        {
        }
        /**
         * @param bool $isItalic
         *
         * @return Zend_Pdf_Outline
         */
        public function setIsItalic($isItalic)
        {
        }
        /**
         * @return bool
         */
        public function isBold()
        {
        }
        /**
         * @param bool $isBold
         *
         * @return Zend_Pdf_Outline
         */
        public function setIsBold($isBold)
        {
        }
        /**
         * @return Zend_Pdf_Color_Rgb
         */
        public function getColor()
        {
        }
        /**
         * @param Zend_Pdf_Color_Rgb $color
         *
         * @return Zend_Pdf_Outline
         */
        public function setColor(\Zend_Pdf_Color_Rgb $color)
        {
        }
        /**
         * @return Zend_Pdf_Target
         *
         * @throws Zend_Pdf_Exception
         */
        public function getTarget()
        {
        }
        /**
         * @param Zend_Pdf_Target|null|string $target
         *
         * @return Zend_Pdf_Outline
         *
         * @throws Zend_Pdf_Exception
         */
        public function setTarget($target = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Pdf_Actions_Traceable
         *
         * @throws Zend_Pdf_Exception
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Pdf_Element $dictionary
         *
         * @return Zend_Pdf_Action
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_Element $dictionary, ?\SplObjectStorage $processedDictionaries = null)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory $factory
         * @param bool $updateNavigation
         * @param Zend_Pdf_Element $parent
         * @param Zend_Pdf_Element|null $prev
         * @param SplObjectStorage|null $processedOutlines
         *
         * @return Zend_Pdf_Element
         *
         * @throws Zend_Pdf_Exception
         */
        public function dumpOutline(\Zend_Pdf_ElementFactory_Interface $factory, $updateNavigation, \Zend_Pdf_Element $parent, ?\Zend_Pdf_Element $prev = null, ?\SplObjectStorage $processedOutlines = null)
        {
        }
        public function dump($level = 0)
        {
        }
    }
    class Zend_Pdf_Page extends \Zend_Pdf_Canvas_Abstract
    {
        public const SIZE_A4 = '595:842:';
        public const SIZE_A4_LANDSCAPE = '842:595:';
        public const SIZE_LETTER = '612:792:';
        public const SIZE_LETTER_LANDSCAPE = '792:612:';
        public const SHAPE_DRAW_STROKE = 0;
        public const SHAPE_DRAW_FILL = 1;
        public const SHAPE_DRAW_FILL_AND_STROKE = 2;
        public const FILL_METHOD_NON_ZERO_WINDING = 0;
        public const FILL_METHOD_EVEN_ODD = 1;
        public const LINE_DASHING_SOLID = 0;
        /**
         * @var Zend_Pdf_Element_Object|Zend_Pdf_Element_Reference
         */
        public $_dictionary;
        /**
         * @var Zend_Pdf_ElementFactory_Interface
         */
        public $_objFactory;
        /**
         * @var bool
         */
        public $_attached;
        /**
         * @var bool
         */
        public $_safeGS;
        /**
         * @param mixed $param1
         * @param mixed|null $param2
         * @param mixed|null $param3
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($param1, $param2 = null, $param3 = null)
        {
        }
        /**
         * @param string $type
         * @param Zend_Pdf_Resource $resource
         *
         * @return string
         */
        public function _attachResource($type, \Zend_Pdf_Resource $resource)
        {
        }
        /**
         * @param string $procSetName
         */
        public function _addProcSet($procSetName)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getResources()
        {
        }
        public function getContents()
        {
        }
        /**
         * @return float
         */
        public function getHeight()
        {
        }
        /**
         * @return float
         */
        public function getWidth()
        {
        }
        public function __clone()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         * @param array<array-key, mixed> $processed
         *
         * @return Zend_Pdf_Page
         */
        public function clonePage($factory, &$processed)
        {
        }
        /**
         * @return Zend_Pdf_Element_Dictionary
         */
        public function getPageDictionary()
        {
        }
        /**
         * @throws Zend_Pdf_Exception
         */
        public function flush()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $objFactory
         *
         * @throws Zend_Pdf_Exception
         */
        public function render(\Zend_Pdf_ElementFactory_Interface $objFactory)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function extractResources()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Pdf_Exception
         */
        public function extractFonts()
        {
        }
        /**
         * @return Zend_Pdf_Resource_Font_Extracted|null
         *
         * @throws Zend_Pdf_Exception
         */
        public function extractFont($fontName)
        {
        }
        /**
         * @param Zend_Pdf_Annotation $annotation
         *
         * @return Zend_Pdf_Page
         */
        public function attachAnnotation(\Zend_Pdf_Annotation $annotation)
        {
        }
    }
    class Zend_Pdf_Parser
    {
        /**
         * @var Zend_Pdf_StringParser
         */
        public $_stringParser;
        /**
         * @var Zend_Pdf_Trailer_Keeper
         */
        public $_trailer;
        /**
         * @var string
         */
        public $_pdfVersion;
        /**
         * @return int
         */
        public function getPDFLength()
        {
        }
        /**
         * @return string
         */
        public function getPDFString()
        {
        }
        /**
         * @return string
         */
        public function getPDFVersion()
        {
        }
        /**
         * @param int $offset
         *
         * @return Zend_Pdf_Trailer_Keeper
         *
         * @throws Zend_Pdf_Exception
         */
        public function _loadXRefTable($offset)
        {
        }
        /**
         * @return Zend_Pdf_Trailer_Keeper
         */
        public function getTrailer()
        {
        }
        /**
         * @param mixed $source
         * @param Zend_Pdf_ElementFactory_Interface $factory
         * @param bool $load
         *
         * @throws Zend_Exception
         */
        public function __construct($source, \Zend_Pdf_ElementFactory_Interface $factory, $load)
        {
        }
        public function __destruct()
        {
        }
    }
    class Zend_Pdf_RecursivelyIteratableObjectsContainer implements \RecursiveIterator, \Countable
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_objects = array();
        public function __construct(array $objects)
        {
        }
        public function current()
        {
        }
        public function key()
        {
        }
        public function next()
        {
        }
        public function rewind()
        {
        }
        public function valid()
        {
        }
        public function getChildren()
        {
        }
        public function hasChildren()
        {
        }
        public function count()
        {
        }
    }
    class Zend_Pdf_Resource
    {
        /**
         * @var Zend_Pdf_ElementFactory_Interface
         */
        public $_objectFactory;
        /**
         * @var Zend_Pdf_Element_Object
         */
        public $_resource;
        /**
         * @param Zend_Pdf_Element|string $resource
         */
        public function __construct($resource)
        {
        }
        public function __clone()
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         * @param array<array-key, mixed> $processed
         *
         * @return Zend_Pdf_Page
         */
        public function cloneResource($factory, &$processed)
        {
        }
        /**
         * @return Zend_Pdf_Element_Object
         */
        public function getResource()
        {
        }
        /**
         * @return Zend_Pdf_ElementFactory_Interface
         */
        public function getFactory()
        {
        }
    }
    class Zend_Pdf_Resource_ContentStream extends \Zend_Pdf_Resource
    {
        /**
         * @var string
         */
        public $_bufferedContent;
        /**
         * @param Zend_Pdf_Element_Object_Stream|string $contentStreamObject
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($contentStreamObject = '')
        {
        }
        /**
         * @param string $instructions
         *
         * @return Zend_Pdf_Resource_ContentStream
         */
        public function addInstructions($instructions)
        {
        }
        /**
         * @return string
         */
        public function getInstructions()
        {
        }
        /**
         * @return Zend_Pdf_Resource_ContentStream
         */
        public function clear()
        {
        }
        public function flush()
        {
        }
    }
    class Zend_Pdf_Resource_Extractor
    {
        /**
         * @var Zend_Pdf_ElementFactory_Interface
         */
        public $_factory;
        /**
         * @var array<array-key, mixed>
         */
        public $_processed;
        public function __construct()
        {
        }
        public function clonePage(\Zend_Pdf_Page $page)
        {
        }
    }
    class Zend_Pdf_Resource_Font extends \Zend_Pdf_Resource
    {
        /**
         * @var int
         */
        public $_fontType;
        /**
         * @var array<array-key, mixed>
         */
        public $_fontNames;
        /**
         * @var bool
         */
        public $_isBold;
        /**
         * @var bool
         */
        public $_isItalic;
        /**
         * @var bool
         */
        public $_isMonospace;
        /**
         * @var int
         */
        public $_underlinePosition;
        /**
         * @var int
         */
        public $_underlineThickness;
        /**
         * @var int
         */
        public $_strikePosition;
        /**
         * @var int
         */
        public $_strikeThickness;
        /**
         * @var int
         */
        public $_unitsPerEm;
        /**
         * @var int
         */
        public $_ascent;
        /**
         * @var int
         */
        public $_descent;
        /**
         * @var int
         */
        public $_lineGap;
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return int
         */
        public function getFontType()
        {
        }
        /**
         * @param int $nameType
         * @param mixed $language
         * @param null|string $characterSet
         *
         * @return string
         */
        public function getFontName($nameType, $language, $characterSet = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFontNames()
        {
        }
        /**
         * @return bool
         */
        public function isBold()
        {
        }
        /**
         * @return bool
         */
        public function isItalic()
        {
        }
        /**
         * @return bool
         */
        public function isMonospace()
        {
        }
        /**
         * @return int
         */
        public function getUnderlinePosition()
        {
        }
        /**
         * @return int
         */
        public function getUnderlineThickness()
        {
        }
        /**
         * @return int
         */
        public function getStrikePosition()
        {
        }
        /**
         * @return int
         */
        public function getStrikeThickness()
        {
        }
        /**
         * @return int
         */
        public function getUnitsPerEm()
        {
        }
        /**
         * @return int
         */
        public function getAscent()
        {
        }
        /**
         * @return int
         */
        public function getDescent()
        {
        }
        /**
         * @return int
         */
        public function getLineGap()
        {
        }
        /**
         * @return int
         */
        public function getLineHeight()
        {
        }
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public abstract function glyphNumbersForCharacters($characterCodes);
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public abstract function glyphNumberForCharacter($characterCode);
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return float
         */
        public abstract function getCoveredPercentage($string, $charEncoding = '');
        /**
         * @param array<array-key, mixed> $glyphNumbers
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Pdf_Exception
         */
        public abstract function widthsForGlyphs($glyphNumbers);
        /**
         * @param int $glyphNumber
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public abstract function widthForGlyph($glyphNumber);
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public abstract function encodeString($string, $charEncoding);
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public abstract function decodeString($string, $charEncoding);
        /**
         * @param int $value
         *
         * @return int
         */
        public function toEmSpace($value)
        {
        }
    }
    class Zend_Pdf_Resource_Font_CidFont extends \Zend_Pdf_Resource_Font
    {
        /**
         * @var Zend_Pdf_Cmap
         */
        public $_cmap;
        /**
         * @var array<array-key, mixed>
         */
        public $_charWidths;
        /**
         * @var int
         */
        public $_missingCharWidth;
        /**
         * @param Zend_Pdf_FileParser_Font_OpenType $fontParser
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_FileParser_Font_OpenType $fontParser)
        {
        }
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public function glyphNumbersForCharacters($characterCodes)
        {
        }
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public function glyphNumberForCharacter($characterCode)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return float
         */
        public function getCoveredPercentage($string, $charEncoding = '')
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function widthsForChars($charCodes)
        {
        }
        /**
         * @param int $charCode
         *
         * @return int
         */
        public function widthForChar($charCode)
        {
        }
        /**
         * @param array<array-key, mixed> $glyphNumbers
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Pdf_Exception
         */
        public function widthsForGlyphs($glyphNumbers)
        {
        }
        /**
         * @param int $glyphNumber
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function widthForGlyph($glyphNumber)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function encodeString($string, $charEncoding)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         *
         * @throws Zend_Pdf_Exception
         */
        public function decodeString($string, $charEncoding)
        {
        }
    }
    class Zend_Pdf_Resource_Font_CidFont_TrueType extends \Zend_Pdf_Resource_Font_CidFont
    {
        /**
         * @param Zend_Pdf_FileParser_Font_OpenType_TrueType $fontParser
         * @param int $embeddingOptions
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_FileParser_Font_OpenType_TrueType $fontParser, $embeddingOptions)
        {
        }
    }
    class Zend_Pdf_Resource_Font_Extracted extends \Zend_Pdf_Resource_Font
    {
        public const TYPE_NOT_SUPPORTED = 'Unsupported font type.';
        public const ENCODING_NOT_SUPPORTED = 'Font encoding is not supported';
        public const OPERATION_NOT_SUPPORTED = 'Operation is not supported for extracted fonts';
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param mixed $fontDictionary
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($fontDictionary)
        {
        }
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public function glyphNumbersForCharacters($characterCodes)
        {
        }
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public function glyphNumberForCharacter($characterCode)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return float
         */
        public function getCoveredPercentage($string, $charEncoding = '')
        {
        }
        /**
         * @param array<array-key, mixed> $glyphNumbers
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Pdf_Exception
         */
        public function widthsForGlyphs($glyphNumbers)
        {
        }
        /**
         * @param int $glyphNumber
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function widthForGlyph($glyphNumber)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function encodeString($string, $charEncoding)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function decodeString($string, $charEncoding)
        {
        }
    }
    class Zend_Pdf_Resource_Font_FontDescriptor
    {
        /**
         * @throws Zend_Pdf_Exception
         */
        public function __construct()
        {
        }
        /**
         * @param Zend_Pdf_Resource_Font $font
         * @param Zend_Pdf_FileParser_Font_OpenType $fontParser
         * @param int $embeddingOptions
         *
         * @return Zend_Pdf_Element_Dictionary
         *
         * @throws Zend_Pdf_Exception
         */
        public static function factory(\Zend_Pdf_Resource_Font $font, \Zend_Pdf_FileParser_Font_OpenType $fontParser, $embeddingOptions)
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple extends \Zend_Pdf_Resource_Font
    {
        /**
         * @var Zend_Pdf_Cmap
         */
        public $_cmap;
        /**
         * @var array<array-key, mixed>
         */
        public $_glyphWidths;
        /**
         * @var int
         */
        public $_missingGlyphWidth;
        public function __construct()
        {
        }
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public function glyphNumbersForCharacters($characterCodes)
        {
        }
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public function glyphNumberForCharacter($characterCode)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return float
         */
        public function getCoveredPercentage($string, $charEncoding = '')
        {
        }
        /**
         * @param array<array-key, mixed> $glyphNumbers
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Pdf_Exception
         */
        public function widthsForGlyphs($glyphNumbers)
        {
        }
        /**
         * @param int $glyphNumber
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function widthForGlyph($glyphNumber)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function encodeString($string, $charEncoding)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function decodeString($string, $charEncoding)
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Parsed extends \Zend_Pdf_Resource_Font_Simple
    {
        /**
         * @param Zend_Pdf_FileParser_Font_OpenType $fontParser
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_FileParser_Font_OpenType $fontParser)
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Parsed_TrueType extends \Zend_Pdf_Resource_Font_Simple_Parsed
    {
        /**
         * @param Zend_Pdf_FileParser_Font_OpenType_TrueType $fontParser
         * @param int $embeddingOptions
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(\Zend_Pdf_FileParser_Font_OpenType_TrueType $fontParser, $embeddingOptions)
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard extends \Zend_Pdf_Resource_Font_Simple
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_Courier extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_CourierBold extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_CourierBoldOblique extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_CourierOblique extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_Helvetica extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_HelveticaBold extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_HelveticaBoldOblique extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_HelveticaOblique extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_Symbol extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_toFontEncoding;
        /**
         * @var array<array-key, mixed>
         */
        public $_fromFontEncoding;
        public function __construct()
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function encodeString($string, $charEncoding)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function decodeString($string, $charEncoding)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function toUnicode($string, $charEncoding = '')
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_TimesBold extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_TimesBoldItalic extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_TimesItalic extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_TimesRoman extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        public function __construct()
        {
        }
    }
    class Zend_Pdf_Resource_Font_Simple_Standard_ZapfDingbats extends \Zend_Pdf_Resource_Font_Simple_Standard
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_toFontEncoding;
        /**
         * @var array<array-key, mixed>
         */
        public $_fromFontEncoding;
        public function __construct()
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function encodeString($string, $charEncoding)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function decodeString($string, $charEncoding)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function toUnicode($string, $charEncoding = '')
        {
        }
    }
    class Zend_Pdf_Resource_Font_Type0 extends \Zend_Pdf_Resource_Font
    {
        /**
         * @var Zend_Pdf_Resource_Font_CidFont
         */
        public $_descendantFont;
        /**
         * @return string
         */
        public static function getToUnicodeCMapData()
        {
        }
        public function __construct(\Zend_Pdf_Resource_Font_CidFont $descendantFont)
        {
        }
        /**
         * @param array<array-key, mixed> $characterCodes
         *
         * @return array<array-key, mixed>
         */
        public function glyphNumbersForCharacters($characterCodes)
        {
        }
        /**
         * @param int $characterCode
         *
         * @return int
         */
        public function glyphNumberForCharacter($characterCode)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return float
         */
        public function getCoveredPercentage($string, $charEncoding = '')
        {
        }
        /**
         * @param array<array-key, mixed> $glyphNumbers
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Pdf_Exception
         */
        public function widthsForGlyphs($glyphNumbers)
        {
        }
        /**
         * @param int $glyphNumber
         *
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function widthForGlyph($glyphNumber)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function encodeString($string, $charEncoding)
        {
        }
        /**
         * @param string $string
         * @param string $charEncoding
         *
         * @return string
         */
        public function decodeString($string, $charEncoding)
        {
        }
    }
    class Zend_Pdf_Resource_GraphicsState extends \Zend_Pdf_Resource
    {
        /**
         * @param Zend_Pdf_Element_Object|null $extGStateObject
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct(?\Zend_Pdf_Element_Object $extGStateObject = null)
        {
        }
        /**
         * @param float $alpha
         * @param string $mode
         *
         * @return Zend_Pdf_Canvas_Interface
         *
         * @throws Zend_Pdf_Exception
         */
        public function setAlpha($alpha, $mode = 'Normal')
        {
        }
    }
    class Zend_Pdf_Resource_Image extends \Zend_Pdf_Resource
    {
        public function __construct()
        {
        }
        /**
         * @return int
         */
        public abstract function getPixelHeight();
        /**
         * @return int
         */
        public abstract function getPixelWidth();
        /**
         * @return array<array-key, mixed>
         */
        public abstract function getProperties();
    }
    class Zend_Pdf_Resource_ImageFactory
    {
        public static function factory($filename)
        {
        }
    }
    class Zend_Pdf_Resource_Image_Jpeg extends \Zend_Pdf_Resource_Image
    {
        public $_width;
        public $_height;
        public $_imageProperties;
        /**
         * @param string $imageFileName
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($imageFileName)
        {
        }
        public function getPixelWidth()
        {
        }
        public function getPixelHeight()
        {
        }
        public function getProperties()
        {
        }
    }
    class Zend_Pdf_Resource_Image_Png extends \Zend_Pdf_Resource_Image
    {
        public const PNG_COMPRESSION_DEFAULT_STRATEGY = 0;
        public const PNG_COMPRESSION_FILTERED = 1;
        public const PNG_COMPRESSION_HUFFMAN_ONLY = 2;
        public const PNG_COMPRESSION_RLE = 3;
        public const PNG_FILTER_NONE = 0;
        public const PNG_FILTER_SUB = 1;
        public const PNG_FILTER_UP = 2;
        public const PNG_FILTER_AVERAGE = 3;
        public const PNG_FILTER_PAETH = 4;
        public const PNG_INTERLACING_DISABLED = 0;
        public const PNG_INTERLACING_ENABLED = 1;
        public const PNG_CHANNEL_GRAY = 0;
        public const PNG_CHANNEL_RGB = 2;
        public const PNG_CHANNEL_INDEXED = 3;
        public const PNG_CHANNEL_GRAY_ALPHA = 4;
        public const PNG_CHANNEL_RGB_ALPHA = 6;
        public $_width;
        public $_height;
        public $_imageProperties;
        /**
         * @param string $imageFileName
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($imageFileName)
        {
        }
        public function getPixelWidth()
        {
        }
        public function getPixelHeight()
        {
        }
        public function getProperties()
        {
        }
    }
    class Zend_Pdf_Resource_Image_Tiff extends \Zend_Pdf_Resource_Image
    {
        public const TIFF_FIELD_TYPE_BYTE = 1;
        public const TIFF_FIELD_TYPE_ASCII = 2;
        public const TIFF_FIELD_TYPE_SHORT = 3;
        public const TIFF_FIELD_TYPE_LONG = 4;
        public const TIFF_FIELD_TYPE_RATIONAL = 5;
        public const TIFF_TAG_IMAGE_WIDTH = 256;
        public const TIFF_TAG_IMAGE_LENGTH = 257;
        public const TIFF_TAG_BITS_PER_SAMPLE = 258;
        public const TIFF_TAG_COMPRESSION = 259;
        public const TIFF_TAG_PHOTOMETRIC_INTERPRETATION = 262;
        public const TIFF_TAG_STRIP_OFFSETS = 273;
        public const TIFF_TAG_SAMPLES_PER_PIXEL = 277;
        public const TIFF_TAG_STRIP_BYTE_COUNTS = 279;
        public const TIFF_COMPRESSION_UNCOMPRESSED = 1;
        public const TIFF_COMPRESSION_CCITT1D = 2;
        public const TIFF_COMPRESSION_GROUP_3_FAX = 3;
        public const TIFF_COMPRESSION_GROUP_4_FAX = 4;
        public const TIFF_COMPRESSION_LZW = 5;
        public const TIFF_COMPRESSION_JPEG = 6;
        public const TIFF_COMPRESSION_FLATE = 8;
        public const TIFF_COMPRESSION_FLATE_OBSOLETE_CODE = 32946;
        public const TIFF_COMPRESSION_PACKBITS = 32773;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO = 0;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO = 1;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_RGB = 2;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_RGB_INDEXED = 3;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_CMYK = 5;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_YCBCR = 6;
        public const TIFF_PHOTOMETRIC_INTERPRETATION_CIELAB = 8;
        public const TIFF_ENDIAN_BIG = 0;
        public const TIFF_ENDIAN_LITTLE = 1;
        public const UNPACK_TYPE_BYTE = 0;
        public const UNPACK_TYPE_SHORT = 1;
        public const UNPACK_TYPE_LONG = 2;
        public const UNPACK_TYPE_RATIONAL = 3;
        public $_width;
        public $_height;
        public $_imageProperties;
        public $_endianType;
        public $_fileSize;
        public $_bitsPerSample;
        public $_compression;
        public $_filter;
        public $_colorCode;
        public $_whiteIsZero;
        public $_blackIsZero;
        public $_colorSpace;
        public $_imageDataOffset;
        public $_imageDataLength;
        /**
         * @param int $type
         * @param string $bytes
         *
         * @throws Zend_Pdf_Exception
         */
        public function unpackBytes($type, $bytes)
        {
        }
        /**
         * @param string $imageFileName
         *
         * @throws Zend_Pdf_Exception
         */
        public function __construct($imageFileName)
        {
        }
        public function getPixelWidth()
        {
        }
        public function getPixelHeight()
        {
        }
        public function getProperties()
        {
        }
    }
    class Zend_Pdf_Resource_Unified extends \Zend_Pdf_Resource
    {
    }
    class Zend_Pdf_StringParser
    {
        /**
         * @var string
         */
        public $data;
        /**
         * @var int
         */
        public $offset;
        /**
         * @var Zend_Pdf_Element_Reference_Context
         */
        public $_context;
        /**
         * @var array<array-key, mixed>
         */
        public $_elements;
        /**
         * @var Zend_Pdf_ElementFactory_Interface
         */
        public $_objFactory;
        public function cleanUp()
        {
        }
        /**
         * @param int $chCode
         *
         * @return bool
         */
        public static function isWhiteSpace($chCode)
        {
        }
        /**
         * @param int $chCode
         *
         * @return bool
         */
        public static function isDelimiter($chCode)
        {
        }
        /**
         * @param bool $skipComment
         */
        public function skipWhiteSpace($skipComment = true)
        {
        }
        public function skipComment()
        {
        }
        /**
         * @return string
         */
        public function readComment()
        {
        }
        /**
         * @return string
         */
        public function readLexeme()
        {
        }
        /**
         * @return Zend_Pdf_Element
         *
         * @throws Zend_Pdf_Exception
         */
        public function readElement($nextLexeme = null)
        {
        }
        /**
         * @return Zend_Pdf_Element_String
         *
         * @throws Zend_Pdf_Exception
         */
        public function _readString()
        {
        }
        /**
         * @return Zend_Pdf_Element_String_Binary
         *
         * @throws Zend_Pdf_Exception
         */
        public function _readBinaryString()
        {
        }
        /**
         * @return Zend_Pdf_Element_Array
         *
         * @throws Zend_Pdf_Exception
         */
        public function _readArray()
        {
        }
        /**
         * @return Zend_Pdf_Element_Dictionary
         *
         * @throws Zend_Pdf_Exception
         */
        public function _readDictionary()
        {
        }
        /**
         * @param null|string $nextLexeme
         *
         * @return Zend_Pdf_Element_Reference
         */
        public function _readReference($nextLexeme = null)
        {
        }
        /**
         * @param null|string $nextLexeme
         *
         * @return Zend_Pdf_Element_Numeric
         */
        public function _readNumeric($nextLexeme = null)
        {
        }
        /**
         * @param int $offset
         * @param Zend_Pdf_Element_Reference_Context $context
         *
         * @return Zend_Pdf_Element_Object
         */
        public function getObject($offset, \Zend_Pdf_Element_Reference_Context $context)
        {
        }
        /**
         * @return int
         */
        public function getLength()
        {
        }
        /**
         * @return string
         */
        public function getString()
        {
        }
        /**
         * @param string $stream
         * @param int $offset
         * @param int $size
         *
         * @return int
         */
        public static function parseIntFromStream($stream, $offset, $size)
        {
        }
        /**
         * @param Zend_Pdf_Element_Reference_Context $context
         */
        public function setContext(\Zend_Pdf_Element_Reference_Context $context)
        {
        }
        /**
         * @param Zend_Pdf_ElementFactory_Interface $factory
         */
        public function __construct($source, \Zend_Pdf_ElementFactory_Interface $factory)
        {
        }
    }
    class Zend_Pdf_Style
    {
        /**
         * @var Zend_Pdf_Color|null
         */
        public $_fillColor;
        /**
         * @var Zend_Pdf_Color|null
         */
        public $_color;
        /**
         * @var Zend_Pdf_Element_Numeric
         */
        public $_lineWidth;
        /**
         * @var array<array-key, mixed>
         */
        public $_lineDashingPattern;
        /**
         * @var float
         */
        public $_lineDashingPhase;
        /**
         * @var Zend_Pdf_Resource_Font
         */
        public $_font;
        /**
         * @var float
         */
        public $_fontSize;
        /**
         * @param Zend_Pdf_Style|null $anotherStyle
         */
        public function __construct($anotherStyle = null)
        {
        }
        /**
         * @param Zend_Pdf_Color $color
         */
        public function setFillColor(\Zend_Pdf_Color $color)
        {
        }
        /**
         * @param Zend_Pdf_Color $color
         */
        public function setLineColor(\Zend_Pdf_Color $color)
        {
        }
        /**
         * @param float $width
         */
        public function setLineWidth($width)
        {
        }
        /**
         * @param array<array-key, mixed> $pattern
         * @param float $phase
         */
        public function setLineDashingPattern($pattern, $phase = 0)
        {
        }
        /**
         * @param Zend_Pdf_Resource_Font $font
         * @param float $fontSize
         */
        public function setFont(\Zend_Pdf_Resource_Font $font, $fontSize)
        {
        }
        /**
         * @param float $fontSize
         */
        public function setFontSize($fontSize)
        {
        }
        /**
         * @return Zend_Pdf_Color|null
         */
        public function getFillColor()
        {
        }
        /**
         * @return Zend_Pdf_Color|null
         */
        public function getLineColor()
        {
        }
        /**
         * @return float
         */
        public function getLineWidth()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLineDashingPattern()
        {
        }
        /**
         * @return Zend_Pdf_Resource_Font
         */
        public function getFont()
        {
        }
        /**
         * @return float
         */
        public function getFontSize()
        {
        }
        /**
         * @return float
         */
        public function getLineDashingPhase()
        {
        }
        /**
         * @return string
         */
        public function instructions()
        {
        }
    }
    class Zend_Pdf_Target
    {
        /**
         * @return Zend_Pdf_Destination
         *
         * @throws Zend_Pdf_Exception
         */
        public static function load(\Zend_Pdf_Element $resource)
        {
        }
        /**
         * @return Zend_Pdf_Element
         */
        public abstract function getResource();
    }
    class Zend_Pdf_Trailer
    {
        public static $_allowedKeys = 'Psalm could not infer this type';
        /**
         * @var Zend_Pdf_Element_Dictionary
         */
        public $_dict;
        /**
         * @param string $key
         *
         * @throws Zend_Pdf_Exception
         */
        public function _checkDictKey($key)
        {
        }
        /**
         * @param Zend_Pdf_Element_Dictionary $dict
         */
        public function __construct(\Zend_Pdf_Element_Dictionary $dict)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function __get($property)
        {
        }
        /**
         * @param string $property
         * @param mixed $value
         */
        public function __set($property, $value)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return string
         */
        public abstract function getPDFLength();
        /**
         * @return string
         */
        public abstract function getPDFString();
        /**
         * @return int
         */
        public abstract function getLastFreeObject();
    }
    class Zend_Pdf_Trailer_Generator extends \Zend_Pdf_Trailer
    {
        /**
         * @param Zend_Pdf_Element_Dictionary $dict
         */
        public function __construct(\Zend_Pdf_Element_Dictionary $dict)
        {
        }
        /**
         * @return string
         */
        public function getPDFLength()
        {
        }
        /**
         * @return string
         */
        public function getPDFString()
        {
        }
        /**
         * @return int
         */
        public function getLastFreeObject()
        {
        }
    }
    class Zend_Pdf_Trailer_Keeper extends \Zend_Pdf_Trailer
    {
        /**
         * @var Zend_Pdf_Element_Reference_Context
         */
        public $_context;
        /**
         * @var Zend_Pdf_Trailer
         */
        public $_prev;
        /**
         * @param Zend_Pdf_Element_Dictionary $dict
         * @param Zend_Pdf_Element_Reference_Context $context
         * @param Zend_Pdf_Trailer|null $prev
         */
        public function __construct(\Zend_Pdf_Element_Dictionary $dict, \Zend_Pdf_Element_Reference_Context $context, ?\Zend_Pdf_Trailer $prev = null)
        {
        }
        /**
         * @param Zend_Pdf_Trailer_Keeper $prev
         */
        public function setPrev(\Zend_Pdf_Trailer_Keeper $prev)
        {
        }
        /**
         * @return Zend_Pdf_Trailer
         */
        public function getPrev()
        {
        }
        /**
         * @return string
         */
        public function getPDFLength()
        {
        }
        /**
         * @return string
         */
        public function getPDFString()
        {
        }
        /**
         * @return Zend_Pdf_Element_Reference_Context
         */
        public function getRefTable()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Pdf_Exception
         */
        public function getLastFreeObject()
        {
        }
    }
    class Zend_Pdf_UpdateInfoContainer
    {
        /**
         * @var int
         */
        public $_objNum;
        /**
         * @var int
         */
        public $_genNum;
        /**
         * @var bool
         */
        public $_isFree;
        /**
         * @var Zend_Memory_Container|null
         */
        public $_dump;
        public function __construct($objNum, $genNum, $isFree, $dump = null)
        {
        }
        /**
         * @return int
         */
        public function getObjNum()
        {
        }
        /**
         * @return int
         */
        public function getGenNum()
        {
        }
        /**
         * @return bool
         */
        public function isFree()
        {
        }
        /**
         * @return string
         */
        public function getObjectDump()
        {
        }
    }
    class Zend_ProgressBar
    {
        /**
         * @var float
         */
        public $_min;
        /**
         * @var float
         */
        public $_max;
        /**
         * @var float
         */
        public $_current;
        /**
         * @var int
         */
        public $_startTime;
        /**
         * @var string
         */
        public $_statusText;
        /**
         * @var Zend_ProgressBar_Adapter
         */
        public $_adapter;
        /**
         * @var string
         */
        public $_persistenceNamespace;
        /**
         * @param Zend_ProgressBar_Adapter $adapter
         * @param float $min
         * @param float $max
         * @param null|string $persistenceNamespace
         *
         * @throws Zend_ProgressBar_Exception
         */
        public function __construct(\Zend_ProgressBar_Adapter $adapter, $min = 0, $max = 100, $persistenceNamespace = null)
        {
        }
        /**
         * @return Zend_ProgressBar_Adapter
         */
        public function getAdapter()
        {
        }
        /**
         * @param float|null $value
         * @param null|string $text
         *
         * @return void
         */
        public function update($value = null, $text = null)
        {
        }
        /**
         * @param null|string $text
         *
         * @return void
         */
        public function next($diff = 1, $text = null)
        {
        }
        /**
         * @return void
         */
        public function finish()
        {
        }
    }
    class Zend_ProgressBar_Adapter
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_ProgressBar_Adapter
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_ProgressBar_Adapter
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param float $current
         * @param float $max
         * @param float $percent
         * @param int $timeTaken
         * @param int $timeRemaining
         * @param string $text
         *
         * @return void
         */
        public abstract function notify($current, $max, $percent, $timeTaken, $timeRemaining, $text);
        /**
         * @return void
         */
        public abstract function finish();
    }
    class Zend_ProgressBar_Adapter_Console extends \Zend_ProgressBar_Adapter
    {
        public const ELEMENT_PERCENT = 'ELEMENT_PERCENT';
        public const ELEMENT_BAR = 'ELEMENT_BAR';
        public const ELEMENT_ETA = 'ELEMENT_ETA';
        public const ELEMENT_TEXT = 'ELEMENT_TEXT';
        public const FINISH_ACTION_EOL = 'FINISH_ACTION_EOL';
        public const FINISH_ACTION_CLEAR_LINE = 'FINISH_ACTION_CLEAR_LINE';
        public const FINISH_ACTION_NONE = 'FINISH_ACTION_NONE';
        /**
         * @var int
         */
        public $_width;
        /**
         * @var array<array-key, mixed>
         */
        public $_elements;
        /**
         * @var string
         */
        public $_finishAction;
        /**
         * @var int
         */
        public $_barWidth;
        /**
         * @var string
         */
        public $_barLeftChar;
        /**
         * @var string
         */
        public $_barIndicatorChar;
        /**
         * @var string
         */
        public $_barRightChar;
        /**
         * @var resource
         */
        public $_outputStream;
        /**
         * @var string
         */
        public $_textWidth;
        /**
         * @var bool
         */
        public $_outputStarted;
        /**
         * @var string
         */
        public $_charset;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param string $resource
         *
         * @return Zend_ProgressBar_Adapter_Console
         */
        public function setOutputStream($resource)
        {
        }
        /**
         * @return resource
         */
        public function getOutputStream()
        {
        }
        /**
         * @param int|null $width
         *
         * @return Zend_ProgressBar_Adapter_Console
         */
        public function setWidth($width = null)
        {
        }
        /**
         * @param array<array-key, mixed> $elements
         *
         * @return Zend_ProgressBar_Adapter_Console
         *
         * @throws Zend_ProgressBar_Adapter_Exception
         */
        public function setElements(array $elements)
        {
        }
        /**
         * @param string $char
         *
         * @return Zend_ProgressBar_Adapter_Console
         *
         * @throws Zend_ProgressBar_Adapter_Exception
         */
        public function setBarLeftChar($char)
        {
        }
        /**
         * @param string $char
         *
         * @return Zend_ProgressBar_Adapter_Console
         *
         * @throws Zend_ProgressBar_Adapter_Exception
         */
        public function setBarRightChar($char)
        {
        }
        /**
         * @param string $char
         *
         * @return Zend_ProgressBar_Adapter_Console
         */
        public function setBarIndicatorChar($char)
        {
        }
        /**
         * @param int $width
         *
         * @return Zend_ProgressBar_Adapter_Console
         */
        public function setTextWidth($width)
        {
        }
        /**
         * @param string $charset
         */
        public function setCharset($charset)
        {
        }
        /**
         * @param string $action
         *
         * @return Zend_ProgressBar_Adapter_Console
         *
         * @throws Zend_ProgressBar_Adapter_Exception
         */
        public function setFinishAction($action)
        {
        }
        /**
         * @param float $current
         * @param float $max
         * @param float $percent
         * @param int $timeTaken
         * @param int $timeRemaining
         * @param string $text
         *
         * @return void
         */
        public function notify($current, $max, $percent, $timeTaken, $timeRemaining, $text)
        {
        }
        /**
         * @return void
         */
        public function finish()
        {
        }
        /**
         * @return void
         */
        public function _calculateBarWidth()
        {
        }
        /**
         * @param string $data
         *
         * @return void
         */
        public function _outputData($data)
        {
        }
    }
    class Zend_ProgressBar_Adapter_Exception extends \Zend_ProgressBar_Exception
    {
    }
    class Zend_ProgressBar_Adapter_JsPull extends \Zend_ProgressBar_Adapter
    {
        /**
         * @var bool
         */
        public $_exitAfterSend;
        /**
         * @param bool $exitAfterSend
         *
         * @return Zend_ProgressBar_Adapter_JsPull
         */
        public function setExitAfterSend($exitAfterSend)
        {
        }
        /**
         * @param float $current
         * @param float $max
         * @param float $percent
         * @param int $timeTaken
         * @param int $timeRemaining
         * @param string $text
         *
         * @return void
         */
        public function notify($current, $max, $percent, $timeTaken, $timeRemaining, $text)
        {
        }
        /**
         * @return void
         */
        public function finish()
        {
        }
        /**
         * @param string $data
         *
         * @return void
         */
        public function _outputData($data)
        {
        }
    }
    class Zend_ProgressBar_Adapter_JsPush extends \Zend_ProgressBar_Adapter
    {
        /**
         * @var string
         */
        public $_updateMethodName;
        /**
         * @var string
         */
        public $_finishMethodName;
        /**
         * @param string $methodName
         *
         * @return Zend_ProgressBar_Adapter_JsPush
         */
        public function setUpdateMethodName($methodName)
        {
        }
        /**
         * @param string $methodName
         *
         * @return Zend_ProgressBar_Adapter_JsPush
         */
        public function setFinishMethodName($methodName)
        {
        }
        /**
         * @param float $current
         * @param float $max
         * @param float $percent
         * @param int $timeTaken
         * @param int $timeRemaining
         * @param string $text
         *
         * @return void
         */
        public function notify($current, $max, $percent, $timeTaken, $timeRemaining, $text)
        {
        }
        /**
         * @return void
         */
        public function finish()
        {
        }
        /**
         * @param string $data
         *
         * @return void
         */
        public function _outputData($data)
        {
        }
    }
    class Zend_ProgressBar_Exception extends \Zend_Exception
    {
    }
    class Zend_Queue implements \Countable
    {
        public const TIMEOUT = 'timeout';
        public const VISIBILITY_TIMEOUT = 30;
        public const NAME = 'name';
        /**
         * @var Zend_Queue_Adapter_AdapterInterface
         */
        public $_adapter;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var string
         */
        public $_messageClass;
        /**
         * @var string
         */
        public $_messageSetClass;
        /**
         * @var Zend_Log
         */
        public $_logger;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct($spec, $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Queue
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Queue
         */
        public function setOption($name, $value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasOption($name)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed|null
         */
        public function getOption($name)
        {
        }
        /**
         * @param Zend_Queue_Adapter_AdapterInterface|string $adapter
         *
         * @return Zend_Queue
         */
        public function setAdapter($adapter)
        {
        }
        /**
         * @return Zend_Queue_Adapter_AdapterInterface
         */
        public function getAdapter()
        {
        }
        /**
         * @param string $className
         *
         * @return Zend_Queue
         */
        public function setMessageClass($className)
        {
        }
        /**
         * @return string
         */
        public function getMessageClass()
        {
        }
        /**
         * @param string $className
         *
         * @return Zend_Queue
         */
        public function setMessageSetClass($className)
        {
        }
        /**
         * @return string
         */
        public function getMessageSetClass()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $name
         * @param int|null $timeout
         *
         * @return Zend_Queue|false
         *
         * @throws Zend_Queue_Exception
         */
        public function createQueue($name, $timeout = null)
        {
        }
        /**
         * @return bool
         */
        public function deleteQueue()
        {
        }
        /**
         * @param Zend_Queue_Message $message
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function deleteMessage(\Zend_Queue_Message $message)
        {
        }
        /**
         * @param mixed $message
         *
         * @return Zend_Queue_Message
         *
         * @throws Zend_Queue_Exception
         */
        public function send($message)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @param int|null $maxMessages
         * @param int|null $timeout
         *
         * @return Zend_Queue_Message_Iterator
         */
        public function receive($maxMessages = null, $timeout = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isSupported($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Queue_Exception
         */
        public function getQueues()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Queue|false
         */
        public function _setName($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function debugInfo()
        {
        }
    }
    class Zend_Queue_Adapter_Activemq extends \Zend_Queue_Adapter_AdapterAbstract
    {
        public const CREATE_TIMEOUT_DEFAULT = 30;
        public const RECEIVE_TIMEOUT_DEFAULT = 30;
        public const DEFAULT_SCHEME = 'tcp';
        public const DEFAULT_HOST = '127.0.0.1';
        public const DEFAULT_PORT = 61613;
        /**
         * @var Zend_Queue_Adapter_Stomp_client
         */
        public $_client;
        /**
         * @var array<array-key, mixed>
         */
        public $_subscribed;
        /**
         * @return void
         */
        public function __construct($options, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @param string $name
         * @param int|null $timeout
         *
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function create($name, $timeout = null)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function delete($name)
        {
        }
        /**
         * @param Zend_Queue_Message $message
         *
         * @return bool
         */
        public function deleteMessage(\Zend_Queue_Message $message)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function getQueues()
        {
        }
        /**
         * @param Zend_Queue $queue
         *
         * @return bool
         */
        public function _isSubscribed(\Zend_Queue $queue)
        {
        }
        /**
         * @param Zend_Queue $queue
         *
         * @return void
         */
        public function _subscribe(\Zend_Queue $queue)
        {
        }
        /**
         * @param int|null $maxMessages
         * @param int|null $timeout
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message_Iterator
         */
        public function receive($maxMessages = null, $timeout = null, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param string $message
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message
         */
        public function send($message, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param Zend_Queue|null $queue
         *
         * @return int
         *
         * @throws Zend_Queue_Exception
         */
        public function count(?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function isExists($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
    }
    class Zend_Queue_Adapter_AdapterAbstract implements \Zend_Queue_Adapter_AdapterInterface
    {
        public const CREATE_TIMEOUT_DEFAULT = 30;
        public const RECEIVE_TIMEOUT_DEFAULT = 30;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_queues;
        /**
         * @var Zend_Queue_Adapter_Abstract
         */
        public $_queue;
        /**
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function __construct($options, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @return Zend_Queue|null
         */
        public function getQueue()
        {
        }
        /**
         * @param Zend_Queue $queue
         *
         * @return Zend_Queue_Adapter_AdapterInterface
         */
        public function setQueue(\Zend_Queue $queue)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isSupported($name)
        {
        }
    }
    interface Zend_Queue_Adapter_AdapterInterface
    {
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         * @param Zend_Queue|null $queue
         *
         * @return void
         */
        public function __construct($options, ?\Zend_Queue $queue = null);
        /**
         * @return Zend_Queue
         */
        public function getQueue();
        /**
         * @param Zend_Queue $queue
         *
         * @return Zend_Queue_Adapter_AdapterInterface
         */
        public function setQueue(\Zend_Queue $queue);
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isExists($name);
        /**
         * @param string $name
         * @param int|null $timeout
         *
         * @return bool
         */
        public function create($name, $timeout = null);
        /**
         * @param string $name
         *
         * @return bool
         */
        public function delete($name);
        /**
         * @return array<array-key, mixed>
         */
        public function getQueues();
        /**
         * @param Zend_Queue|null $queue
         *
         * @return int
         */
        public function count(?\Zend_Queue $queue = null);
        /**
         * @param mixed $message
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message
         */
        public function send($message, ?\Zend_Queue $queue = null);
        /**
         * @param int|null $maxMessages
         * @param int|null $timeout
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message_Iterator
         */
        public function receive($maxMessages = null, $timeout = null, ?\Zend_Queue $queue = null);
        /**
         * @param Zend_Queue_Message $message
         *
         * @return bool
         */
        public function deleteMessage(\Zend_Queue_Message $message);
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions();
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities();
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isSupported($name);
    }
    class Zend_Queue_Adapter_Array extends \Zend_Queue_Adapter_AdapterAbstract
    {
        public const CREATE_TIMEOUT_DEFAULT = 30;
        public const RECEIVE_TIMEOUT_DEFAULT = 30;
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         * @param Zend_Queue|null $queue
         *
         * @return void
         */
        public function __construct($options, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isExists($name)
        {
        }
        /**
         * @param string $name
         * @param int|null $timeout
         *
         * @return bool
         */
        public function create($name, $timeout = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function delete($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueues()
        {
        }
        /**
         * @param Zend_Queue|null $queue
         *
         * @return int
         *
         * @throws Zend_Queue_Exception
         */
        public function count(?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param string $message
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message
         *
         * @throws Zend_Queue_Exception
         */
        public function send($message, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param int|null $maxMessages
         * @param int|null $timeout
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message_Iterator
         */
        public function receive($maxMessages = null, $timeout = null, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param Zend_Queue_Message $message
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function deleteMessage(\Zend_Queue_Message $message)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        public function __sleep()
        {
        }
        public function getData()
        {
        }
        public function setData($data)
        {
        }
    }
    class Zend_Queue_Adapter_Db extends \Zend_Queue_Adapter_AdapterAbstract
    {
        public const CREATE_TIMEOUT_DEFAULT = 30;
        public const RECEIVE_TIMEOUT_DEFAULT = 30;
        /**
         * @var Zend_Queue_Adapter_Db_Queue
         */
        public $_queueTable;
        /**
         * @var Zend_Queue_Adapter_Db_Message
         */
        public $_messageTable;
        /**
         * @var Zend_Db_Table_Row_Abstract
         */
        public $_messageRow;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         * @param Zend_Queue|null $queue
         *
         * @return void
         */
        public function __construct($options, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         *
         * @throws Zend_Queue_Exception
         */
        public function _initDbAdapter()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function isExists($name)
        {
        }
        /**
         * @param string $name
         * @param int|null $timeout
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function create($name, $timeout = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function delete($name)
        {
        }
        public function getQueues()
        {
        }
        /**
         * @param Zend_Queue|null $queue
         *
         * @return int
         *
         * @throws Zend_Queue_Exception
         */
        public function count(?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param string $message
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message
         *
         * @throws Zend_Queue_Exception
         */
        public function send($message, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param int|null $maxMessages
         * @param int|null $timeout
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message_Iterator
         *
         * @throws Zend_Queue_Exception
         */
        public function receive($maxMessages = null, $timeout = null, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param Zend_Queue_Message $message
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function deleteMessage(\Zend_Queue_Message $message)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @param string $name
         *
         * @return int|null
         *
         * @throws Zend_Queue_Exception
         */
        public function getQueueId($name)
        {
        }
    }
    class Zend_Queue_Adapter_Db_Message extends \Zend_Db_Table_Abstract
    {
        public const ADAPTER = 'db';
        public const DEFINITION = 'definition';
        public const DEFINITION_CONFIG_NAME = 'definitionConfigName';
        public const SCHEMA = 'schema';
        public const NAME = 'name';
        public const PRIMARY = 'primary';
        public const COLS = 'cols';
        public const METADATA = 'metadata';
        public const METADATA_CACHE = 'metadataCache';
        public const METADATA_CACHE_IN_CLASS = 'metadataCacheInClass';
        public const ROW_CLASS = 'rowClass';
        public const ROWSET_CLASS = 'rowsetClass';
        public const REFERENCE_MAP = 'referenceMap';
        public const DEPENDENT_TABLES = 'dependentTables';
        public const SEQUENCE = 'sequence';
        public const COLUMNS = 'columns';
        public const REF_TABLE_CLASS = 'refTableClass';
        public const REF_COLUMNS = 'refColumns';
        public const ON_DELETE = 'onDelete';
        public const ON_UPDATE = 'onUpdate';
        public const CASCADE = 'cascade';
        public const CASCADE_RECURSE = 'cascadeRecurse';
        public const RESTRICT = 'restrict';
        public const SET_NULL = 'setNull';
        public const DEFAULT_NONE = 'defaultNone';
        public const DEFAULT_CLASS = 'defaultClass';
        public const DEFAULT_DB = 'defaultDb';
        public const SELECT_WITH_FROM_PART = true;
        public const SELECT_WITHOUT_FROM_PART = false;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var string
         */
        public $_primary;
        /**
         * @var mixed
         */
        public $_sequence;
    }
    class Zend_Queue_Adapter_Db_Queue extends \Zend_Db_Table_Abstract
    {
        public const ADAPTER = 'db';
        public const DEFINITION = 'definition';
        public const DEFINITION_CONFIG_NAME = 'definitionConfigName';
        public const SCHEMA = 'schema';
        public const NAME = 'name';
        public const PRIMARY = 'primary';
        public const COLS = 'cols';
        public const METADATA = 'metadata';
        public const METADATA_CACHE = 'metadataCache';
        public const METADATA_CACHE_IN_CLASS = 'metadataCacheInClass';
        public const ROW_CLASS = 'rowClass';
        public const ROWSET_CLASS = 'rowsetClass';
        public const REFERENCE_MAP = 'referenceMap';
        public const DEPENDENT_TABLES = 'dependentTables';
        public const SEQUENCE = 'sequence';
        public const COLUMNS = 'columns';
        public const REF_TABLE_CLASS = 'refTableClass';
        public const REF_COLUMNS = 'refColumns';
        public const ON_DELETE = 'onDelete';
        public const ON_UPDATE = 'onUpdate';
        public const CASCADE = 'cascade';
        public const CASCADE_RECURSE = 'cascadeRecurse';
        public const RESTRICT = 'restrict';
        public const SET_NULL = 'setNull';
        public const DEFAULT_NONE = 'defaultNone';
        public const DEFAULT_CLASS = 'defaultClass';
        public const DEFAULT_DB = 'defaultDb';
        public const SELECT_WITH_FROM_PART = true;
        public const SELECT_WITHOUT_FROM_PART = false;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var string
         */
        public $_primary;
        /**
         * @var mixed
         */
        public $_sequence;
    }
    class Zend_Queue_Adapter_Memcacheq extends \Zend_Queue_Adapter_AdapterAbstract
    {
        public const CREATE_TIMEOUT_DEFAULT = 30;
        public const RECEIVE_TIMEOUT_DEFAULT = 30;
        public const DEFAULT_HOST = '127.0.0.1';
        public const DEFAULT_PORT = 22201;
        public const EOL = '
';
        /**
         * @var Memcache
         */
        public $_cache;
        /**
         * @var string
         */
        public $_host;
        /**
         * @var int
         */
        public $_port;
        /**
         * @var resource
         */
        public $_socket;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         * @param Zend_Queue|null $queue
         *
         * @return void
         */
        public function __construct($options, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function isExists($name)
        {
        }
        /**
         * @param string $name
         * @param int|null $timeout
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function create($name, $timeout = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function delete($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Queue_Exception
         */
        public function getQueues()
        {
        }
        /**
         * @param Zend_Queue|null $queue
         *
         * @return int
         *
         * @throws Zend_Queue_Exception
         */
        public function count(?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param string $message
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message
         *
         * @throws Zend_Queue_Exception
         */
        public function send($message, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param int|null $maxMessages
         * @param int|null $timeout
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message_Iterator
         *
         * @throws Zend_Queue_Exception
         */
        public function receive($maxMessages = null, $timeout = null, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param Zend_Queue_Message $message
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function deleteMessage(\Zend_Queue_Message $message)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @param string $command
         * @param array<array-key, mixed> $terminator
         * @param bool $include_term
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Queue_Exception
         */
        public function _sendCommand($command, array $terminator, $include_term = false)
        {
        }
    }
    class Zend_Queue_Adapter_Null extends \Zend_Queue_Adapter_AdapterAbstract
    {
        public const CREATE_TIMEOUT_DEFAULT = 30;
        public const RECEIVE_TIMEOUT_DEFAULT = 30;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         * @param Zend_Queue|null $queue
         *
         * @return void
         */
        public function __construct($options, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function isExists($name)
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function create($name, $timeout = null)
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function delete($name)
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function getQueues()
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function count(?\Zend_Queue $queue = null)
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function send($message, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function receive($maxMessages = null, $timeout = null, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function deleteMessage(\Zend_Queue_Message $message)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
    }
    class Zend_Queue_Adapter_PlatformJobQueue extends \Zend_Queue_Adapter_AdapterAbstract
    {
        public const CREATE_TIMEOUT_DEFAULT = 30;
        public const RECEIVE_TIMEOUT_DEFAULT = 30;
        /**
         * @var ZendApi_JobQueue
         */
        public $_zendQueue;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         * @param Zend_Queue|null $queue
         *
         * @return void
         */
        public function __construct($options, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function isExists($name)
        {
        }
        /**
         * @param string $name
         * @param int|null $timeout
         *
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function create($name, $timeout = null)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function delete($name)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function getQueues()
        {
        }
        /**
         * @param Zend_Queue|null $queue
         *
         * @return int
         */
        public function count(?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param ZendAPI_job|array<array-key, mixed> $message
         * @param Zend_Queue|null $queue
         *
         * @return Zend_Queue_Message
         *
         * @throws Zend_Queue_Exception
         */
        public function send($message, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param int|null $maxMessages
         * @param int|null $timeout
         * @param Zend_Queue|null $queue
         *
         * @return ArrayIterator
         *
         * @throws Zend_Queue_Exception
         */
        public function receive($maxMessages = null, $timeout = null, ?\Zend_Queue $queue = null)
        {
        }
        /**
         * @param Zend_Queue_Message $message
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function deleteMessage(\Zend_Queue_Message $message)
        {
        }
        public function isJobIdExist($id)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCapabilities()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
    }
    class Zend_Queue_Exception extends \Zend_Exception
    {
    }
    class Zend_Queue_Message
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var bool
         */
        public $_connected;
        /**
         * @var Zend_Queue
         */
        public $_queue;
        /**
         * @var string
         */
        public $_queueClass;
        /**
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Queue_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $key
         *
         * @return string
         *
         * @throws Zend_Queue_Exception
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function __set($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
        /**
         * @return Zend_Queue|null
         */
        public function getQueue()
        {
        }
        /**
         * @param Zend_Queue $queue
         *
         * @return bool
         */
        public function setQueue(\Zend_Queue $queue)
        {
        }
        /**
         * @return string
         */
        public function getQueueClass()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @param array<array-key, mixed> $data
         *
         * @return Zend_Queue_Message
         */
        public function setFromArray(array $data)
        {
        }
    }
    class Zend_Queue_Message_Iterator implements \Iterator, \Countable
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var bool
         */
        public $_connected;
        /**
         * @var Zend_Queue_Adapter_AdapterInterface
         */
        public $_queue;
        /**
         * @var string
         */
        public $_queueClass;
        /**
         * @var string
         */
        public $_messageClass;
        /**
         * @var int
         */
        public $_pointer;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return Zend_Queue|null
         */
        public function getQueue()
        {
        }
        /**
         * @param Zend_Queue_Adapter_AdapterInterface $queue
         *
         * @return bool
         *
         * @throws Zend_Queue_Exception
         */
        public function setQueue(\Zend_Queue $queue)
        {
        }
        /**
         * @return string
         */
        public function getQueueClass()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return Zend_Queue_Message
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Queue_Message_PlatformJob extends \Zend_Queue_Message
    {
        /**
         * @var ZendApi_Job
         */
        public $_job;
        /**
         * @var string
         */
        public $_id;
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Queue_Exception
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Queue_Message_PlatformJob
         */
        public function setJobId($id)
        {
        }
        /**
         * @return string
         */
        public function getJobId()
        {
        }
        /**
         * @return ZendApi_Job
         */
        public function getJob()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function __sleep()
        {
        }
        /**
         * @return string
         */
        public function getQueueClass()
        {
        }
        /**
         * @return void
         */
        public function _setJobProperties()
        {
        }
    }
    class Zend_Queue_Stomp_Client
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_connection;
        public function __construct($scheme = null, $host = null, $port = null, $connectionClass = 'Zend_Queue_Stomp_Client_Connection', $frameClass = 'Zend_Queue_Stomp_Frame')
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @param string $scheme
         *
         * @return bool
         */
        public function addConnection($scheme, $host, $port, $class = 'Zend_Queue_Stomp_Client_Connection')
        {
        }
        /**
         * @param Zend_Queue_Stomp_Client_ConnectionInterface $connection
         *
         * @return void
         */
        public function setConnection(\Zend_Queue_Stomp_Client_ConnectionInterface $connection)
        {
        }
        /**
         * @return Zend_Queue_Stomp_Client_ConnectionInterface|null
         */
        public function getConnection()
        {
        }
        /**
         * @param Zend_Queue_Stomp_FrameInterface $frame
         *
         * @return bool
         */
        public function send(\Zend_Queue_Stomp_FrameInterface $frame)
        {
        }
        /**
         * @return Zend_Queue_Stomp_FrameInterface|bool
         */
        public function receive()
        {
        }
        /**
         * @return bool
         */
        public function canRead()
        {
        }
        /**
         * @return Zend_Queue_Stomp_FrameInterface
         */
        public function createFrame()
        {
        }
    }
    class Zend_Queue_Stomp_Client_Connection implements \Zend_Queue_Stomp_Client_ConnectionInterface
    {
        public const READ_TIMEOUT_DEFAULT_USEC = 0;
        public const READ_TIMEOUT_DEFAULT_SEC = 5;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var resource
         */
        public $_socket;
        public function open($scheme, $host, $port, array $options = array())
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @param bool $destructor
         *
         * @return void
         */
        public function close($destructor = false)
        {
        }
        /**
         * @return true
         *
         * @throws Zend_Queue_Exception
         */
        public function ping()
        {
        }
        /**
         * @param Zend_Queue_Stom_FrameInterface $frame
         *
         * @return static
         */
        public function write(\Zend_Queue_Stomp_FrameInterface $frame)
        {
        }
        /**
         * @return bool
         */
        public function canRead()
        {
        }
        /**
         * @return Zend_Queue_Stomp_FrameInterface|false
         *
         * @throws Zend_Queue_Exception
         */
        public function read()
        {
        }
        public function setFrameClass($classname)
        {
        }
        /**
         * @return string
         */
        public function getFrameClass()
        {
        }
        /**
         * @return Zend_Queue_Stomp_FrameInterface
         */
        public function createFrame()
        {
        }
    }
    interface Zend_Queue_Stomp_Client_ConnectionInterface
    {
        /**
         * @param string $scheme
         *
         * @return bool
         */
        public function open($scheme, $host, $port);
        /**
         * @param bool $destructor
         *
         * @return void
         */
        public function close($destructor = false);
        /**
         * @return true
         *
         * @throws Zend_Queue_Exception
         */
        public function ping();
        /**
         * @param Zend_Queue_Stomp_FrameInterface $frame
         *
         * @return static
         */
        public function write(\Zend_Queue_Stomp_FrameInterface $frame);
        public function canRead();
        /**
         * @return Zend_Queue_Stomp_Frame|false
         *
         * @throws Zend_Queue_Exception
         */
        public function read();
        /**
         * @param string $class
         */
        public function setFrameClass($class);
        /**
         * @return string
         */
        public function getFrameClass();
        /**
         * @return Zend_Queue_Stomp_FrameInterface
         */
        public function createFrame();
    }
    class Zend_Queue_Stomp_Frame implements \Zend_Queue_Stomp_FrameInterface
    {
        public const END_OF_FRAME = ' 
';
        public const CONTENT_LENGTH = 'content-length';
        public const EOL = '
';
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var string
         */
        public $_command;
        /**
         * @var string
         */
        public $_body;
        public $_autoContentLength = null;
        public function __construct()
        {
        }
        /**
         * @return bool
         */
        public function getAutoContentLength()
        {
        }
        public function setAutoContentLength($auto)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        /**
         * @param array<array-key, mixed> $headers
         *
         * @return static
         *
         * @throws Zend_Queue_Exception
         */
        public function setHeaders(array $headers)
        {
        }
        /**
         * @param string $header
         * @param string $value
         *
         * @return Zend_Queue_Stomp_Frame
         *
         * @throws Zend_Queue_Exception
         */
        public function setHeader($header, $value)
        {
        }
        /**
         * @param string $header
         *
         * @return false|string
         *
         * @throws Zend_Queue_Exception
         */
        public function getHeader($header)
        {
        }
        /**
         * @return false|string
         */
        public function getBody()
        {
        }
        /**
         * @param null|string $body
         *
         * @return Zend_Queue_Stomp_Frame
         *
         * @throws Zend_Queue_Exception
         */
        public function setBody($body)
        {
        }
        /**
         * @return false|string
         */
        public function getCommand()
        {
        }
        /**
         * @throws Zend_Queue_Exception
         */
        public function setCommand($command)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Queue_Exception
         */
        public function toFrame()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $frame
         *
         * @return static
         */
        public function fromFrame($frame)
        {
        }
    }
    interface Zend_Queue_Stomp_FrameInterface
    {
        /**
         * @return bool
         */
        public function getAutoContentLength();
        public function setAutoContentLength($auto);
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders();
        /**
         * @param array<array-key, mixed> $headers
         *
         * @return static
         *
         * @throws Zend_Queue_Exception
         */
        public function setHeaders(array $headers);
        public function getHeader($header);
        /**
         * @param string $header
         * @param string $value
         *
         * @return static
         *
         * @throws Zend_Queue_Exception
         */
        public function setHeader($header, $value);
        /**
         * @return static
         */
        public function getBody();
        /**
         * @param null|string $body
         *
         * @return static
         *
         * @throws Zend_Queue_Exception
         */
        public function setBody($body);
        /**
         * @return static
         */
        public function getCommand();
        /**
         * @return static
         *
         * @throws Zend_Queue_Exception
         */
        public function setCommand($command);
        /**
         * @return string
         *
         * @throws Zend_Queue_Exception
         */
        public function toFrame();
        public function __toString();
        /**
         * @param string $frame
         *
         * @return static
         */
        public function fromFrame($frame);
    }
    class Zend_Reflection_Class extends \ReflectionClass
    {
        public const IS_IMPLICIT_ABSTRACT = 16;
        public const IS_EXPLICIT_ABSTRACT = 32;
        public const IS_FINAL = 4;
        /**
         * @return Zend_Reflection_File
         */
        public function getDeclaringFile($reflectionClass = 'Zend_Reflection_File')
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Docblock
         *
         * @throws Zend_Reflection_Exception
         */
        public function getDocblock($reflectionClass = 'Zend_Reflection_Docblock')
        {
        }
        /**
         * @param bool $includeDocComment
         *
         * @return int
         */
        public function getStartLine($includeDocComment = false)
        {
        }
        /**
         * @param bool $includeDocblock
         *
         * @return string
         */
        public function getContents($includeDocblock = true)
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getInterfaces($reflectionClass = 'Zend_Reflection_Class')
        {
        }
        /**
         * @param string $name
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Method
         */
        public function getMethod($name, $reflectionClass = 'Zend_Reflection_Method')
        {
        }
        /**
         * @param string $filter
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getMethods($filter = -1, $reflectionClass = 'Zend_Reflection_Method')
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Class
         */
        public function getParentClass($reflectionClass = 'Zend_Reflection_Class')
        {
        }
        /**
         * @param string $name
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Property
         */
        public function getProperty($name, $reflectionClass = 'Zend_Reflection_Property')
        {
        }
        /**
         * @param int $filter
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getProperties($filter = -1, $reflectionClass = 'Zend_Reflection_Property')
        {
        }
    }
    class Zend_Reflection_Docblock implements \Reflector
    {
        /**
         * @var Reflector
         */
        public $_reflector;
        public $_startLine = null;
        public $_endLine = null;
        /**
         * @var string
         */
        public $_docComment;
        /**
         * @var string
         */
        public $_cleanDocComment;
        /**
         * @var string
         */
        public $_longDescription;
        /**
         * @var string
         */
        public $_shortDescription;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        /**
         * @return void
         */
        public static function export()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param Reflector|string $commentOrReflector
         */
        public function __construct($commentOrReflector)
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
        /**
         * @return int
         */
        public function getStartLine()
        {
        }
        /**
         * @return int
         */
        public function getEndLine()
        {
        }
        /**
         * @return string
         */
        public function getShortDescription()
        {
        }
        /**
         * @return string
         */
        public function getLongDescription()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasTag($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Reflection_Docblock_Tag|false
         */
        public function getTag($name)
        {
        }
        /**
         * @param null|string $filter
         *
         * @return array<array-key, mixed>
         */
        public function getTags($filter = null)
        {
        }
        /**
         * @return void
         */
        public function _parse()
        {
        }
    }
    class Zend_Reflection_Docblock_Tag implements \Reflector
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_tagClasses;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var string
         */
        public $_description;
        /**
         * @param string $tagDocblockLine
         *
         * @return Zend_Reflection_Docblock_Tag
         */
        public static function factory($tagDocblockLine)
        {
        }
        /**
         * @return void
         */
        public static function export()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $tagDocblockLine
         *
         * @return void
         */
        public function __construct($tagDocblockLine)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
    }
    class Zend_Reflection_Docblock_Tag_Param extends \Zend_Reflection_Docblock_Tag
    {
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_variableName;
        /**
         * @param string $tagDocblockLine
         */
        public function __construct($tagDocblockLine)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function getVariableName()
        {
        }
    }
    class Zend_Reflection_Docblock_Tag_Return extends \Zend_Reflection_Docblock_Tag
    {
        /**
         * @var string
         */
        public $_type;
        /**
         * @param string $tagDocblockLine
         *
         * @return Zend_Reflection_Docblock_Tag_Return
         */
        public function __construct($tagDocblockLine)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Reflection_Exception extends \Zend_Exception
    {
    }
    class Zend_Reflection_Extension extends \ReflectionExtension
    {
        /**
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getFunctions($reflectionClass = 'Zend_Reflection_Function')
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getClasses($reflectionClass = 'Zend_Reflection_Class')
        {
        }
    }
    class Zend_Reflection_File implements \Reflector
    {
        /**
         * @var string
         */
        public $_filepath;
        /**
         * @var string
         */
        public $_docComment;
        /**
         * @var int
         */
        public $_startLine;
        /**
         * @var int
         */
        public $_endLine;
        /**
         * @var array<array-key, string>
         */
        public $_requiredFiles;
        /**
         * @var array<array-key, Zend_Reflection_Class>
         */
        public $_classes;
        /**
         * @var array<array-key, Zend_Reflection_Function>
         */
        public $_functions;
        /**
         * @var string
         */
        public $_contents;
        /**
         * @param string $file
         *
         * @return void
         */
        public function __construct($file)
        {
        }
        /**
         * @param string $fileName
         *
         * @return string
         */
        public static function findRealpathInIncludePath($fileName)
        {
        }
        /**
         * @return null
         */
        public static function export()
        {
        }
        /**
         * @return string
         */
        public function getFileName()
        {
        }
        /**
         * @return int
         */
        public function getStartLine()
        {
        }
        /**
         * @return int
         */
        public function getEndLine()
        {
        }
        /**
         * @return string
         */
        public function getDocComment()
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Docblock
         */
        public function getDocblock($reflectionClass = 'Zend_Reflection_Docblock')
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getClasses($reflectionClass = 'Zend_Reflection_Class')
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getFunctions($reflectionClass = 'Zend_Reflection_Function')
        {
        }
        /**
         * @param null|string $name
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Class
         *
         * @throws Zend_Reflection_Exception
         */
        public function getClass($name = null, $reflectionClass = 'Zend_Reflection_Class')
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return void
         */
        public function _reflect()
        {
        }
        /**
         * @param array<array-key, mixed> $tokens
         *
         * @return void
         */
        public function _checkFileDocBlock($tokens)
        {
        }
    }
    class Zend_Reflection_Function extends \ReflectionFunction
    {
        public const IS_DEPRECATED = 262144;
        /**
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Docblock
         */
        public function getDocblock($reflectionClass = 'Zend_Reflection_Docblock')
        {
        }
        /**
         * @param bool $includeDocComment
         *
         * @return int
         */
        public function getStartLine($includeDocComment = false)
        {
        }
        /**
         * @param bool $includeDocblock
         *
         * @return string
         */
        public function getContents($includeDocblock = true)
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getParameters($reflectionClass = 'Zend_Reflection_Parameter')
        {
        }
        /**
         * @return Zend_Reflection_Docblock_Tag_Return
         */
        public function getReturn()
        {
        }
    }
    class Zend_Reflection_Method extends \ReflectionMethod
    {
        public const IS_STATIC = 1;
        public const IS_PUBLIC = 256;
        public const IS_PROTECTED = 512;
        public const IS_PRIVATE = 1024;
        public const IS_ABSTRACT = 2;
        public const IS_FINAL = 4;
        /**
         * @return Zend_Reflection_Docblock
         *
         * @throws Zend_Reflection_Exception
         */
        public function getDocblock($reflectionClass = 'Zend_Reflection_Docblock')
        {
        }
        /**
         * @param bool $includeDocComment
         *
         * @return int
         */
        public function getStartLine($includeDocComment = false)
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Class
         */
        public function getDeclaringClass($reflectionClass = 'Zend_Reflection_Class')
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return array<array-key, mixed>
         */
        public function getParameters($reflectionClass = 'Zend_Reflection_Parameter')
        {
        }
        /**
         * @param bool $includeDocblock
         *
         * @return string
         */
        public function getContents($includeDocblock = true)
        {
        }
        /**
         * @return string
         */
        public function getBody()
        {
        }
    }
    class Zend_Reflection_Parameter extends \ReflectionParameter
    {
        /**
         * @var bool
         */
        public $_isFromMethod;
        /**
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Class
         */
        public function getDeclaringClass($reflectionClass = 'Zend_Reflection_Class')
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Class
         */
        public function getClass($reflectionClass = 'Zend_Reflection_Class')
        {
        }
        /**
         * @param null|string $reflectionClass
         *
         * @return Zend_Reflection_Function|Zend_Reflection_Method
         */
        public function getDeclaringFunction($reflectionClass = null)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Reflection_Property extends \ReflectionProperty
    {
        public const IS_STATIC = 1;
        public const IS_PUBLIC = 256;
        public const IS_PROTECTED = 512;
        public const IS_PRIVATE = 1024;
        /**
         * @return Zend_Reflection_Class
         */
        public function getDeclaringClass($reflectionClass = 'Zend_Reflection_Class')
        {
        }
        /**
         * @param string $reflectionClass
         *
         * @return Zend_Reflection_Docblock|false
         */
        public function getDocComment($reflectionClass = 'Zend_Reflection_Docblock')
        {
        }
    }
    class Zend_Registry extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        /**
         * @var string
         */
        public static $_registryClassName;
        /**
         * @var Zend_Registry
         */
        public static $_registry;
        /**
         * @return Zend_Registry
         */
        public static function getInstance()
        {
        }
        /**
         * @param Zend_Registry $registry
         *
         * @return void
         *
         * @throws Zend_Exception
         */
        public static function setInstance(\Zend_Registry $registry)
        {
        }
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @param string $registryClassName
         *
         * @return void
         *
         * @throws Zend_Exception
         */
        public static function setClassName($registryClassName = 'Zend_Registry')
        {
        }
        public static function _unsetInstance()
        {
        }
        /**
         * @param string $index
         *
         * @return mixed
         *
         * @throws Zend_Exception
         */
        public static function get($index)
        {
        }
        /**
         * @param string $index
         * @param mixed $value
         *
         * @return void
         */
        public static function set($index, $value)
        {
        }
        /**
         * @param string $index
         *
         * @return bool
         */
        public static function isRegistered($index)
        {
        }
        /**
         * @param array<array-key, mixed> $array
         * @param int $flags
         */
        public function __construct($array = array(), $flags)
        {
        }
        /**
         * @param string $index
         */
        public function offsetExists($index)
        {
        }
    }
    class Zend_Rest_Client extends \Zend_Service_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var Zend_Uri_Http
         */
        public $_uri;
        /**
         * @var bool
         */
        public $_noReset;
        /**
         * @param Zend_Uri_Http|null|string $uri
         *
         * @return void
         */
        public function __construct($uri = null)
        {
        }
        /**
         * @param Zend_Uri_Http|string $uri
         *
         * @return Zend_Rest_Client
         */
        public function setUri($uri)
        {
        }
        /**
         * @return Zend_Uri_Http
         */
        public function getUri()
        {
        }
        /**
         * @param string $path
         *
         * @return void
         *
         * @throws Zend_Rest_Client_Exception
         */
        public function _prepareRest($path)
        {
        }
        /**
         * @param bool $bool
         */
        public function setNoReset($bool = true)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed>|null $query
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Http_Client_Exception
         */
        public function restGet($path, ?array $query = null)
        {
        }
        /**
         * @param mixed $method
         * @param mixed|null $data
         *
         * @return Zend_Http_Response
         */
        public function _performPost($method, $data = null)
        {
        }
        /**
         * @param string $path
         * @param mixed|null $data
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Http_Client_Exception
         */
        public function restPost($path, $data = null)
        {
        }
        /**
         * @param string $path
         * @param mixed|null $data
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Http_Client_Exception
         */
        public function restPut($path, $data = null)
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Http_Client_Exception
         */
        public function restDelete($path, $data = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return Zend_Rest_Client|Zend_Rest_Client_Result
         */
        public function __call($method, $args)
        {
        }
    }
    class Zend_Rest_Client_Exception extends \Zend_Rest_Exception
    {
    }
    class Zend_Rest_Client_Result implements \IteratorAggregate
    {
        /**
         * @var SimpleXMLElement
         */
        public $_sxml;
        /**
         * @var string
         */
        public $_errstr;
        /**
         * @param string $data
         *
         * @return void
         */
        public function __construct($data)
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param null|string $errfile
         * @param null|string $errline
         * @param array<array-key, mixed>|null $errcontext
         *
         * @return true
         */
        public function handleXmlErrors($errno, $errstr, $errfile = null, $errline = null, ?array $errcontext = null)
        {
        }
        /**
         * @param SimpleXMLElement $value
         *
         * @return mixed
         */
        public function toValue(\SimpleXMLElement $value)
        {
        }
        /**
         * @param string $name
         *
         * @return SimpleXMLElement|array<array-key, mixed>|null
         */
        public function __get($name)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @return SimpleXMLIterator
         */
        public function getIterator()
        {
        }
        /**
         * @return bool
         */
        public function getStatus()
        {
        }
        public function isError()
        {
        }
        public function isSuccess()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Rest_Client_Result_Exception extends \Zend_Rest_Client_Exception
    {
    }
    class Zend_Rest_Controller extends \Zend_Controller_Action
    {
        public abstract function indexAction();
        public abstract function getAction();
        public abstract function headAction();
        public abstract function postAction();
        public abstract function putAction();
        public abstract function deleteAction();
    }
    class Zend_Rest_Exception extends \Zend_Exception
    {
    }
    class Zend_Rest_Route extends \Zend_Controller_Router_Route_Module
    {
        public const URI_DELIMITER = '/';
        /**
         * @var array<array-key, mixed>
         */
        public $_restfulModules;
        /**
         * @var array<array-key, mixed>
         */
        public $_restfulControllers;
        /**
         * @var Zend_Controller_Front
         */
        public $_front;
        /**
         * @param Zend_Controller_Front $front
         * @param array<array-key, mixed> $defaults
         * @param array<array-key, mixed> $responders
         */
        public function __construct(\Zend_Controller_Front $front, array $defaults = array(), array $responders = array())
        {
        }
        public static function getInstance(\Zend_Config $config)
        {
        }
        /**
         * @param Zend_Controller_Request_Http $request
         *
         * @return array<array-key, mixed>
         */
        public function match($request, $partial = false)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param bool $reset
         * @param bool $encode
         *
         * @return string
         */
        public function assemble($data = array(), $reset = false, $encode = true)
        {
        }
        /**
         * @return int
         */
        public function getVersion()
        {
        }
        /**
         * @param array<array-key, mixed> $responders
         */
        public function _parseResponders($responders)
        {
        }
        /**
         * @param string $moduleName
         *
         * @return bool
         */
        public function _checkRestfulModule($moduleName)
        {
        }
        /**
         * @param string $moduleName
         * @param string $controllerName
         *
         * @return bool
         */
        public function _checkRestfulController($moduleName, $controllerName)
        {
        }
        /**
         * @return bool
         */
        public function _allRestful()
        {
        }
        /**
         * @param string $moduleName
         *
         * @return bool
         */
        public function _fullRestfulModule($moduleName)
        {
        }
    }
    class Zend_Rest_Server implements \Zend_Server_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_args;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var array<array-key, mixed>
         */
        public $_functions;
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var array<array-key, mixed>
         */
        public static $magicMethods;
        /**
         * @var string
         */
        public $_method;
        /**
         * @var Zend_Server_Reflection
         */
        public $_reflection;
        /**
         * @var bool
         */
        public $_returnResponse;
        public function __construct()
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Rest_Server
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $value
         * @param string $key
         *
         * @return string
         */
        public static function lowerCase(&$value, &$key)
        {
        }
        /**
         * @param bool|null $flag
         *
         * @return Zend_Rest_Server|bool
         */
        public function returnResponse($flag = null)
        {
        }
        /**
         * @param array<array-key, mixed> $request
         *
         * @return null|string
         *
         * @throws Zend_Rest_Server_Exception
         */
        public function handle($request = false)
        {
        }
        /**
         * @param string $classname
         * @param string $namespace
         * @param array<array-key, mixed> $argv
         */
        public function setClass($classname, $namespace = '', $argv = array())
        {
        }
        /**
         * @param array<array-key, mixed>|object $struct
         *
         * @return string
         */
        public function _handleStruct($struct)
        {
        }
        /**
         * @param mixed $struct
         * @param DOMDocument $dom
         * @param DOMElement $parent
         *
         * @return void
         */
        public function _structValue($struct, \DOMDocument $dom, \DOMElement $parent)
        {
        }
        /**
         * @param bool|int|string $value
         *
         * @return string
         */
        public function _handleScalar($value)
        {
        }
        /**
         * @param int|null $code
         *
         * @return DOMDocument
         */
        public function fault($exception = null, $code = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        /**
         * @param string $function
         * @param string $namespace
         */
        public function addFunction($function, $namespace = '')
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFunctions()
        {
        }
        /**
         * @param array<array-key, mixed> $functions
         */
        public function loadFunctions($functions)
        {
        }
        /**
         * @param int $mode
         */
        public function setPersistence($mode)
        {
        }
        /**
         * @param string $class
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function _callStaticMethod($class, array $args)
        {
        }
        /**
         * @param string $class
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         *
         * @throws Zend_Rest_Server_Exception
         */
        public function _callObjectMethod($class, array $args)
        {
        }
    }
    class Zend_Rest_Server_Exception extends \Zend_Rest_Exception
    {
    }
    class Zend_Search_Exception extends \Zend_Exception
    {
    }
    class Zend_Search_Lucene implements \Zend_Search_Lucene_Interface
    {
        public const FORMAT_PRE_2_1 = 0;
        public const FORMAT_2_1 = 1;
        public const FORMAT_2_3 = 2;
        public const GENERATION_RETRIEVE_COUNT = 10;
        public const GENERATION_RETRIEVE_PAUSE = 50;
        /**
         * @var string
         */
        public static $_defaultSearchField;
        /**
         * @var int
         */
        public static $_resultSetLimit;
        /**
         * @var int
         */
        public static $_termsPerQueryLimit;
        /**
         * @var Zend_Search_Lucene_Storage_Directory
         */
        public $_directory;
        /**
         * @var bool
         */
        public $_closeDirOnExit;
        /**
         * @var Zend_Search_Lucene_Index_Writer
         */
        public $_writer;
        /**
         * @var array<array-key, mixed>
         */
        public $_segmentInfos;
        /**
         * @var int
         */
        public $_docCount;
        /**
         * @var bool
         */
        public $_hasChanges;
        /**
         * @var bool
         */
        public $_closed;
        /**
         * @var int
         */
        public $_refCount;
        /**
         * @var int
         */
        public $_generation;
        /**
         * @var int
         */
        public $_formatVersion;
        /**
         * @var Zend_Search_Lucene_TermStreamsPriorityQueue
         */
        public $_termsStream;
        /**
         * @param mixed $directory
         *
         * @return Zend_Search_Lucene_Interface
         */
        public static function create($directory)
        {
        }
        /**
         * @param mixed $directory
         *
         * @return Zend_Search_Lucene_Interface
         */
        public static function open($directory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         *
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function getActualGeneration(\Zend_Search_Lucene_Storage_Directory $directory)
        {
        }
        /**
         * @return int
         */
        public function getGeneration()
        {
        }
        /**
         * @param int $generation
         *
         * @return string
         */
        public static function getSegmentFileName($generation)
        {
        }
        /**
         * @return int
         */
        public function getFormatVersion()
        {
        }
        /**
         * @param int $formatVersion
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function setFormatVersion($formatVersion)
        {
        }
        /**
         * @throws Zend_Search_Lucene_Exception
         */
        public function _readPre21SegmentsFile()
        {
        }
        /**
         * @throws Zend_Search_Lucene_Exception
         */
        public function _readSegmentsFile()
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory_Filesystem|null|string $directory
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($directory = null, $create = false)
        {
        }
        public function _close()
        {
        }
        public function addReference()
        {
        }
        public function removeReference()
        {
        }
        public function __destruct()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Writer
         */
        public function _getIndexWriter()
        {
        }
        /**
         * @return Zend_Search_Lucene_Storage_Directory
         */
        public function getDirectory()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return int
         */
        public function maxDoc()
        {
        }
        /**
         * @return int
         */
        public function numDocs()
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function isDeleted($id)
        {
        }
        /**
         * @param string $fieldName
         */
        public static function setDefaultSearchField($fieldName)
        {
        }
        /**
         * @return string
         */
        public static function getDefaultSearchField()
        {
        }
        /**
         * @param int $limit
         */
        public static function setResultSetLimit($limit)
        {
        }
        /**
         * @return int
         */
        public static function getResultSetLimit()
        {
        }
        /**
         * @param int $limit
         */
        public static function setTermsPerQueryLimit($limit)
        {
        }
        /**
         * @return int
         */
        public static function getTermsPerQueryLimit()
        {
        }
        /**
         * @return int
         */
        public function getMaxBufferedDocs()
        {
        }
        /**
         * @param int $maxBufferedDocs
         */
        public function setMaxBufferedDocs($maxBufferedDocs)
        {
        }
        /**
         * @return int
         */
        public function getMaxMergeDocs()
        {
        }
        /**
         * @param int $maxMergeDocs
         */
        public function setMaxMergeDocs($maxMergeDocs)
        {
        }
        /**
         * @return int
         */
        public function getMergeFactor()
        {
        }
        public function setMergeFactor($mergeFactor)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_QueryParser|string $query
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function find($query)
        {
        }
        /**
         * @param bool $indexed
         *
         * @return array<array-key, mixed>
         */
        public function getFieldNames($indexed = false)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_QueryHit|int $id
         *
         * @return Zend_Search_Lucene_Document
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getDocument($id)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return bool
         */
        public function hasTerm(\Zend_Search_Lucene_Index_Term $term)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         */
        public function termDocs(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return Zend_Search_Lucene_Index_DocsFilter
         */
        public function termDocsFilter(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return int
         */
        public function termFreqs(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         */
        public function termPositions(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return int
         */
        public function docFreq(\Zend_Search_Lucene_Index_Term $term)
        {
        }
        /**
         * @return Zend_Search_Lucene_Search_Similarity
         */
        public function getSimilarity()
        {
        }
        /**
         * @param int $id
         * @param string $fieldName
         *
         * @return float
         */
        public function norm($id, $fieldName)
        {
        }
        /**
         * @return bool
         */
        public function hasDeletions()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_QueryHit|int $id
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function delete($id)
        {
        }
        /**
         * @param Zend_Search_Lucene_Document $document
         */
        public function addDocument(\Zend_Search_Lucene_Document $document)
        {
        }
        public function _updateDocCount()
        {
        }
        public function commit()
        {
        }
        public function optimize()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function terms()
        {
        }
        public function resetTermsStream()
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $prefix
         */
        public function skipTo(\Zend_Search_Lucene_Index_Term $prefix)
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function nextTerm()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function currentTerm()
        {
        }
        public function closeTermsStream()
        {
        }
        public function undeleteAll()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer
    {
        /**
         * @var Zend_Search_Lucene_Analysis_Analyzer
         */
        public static $_defaultImpl;
        /**
         * @var string
         */
        public $_input;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param string $data
         *
         * @return array<array-key, mixed>
         */
        public function tokenize($data, $encoding = '')
        {
        }
        /**
         * @param string $data
         */
        public function setInput($data, $encoding = '')
        {
        }
        public abstract function reset();
        /**
         * @return Zend_Search_Lucene_Analysis_Token|null
         */
        public abstract function nextToken();
        public static function setDefault(\Zend_Search_Lucene_Analysis_Analyzer $analyzer)
        {
        }
        /**
         * @return Zend_Search_Lucene_Analysis_Analyzer
         */
        public static function getDefault()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common extends \Zend_Search_Lucene_Analysis_Analyzer
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_filters;
        /**
         * @param Zend_Search_Lucene_Analysis_TokenFilter $filter
         */
        public function addFilter(\Zend_Search_Lucene_Analysis_TokenFilter $filter)
        {
        }
        /**
         * @param Zend_Search_Lucene_Analysis_Token $token
         *
         * @return Zend_Search_Lucene_Analysis_Token
         */
        public function normalize(\Zend_Search_Lucene_Analysis_Token $token)
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common_Text extends \Zend_Search_Lucene_Analysis_Analyzer_Common
    {
        /**
         * @var int
         */
        public $_position;
        public function reset()
        {
        }
        /**
         * @return Zend_Search_Lucene_Analysis_Token|null
         */
        public function nextToken()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common_TextNum extends \Zend_Search_Lucene_Analysis_Analyzer_Common
    {
        /**
         * @var int
         */
        public $_position;
        public function reset()
        {
        }
        /**
         * @return Zend_Search_Lucene_Analysis_Token|null
         */
        public function nextToken()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common_TextNum_CaseInsensitive extends \Zend_Search_Lucene_Analysis_Analyzer_Common_TextNum
    {
        public function __construct()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common_Text_CaseInsensitive extends \Zend_Search_Lucene_Analysis_Analyzer_Common_Text
    {
        public function __construct()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common_Utf8 extends \Zend_Search_Lucene_Analysis_Analyzer_Common
    {
        /**
         * @var int
         */
        public $_position;
        /**
         * @var int
         */
        public $_bytePosition;
        /**
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct()
        {
        }
        public function reset()
        {
        }
        /**
         * @return Zend_Search_Lucene_Analysis_Token|null
         */
        public function nextToken()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common_Utf8Num extends \Zend_Search_Lucene_Analysis_Analyzer_Common
    {
        /**
         * @var int
         */
        public $_position;
        /**
         * @var int
         */
        public $_bytePosition;
        /**
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct()
        {
        }
        public function reset()
        {
        }
        /**
         * @return Zend_Search_Lucene_Analysis_Token|null
         */
        public function nextToken()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common_Utf8Num_CaseInsensitive extends \Zend_Search_Lucene_Analysis_Analyzer_Common_Utf8Num
    {
        public function __construct()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Analyzer_Common_Utf8_CaseInsensitive extends \Zend_Search_Lucene_Analysis_Analyzer_Common_Utf8
    {
        public function __construct()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_Token
    {
        /**
         * @var string
         */
        public $_termText;
        /**
         * @var int
         */
        public $_startOffset;
        /**
         * @var int
         */
        public $_endOffset;
        /**
         * @var int
         */
        public $_positionIncrement;
        /**
         * @param string $text
         * @param int $start
         * @param int $end
         */
        public function __construct($text, $start, $end)
        {
        }
        /**
         * @param int $positionIncrement
         */
        public function setPositionIncrement($positionIncrement)
        {
        }
        /**
         * @return int
         */
        public function getPositionIncrement()
        {
        }
        /**
         * @return string
         */
        public function getTermText()
        {
        }
        /**
         * @param string $text
         *
         * @return this
         */
        public function setTermText($text)
        {
        }
        /**
         * @return int
         */
        public function getStartOffset()
        {
        }
        /**
         * @return int
         */
        public function getEndOffset()
        {
        }
    }
    class Zend_Search_Lucene_Analysis_TokenFilter
    {
        /**
         * @param Zend_Search_Lucene_Analysis_Token $srcToken
         *
         * @return Zend_Search_Lucene_Analysis_Token
         */
        public abstract function normalize(\Zend_Search_Lucene_Analysis_Token $srcToken);
    }
    class Zend_Search_Lucene_Analysis_TokenFilter_LowerCase extends \Zend_Search_Lucene_Analysis_TokenFilter
    {
        /**
         * @param Zend_Search_Lucene_Analysis_Token $srcToken
         *
         * @return Zend_Search_Lucene_Analysis_Token
         */
        public function normalize(\Zend_Search_Lucene_Analysis_Token $srcToken)
        {
        }
    }
    class Zend_Search_Lucene_Analysis_TokenFilter_LowerCaseUtf8 extends \Zend_Search_Lucene_Analysis_TokenFilter
    {
        public function __construct()
        {
        }
        /**
         * @param Zend_Search_Lucene_Analysis_Token $srcToken
         *
         * @return Zend_Search_Lucene_Analysis_Token
         */
        public function normalize(\Zend_Search_Lucene_Analysis_Token $srcToken)
        {
        }
    }
    class Zend_Search_Lucene_Analysis_TokenFilter_ShortWords extends \Zend_Search_Lucene_Analysis_TokenFilter
    {
        /**
         * @var int
         */
        public $length;
        public function __construct($length = 2)
        {
        }
        /**
         * @param Zend_Search_Lucene_Analysis_Token $srcToken
         *
         * @return Zend_Search_Lucene_Analysis_Token
         */
        public function normalize(\Zend_Search_Lucene_Analysis_Token $srcToken)
        {
        }
    }
    class Zend_Search_Lucene_Analysis_TokenFilter_StopWords extends \Zend_Search_Lucene_Analysis_TokenFilter
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_stopSet;
        /**
         * @param array<array-key, mixed> $stopwords
         */
        public function __construct($stopwords = array())
        {
        }
        /**
         * @param Zend_Search_Lucene_Analysis_Token $srcToken
         *
         * @return Zend_Search_Lucene_Analysis_Token
         */
        public function normalize(\Zend_Search_Lucene_Analysis_Token $srcToken)
        {
        }
        /**
         * @param null|string $filepath
         *
         * @throws Zend_Search_Exception
         */
        public function loadFromFile($filepath = null)
        {
        }
    }
    class Zend_Search_Lucene_Document
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_fields;
        /**
         * @var float
         */
        public $boost;
        /**
         * @param string $offset
         *
         * @return string
         */
        public function __get($offset)
        {
        }
        /**
         * @param Zend_Search_Lucene_Field $field
         *
         * @return Zend_Search_Lucene_Document
         */
        public function addField(\Zend_Search_Lucene_Field $field)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFieldNames()
        {
        }
        /**
         * @param string $fieldName
         *
         * @return Zend_Search_Lucene_Field
         */
        public function getField($fieldName)
        {
        }
        /**
         * @return string
         */
        public function getFieldValue($fieldName)
        {
        }
        /**
         * @return string
         */
        public function getFieldUtf8Value($fieldName)
        {
        }
    }
    class Zend_Search_Lucene_Document_Docx extends \Zend_Search_Lucene_Document_OpenXml
    {
        public const SCHEMA_RELATIONSHIP = 'http://schemas.openxmlformats.org/package/2006/relationships';
        public const SCHEMA_OFFICEDOCUMENT = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument';
        public const SCHEMA_COREPROPERTIES = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';
        public const SCHEMA_DUBLINCORE = 'http://purl.org/dc/elements/1.1/';
        public const SCHEMA_DUBLINCORETERMS = 'http://purl.org/dc/terms/';
        public const SCHEMA_WORDPROCESSINGML = 'http://schemas.openxmlformats.org/wordprocessingml/2006/main';
        /**
         * @param string $fileName
         * @param bool $storeContent
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($fileName, $storeContent)
        {
        }
        /**
         * @param string $fileName
         * @param bool $storeContent
         *
         * @return Zend_Search_Lucene_Document_Docx
         *
         * @throws Zend_Search_Lucene_Document_Exception
         */
        public static function loadDocxFile($fileName, $storeContent = false)
        {
        }
    }
    class Zend_Search_Lucene_Document_Exception extends \Zend_Search_Lucene_Exception
    {
    }
    class Zend_Search_Lucene_Document_Html extends \Zend_Search_Lucene_Document
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_links;
        /**
         * @var array<array-key, mixed>
         */
        public $_headerLinks;
        /**
         * @var DOMDocument
         */
        public $_doc;
        /**
         * @var bool
         */
        public static $_excludeNoFollowLinks;
        /**
         * @var array<array-key, mixed>
         */
        public $_inlineTags;
        /**
         * @param string $data
         * @param bool $isFile
         * @param bool $storeContent
         * @param string $defaultEncoding
         */
        public function __construct($data, $isFile, $storeContent, $defaultEncoding = '')
        {
        }
        /**
         * @param bool $newValue
         */
        public static function setExcludeNoFollowLinks($newValue)
        {
        }
        /**
         * @return bool
         */
        public static function getExcludeNoFollowLinks()
        {
        }
        /**
         * @param DOMNode $node
         * @param string $text
         */
        public function _retrieveNodeText(\DOMNode $node, &$text)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLinks()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaderLinks()
        {
        }
        /**
         * @param string $data
         * @param bool $storeContent
         * @param string $defaultEncoding
         *
         * @return Zend_Search_Lucene_Document_Html
         */
        public static function loadHTML($data, $storeContent = false, $defaultEncoding = '')
        {
        }
        /**
         * @param string $file
         * @param bool $storeContent
         * @param string $defaultEncoding
         *
         * @return Zend_Search_Lucene_Document_Html
         */
        public static function loadHTMLFile($file, $storeContent = false, $defaultEncoding = '')
        {
        }
        /**
         * @param DOMText $node
         * @param array<array-key, mixed> $wordsToHighlight
         * @param callback $callback
         * @param array<array-key, mixed> $params
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function _highlightTextNode(\DOMText $node, $wordsToHighlight, $callback, $params)
        {
        }
        /**
         * @param DOMNode $contextNode
         * @param array<array-key, mixed> $wordsToHighlight
         * @param callback $callback
         * @param array<array-key, mixed> $params
         */
        public function _highlightNodeRecursive(\DOMNode $contextNode, $wordsToHighlight, $callback, $params)
        {
        }
        /**
         * @param string $stringToHighlight
         *
         * @return string
         */
        public function applyColour($stringToHighlight, $colour)
        {
        }
        /**
         * @param array<array-key, mixed>|string $words
         * @param string $colour
         *
         * @return string
         */
        public function highlight($words, $colour = '#66ffff')
        {
        }
        /**
         * @param array<array-key, mixed>|string $words
         * @param callback $callback
         * @param array<array-key, mixed> $params
         *
         * @return string
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function highlightExtended($words, $callback, $params = array())
        {
        }
        /**
         * @return string
         */
        public function getHTML()
        {
        }
        /**
         * @return string
         */
        public function getHtmlBody()
        {
        }
    }
    class Zend_Search_Lucene_Document_OpenXml extends \Zend_Search_Lucene_Document
    {
        public const SCHEMA_RELATIONSHIP = 'http://schemas.openxmlformats.org/package/2006/relationships';
        public const SCHEMA_OFFICEDOCUMENT = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument';
        public const SCHEMA_COREPROPERTIES = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';
        public const SCHEMA_DUBLINCORE = 'http://purl.org/dc/elements/1.1/';
        public const SCHEMA_DUBLINCORETERMS = 'http://purl.org/dc/terms/';
        /**
         * @param ZipArchive $package
         *
         * @return array<array-key, mixed>
         */
        public function extractMetaData(\ZipArchive $package)
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        public function absoluteZipPath($path)
        {
        }
    }
    class Zend_Search_Lucene_Document_Pptx extends \Zend_Search_Lucene_Document_OpenXml
    {
        public const SCHEMA_RELATIONSHIP = 'http://schemas.openxmlformats.org/package/2006/relationships';
        public const SCHEMA_OFFICEDOCUMENT = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument';
        public const SCHEMA_COREPROPERTIES = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';
        public const SCHEMA_DUBLINCORE = 'http://purl.org/dc/elements/1.1/';
        public const SCHEMA_DUBLINCORETERMS = 'http://purl.org/dc/terms/';
        public const SCHEMA_PRESENTATIONML = 'http://schemas.openxmlformats.org/presentationml/2006/main';
        public const SCHEMA_DRAWINGML = 'http://schemas.openxmlformats.org/drawingml/2006/main';
        public const SCHEMA_SLIDERELATION = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/slide';
        public const SCHEMA_SLIDENOTESRELATION = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/notesSlide';
        /**
         * @param string $fileName
         * @param bool $storeContent
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($fileName, $storeContent)
        {
        }
        /**
         * @param string $fileName
         * @param bool $storeContent
         *
         * @return Zend_Search_Lucene_Document_Pptx
         */
        public static function loadPptxFile($fileName, $storeContent = false)
        {
        }
    }
    class Zend_Search_Lucene_Document_Xlsx extends \Zend_Search_Lucene_Document_OpenXml
    {
        public const SCHEMA_RELATIONSHIP = 'http://schemas.openxmlformats.org/package/2006/relationships';
        public const SCHEMA_OFFICEDOCUMENT = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument';
        public const SCHEMA_COREPROPERTIES = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';
        public const SCHEMA_DUBLINCORE = 'http://purl.org/dc/elements/1.1/';
        public const SCHEMA_DUBLINCORETERMS = 'http://purl.org/dc/terms/';
        public const SCHEMA_SPREADSHEETML = 'http://schemas.openxmlformats.org/spreadsheetml/2006/main';
        public const SCHEMA_DRAWINGML = 'http://schemas.openxmlformats.org/drawingml/2006/main';
        public const SCHEMA_SHAREDSTRINGS = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings';
        public const SCHEMA_WORKSHEETRELATION = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet';
        public const SCHEMA_SLIDENOTESRELATION = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/notesSlide';
        /**
         * @param string $fileName
         * @param bool $storeContent
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($fileName, $storeContent)
        {
        }
        /**
         * @param SimpleXMLElement|null $is
         *
         * @return string
         */
        public function _parseRichText($is = null)
        {
        }
        /**
         * @param string $fileName
         * @param bool $storeContent
         *
         * @return Zend_Search_Lucene_Document_Xlsx
         */
        public static function loadXlsxFile($fileName, $storeContent = false)
        {
        }
    }
    class Zend_Search_Lucene_Exception extends \Zend_Search_Exception
    {
    }
    class Zend_Search_Lucene_FSM
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_states;
        /**
         * @var int|string
         */
        public $_currentState;
        /**
         * @var array<array-key, mixed>
         */
        public $_inputAphabet;
        /**
         * @var array<array-key, mixed>
         */
        public $_rules;
        /**
         * @var array<array-key, mixed>
         */
        public $_entryActions;
        /**
         * @var array<array-key, mixed>
         */
        public $_exitActions;
        /**
         * @var array<array-key, mixed>
         */
        public $_inputActions;
        /**
         * @var array<array-key, mixed>
         */
        public $_transitionActions;
        /**
         * @param array<array-key, mixed> $states
         * @param array<array-key, mixed> $inputAphabet
         * @param array<array-key, mixed> $rules
         */
        public function __construct($states = array(), $inputAphabet = array(), $rules = array())
        {
        }
        /**
         * @param array<array-key, mixed> $states
         */
        public function addStates($states)
        {
        }
        /**
         * @param int|string $state
         */
        public function addState($state)
        {
        }
        /**
         * @param int|string $state
         *
         * @throws Zend_Search_Exception
         */
        public function setState($state)
        {
        }
        /**
         * @return int|string
         */
        public function getState()
        {
        }
        /**
         * @param array<array-key, mixed> $inputAphabet
         */
        public function addInputSymbols($inputAphabet)
        {
        }
        /**
         * @param int|string $inputSymbol
         */
        public function addInputSymbol($inputSymbol)
        {
        }
        /**
         * @param array<array-key, mixed> $rules
         */
        public function addRules($rules)
        {
        }
        /**
         * @param int|string $sourceState
         * @param int|string $input
         * @param int|string $targetState
         * @param Zend_Search_Lucene_FSMAction|null $inputAction
         *
         * @throws Zend_Search_Exception
         */
        public function addRule($sourceState, $input, $targetState, $inputAction = null)
        {
        }
        /**
         * @param int|string $state
         * @param Zend_Search_Lucene_FSMAction $action
         */
        public function addEntryAction($state, \Zend_Search_Lucene_FSMAction $action)
        {
        }
        /**
         * @param int|string $state
         * @param Zend_Search_Lucene_FSMAction $action
         */
        public function addExitAction($state, \Zend_Search_Lucene_FSMAction $action)
        {
        }
        /**
         * @param int|string $state
         * @param Zend_Search_Lucene_FSMAction $action
         */
        public function addInputAction($state, $inputSymbol, \Zend_Search_Lucene_FSMAction $action)
        {
        }
        /**
         * @param int|string $sourceState
         * @param int|string $targetState
         * @param Zend_Search_Lucene_FSMAction $action
         */
        public function addTransitionAction($sourceState, $targetState, \Zend_Search_Lucene_FSMAction $action)
        {
        }
        /**
         * @param mixed $input
         *
         * @throws Zend_Search_Exception
         */
        public function process($input)
        {
        }
        public function reset()
        {
        }
    }
    class Zend_Search_Lucene_FSMAction
    {
        /**
         * @var object
         */
        public $_object;
        /**
         * @var string
         */
        public $_method;
        /**
         * @param object $object
         * @param string $method
         */
        public function __construct($object, $method)
        {
        }
        public function doAction()
        {
        }
    }
    class Zend_Search_Lucene_Field
    {
        /**
         * @var string
         */
        public $name;
        /**
         * @var bool
         */
        public $value;
        /**
         * @var bool
         */
        public $isStored;
        /**
         * @var bool
         */
        public $isIndexed;
        /**
         * @var bool
         */
        public $isTokenized;
        /**
         * @var bool
         */
        public $isBinary;
        /**
         * @var bool
         */
        public $storeTermVector;
        /**
         * @var float
         */
        public $boost;
        /**
         * @var string
         */
        public $encoding;
        /**
         * @param string $name
         * @param string $value
         * @param string $encoding
         * @param bool $isStored
         * @param bool $isIndexed
         * @param bool $isTokenized
         * @param bool $isBinary
         */
        public function __construct($name, $value, $encoding, $isStored, $isIndexed, $isTokenized, $isBinary = false)
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param string $encoding
         *
         * @return Zend_Search_Lucene_Field
         */
        public static function keyword($name, $value, $encoding = '')
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param string $encoding
         *
         * @return Zend_Search_Lucene_Field
         */
        public static function unIndexed($name, $value, $encoding = '')
        {
        }
        /**
         * @param string $name
         * @param string $value
         *
         * @return Zend_Search_Lucene_Field
         */
        public static function binary($name, $value)
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param string $encoding
         *
         * @return Zend_Search_Lucene_Field
         */
        public static function text($name, $value, $encoding = '')
        {
        }
        /**
         * @param string $name
         * @param string $value
         * @param string $encoding
         *
         * @return Zend_Search_Lucene_Field
         */
        public static function unStored($name, $value, $encoding = '')
        {
        }
        /**
         * @return string
         */
        public function getUtf8Value()
        {
        }
    }
    class Zend_Search_Lucene_Index_DictionaryLoader
    {
        /**
         * @param string $data
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function load($data)
        {
        }
    }
    class Zend_Search_Lucene_Index_DocsFilter
    {
        /**
         * @var array<array-key, mixed>
         */
        public $segmentFilters;
    }
    class Zend_Search_Lucene_Index_FieldInfo
    {
        public $name;
        public $isIndexed;
        public $number;
        public $storeTermVector;
        public $normsOmitted;
        public $payloadsStored;
        public function __construct($name, $isIndexed, $number, $storeTermVector, $normsOmitted = false, $payloadsStored = false)
        {
        }
    }
    class Zend_Search_Lucene_Index_SegmentInfo implements \Zend_Search_Lucene_Index_TermsStream_Interface
    {
        public const FULL_SCAN_VS_FETCH_BOUNDARY = 5;
        public const SM_TERMS_ONLY = 0;
        public const SM_FULL_INFO = 1;
        public const SM_MERGE_INFO = 2;
        /**
         * @var int
         */
        public $_docCount;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var array<array-key, mixed>
         */
        public $_termDictionary;
        /**
         * @var array<array-key, mixed>
         */
        public $_termDictionaryInfos;
        /**
         * @var array<array-key, mixed>
         */
        public $_fields;
        /**
         * @var array<array-key, mixed>
         */
        public $_fieldsDicPositions;
        /**
         * @var array<array-key, mixed>
         */
        public $_segFiles;
        /**
         * @var array<array-key, mixed>
         */
        public $_segFileSizes;
        /**
         * @var int
         */
        public $_delGen;
        /**
         * @var bool
         */
        public $_hasSingleNormFile;
        /**
         * @var bool
         */
        public $_isCompound;
        /**
         * @var Zend_Search_Lucene_Storage_Directory_Filesystem
         */
        public $_directory;
        /**
         * @var array<array-key, mixed>
         */
        public $_norms;
        /**
         * @var mixed
         */
        public $_deleted;
        /**
         * @var bool
         */
        public $_deletedDirty;
        /**
         * @var bool
         */
        public $_usesSharedDocStore;
        public $_sharedDocStoreOptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_termInfoCache;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_tisFile;
        /**
         * @var int
         */
        public $_tisFileOffset;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_frqFile;
        /**
         * @var int
         */
        public $_frqFileOffset;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_prxFile;
        /**
         * @var int
         */
        public $_prxFileOffset;
        /**
         * @var int
         */
        public $_termCount;
        /**
         * @var int
         */
        public $_termNum;
        /**
         * @var int
         */
        public $_indexInterval;
        /**
         * @var int
         */
        public $_skipInterval;
        /**
         * @var Zend_Search_Lucene_Index_TermInfo
         */
        public $_lastTermInfo;
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_lastTerm;
        /**
         * @var array<array-key, mixed>|null
         */
        public $_docMap;
        /**
         * @var array<array-key, mixed>|null
         */
        public $_lastTermPositions;
        /**
         * @var int
         */
        public $_termsScanMode;
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         * @param string $name
         * @param int $docCount
         * @param int $delGen
         * @param array<array-key, mixed>|null $docStoreOptions
         * @param bool $hasSingleNormFile
         * @param bool|null $isCompound
         */
        public function __construct(\Zend_Search_Lucene_Storage_Directory $directory, $name, $docCount, $delGen = 0, $docStoreOptions = null, $hasSingleNormFile = false, $isCompound = null)
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function _loadDelFile()
        {
        }
        /**
         * @return mixed
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function _loadPre21DelFile()
        {
        }
        /**
         * @return mixed
         */
        public function _load21DelFile()
        {
        }
        /**
         * @param string $extension
         * @param bool $shareHandler
         *
         * @return Zend_Search_Lucene_Storage_File
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function openCompoundFile($extension, $shareHandler = true)
        {
        }
        /**
         * @param string $extension
         *
         * @return int
         */
        public function compoundFileLength($extension)
        {
        }
        /**
         * @param string $fieldName
         *
         * @return int
         */
        public function getFieldNum($fieldName)
        {
        }
        /**
         * @param int $fieldNum
         *
         * @return Zend_Search_Lucene_Index_FieldInfo
         */
        public function getField($fieldNum)
        {
        }
        /**
         * @param bool $indexed
         *
         * @return array<array-key, mixed>
         */
        public function getFields($indexed = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFieldInfos()
        {
        }
        /**
         * @return int
         */
        public function getDelGen()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return int
         */
        public function _deletedCount()
        {
        }
        /**
         * @return int
         */
        public function numDocs()
        {
        }
        /**
         * @param int $fieldNum
         *
         * @return int
         */
        public function _getFieldPosition($fieldNum)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function _cleanUpTermInfoCache()
        {
        }
        /**
         * @throws Zend_Search_Lucene_Exception
         */
        public function _loadDictionaryIndex()
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return Zend_Search_Lucene_Index_TermInfo
         */
        public function getTermInfo(\Zend_Search_Lucene_Index_Term $term)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param int $shift
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         */
        public function termDocs(\Zend_Search_Lucene_Index_Term $term, $shift = 0, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param int $shift
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return Zend_Search_Lucene_Index_TermInfo
         */
        public function termFreqs(\Zend_Search_Lucene_Index_Term $term, $shift = 0, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param int $shift
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return Zend_Search_Lucene_Index_TermInfo
         */
        public function termPositions(\Zend_Search_Lucene_Index_Term $term, $shift = 0, $docsFilter = null)
        {
        }
        /**
         * @param int $fieldNum
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function _loadNorm($fieldNum)
        {
        }
        /**
         * @param int $id
         * @param string $fieldName
         *
         * @return float
         */
        public function norm($id, $fieldName)
        {
        }
        /**
         * @param string $fieldName
         *
         * @return string
         */
        public function normVector($fieldName)
        {
        }
        /**
         * @return bool
         */
        public function hasDeletions()
        {
        }
        /**
         * @return bool
         */
        public function hasSingleNormFile()
        {
        }
        /**
         * @return bool
         */
        public function isCompound()
        {
        }
        public function delete($id)
        {
        }
        public function isDeleted($id)
        {
        }
        /**
         * @return int
         */
        public function _detectLatestDelGen()
        {
        }
        /**
         * @throws Zend_Search_Lucene_Exceptions
         */
        public function writeChanges()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function resetTermsStream()
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $prefix
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function skipTo(\Zend_Search_Lucene_Index_Term $prefix)
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function nextTerm()
        {
        }
        public function closeTermsStream()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function currentTerm()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function currentTermPositions()
        {
        }
    }
    class Zend_Search_Lucene_Index_SegmentMerger
    {
        /**
         * @var Zend_Search_Lucene_Index_SegmentWriter_StreamWriter
         */
        public $_writer;
        /**
         * @var int
         */
        public $_docCount;
        /**
         * @var array<array-key, mixed>
         */
        public $_segmentInfos;
        /**
         * @var bool
         */
        public $_mergeDone;
        /**
         * @var array<array-key, mixed>
         */
        public $_fieldsMap;
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         * @param string $name
         */
        public function __construct($directory, $name)
        {
        }
        public function addSource(\Zend_Search_Lucene_Index_SegmentInfo $segmentInfo)
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_SegmentInfo
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function merge()
        {
        }
        public function _mergeFields()
        {
        }
        public function _mergeNorms()
        {
        }
        public function _mergeStoredFields()
        {
        }
        public function _mergeTerms()
        {
        }
    }
    class Zend_Search_Lucene_Index_SegmentWriter
    {
        /**
         * @var int
         */
        public static $indexInterval;
        /**
         * @var int
         */
        public static $skipInterval;
        /**
         * @var int
         */
        public static $maxSkipLevels;
        /**
         * @var int
         */
        public $_docCount;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var Zend_Search_Lucene_Storage_Directory
         */
        public $_directory;
        /**
         * @var unknown_type
         */
        public $_files;
        /**
         * @var array<array-key, mixed>
         */
        public $_fields;
        /**
         * @var array<array-key, mixed>
         */
        public $_norms;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_fdxFile;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_fdtFile;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_tisFile;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_tiiFile;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_frqFile;
        /**
         * @var Zend_Search_Lucene_Storage_File
         */
        public $_prxFile;
        /**
         * @var int
         */
        public $_termCount;
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_prevTerm;
        /**
         * @var Zend_Search_Lucene_Index_TermInfo
         */
        public $_prevTermInfo;
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_prevIndexTerm;
        /**
         * @var Zend_Search_Lucene_Index_TermInfo
         */
        public $_prevIndexTermInfo;
        /**
         * @var int
         */
        public $_lastIndexPosition;
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         * @param string $name
         */
        public function __construct(\Zend_Search_Lucene_Storage_Directory $directory, $name)
        {
        }
        /**
         * @param Zend_Search_Lucene_Field $field
         *
         * @return int
         */
        public function addField(\Zend_Search_Lucene_Field $field)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_FieldInfo $fieldInfo
         *
         * @return int
         */
        public function addFieldInfo(\Zend_Search_Lucene_Index_FieldInfo $fieldInfo)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFieldInfos()
        {
        }
        /**
         * @param array<array-key, mixed> $storedFields
         */
        public function addStoredFields($storedFields)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function _dumpFNM()
        {
        }
        public function initializeDictionaryFiles()
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $termEntry
         * @param array<array-key, mixed> $termDocs
         */
        public function addTerm($termEntry, $termDocs)
        {
        }
        public function closeDictionaryFiles()
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_File $dicFile
         * @param Zend_Search_Lucene_Index_Term $prevTerm
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_TermInfo $prevTermInfo
         * @param Zend_Search_Lucene_Index_TermInfo $termInfo
         */
        public function _dumpTermDictEntry(\Zend_Search_Lucene_Storage_File $dicFile, &$prevTerm, \Zend_Search_Lucene_Index_Term $term, &$prevTermInfo, \Zend_Search_Lucene_Index_TermInfo $termInfo)
        {
        }
        public function _generateCFS()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_SegmentInfo
         */
        public abstract function close();
    }
    class Zend_Search_Lucene_Index_SegmentWriter_DocumentWriter extends \Zend_Search_Lucene_Index_SegmentWriter
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_termDictionary;
        /**
         * @var array<array-key, mixed>
         */
        public $_termDocs;
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         * @param string $name
         */
        public function __construct(\Zend_Search_Lucene_Storage_Directory $directory, $name)
        {
        }
        /**
         * @param Zend_Search_Lucene_Document $document
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function addDocument(\Zend_Search_Lucene_Document $document)
        {
        }
        public function _dumpDictionary()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_SegmentInfo
         */
        public function close()
        {
        }
    }
    class Zend_Search_Lucene_Index_SegmentWriter_StreamWriter extends \Zend_Search_Lucene_Index_SegmentWriter
    {
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         * @param string $name
         */
        public function __construct(\Zend_Search_Lucene_Storage_Directory $directory, $name)
        {
        }
        public function createStoredFieldsFiles()
        {
        }
        public function addNorm($fieldName, $normVector)
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_SegmentInfo
         */
        public function close()
        {
        }
    }
    class Zend_Search_Lucene_Index_Term
    {
        /**
         * @var mixed
         */
        public $field;
        /**
         * @var string
         */
        public $text;
        public function __construct($text, $field = null)
        {
        }
        /**
         * @return string
         */
        public function key()
        {
        }
        /**
         * @param string $str
         * @param int $length
         *
         * @return string
         */
        public static function getPrefix($str, $length)
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public static function getLength($str)
        {
        }
    }
    class Zend_Search_Lucene_Index_TermInfo
    {
        /**
         * @var int
         */
        public $docFreq;
        /**
         * @var int
         */
        public $freqPointer;
        /**
         * @var int
         */
        public $proxPointer;
        /**
         * @var int
         */
        public $skipOffset;
        /**
         * @var int
         */
        public $indexPointer;
        public function __construct($docFreq, $freqPointer, $proxPointer, $skipOffset, $indexPointer = null)
        {
        }
    }
    class Zend_Search_Lucene_Index_TermsPriorityQueue extends \Zend_Search_Lucene_PriorityQueue
    {
        /**
         * @param mixed $termsStream1
         * @param mixed $termsStream2
         *
         * @return bool
         */
        public function _less($termsStream1, $termsStream2)
        {
        }
    }
    interface Zend_Search_Lucene_Index_TermsStream_Interface
    {
        public function resetTermsStream();
        /**
         * @param Zend_Search_Lucene_Index_Term $prefix
         */
        public function skipTo(\Zend_Search_Lucene_Index_Term $prefix);
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function nextTerm();
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function currentTerm();
        public function closeTermsStream();
    }
    class Zend_Search_Lucene_Index_Writer
    {
        /**
         * @var int
         */
        public $maxBufferedDocs;
        /**
         * @var int
         */
        public $maxMergeDocs;
        /**
         * @var int
         */
        public $mergeFactor;
        /**
         * @var Zend_Search_Lucene_Storage_Directory
         */
        public $_directory;
        /**
         * @var int
         */
        public $_versionUpdate;
        /**
         * @var array<array-key, mixed>
         */
        public $_newSegments;
        /**
         * @var array<array-key, mixed>
         */
        public $_segmentsToDelete;
        /**
         * @var Zend_Search_Lucene_Index_SegmentWriter_DocumentWriter
         */
        public $_currentSegment;
        /**
         * @var array<array-key, mixed>
         */
        public $_segmentInfos;
        /**
         * @var int
         */
        public $_targetFormatVersion;
        /**
         * @var array<array-key, mixed>
         */
        public static $_indexExtensions;
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         * @param int $generation
         * @param int $nameCount
         */
        public static function createIndex(\Zend_Search_Lucene_Storage_Directory $directory, $generation, $nameCount)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         * @param array<array-key, mixed> $segmentInfos
         * @param int $targetFormatVersion
         */
        public function __construct(\Zend_Search_Lucene_Storage_Directory $directory, &$segmentInfos, $targetFormatVersion)
        {
        }
        /**
         * @param Zend_Search_Lucene_Document $document
         */
        public function addDocument(\Zend_Search_Lucene_Document $document)
        {
        }
        /**
         * @return bool
         */
        public function _hasAnythingToMerge()
        {
        }
        public function _maybeMergeSegments()
        {
        }
        /**
         * @param array<array-key, mixed> $segments
         */
        public function _mergeSegments($segments)
        {
        }
        /**
         * @throws Zend_Search_Lucene_Exception
         */
        public function _updateSegments()
        {
        }
        public function commit()
        {
        }
        /**
         * @param array<array-key, mixed> $readers
         *
         * @return void
         */
        public function addIndexes($readers)
        {
        }
        /**
         * @return bool
         */
        public function optimize()
        {
        }
        /**
         * @return string
         */
        public function _newSegmentName()
        {
        }
    }
    interface Zend_Search_Lucene_Interface extends \Zend_Search_Lucene_Index_TermsStream_Interface
    {
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         *
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function getActualGeneration(\Zend_Search_Lucene_Storage_Directory $directory);
        /**
         * @param int $generation
         *
         * @return string
         */
        public static function getSegmentFileName($generation);
        /**
         * @return int
         */
        public function getFormatVersion();
        /**
         * @param int $formatVersion
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function setFormatVersion($formatVersion);
        /**
         * @return Zend_Search_Lucene_Storage_Directory
         */
        public function getDirectory();
        /**
         * @return int
         */
        public function count();
        /**
         * @return int
         */
        public function maxDoc();
        /**
         * @return int
         */
        public function numDocs();
        /**
         * @param int $id
         *
         * @return bool
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function isDeleted($id);
        /**
         * @param string $fieldName
         */
        public static function setDefaultSearchField($fieldName);
        /**
         * @return string
         */
        public static function getDefaultSearchField();
        /**
         * @param int $limit
         */
        public static function setResultSetLimit($limit);
        /**
         * @return int
         */
        public static function getResultSetLimit();
        /**
         * @return int
         */
        public function getMaxBufferedDocs();
        /**
         * @param int $maxBufferedDocs
         */
        public function setMaxBufferedDocs($maxBufferedDocs);
        /**
         * @return int
         */
        public function getMaxMergeDocs();
        /**
         * @param int $maxMergeDocs
         */
        public function setMaxMergeDocs($maxMergeDocs);
        /**
         * @return int
         */
        public function getMergeFactor();
        public function setMergeFactor($mergeFactor);
        /**
         * @param mixed $query
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function find($query);
        /**
         * @param bool $indexed
         *
         * @return array<array-key, mixed>
         */
        public function getFieldNames($indexed = false);
        /**
         * @param Zend_Search_Lucene_Search_QueryHit|int $id
         *
         * @return Zend_Search_Lucene_Document
         */
        public function getDocument($id);
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return bool
         */
        public function hasTerm(\Zend_Search_Lucene_Index_Term $term);
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         */
        public function termDocs(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null);
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return Zend_Search_Lucene_Index_DocsFilter
         */
        public function termDocsFilter(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null);
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return int
         */
        public function termFreqs(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null);
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         */
        public function termPositions(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null);
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return int
         */
        public function docFreq(\Zend_Search_Lucene_Index_Term $term);
        /**
         * @return Zend_Search_Lucene_Search_Similarity
         */
        public function getSimilarity();
        /**
         * @param int $id
         * @param string $fieldName
         *
         * @return float
         */
        public function norm($id, $fieldName);
        /**
         * @return bool
         */
        public function hasDeletions();
        /**
         * @param Zend_Search_Lucene_Search_QueryHit|int $id
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function delete($id);
        /**
         * @param Zend_Search_Lucene_Document $document
         */
        public function addDocument(\Zend_Search_Lucene_Document $document);
        public function commit();
        public function optimize();
        /**
         * @return array<array-key, mixed>
         */
        public function terms();
        public function undeleteAll();
        public function addReference();
        public function removeReference();
    }
    class Zend_Search_Lucene_Interface_MultiSearcher extends \Zend_Search_Lucene_MultiSearcher
    {
    }
    class Zend_Search_Lucene_LockManager
    {
        public const WRITE_LOCK_FILE = 'write.lock.file';
        public const READ_LOCK_FILE = 'read.lock.file';
        public const READ_LOCK_PROCESSING_LOCK_FILE = 'read-lock-processing.lock.file';
        public const OPTIMIZATION_LOCK_FILE = 'optimization.lock.file';
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         *
         * @return Zend_Search_Lucene_Storage_File
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function obtainWriteLock(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         */
        public static function releaseWriteLock(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         *
         * @return Zend_Search_Lucene_Storage_File
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function _startReadLockProcessing(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         */
        public static function _stopReadLockProcessing(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @return Zend_Search_Lucene_Storage_File
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function obtainReadLock(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         */
        public static function releaseReadLock(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         *
         * @return bool
         */
        public static function escalateReadLock(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         */
        public static function deEscalateReadLock(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         *
         * @return mixed
         */
        public static function obtainOptimizationLock(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $lockDirectory
         */
        public static function releaseOptimizationLock(\Zend_Search_Lucene_Storage_Directory $lockDirectory)
        {
        }
    }
    class Zend_Search_Lucene_MultiSearcher implements \Zend_Search_Lucene_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_indices;
        /**
         * @var callback
         */
        public $_documentDistributorCallBack;
        /**
         * @var Zend_Search_Lucene_TermStreamsPriorityQueue
         */
        public $_termsStream;
        /**
         * @param array<array-key, mixed> $indices
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($indices = array())
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         */
        public function addIndex(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         *
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function getActualGeneration(\Zend_Search_Lucene_Storage_Directory $directory)
        {
        }
        /**
         * @param int $generation
         *
         * @return string
         */
        public static function getSegmentFileName($generation)
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getFormatVersion()
        {
        }
        /**
         * @param int $formatVersion
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function setFormatVersion($formatVersion)
        {
        }
        /**
         * @return Zend_Search_Lucene_Storage_Directory
         */
        public function getDirectory()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return int
         */
        public function maxDoc()
        {
        }
        /**
         * @return int
         */
        public function numDocs()
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function isDeleted($id)
        {
        }
        /**
         * @param string $fieldName
         */
        public static function setDefaultSearchField($fieldName)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function getDefaultSearchField()
        {
        }
        /**
         * @param int $limit
         */
        public static function setResultSetLimit($limit)
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function getResultSetLimit()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getMaxBufferedDocs()
        {
        }
        /**
         * @param int $maxBufferedDocs
         */
        public function setMaxBufferedDocs($maxBufferedDocs)
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getMaxMergeDocs()
        {
        }
        /**
         * @param int $maxMergeDocs
         */
        public function setMaxMergeDocs($maxMergeDocs)
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getMergeFactor()
        {
        }
        public function setMergeFactor($mergeFactor)
        {
        }
        /**
         * @param mixed $query
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function find($query)
        {
        }
        /**
         * @param bool $indexed
         *
         * @return array<array-key, mixed>
         */
        public function getFieldNames($indexed = false)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_QueryHit|int $id
         *
         * @return Zend_Search_Lucene_Document
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getDocument($id)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return bool
         */
        public function hasTerm(\Zend_Search_Lucene_Index_Term $term)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function termDocs(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return Zend_Search_Lucene_Index_DocsFilter
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function termDocsFilter(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function termFreqs(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function termPositions(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return int
         */
        public function docFreq(\Zend_Search_Lucene_Index_Term $term)
        {
        }
        /**
         * @return Zend_Search_Lucene_Search_Similarity
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getSimilarity()
        {
        }
        /**
         * @param int $id
         * @param string $fieldName
         *
         * @return float
         */
        public function norm($id, $fieldName)
        {
        }
        /**
         * @return bool
         */
        public function hasDeletions()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_QueryHit|int $id
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function delete($id)
        {
        }
        /**
         * @param callback $callback
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function setDocumentDistributorCallback($callback)
        {
        }
        /**
         * @return callback
         */
        public function getDocumentDistributorCallback()
        {
        }
        /**
         * @param Zend_Search_Lucene_Document $document
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function addDocument(\Zend_Search_Lucene_Document $document)
        {
        }
        public function commit()
        {
        }
        public function optimize()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function terms()
        {
        }
        public function resetTermsStream()
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $prefix
         */
        public function skipTo(\Zend_Search_Lucene_Index_Term $prefix)
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function nextTerm()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function currentTerm()
        {
        }
        public function closeTermsStream()
        {
        }
        public function undeleteAll()
        {
        }
        public function addReference()
        {
        }
        public function removeReference()
        {
        }
    }
    class Zend_Search_Lucene_PriorityQueue
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_heap;
        /**
         * @param mixed $element
         */
        public function put($element)
        {
        }
        /**
         * @return mixed
         */
        public function top()
        {
        }
        /**
         * @return mixed
         */
        public function pop()
        {
        }
        public function clear()
        {
        }
        /**
         * @param mixed $el1
         * @param mixed $el2
         *
         * @return bool
         */
        public abstract function _less($el1, $el2);
    }
    class Zend_Search_Lucene_Proxy implements \Zend_Search_Lucene_Interface
    {
        /**
         * @var Zend_Search_Lucene_Interface
         */
        public $_index;
        /**
         * @param Zend_Search_Lucene_Interface $index
         */
        public function __construct(\Zend_Search_Lucene_Interface $index)
        {
        }
        public function __destruct()
        {
        }
        /**
         * @param Zend_Search_Lucene_Storage_Directory $directory
         *
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public static function getActualGeneration(\Zend_Search_Lucene_Storage_Directory $directory)
        {
        }
        /**
         * @param int $generation
         *
         * @return string
         */
        public static function getSegmentFileName($generation)
        {
        }
        /**
         * @return int
         */
        public function getFormatVersion()
        {
        }
        /**
         * @param int $formatVersion
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function setFormatVersion($formatVersion)
        {
        }
        /**
         * @return Zend_Search_Lucene_Storage_Directory
         */
        public function getDirectory()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return int
         */
        public function maxDoc()
        {
        }
        /**
         * @return int
         */
        public function numDocs()
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function isDeleted($id)
        {
        }
        /**
         * @param string $fieldName
         */
        public static function setDefaultSearchField($fieldName)
        {
        }
        /**
         * @return string
         */
        public static function getDefaultSearchField()
        {
        }
        /**
         * @param int $limit
         */
        public static function setResultSetLimit($limit)
        {
        }
        /**
         * @return int
         */
        public static function getResultSetLimit()
        {
        }
        /**
         * @return int
         */
        public function getMaxBufferedDocs()
        {
        }
        /**
         * @param int $maxBufferedDocs
         */
        public function setMaxBufferedDocs($maxBufferedDocs)
        {
        }
        /**
         * @return int
         */
        public function getMaxMergeDocs()
        {
        }
        /**
         * @param int $maxMergeDocs
         */
        public function setMaxMergeDocs($maxMergeDocs)
        {
        }
        /**
         * @return int
         */
        public function getMergeFactor()
        {
        }
        public function setMergeFactor($mergeFactor)
        {
        }
        /**
         * @param mixed $query
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function find($query)
        {
        }
        /**
         * @param bool $indexed
         *
         * @return array<array-key, mixed>
         */
        public function getFieldNames($indexed = false)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_QueryHit|int $id
         *
         * @return Zend_Search_Lucene_Document
         */
        public function getDocument($id)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return bool
         */
        public function hasTerm(\Zend_Search_Lucene_Index_Term $term)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         */
        public function termDocs(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return Zend_Search_Lucene_Index_DocsFilter
         */
        public function termDocsFilter(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return int
         */
        public function termFreqs(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @return array<array-key, mixed>
         */
        public function termPositions(\Zend_Search_Lucene_Index_Term $term, $docsFilter = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         *
         * @return int
         */
        public function docFreq(\Zend_Search_Lucene_Index_Term $term)
        {
        }
        /**
         * @return Zend_Search_Lucene_Search_Similarity
         */
        public function getSimilarity()
        {
        }
        /**
         * @param int $id
         * @param string $fieldName
         *
         * @return float
         */
        public function norm($id, $fieldName)
        {
        }
        /**
         * @return bool
         */
        public function hasDeletions()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_QueryHit|int $id
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function delete($id)
        {
        }
        /**
         * @param Zend_Search_Lucene_Document $document
         */
        public function addDocument(\Zend_Search_Lucene_Document $document)
        {
        }
        public function commit()
        {
        }
        public function optimize()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function terms()
        {
        }
        public function resetTermsStream()
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $prefix
         */
        public function skipTo(\Zend_Search_Lucene_Index_Term $prefix)
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function nextTerm()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function currentTerm()
        {
        }
        public function closeTermsStream()
        {
        }
        public function undeleteAll()
        {
        }
        public function addReference()
        {
        }
        public function removeReference()
        {
        }
    }
    class Zend_Search_Lucene_Search_BooleanExpressionRecognizer extends \Zend_Search_Lucene_FSM
    {
        public const ST_START = 0;
        public const ST_LITERAL = 1;
        public const ST_NOT_OPERATOR = 2;
        public const ST_AND_OPERATOR = 3;
        public const ST_OR_OPERATOR = 4;
        public const IN_LITERAL = 0;
        public const IN_NOT_OPERATOR = 1;
        public const IN_AND_OPERATOR = 2;
        public const IN_OR_OPERATOR = 3;
        /**
         * @var bool
         */
        public $_negativeLiteral;
        /**
         * @var mixed
         */
        public $_literal;
        /**
         * @var array<array-key, mixed>
         */
        public $_conjunctions;
        /**
         * @var array<array-key, mixed>
         */
        public $_currentConjunction;
        public function __construct()
        {
        }
        /**
         * @param int $operator
         */
        public function processOperator($operator)
        {
        }
        public function processLiteral($literal)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function finishExpression()
        {
        }
        public function emptyOperatorAction()
        {
        }
        public function emptyNotOperatorAction()
        {
        }
        public function notOperatorAction()
        {
        }
        public function orOperatorAction()
        {
        }
        public function literalAction()
        {
        }
    }
    class Zend_Search_Lucene_Search_Highlighter_Default implements \Zend_Search_Lucene_Search_Highlighter_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_highlightColors;
        /**
         * @var int
         */
        public $_currentColorIndex;
        /**
         * @var Zend_Search_Lucene_Document_Html
         */
        public $_doc;
        /**
         * @param Zend_Search_Lucene_Document_Html $document
         */
        public function setDocument(\Zend_Search_Lucene_Document_Html $document)
        {
        }
        /**
         * @return Zend_Search_Lucene_Document_Html
         */
        public function getDocument()
        {
        }
        /**
         * @param array<array-key, mixed>|string $words
         */
        public function highlight($words)
        {
        }
    }
    interface Zend_Search_Lucene_Search_Highlighter_Interface
    {
        /**
         * @param Zend_Search_Lucene_Document_Html $document
         */
        public function setDocument(\Zend_Search_Lucene_Document_Html $document);
        /**
         * @return Zend_Search_Lucene_Document_Html
         */
        public function getDocument();
        /**
         * @param array<array-key, mixed>|string $words
         */
        public function highlight($words);
    }
    class Zend_Search_Lucene_Search_Query
    {
        /**
         * @var float
         */
        public $_boost;
        /**
         * @var Zend_Search_Lucene_Search_Weight
         */
        public $_weight;
        /**
         * @var int
         */
        public $_currentColorIndex;
        /**
         * @return float
         */
        public function getBoost()
        {
        }
        /**
         * @param float $boost
         */
        public function setBoost($boost)
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public abstract function score($docId, \Zend_Search_Lucene_Interface $reader);
        /**
         * @return array<array-key, mixed>
         */
        public abstract function matchedDocs();
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         */
        public abstract function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null);
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         */
        public abstract function createWeight(\Zend_Search_Lucene_Interface $reader);
        /**
         * @param Zend_Search_Lucene_Interface $reader
         */
        public function _initWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public abstract function rewrite(\Zend_Search_Lucene_Interface $index);
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public abstract function optimize(\Zend_Search_Lucene_Interface $index);
        public function reset()
        {
        }
        /**
         * @return string
         */
        public abstract function __toString();
        /**
         * @return array<array-key, mixed>
         */
        public abstract function getQueryTerms();
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public abstract function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter);
        /**
         * @param string $inputHTML
         * @param string $defaultEncoding
         * @param Zend_Search_Lucene_Search_Highlighter_Interface|null $highlighter
         *
         * @return string
         */
        public function highlightMatches($inputHTML, $defaultEncoding = '', $highlighter = null)
        {
        }
        /**
         * @param string $inputHtmlFragment
         * @param string $encoding
         * @param Zend_Search_Lucene_Search_Highlighter_Interface|null $highlighter
         *
         * @return string
         */
        public function htmlFragmentHighlightMatches($inputHtmlFragment, $encoding = 'UTF-8', $highlighter = null)
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryEntry
    {
        /**
         * @var float
         */
        public $_boost;
        /**
         * @param mixed|null $parameter
         */
        public abstract function processFuzzyProximityModifier($parameter = null);
        /**
         * @param string $encoding
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public abstract function getQuery($encoding);
        /**
         * @param float $boostFactor
         */
        public function boost($boostFactor)
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryEntry_Phrase extends \Zend_Search_Lucene_Search_QueryEntry
    {
        /**
         * @var string
         */
        public $_phrase;
        /**
         * @var null|string
         */
        public $_field;
        /**
         * @var bool
         */
        public $_proximityQuery;
        /**
         * @var int
         */
        public $_wordsDistance;
        /**
         * @param string $phrase
         * @param string $field
         */
        public function __construct($phrase, $field)
        {
        }
        /**
         * @param mixed|null $parameter
         */
        public function processFuzzyProximityModifier($parameter = null)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Search_Lucene_Search_Query
         *
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public function getQuery($encoding)
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryEntry_Subquery extends \Zend_Search_Lucene_Search_QueryEntry
    {
        /**
         * @var Zend_Search_Lucene_Search_Query
         */
        public $_query;
        /**
         * @param Zend_Search_Lucene_Search_Query $query
         */
        public function __construct(\Zend_Search_Lucene_Search_Query $query)
        {
        }
        /**
         * @param mixed|null $parameter
         *
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public function processFuzzyProximityModifier($parameter = null)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function getQuery($encoding)
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryEntry_Term extends \Zend_Search_Lucene_Search_QueryEntry
    {
        /**
         * @var string
         */
        public $_term;
        /**
         * @var null|string
         */
        public $_field;
        /**
         * @var bool
         */
        public $_fuzzyQuery;
        /**
         * @var float
         */
        public $_similarity;
        /**
         * @param string $term
         * @param string $field
         */
        public function __construct($term, $field)
        {
        }
        /**
         * @param mixed|null $parameter
         */
        public function processFuzzyProximityModifier($parameter = null)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Search_Lucene_Search_Query
         *
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public function getQuery($encoding)
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryHit
    {
        /**
         * @var Zend_Search_Lucene_Interface
         */
        public $_index;
        /**
         * @var Zend_Search_Lucene_Document
         */
        public $_document;
        /**
         * @var int
         */
        public $id;
        /**
         * @var float
         */
        public $score;
        /**
         * @param Zend_Search_Lucene_Interface $index
         */
        public function __construct(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param string $offset
         *
         * @return string
         */
        public function __get($offset)
        {
        }
        /**
         * @return Zend_Search_Lucene_Document
         */
        public function getDocument()
        {
        }
        /**
         * @return Zend_Search_Lucene_Interface
         */
        public function getIndex()
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryLexer extends \Zend_Search_Lucene_FSM
    {
        public const ST_WHITE_SPACE = 0;
        public const ST_SYNT_LEXEME = 1;
        public const ST_LEXEME = 2;
        public const ST_QUOTED_LEXEME = 3;
        public const ST_ESCAPED_CHAR = 4;
        public const ST_ESCAPED_QCHAR = 5;
        public const ST_LEXEME_MODIFIER = 6;
        public const ST_NUMBER = 7;
        public const ST_MANTISSA = 8;
        public const ST_ERROR = 9;
        public const IN_WHITE_SPACE = 0;
        public const IN_SYNT_CHAR = 1;
        public const IN_LEXEME_MODIFIER = 2;
        public const IN_ESCAPE_CHAR = 3;
        public const IN_QUOTE = 4;
        public const IN_DECIMAL_POINT = 5;
        public const IN_ASCII_DIGIT = 6;
        public const IN_CHAR = 7;
        public const IN_MUTABLE_CHAR = 8;
        public const QUERY_WHITE_SPACE_CHARS = '
	';
        public const QUERY_SYNT_CHARS = ':()[]{}!|&';
        public const QUERY_MUTABLE_CHARS = '+-';
        public const QUERY_DOUBLECHARLEXEME_CHARS = '|&';
        public const QUERY_LEXEMEMODIFIER_CHARS = '~^';
        public const QUERY_ASCIIDIGITS_CHARS = '0123456789';
        /**
         * @var array<array-key, mixed>
         */
        public $_lexemes;
        /**
         * @var array<array-key, mixed>
         */
        public $_queryString;
        /**
         * @var int
         */
        public $_queryStringPosition;
        /**
         * @var string
         */
        public $_currentLexeme;
        public function __construct()
        {
        }
        /**
         * @param string $char
         *
         * @return int
         */
        public function _translateInput($char)
        {
        }
        /**
         * @param string $inputString
         * @param string $encoding
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public function tokenize($inputString, $encoding)
        {
        }
        /**
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public function addQuerySyntaxLexeme()
        {
        }
        public function addLexemeModifier()
        {
        }
        public function addLexeme()
        {
        }
        public function addQuotedLexeme()
        {
        }
        public function addNumberLexeme()
        {
        }
        public function addLexemeChar()
        {
        }
        /**
         * @return string
         */
        public function _positionMsg()
        {
        }
        public function lexModifierErrException()
        {
        }
        public function quoteWithinLexemeErrException()
        {
        }
        public function wrongNumberErrException()
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryParser extends \Zend_Search_Lucene_FSM
    {
        public const B_OR = 0;
        public const B_AND = 1;
        public const ST_COMMON_QUERY_ELEMENT = 0;
        public const ST_CLOSEDINT_RQ_START = 1;
        public const ST_CLOSEDINT_RQ_FIRST_TERM = 2;
        public const ST_CLOSEDINT_RQ_TO_TERM = 3;
        public const ST_CLOSEDINT_RQ_LAST_TERM = 4;
        public const ST_CLOSEDINT_RQ_END = 5;
        public const ST_OPENEDINT_RQ_START = 6;
        public const ST_OPENEDINT_RQ_FIRST_TERM = 7;
        public const ST_OPENEDINT_RQ_TO_TERM = 8;
        public const ST_OPENEDINT_RQ_LAST_TERM = 9;
        public const ST_OPENEDINT_RQ_END = 10;
        /**
         * @var Zend_Search_Lucene_Search_QueryParser
         */
        public static $_instance;
        /**
         * @var Zend_Search_Lucene_Search_QueryLexer
         */
        public $_lexer;
        /**
         * @var array<array-key, mixed>
         */
        public $_tokens;
        /**
         * @var int|string
         */
        public $_currentToken;
        /**
         * @var Zend_Search_Lucene_Search_QueryToken
         */
        public $_lastToken;
        /**
         * @var string
         */
        public $_rqFirstTerm;
        /**
         * @var Zend_Search_Lucene_Search_QueryParserContext
         */
        public $_context;
        /**
         * @var array<array-key, mixed>
         */
        public $_contextStack;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var string
         */
        public $_defaultEncoding;
        /**
         * @var bool
         */
        public $_suppressQueryParsingExceptions;
        /**
         * @var int
         */
        public $_defaultOperator;
        public function __construct()
        {
        }
        /**
         * @return Zend_Search_Lucene_Search_QueryParser
         */
        public static function _getInstance()
        {
        }
        /**
         * @param string $encoding
         */
        public static function setDefaultEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public static function getDefaultEncoding()
        {
        }
        /**
         * @param int $operator
         */
        public static function setDefaultOperator($operator)
        {
        }
        /**
         * @return int
         */
        public static function getDefaultOperator()
        {
        }
        public static function suppressQueryParsingExceptions()
        {
        }
        public static function dontSuppressQueryParsingExceptions()
        {
        }
        /**
         * @return bool
         */
        public static function queryParsingExceptionsSuppressed()
        {
        }
        /**
         * @param string $keyword
         *
         * @return string
         */
        public static function escape($keyword)
        {
        }
        /**
         * @param string $strQuery
         * @param null|string $encoding
         *
         * @return Zend_Search_Lucene_Search_Query
         *
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public static function parse($strQuery, $encoding = null)
        {
        }
        public function addTermEntry()
        {
        }
        public function addPhraseEntry()
        {
        }
        public function setField()
        {
        }
        public function setSign()
        {
        }
        public function processFuzzyProximityModifier()
        {
        }
        /**
         * @throws Zend_Search_Lucene_Exception
         */
        public function processModifierParameter()
        {
        }
        public function subqueryStart()
        {
        }
        public function subqueryEnd()
        {
        }
        public function logicalOperator()
        {
        }
        public function openedRQFirstTerm()
        {
        }
        /**
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public function openedRQLastTerm()
        {
        }
        public function closedRQFirstTerm()
        {
        }
        /**
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public function closedRQLastTerm()
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryParserContext
    {
        public const GM_SIGNS = 0;
        public const GM_BOOLEAN = 1;
        /**
         * @var null|string
         */
        public $_defaultField;
        /**
         * @var string
         */
        public $_nextEntryField;
        /**
         * @var bool
         */
        public $_nextEntrySign;
        /**
         * @var int
         */
        public $_mode;
        /**
         * @var arrays
         */
        public $_signs;
        /**
         * @var array<array-key, mixed>
         */
        public $_entries;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param string $encoding
         * @param null|string $defaultField
         */
        public function __construct($encoding, $defaultField = null)
        {
        }
        /**
         * @return null|string
         */
        public function getField()
        {
        }
        /**
         * @param string $field
         */
        public function setNextEntryField($field)
        {
        }
        /**
         * @param int $sign
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function setNextEntrySign($sign)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_QueryEntry $entry
         */
        public function addEntry(\Zend_Search_Lucene_Search_QueryEntry $entry)
        {
        }
        /**
         * @throws Zend_Search_Lucene_Search_QueryParserException
         */
        public function processFuzzyProximityModifier($parameter = null)
        {
        }
        /**
         * @param float $boostFactor
         */
        public function boost($boostFactor)
        {
        }
        /**
         * @param int $operator
         */
        public function addLogicalOperator($operator)
        {
        }
        /**
         * @return Zend_Search_Lucene_Search_Query
         */
        public function _signStyleExpressionQuery()
        {
        }
        /**
         * @return Zend_Search_Lucene_Search_Query
         *
         * @throws Zend_Search_Lucene
         */
        public function _booleanExpressionQuery()
        {
        }
        /**
         * @return Zend_Search_Lucene_Search_Query
         */
        public function getQuery()
        {
        }
    }
    class Zend_Search_Lucene_Search_QueryParserException extends \Zend_Search_Lucene_Exception
    {
    }
    class Zend_Search_Lucene_Search_QueryToken
    {
        public const TT_WORD = 0;
        public const TT_PHRASE = 1;
        public const TT_FIELD = 2;
        public const TT_FIELD_INDICATOR = 3;
        public const TT_REQUIRED = 4;
        public const TT_PROHIBITED = 5;
        public const TT_FUZZY_PROX_MARK = 6;
        public const TT_BOOSTING_MARK = 7;
        public const TT_RANGE_INCL_START = 8;
        public const TT_RANGE_INCL_END = 9;
        public const TT_RANGE_EXCL_START = 10;
        public const TT_RANGE_EXCL_END = 11;
        public const TT_SUBQUERY_START = 12;
        public const TT_SUBQUERY_END = 13;
        public const TT_AND_LEXEME = 14;
        public const TT_OR_LEXEME = 15;
        public const TT_NOT_LEXEME = 16;
        public const TT_TO_LEXEME = 17;
        public const TT_NUMBER = 18;
        public const TC_WORD = 0;
        public const TC_PHRASE = 1;
        public const TC_NUMBER = 2;
        public const TC_SYNTAX_ELEMENT = 3;
        /**
         * @var int
         */
        public $type;
        /**
         * @var int
         */
        public $text;
        /**
         * @var int
         */
        public $position;
        /**
         * @return array<array-key, mixed>
         */
        public static function getTypes()
        {
        }
        /**
         * @param int $tokenCategory
         * @param int $position
         */
        public function __construct($tokenCategory, $tokenText, $position)
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Boolean extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_subqueries;
        /**
         * @var array<array-key, mixed>
         */
        public $_signs;
        /**
         * @var array<array-key, mixed>
         */
        public $_resVector;
        /**
         * @var mixed
         */
        public $_coord;
        /**
         * @param array<array-key, mixed>|null $subqueries
         * @param array<array-key, mixed>|null $signs
         *
         * @return void
         */
        public function __construct($subqueries = null, $signs = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Query $subquery
         * @param bool|null $sign
         *
         * @return void
         */
        public function addSubquery(\Zend_Search_Lucene_Search_Query $subquery, $sign = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getSubqueries()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getSigns()
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        public function _calculateConjunctionResult()
        {
        }
        public function _calculateNonConjunctionResult()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function _conjunctionScore($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function _nonConjunctionScore($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryTerms()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Empty extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryTerms()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Fuzzy extends \Zend_Search_Lucene_Search_Query
    {
        public const DEFAULT_MIN_SIMILARITY = 0.5;
        public const MAX_CLAUSE_COUNT = 1024;
        public $_maxDistances = array();
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_term;
        /**
         * @var float
         */
        public $_minimumSimilarity;
        /**
         * @var int
         */
        public $_prefixLength;
        /**
         * @var array<array-key, mixed>
         */
        public $_matches;
        /**
         * @var array<array-key, mixed>
         */
        public $_scores;
        /**
         * @var array<array-key, mixed>
         */
        public $_termKeys;
        /**
         * @var int
         */
        public static $_defaultPrefixLength;
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param float $minimumSimilarity
         * @param int|null $prefixLength
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct(\Zend_Search_Lucene_Index_Term $term, $minimumSimilarity, $prefixLength = null)
        {
        }
        /**
         * @return int
         */
        public static function getDefaultPrefixLength()
        {
        }
        /**
         * @param int $defaultPrefixLength
         */
        public static function setDefaultPrefixLength($defaultPrefixLength)
        {
        }
        /**
         * @param int $prefixLength
         * @param int $termLength
         * @param int $length
         *
         * @return int
         */
        public function _calculateMaxDistance($prefixLength, $termLength, $length)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getQueryTerms()
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Insignificant extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryTerms()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_MultiTerm extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_terms;
        /**
         * @var array<array-key, mixed>
         */
        public $_signs;
        /**
         * @var array<array-key, mixed>
         */
        public $_resVector;
        /**
         * @var array<array-key, mixed>
         */
        public $_termsFreqs;
        /**
         * @var mixed
         */
        public $_coord;
        /**
         * @var array<array-key, mixed>
         */
        public $_weights;
        /**
         * @param array<array-key, mixed>|null $terms
         * @param array<array-key, mixed>|null $signs
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($terms = null, $signs = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param bool|null $sign
         *
         * @return void
         */
        public function addTerm(\Zend_Search_Lucene_Index_Term $term, $sign = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTerms()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getSigns()
        {
        }
        /**
         * @param int $num
         * @param Zend_Search_Lucene_Search_Weight_Term $weight
         */
        public function setWeight($num, $weight)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         */
        public function _calculateConjunctionResult(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         */
        public function _calculateNonConjunctionResult(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function _conjunctionScore($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function _nonConjunctionScore($docId, $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryTerms()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Phrase extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_terms;
        /**
         * @var array<array-key, mixed>
         */
        public $_offsets;
        /**
         * @var int
         */
        public $_slop;
        /**
         * @var array<array-key, mixed>
         */
        public $_resVector;
        /**
         * @var array<array-key, mixed>
         */
        public $_termsPositions;
        /**
         * @param array<array-key, mixed>|null $terms
         * @param array<array-key, mixed>|null $offsets
         * @param null|string $field
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($terms = null, $offsets = null, $field = null)
        {
        }
        /**
         * @param int $slop
         */
        public function setSlop($slop)
        {
        }
        /**
         * @return int
         */
        public function getSlop()
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param int|null $position
         */
        public function addTerm(\Zend_Search_Lucene_Index_Term $term, $position = null)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTerms()
        {
        }
        /**
         * @param int $num
         * @param Zend_Search_Lucene_Search_Weight_Term $weight
         */
        public function setWeight($num, $weight)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param int $docId
         *
         * @return float
         */
        public function _exactPhraseFreq($docId)
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function _sloppyPhraseFreq($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryTerms()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Preprocessing extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_matches;
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryTerms()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Preprocessing_Fuzzy extends \Zend_Search_Lucene_Search_Query_Preprocessing
    {
        /**
         * @var string
         */
        public $_word;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var string
         */
        public $_field;
        /**
         * @var float
         */
        public $_minimumSimilarity;
        /**
         * @param string $word
         * @param string $encoding
         * @param string $fieldName
         * @param float $minimumSimilarity
         */
        public function __construct($word, $encoding, $fieldName, $minimumSimilarity)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Preprocessing_Phrase extends \Zend_Search_Lucene_Search_Query_Preprocessing
    {
        /**
         * @var string
         */
        public $_phrase;
        /**
         * @var string
         */
        public $_phraseEncoding;
        /**
         * @var string
         */
        public $_field;
        /**
         * @var int
         */
        public $_slop;
        /**
         * @param string $phrase
         * @param string $phraseEncoding
         * @param string $fieldName
         */
        public function __construct($phrase, $phraseEncoding, $fieldName)
        {
        }
        /**
         * @param int $slop
         */
        public function setSlop($slop)
        {
        }
        /**
         * @return int
         */
        public function getSlop()
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Preprocessing_Term extends \Zend_Search_Lucene_Search_Query_Preprocessing
    {
        /**
         * @var string
         */
        public $_word;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var string
         */
        public $_field;
        /**
         * @param string $word
         * @param string $encoding
         * @param string $fieldName
         */
        public function __construct($word, $encoding, $fieldName)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Range extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_lowerTerm;
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_upperTerm;
        /**
         * @var string
         */
        public $_field;
        /**
         * @var bool
         */
        public $_inclusive;
        /**
         * @var array<array-key, mixed>
         */
        public $_matches;
        /**
         * @param Zend_Search_Lucene_Index_Term|null $lowerTerm
         * @param Zend_Search_Lucene_Index_Term|null $upperTerm
         * @param bool $inclusive
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($lowerTerm, $upperTerm, $inclusive)
        {
        }
        /**
         * @return null|string
         */
        public function getField()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function getLowerTerm()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function getUpperTerm()
        {
        }
        /**
         * @return bool
         */
        public function isInclusive()
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getQueryTerms()
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Term extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_term;
        /**
         * @var array<array-key, mixed>
         */
        public $_docVector;
        /**
         * @var array<array-key, mixed>
         */
        public $_termFreqs;
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         */
        public function __construct(\Zend_Search_Lucene_Index_Term $term)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryTerms()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term
         */
        public function getTerm()
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Query_Wildcard extends \Zend_Search_Lucene_Search_Query
    {
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_pattern;
        /**
         * @var array<array-key, mixed>
         */
        public $_matches;
        /**
         * @var int
         */
        public static $_minPrefixLength;
        /**
         * @param Zend_Search_Lucene_Index_Term $pattern
         */
        public function __construct(\Zend_Search_Lucene_Index_Term $pattern)
        {
        }
        /**
         * @return int
         */
        public static function getMinPrefixLength()
        {
        }
        /**
         * @param int $minPrefixLength
         */
        public static function setMinPrefixLength($minPrefixLength)
        {
        }
        /**
         * @param string $word
         *
         * @return string
         */
        public static function _getPrefix($word)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function rewrite(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $index
         *
         * @return Zend_Search_Lucene_Search_Query
         */
        public function optimize(\Zend_Search_Lucene_Interface $index)
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term
         */
        public function getPattern()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function getQueryTerms()
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return Zend_Search_Lucene_Search_Weight
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function createWeight(\Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Interface $reader
         * @param Zend_Search_Lucene_Index_DocsFilter|null $docsFilter
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function execute(\Zend_Search_Lucene_Interface $reader, $docsFilter = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function matchedDocs()
        {
        }
        /**
         * @param int $docId
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return float
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function score($docId, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param Zend_Search_Lucene_Search_Highlighter_Interface $highlighter
         */
        public function _highlightMatches(\Zend_Search_Lucene_Search_Highlighter_Interface $highlighter)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Search_Lucene_Search_Similarity
    {
        /**
         * @var Zend_Search_Lucene_Search_Similarity
         */
        public static $_defaultImpl;
        /**
         * @var array<array-key, mixed>
         */
        public static $_normTable;
        /**
         * @param Zend_Search_Lucene_Search_Similarity $similarity
         */
        public static function setDefault(\Zend_Search_Lucene_Search_Similarity $similarity)
        {
        }
        /**
         * @return Zend_Search_Lucene_Search_Similarity
         */
        public static function getDefault()
        {
        }
        /**
         * @param string $fieldName
         * @param int $numTokens
         *
         * @return float
         */
        public abstract function lengthNorm($fieldName, $numTokens);
        /**
         * @param float $sumOfSquaredWeights
         *
         * @return float
         */
        public abstract function queryNorm($sumOfSquaredWeights);
        /**
         * @param int $byte
         *
         * @return float
         */
        public static function decodeNorm($byte)
        {
        }
        /**
         * @param float $f
         *
         * @return int
         */
        public static function encodeNorm($f)
        {
        }
        /**
         * @return float
         */
        public static function _floatToByte($f)
        {
        }
        /**
         * @param float $freq
         *
         * @return float
         */
        public abstract function tf($freq);
        /**
         * @param int $distance
         *
         * @return float
         */
        public abstract function sloppyFreq($distance);
        /**
         * @param mixed $input
         * @param Zend_Search_Lucene_Interface $reader
         *
         * @return a
         */
        public function idf($input, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @param int $docFreq
         * @param int $numDocs
         *
         * @return float
         */
        public abstract function idfFreq($docFreq, $numDocs);
        /**
         * @param int $overlap
         * @param int $maxOverlap
         *
         * @return float
         */
        public abstract function coord($overlap, $maxOverlap);
    }
    class Zend_Search_Lucene_Search_Similarity_Default extends \Zend_Search_Lucene_Search_Similarity
    {
        /**
         * @param string $fieldName
         * @param int $numTerms
         *
         * @return float
         */
        public function lengthNorm($fieldName, $numTerms)
        {
        }
        /**
         * @param float $sumOfSquaredWeights
         *
         * @return float
         */
        public function queryNorm($sumOfSquaredWeights)
        {
        }
        /**
         * @param float $freq
         *
         * @return float
         */
        public function tf($freq)
        {
        }
        /**
         * @param int $distance
         *
         * @return float
         */
        public function sloppyFreq($distance)
        {
        }
        /**
         * @param int $docFreq
         * @param int $numDocs
         *
         * @return float
         */
        public function idfFreq($docFreq, $numDocs)
        {
        }
        /**
         * @param int $overlap
         * @param int $maxOverlap
         *
         * @return float
         */
        public function coord($overlap, $maxOverlap)
        {
        }
    }
    class Zend_Search_Lucene_Search_Weight
    {
        /**
         * @var float
         */
        public $_queryNorm;
        /**
         * @var float
         */
        public $_value;
        /**
         * @return float
         */
        public function getValue()
        {
        }
        /**
         * @return float
         */
        public abstract function sumOfSquaredWeights();
        /**
         * @param float $norm
         */
        public abstract function normalize($norm);
    }
    class Zend_Search_Lucene_Search_Weight_Boolean extends \Zend_Search_Lucene_Search_Weight
    {
        /**
         * @var Zend_Search_Lucene_Interface
         */
        public $_reader;
        /**
         * @var Zend_Search_Lucene_Search_Query
         */
        public $_query;
        /**
         * @var array<array-key, mixed>
         */
        public $_weights;
        /**
         * @param Zend_Search_Lucene_Search_Query $query
         * @param Zend_Search_Lucene_Interface $reader
         */
        public function __construct(\Zend_Search_Lucene_Search_Query $query, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return float
         */
        public function getValue()
        {
        }
        /**
         * @return float
         */
        public function sumOfSquaredWeights()
        {
        }
        /**
         * @param float $queryNorm
         */
        public function normalize($queryNorm)
        {
        }
    }
    class Zend_Search_Lucene_Search_Weight_Empty extends \Zend_Search_Lucene_Search_Weight
    {
        /**
         * @return float
         */
        public function sumOfSquaredWeights()
        {
        }
        /**
         * @param float $queryNorm
         */
        public function normalize($queryNorm)
        {
        }
    }
    class Zend_Search_Lucene_Search_Weight_MultiTerm extends \Zend_Search_Lucene_Search_Weight
    {
        /**
         * @var Zend_Search_Lucene_Interface
         */
        public $_reader;
        /**
         * @var Zend_Search_Lucene_Search_Query
         */
        public $_query;
        /**
         * @var array<array-key, mixed>
         */
        public $_weights;
        /**
         * @param Zend_Search_Lucene_Search_Query $query
         * @param Zend_Search_Lucene_Interface $reader
         */
        public function __construct(\Zend_Search_Lucene_Search_Query $query, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return float
         */
        public function getValue()
        {
        }
        /**
         * @return float
         */
        public function sumOfSquaredWeights()
        {
        }
        /**
         * @param float $queryNorm
         */
        public function normalize($queryNorm)
        {
        }
    }
    class Zend_Search_Lucene_Search_Weight_Phrase extends \Zend_Search_Lucene_Search_Weight
    {
        /**
         * @var Zend_Search_Lucene_Interface
         */
        public $_reader;
        /**
         * @var Zend_Search_Lucene_Search_Query_Phrase
         */
        public $_query;
        /**
         * @var float
         */
        public $_idf;
        /**
         * @param Zend_Search_Lucene_Search_Query_Phrase $query
         * @param Zend_Search_Lucene_Interface $reader
         */
        public function __construct(\Zend_Search_Lucene_Search_Query_Phrase $query, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return float
         */
        public function sumOfSquaredWeights()
        {
        }
        /**
         * @param float $queryNorm
         */
        public function normalize($queryNorm)
        {
        }
    }
    class Zend_Search_Lucene_Search_Weight_Term extends \Zend_Search_Lucene_Search_Weight
    {
        /**
         * @var Zend_Search_Lucene_Interface
         */
        public $_reader;
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_term;
        /**
         * @var Zend_Search_Lucene_Search_Query
         */
        public $_query;
        /**
         * @var float
         */
        public $_idf;
        /**
         * @var float
         */
        public $_queryWeight;
        /**
         * @param Zend_Search_Lucene_Index_Term $term
         * @param Zend_Search_Lucene_Search_Query $query
         * @param Zend_Search_Lucene_Interface $reader
         */
        public function __construct(\Zend_Search_Lucene_Index_Term $term, \Zend_Search_Lucene_Search_Query $query, \Zend_Search_Lucene_Interface $reader)
        {
        }
        /**
         * @return float
         */
        public function sumOfSquaredWeights()
        {
        }
        /**
         * @param float $queryNorm
         */
        public function normalize($queryNorm)
        {
        }
    }
    class Zend_Search_Lucene_Storage_Directory
    {
        /**
         * @return void
         */
        public abstract function close();
        /**
         * @return array<array-key, mixed>
         */
        public abstract function fileList();
        /**
         * @param string $filename
         *
         * @return Zend_Search_Lucene_Storage_File
         */
        public abstract function createFile($filename);
        /**
         * @param string $filename
         *
         * @return void
         */
        public abstract function deleteFile($filename);
        /**
         * @param string $filename
         *
         * @return void
         */
        public abstract function purgeFile($filename);
        /**
         * @param string $filename
         *
         * @return bool
         */
        public abstract function fileExists($filename);
        /**
         * @param string $filename
         *
         * @return int
         */
        public abstract function fileLength($filename);
        /**
         * @param string $filename
         *
         * @return int
         */
        public abstract function fileModified($filename);
        /**
         * @param string $from
         * @param string $to
         *
         * @return void
         */
        public abstract function renameFile($from, $to);
        /**
         * @param string $filename
         *
         * @return void
         */
        public abstract function touchFile($filename);
        /**
         * @param string $filename
         * @param bool $shareHandler
         *
         * @return Zend_Search_Lucene_Storage_File
         */
        public abstract function getFileObject($filename, $shareHandler = true);
    }
    class Zend_Search_Lucene_Storage_Directory_Filesystem extends \Zend_Search_Lucene_Storage_Directory
    {
        /**
         * @var string
         */
        public $_dirPath;
        /**
         * @var array<array-key, mixed>
         */
        public $_fileHandlers;
        /**
         * @var int
         */
        public static $_defaultFilePermissions;
        /**
         * @return int
         */
        public static function getDefaultFilePermissions()
        {
        }
        /**
         * @param int $mode
         */
        public static function setDefaultFilePermissions($mode)
        {
        }
        /**
         * @param string $dir
         * @param int $mode
         * @param bool $recursive
         *
         * @return bool
         */
        public static function mkdirs($dir, $mode = 509, $recursive = true)
        {
        }
        /**
         * @param string $path
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function __construct($path)
        {
        }
        /**
         * @return void
         */
        public function close()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function fileList()
        {
        }
        /**
         * @param string $filename
         *
         * @return Zend_Search_Lucene_Storage_File
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function createFile($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function deleteFile($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         */
        public function purgeFile($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public function fileExists($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return int
         */
        public function fileLength($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return int
         */
        public function fileModified($filename)
        {
        }
        /**
         * @param string $from
         * @param string $to
         *
         * @return void
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function renameFile($from, $to)
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         */
        public function touchFile($filename)
        {
        }
        /**
         * @param string $filename
         * @param bool $shareHandler
         *
         * @return Zend_Search_Lucene_Storage_File
         */
        public function getFileObject($filename, $shareHandler = true)
        {
        }
    }
    class Zend_Search_Lucene_Storage_File
    {
        /**
         * @param int $length
         *
         * @return string
         */
        public abstract function _fread($length = 1);
        /**
         * @param int $offset
         * @param int $whence
         *
         * @return int
         */
        public abstract function seek($offset, $whence);
        /**
         * @return int
         */
        public abstract function tell();
        /**
         * @return bool
         */
        public abstract function flush();
        /**
         * @param string $data
         * @param int|null $length
         */
        public abstract function _fwrite($data, $length = null);
        /**
         * @param int $lockType
         *
         * @return bool
         */
        public abstract function lock($lockType, $nonBlockinLock = false);
        public abstract function unlock();
        /**
         * @return int
         */
        public function readByte()
        {
        }
        /**
         * @param int $byte
         */
        public function writeByte($byte)
        {
        }
        /**
         * @param int $num
         *
         * @return string
         */
        public function readBytes($num)
        {
        }
        /**
         * @param string $data
         * @param int|null $num
         */
        public function writeBytes($data, $num = null)
        {
        }
        /**
         * @return int
         */
        public function readInt()
        {
        }
        /**
         * @param int $value
         */
        public function writeInt($value)
        {
        }
        /**
         * @return float|int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function readLong()
        {
        }
        /**
         * @param int $value
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function writeLong($value)
        {
        }
        /**
         * @return float|int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function readLong32Bit()
        {
        }
        /**
         * @param float|int $value
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function writeLong32Bit($value)
        {
        }
        /**
         * @return int
         */
        public function readVInt()
        {
        }
        /**
         * @param int $value
         */
        public function writeVInt($value)
        {
        }
        /**
         * @return string
         */
        public function readString()
        {
        }
        /**
         * @param string $str
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function writeString($str)
        {
        }
        /**
         * @return string
         */
        public function readBinary()
        {
        }
    }
    class Zend_Search_Lucene_Storage_File_Filesystem extends \Zend_Search_Lucene_Storage_File
    {
        /**
         * @var resource
         */
        public $_fileHandle;
        /**
         * @param string $filename
         * @param string $mode
         */
        public function __construct($filename, $mode = 'r+b')
        {
        }
        /**
         * @param int $offset
         * @param int $whence
         *
         * @return int
         */
        public function seek($offset, $whence)
        {
        }
        /**
         * @return int
         */
        public function tell()
        {
        }
        /**
         * @return bool
         */
        public function flush()
        {
        }
        public function close()
        {
        }
        /**
         * @return int
         */
        public function size()
        {
        }
        /**
         * @param int $length
         *
         * @return string
         */
        public function _fread($length = 1)
        {
        }
        /**
         * @param string $data
         * @param int|null $length
         */
        public function _fwrite($data, $length = null)
        {
        }
        /**
         * @param int $lockType
         * @param bool $nonBlockingLock
         *
         * @return bool
         */
        public function lock($lockType, $nonBlockingLock = false)
        {
        }
        /**
         * @return bool
         */
        public function unlock()
        {
        }
    }
    class Zend_Search_Lucene_Storage_File_Memory extends \Zend_Search_Lucene_Storage_File
    {
        /**
         * @var string
         */
        public $_data;
        /**
         * @var int
         */
        public $_position;
        /**
         * @param string $data
         */
        public function __construct($data)
        {
        }
        /**
         * @param int $length
         *
         * @return string
         */
        public function _fread($length = 1)
        {
        }
        /**
         * @param int $offset
         * @param int $whence
         *
         * @return int
         */
        public function seek($offset, $whence)
        {
        }
        /**
         * @return int
         */
        public function tell()
        {
        }
        /**
         * @return bool
         */
        public function flush()
        {
        }
        /**
         * @param string $data
         * @param int|null $length
         */
        public function _fwrite($data, $length = null)
        {
        }
        /**
         * @param int $lockType
         *
         * @return bool
         */
        public function lock($lockType, $nonBlockinLock = false)
        {
        }
        public function unlock()
        {
        }
        /**
         * @return int
         */
        public function readByte()
        {
        }
        /**
         * @param int $byte
         */
        public function writeByte($byte)
        {
        }
        /**
         * @param int $num
         *
         * @return string
         */
        public function readBytes($num)
        {
        }
        /**
         * @param string $data
         * @param int|null $num
         */
        public function writeBytes($data, $num = null)
        {
        }
        /**
         * @return int
         */
        public function readInt()
        {
        }
        /**
         * @param int $value
         */
        public function writeInt($value)
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function readLong()
        {
        }
        /**
         * @param int $value
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function writeLong($value)
        {
        }
        /**
         * @return float|int
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function readLong32Bit()
        {
        }
        /**
         * @param float|int $value
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function writeLong32Bit($value)
        {
        }
        /**
         * @return int
         */
        public function readVInt()
        {
        }
        /**
         * @param int $value
         */
        public function writeVInt($value)
        {
        }
        /**
         * @return string
         */
        public function readString()
        {
        }
        /**
         * @param string $str
         *
         * @throws Zend_Search_Lucene_Exception
         */
        public function writeString($str)
        {
        }
        /**
         * @return string
         */
        public function readBinary()
        {
        }
    }
    class Zend_Search_Lucene_TermStreamsPriorityQueue implements \Zend_Search_Lucene_Index_TermsStream_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_termStreams;
        /**
         * @var Zend_Search_Lucene_Index_TermsPriorityQueue
         */
        public $_termsStreamQueue;
        /**
         * @var Zend_Search_Lucene_Index_Term
         */
        public $_lastTerm;
        /**
         * @param array<array-key, mixed> $termStreams
         */
        public function __construct(array $termStreams)
        {
        }
        public function resetTermsStream()
        {
        }
        /**
         * @param Zend_Search_Lucene_Index_Term $prefix
         */
        public function skipTo(\Zend_Search_Lucene_Index_Term $prefix)
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function nextTerm()
        {
        }
        /**
         * @return Zend_Search_Lucene_Index_Term|null
         */
        public function currentTerm()
        {
        }
        public function closeTermsStream()
        {
        }
    }
    class Zend_Serializer
    {
        /**
         * @var Zend_Loader_PluginLoader|null
         */
        public static $_adapterLoader;
        /**
         * @var Zend_Serializer_AdapterInterface|string
         */
        public static $_defaultAdapter;
        /**
         * @param Zend_Serializer_Adapter_AdapterInterface|string $adapterName
         *
         * @return Zend_Serializer_Adapter_AdapterInterface
         */
        public static function factory($adapterName, $opts = array())
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function getAdapterLoader()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader $pluginLoader
         *
         * @return void
         */
        public static function setAdapterLoader(\Zend_Loader_PluginLoader $pluginLoader)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function resetAdapterLoader()
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public static function _getDefaultAdapterLoader()
        {
        }
        /**
         * @param Zend_Serializer_Adapter_AdapterInterface|string $adapter
         * @param Zend_Config|array<array-key, mixed> $options
         */
        public static function setDefaultAdapter($adapter, $options = array())
        {
        }
        /**
         * @return Zend_Serializer_Adapter_AdapterInterface
         */
        public static function getDefaultAdapter()
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $options
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public static function serialize($value, array $options = array())
        {
        }
        /**
         * @param string $serialized
         * @param array<array-key, mixed> $options
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public static function unserialize($serialized, array $options = array())
        {
        }
    }
    class Zend_Serializer_Adapter_AdapterAbstract implements \Zend_Serializer_Adapter_AdapterInterface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param Zend_Config|array<array-key, mixed> $opts
         */
        public function __construct($opts = array())
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $opts
         *
         * @return Zend_Serializer_Adapter_AdapterAbstract
         */
        public function setOptions($opts)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Serializer_Adapter_AdapterAbstract
         */
        public function setOption($name, $value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function getOption($name)
        {
        }
    }
    interface Zend_Serializer_Adapter_AdapterInterface
    {
        /**
         * @param Zend_Config|array<array-key, mixed> $opts
         *
         * @return void
         */
        public function __construct($opts = array());
        /**
         * @param Zend_Config|array<array-key, mixed> $opts
         *
         * @return Zend_Serializer_Adapter_AdapterInterface
         */
        public function setOptions($opts);
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Serializer_Adapter_AdapterInterface
         */
        public function setOption($name, $value);
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions();
        /**
         * @param string $name
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function getOption($name);
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $options
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $options = array());
        /**
         * @param string $serialized
         * @param array<array-key, mixed> $options
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($serialized, array $options = array());
    }
    class Zend_Serializer_Adapter_Amf0 extends \Zend_Serializer_Adapter_AdapterAbstract
    {
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $opts = array())
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($value, array $opts = array())
        {
        }
    }
    class Zend_Serializer_Adapter_Amf3 extends \Zend_Serializer_Adapter_AdapterAbstract
    {
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $opts = array())
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($value, array $opts = array())
        {
        }
    }
    class Zend_Serializer_Adapter_Igbinary extends \Zend_Serializer_Adapter_AdapterAbstract
    {
        /**
         * @var string
         */
        public static $_serializedNull;
        /**
         * @param Zend_Config|array<array-key, mixed> $opts
         *
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function __construct($opts = array())
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $opts = array())
        {
        }
        /**
         * @param binary|string $serialized
         * @param array<array-key, mixed> $opts
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($serialized, array $opts = array())
        {
        }
    }
    class Zend_Serializer_Adapter_Json extends \Zend_Serializer_Adapter_AdapterAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $opts = array())
        {
        }
        /**
         * @param string $json
         * @param array<array-key, mixed> $opts
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($json, array $opts = array())
        {
        }
    }
    class Zend_Serializer_Adapter_PhpCode extends \Zend_Serializer_Adapter_AdapterAbstract
    {
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $opts = array())
        {
        }
        /**
         * @param string $code
         * @param array<array-key, mixed> $opts
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($code, array $opts = array())
        {
        }
    }
    class Zend_Serializer_Adapter_PhpSerialize extends \Zend_Serializer_Adapter_AdapterAbstract
    {
        /**
         * @var null|string
         */
        public static $_serializedFalse;
        /**
         * @param Zend_Config|array<array-key, mixed> $opts
         *
         * @return void
         */
        public function __construct($opts = array())
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $opts = array())
        {
        }
        /**
         * @param string $serialized
         * @param array<array-key, mixed> $opts
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($serialized, array $opts = array())
        {
        }
    }
    class Zend_Serializer_Adapter_PythonPickle extends \Zend_Serializer_Adapter_AdapterAbstract
    {
        public const OP_MARK = '(';
        public const OP_STOP = '.';
        public const OP_POP = '0';
        public const OP_POP_MARK = '1';
        public const OP_DUP = '2';
        public const OP_FLOAT = 'F';
        public const OP_INT = 'I';
        public const OP_BININT = 'J';
        public const OP_BININT1 = 'K';
        public const OP_LONG = 'L';
        public const OP_BININT2 = 'M';
        public const OP_NONE = 'N';
        public const OP_PERSID = 'P';
        public const OP_BINPERSID = 'Q';
        public const OP_REDUCE = 'R';
        public const OP_STRING = 'S';
        public const OP_BINSTRING = 'T';
        public const OP_SHORT_BINSTRING = 'U';
        public const OP_UNICODE = 'V';
        public const OP_BINUNICODE = 'X';
        public const OP_APPEND = 'a';
        public const OP_BUILD = 'b';
        public const OP_GLOBAL = 'c';
        public const OP_DICT = 'd';
        public const OP_EMPTY_DICT = '}';
        public const OP_APPENDS = 'e';
        public const OP_GET = 'g';
        public const OP_BINGET = 'h';
        public const OP_INST = 'i';
        public const OP_LONG_BINGET = 'j';
        public const OP_LIST = 'l';
        public const OP_EMPTY_LIST = ']';
        public const OP_OBJ = 'o';
        public const OP_PUT = 'p';
        public const OP_BINPUT = 'q';
        public const OP_LONG_BINPUT = 'r';
        public const OP_SETITEM = 's';
        public const OP_TUPLE = 't';
        public const OP_EMPTY_TUPLE = ')';
        public const OP_SETITEMS = 'u';
        public const OP_BINFLOAT = 'G';
        public const OP_PROTO = '';
        public const OP_NEWOBJ = '';
        public const OP_EXT1 = '';
        public const OP_EXT2 = '';
        public const OP_EXT4 = '';
        public const OP_TUPLE1 = '';
        public const OP_TUPLE2 = '';
        public const OP_TUPLE3 = '';
        public const OP_NEWTRUE = '';
        public const OP_NEWFALSE = '';
        public const OP_LONG1 = '';
        public const OP_LONG4 = '';
        public const OP_BINBYTES = 'B';
        public const OP_SHORT_BINBYTES = 'C';
        /**
         * @var bool
         */
        public static $_isLittleEndian;
        /**
         * @var array<array-key, mixed>
         */
        public static $_quoteString;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        public $_protocol = 0;
        public $_binary = false;
        public $_memo = array();
        public $_pickle = '';
        public $_pickleLen = 0;
        public $_pos = 0;
        public $_stack = array();
        public $_marker = null;
        public function __construct($opts = array())
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Serializer_Adapter_PythonPickle
         */
        public function setOption($name, $value)
        {
        }
        /**
         * @param int $number
         *
         * @return int
         *
         * @throws Zend_Serializer_Exception
         */
        public function _checkProtocolNumber($number)
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $opts = array())
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _write($value)
        {
        }
        /**
         * @param int $protocol
         *
         * @return void
         */
        public function _writeProto($protocol)
        {
        }
        /**
         * @param int $id
         *
         * @return void
         */
        public function _writeGet($id)
        {
        }
        /**
         * @param int $id
         *
         * @return void
         */
        public function _writePut($id)
        {
        }
        /**
         * @return void
         */
        public function _writeNull()
        {
        }
        /**
         * @return void
         */
        public function _writeTrue()
        {
        }
        /**
         * @return void
         */
        public function _writeFalse()
        {
        }
        /**
         * @param int $value
         *
         * @return void
         */
        public function _writeInt($value)
        {
        }
        /**
         * @param float $value
         *
         * @return void
         */
        public function _writeFloat($value)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         */
        public function _writeString($value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return void
         */
        public function _writeArrayDict(array $value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return void
         */
        public function _writeArrayList(array $value)
        {
        }
        /**
         * @param object $value
         *
         * @return void
         */
        public function _writeObject($value)
        {
        }
        /**
         * @return void
         */
        public function _writeStop()
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function _momorize($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return false|int
         */
        public function _searchMomo($value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return bool
         */
        public function _isArrayAssoc(array $value)
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public function _quoteString($str)
        {
        }
        /**
         * @param string $pickle
         * @param array<array-key, mixed> $opts
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($pickle, array $opts = array())
        {
        }
        /**
         * @param string $op
         *
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _load($op)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _loadPut()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _loadBinPut()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _loadLongBinPut()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _loadGet()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _loadBinGet()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _loadLongBinGet()
        {
        }
        /**
         * @return void
         */
        public function _loadNone()
        {
        }
        /**
         * @return void
         */
        public function _loadNewTrue()
        {
        }
        /**
         * @return void
         */
        public function _loadNewFalse()
        {
        }
        /**
         * @return void
         */
        public function _loadInt()
        {
        }
        /**
         * @return void
         */
        public function _loadBinInt()
        {
        }
        /**
         * @return void
         */
        public function _loadBinInt1()
        {
        }
        /**
         * @return void
         */
        public function _loadBinInt2()
        {
        }
        /**
         * @return void
         */
        public function _loadLong()
        {
        }
        /**
         * @return void
         */
        public function _loadLong1()
        {
        }
        /**
         * @return void
         */
        public function _loadLong4()
        {
        }
        /**
         * @return void
         */
        public function _loadFloat()
        {
        }
        /**
         * @return void
         */
        public function _loadBinFloat()
        {
        }
        /**
         * @return void
         */
        public function _loadString()
        {
        }
        /**
         * @return void
         */
        public function _loadBinString()
        {
        }
        /**
         * @return void
         */
        public function _loadShortBinString()
        {
        }
        /**
         * @return void
         */
        public function _loadBinBytes()
        {
        }
        /**
         * @return void
         */
        public function _loadShortBinBytes()
        {
        }
        /**
         * @return void
         */
        public function _loadUnicode()
        {
        }
        /**
         * @param array<array-key, mixed> $match
         *
         * @return string
         */
        public function _convertMatchingUnicodeSequence2Utf8(array $match)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function _hex2Utf8($hex)
        {
        }
        /**
         * @return void
         */
        public function _loadBinUnicode()
        {
        }
        /**
         * @return void
         */
        public function _loadMark()
        {
        }
        /**
         * @return void
         */
        public function _loadList()
        {
        }
        /**
         * @return void
         */
        public function _loadAppend()
        {
        }
        /**
         * @return void
         */
        public function _loadEmptyList()
        {
        }
        /**
         * @return void
         */
        public function _loadAppends()
        {
        }
        /**
         * @return void
         */
        public function _loadDict()
        {
        }
        /**
         * @return void
         */
        public function _loadSetItem()
        {
        }
        /**
         * @return void
         */
        public function _loadEmptyDict()
        {
        }
        /**
         * @return void
         */
        public function _loadSetItems()
        {
        }
        /**
         * @return void
         */
        public function _loadTuple()
        {
        }
        /**
         * @return void
         */
        public function _loadTuple1()
        {
        }
        /**
         * @return void
         */
        public function _loadTuple2()
        {
        }
        /**
         * @return void
         */
        public function _loadTuple3()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function _loadProto()
        {
        }
        /**
         * @param mixed $len
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function _read($len)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function _readline()
        {
        }
        /**
         * @param string $str
         *
         * @return string
         */
        public function _unquoteString($str)
        {
        }
        /**
         * @return int
         */
        public function _lastMarker()
        {
        }
        /**
         * @param string $data
         *
         * @return float|int|string
         */
        public function _decodeBinLong($data)
        {
        }
    }
    class Zend_Serializer_Adapter_Wddx extends \Zend_Serializer_Adapter_AdapterAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param array<array-key, mixed> $opts
         *
         * @return void
         *
         * @throws Zend_Serializer_Exception
         */
        public function __construct($opts = array())
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed> $opts
         *
         * @return string
         *
         * @throws Zend_Serializer_Exception
         */
        public function serialize($value, array $opts = array())
        {
        }
        /**
         * @param string $wddx
         * @param array<array-key, mixed> $opts
         *
         * @return mixed
         *
         * @throws Zend_Serializer_Exception
         */
        public function unserialize($wddx, array $opts = array())
        {
        }
    }
    class Zend_Serializer_Exception extends \Zend_Exception
    {
    }
    class Zend_Server_Abstract implements \Zend_Server_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $magic_methods;
        /**
         * @var bool
         */
        public $_overwriteExistingMethods;
        /**
         * @var Zend_Server_Definition
         */
        public $_table;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return Zend_Server_Definition
         */
        public function getFunctions()
        {
        }
        /**
         * @param string $key
         *
         * @return string
         */
        public static function lowerCase(&$value, &$key)
        {
        }
        /**
         * @param Zend_Server_Reflection_Function_Abstract $reflection
         *
         * @return Zend_Server_Method_Callback
         */
        public function _buildCallback(\Zend_Server_Reflection_Function_Abstract $reflection)
        {
        }
        /**
         * @param Zend_Server_Reflection_Function_Abstract $reflection
         * @param null|object|string $class
         *
         * @return Zend_Server_Method_Definition
         *
         * @throws Zend_Server_Exception
         */
        public function _buildSignature(\Zend_Server_Reflection_Function_Abstract $reflection, $class = null)
        {
        }
        /**
         * @param Zend_Server_Method_Definition $invocable
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         */
        public function _dispatch(\Zend_Server_Method_Definition $invocable, array $params)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public abstract function _fixType($type);
    }
    class Zend_Server_Cache
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_skipMethods;
        /**
         * @param string $filename
         * @param Zend_Server_Interface $server
         *
         * @return bool
         */
        public static function save($filename, \Zend_Server_Interface $server)
        {
        }
        /**
         * @param string $filename
         * @param Zend_Server_Interface $server
         *
         * @return bool
         */
        public static function get($filename, \Zend_Server_Interface $server)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public static function delete($filename)
        {
        }
    }
    class Zend_Server_Definition implements \Countable, \Iterator
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_methods;
        /**
         * @var bool
         */
        public $_overwriteExistingMethods;
        /**
         * @param array<array-key, mixed>|null $methods
         *
         * @return void
         */
        public function __construct($methods = null)
        {
        }
        /**
         * @param mixed $flag
         *
         * @return void
         */
        public function setOverwriteExistingMethods($flag)
        {
        }
        /**
         * @param Zend_Server_Method_Definition|array<array-key, mixed> $method
         * @param null|string $name
         *
         * @return Zend_Server_Definition
         *
         * @throws Zend_Server_Exception
         */
        public function addMethod($method, $name = null)
        {
        }
        /**
         * @param array<array-key, mixed> $methods
         *
         * @return Zend_Server_Definition
         */
        public function addMethods(array $methods)
        {
        }
        /**
         * @param array<array-key, mixed> $methods
         *
         * @return Zend_Server_Definition
         */
        public function setMethods(array $methods)
        {
        }
        /**
         * @param string $method
         *
         * @return bool
         */
        public function hasMethod($method)
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Server_Method_Definition|null
         */
        public function getMethod($method)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMethods()
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Server_Definition
         */
        public function removeMethod($method)
        {
        }
        /**
         * @return Zend_Server_Definition
         */
        public function clearMethods()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
        /**
         * @return int|string
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    class Zend_Server_Exception extends \Zend_Exception
    {
    }
    interface Zend_Server_Interface
    {
        /**
         * @param string $function
         * @param string $namespace
         *
         * @return void
         */
        public function addFunction($function, $namespace = '');
        /**
         * @param mixed $class
         * @param string $namespace
         *
         * @return void
         */
        public function setClass($class, $namespace = '', $argv = null);
        /**
         * @param mixed|null $fault
         * @param int $code
         *
         * @return mixed
         */
        public function fault($fault = null, $code = 404);
        /**
         * @param mixed $request
         *
         * @return mixed
         */
        public function handle($request = false);
        /**
         * @return array<array-key, mixed>
         */
        public function getFunctions();
        /**
         * @return void
         */
        public function loadFunctions($definition);
        /**
         * @param int $mode
         *
         * @return void
         */
        public function setPersistence($mode);
    }
    class Zend_Server_Method_Callback
    {
        /**
         * @var string
         */
        public $_class;
        /**
         * @var string
         */
        public $_function;
        /**
         * @var string
         */
        public $_method;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var array<array-key, mixed>
         */
        public $_types;
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Server_Method_Callback
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Server_Method_Callback
         */
        public function setClass($class)
        {
        }
        /**
         * @return null|string
         */
        public function getClass()
        {
        }
        /**
         * @param string $function
         *
         * @return Zend_Server_Method_Callback
         */
        public function setFunction($function)
        {
        }
        /**
         * @return null|string
         */
        public function getFunction()
        {
        }
        /**
         * @param string $method
         *
         * @return Zend_Server_Method_Callback
         */
        public function setMethod($method)
        {
        }
        /**
         * @return null|string
         */
        public function getMethod()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Server_Method_Callback
         *
         * @throws Zend_Server_Exception
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Server_Method_Definition
    {
        /**
         * @var Zend_Server_Method_Callback
         */
        public $_callback;
        /**
         * @var array<array-key, mixed>
         */
        public $_invokeArguments;
        /**
         * @var string
         */
        public $_methodHelp;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var null|object
         */
        public $_object;
        /**
         * @var array<array-key, mixed>
         */
        public $_prototypes;
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Server_Method_Definition
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Server_Method_Definition
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param Zend_Server_Method_Callback|array<array-key, mixed> $callback
         *
         * @return Zend_Server_Method_Definition
         */
        public function setCallback($callback)
        {
        }
        /**
         * @return Zend_Server_Method_Callback
         */
        public function getCallback()
        {
        }
        /**
         * @param Zend_Server_Method_Prototype|array<array-key, mixed> $prototype
         *
         * @return Zend_Server_Method_Definition
         */
        public function addPrototype($prototype)
        {
        }
        /**
         * @param array<array-key, mixed> $prototypes
         *
         * @return Zend_Server_Method_Definition
         */
        public function addPrototypes(array $prototypes)
        {
        }
        /**
         * @param array<array-key, mixed> $prototypes
         *
         * @return Zend_Server_Method_Definition
         */
        public function setPrototypes(array $prototypes)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPrototypes()
        {
        }
        /**
         * @param string $methodHelp
         *
         * @return Zend_Server_Method_Definition
         */
        public function setMethodHelp($methodHelp)
        {
        }
        /**
         * @return string
         */
        public function getMethodHelp()
        {
        }
        /**
         * @param object $object
         *
         * @return Zend_Server_Method_Definition
         */
        public function setObject($object)
        {
        }
        /**
         * @return null|object
         */
        public function getObject()
        {
        }
        /**
         * @param array<array-key, mixed> $invokeArguments
         *
         * @return Zend_Server_Method_Definition
         */
        public function setInvokeArguments(array $invokeArguments)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getInvokeArguments()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Server_Method_Parameter
    {
        /**
         * @var mixed
         */
        public $_defaultValue;
        /**
         * @var string
         */
        public $_description;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var bool
         */
        public $_optional;
        /**
         * @var string
         */
        public $_type;
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Server_Method_Parameter
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param mixed $defaultValue
         *
         * @return Zend_Server_Method_Parameter
         */
        public function setDefaultValue($defaultValue)
        {
        }
        /**
         * @return mixed
         */
        public function getDefaultValue()
        {
        }
        /**
         * @param string $description
         *
         * @return Zend_Server_Method_Parameter
         */
        public function setDescription($description)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Server_Method_Parameter
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Server_Method_Parameter
         */
        public function setOptional($flag)
        {
        }
        /**
         * @return bool
         */
        public function isOptional()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Server_Method_Parameter
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Server_Method_Prototype
    {
        /**
         * @var string
         */
        public $_returnType;
        /**
         * @var array<array-key, mixed>
         */
        public $_parameterNameMap;
        /**
         * @var array<array-key, mixed>
         */
        public $_parameters;
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param string $returnType
         *
         * @return Zend_Server_Method_Prototype
         */
        public function setReturnType($returnType)
        {
        }
        /**
         * @return string
         */
        public function getReturnType()
        {
        }
        /**
         * @param string $parameter
         *
         * @return Zend_Server_Method_Prototype
         */
        public function addParameter($parameter)
        {
        }
        /**
         * @return Zend_Server_Method_Prototype
         */
        public function addParameters(array $parameters)
        {
        }
        /**
         * @param array<array-key, mixed> $parameters
         *
         * @return Zend_Server_Method_Prototype
         */
        public function setParameters(array $parameters)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParameters()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParameterObjects()
        {
        }
        /**
         * @param int|string $index
         *
         * @return Zend_Server_Method_Parameter|null
         */
        public function getParameter($index)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Server_Method_Prototype
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Server_Reflection
    {
        /**
         * @param object|string $class
         * @param array<array-key, mixed>|null $argv
         * @param string $namespace
         *
         * @return Zend_Server_Reflection_Class
         *
         * @throws Zend_Server_Reflection_Exception
         */
        public static function reflectClass($class, $argv = false, $namespace = '')
        {
        }
        /**
         * @param string $function
         * @param array<array-key, mixed>|null $argv
         * @param string $namespace
         *
         * @return Zend_Server_Reflection_Function
         *
         * @throws Zend_Server_Reflection_Exception
         */
        public static function reflectFunction($function, $argv = false, $namespace = '')
        {
        }
    }
    class Zend_Server_Reflection_Class
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var array<array-key, mixed>
         */
        public $_methods;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @var ReflectionClass
         */
        public $_reflection;
        /**
         * @param ReflectionClass $reflection
         * @param null|string $namespace
         * @param mixed $argv
         *
         * @return void
         */
        public function __construct(\ReflectionClass $reflection, $namespace = null, $argv = false)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return void
         */
        public function __set($key, $value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMethods()
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @param string $namespace
         *
         * @return void
         */
        public function setNamespace($namespace)
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
    }
    class Zend_Server_Reflection_Exception extends \Zend_Server_Exception
    {
    }
    class Zend_Server_Reflection_Function extends \Zend_Server_Reflection_Function_Abstract
    {
    }
    class Zend_Server_Reflection_Function_Abstract
    {
        /**
         * @var ReflectionFunction
         */
        public $_reflection;
        /**
         * @var array<array-key, mixed>
         */
        public $_argv;
        /**
         * @var array<array-key, mixed>
         */
        public $_config;
        /**
         * @var string
         */
        public $_class;
        /**
         * @var string
         */
        public $_description;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @var array<array-key, mixed>
         */
        public $_prototypes;
        public $_return;
        public $_returnDesc;
        public $_paramDesc;
        public $_sigParams;
        public $_sigParamsDepth;
        /**
         * @param ReflectionFunction $r
         */
        public function __construct(\Reflector $r, $namespace = null, $argv = array())
        {
        }
        /**
         * @param Zend_Server_Reflection_Node $parent
         * @param int $level
         *
         * @return void
         */
        public function _addTree(\Zend_Server_Reflection_Node $parent, $level = 0)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _buildTree()
        {
        }
        /**
         * @param array<array-key, mixed> $return
         * @param string $returnDesc
         * @param array<array-key, mixed> $paramDesc
         *
         * @return array<array-key, mixed>
         */
        public function _buildSignatures($return, $returnDesc, $paramTypes, $paramDesc)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _reflect()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return void
         */
        public function __set($key, $value)
        {
        }
        /**
         * @param string $namespace
         *
         * @return void
         */
        public function setNamespace($namespace)
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @param string $string
         *
         * @return void
         */
        public function setDescription($string)
        {
        }
        /**
         * @return void
         */
        public function getDescription()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPrototypes()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getInvokeArguments()
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
    }
    class Zend_Server_Reflection_Method extends \Zend_Server_Reflection_Function_Abstract
    {
        /**
         * @var string
         */
        public $_class;
        /**
         * @var Zend_Server_Reflection_Class
         */
        public $_classReflection;
        /**
         * @param Zend_Server_Reflection_Class $class
         * @param ReflectionMethod $r
         * @param null|string $namespace
         * @param array<array-key, mixed> $argv
         *
         * @return void
         */
        public function __construct(\Zend_Server_Reflection_Class $class, \ReflectionMethod $r, $namespace = null, $argv = array())
        {
        }
        /**
         * @return Zend_Server_Reflection_Class
         */
        public function getDeclaringClass()
        {
        }
        /**
         * @return void
         */
        public function __wakeup()
        {
        }
    }
    class Zend_Server_Reflection_Node
    {
        /**
         * @var mixed
         */
        public $_value;
        /**
         * @var array<array-key, mixed>
         */
        public $_children;
        /**
         * @var Zend_Server_Reflection_Node
         */
        public $_parent;
        /**
         * @param mixed $value
         * @param Zend_Server_Reflection_Node|null $parent
         *
         * @return Zend_Server_Reflection_Node
         */
        public function __construct($value, ?\Zend_Server_Reflection_Node $parent = null)
        {
        }
        /**
         * @param Zend_Server_Reflection_Node $node
         * @param bool $new
         *
         * @return void
         */
        public function setParent(\Zend_Server_Reflection_Node $node, $new = false)
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Server_Reflection_Node
         */
        public function createChild($value)
        {
        }
        /**
         * @param Zend_Server_Reflection_Node $node
         *
         * @return void
         */
        public function attachChild(\Zend_Server_Reflection_Node $node)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getChildren()
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return Zend_Server_Reflection_Node|null
         */
        public function getParent()
        {
        }
        /**
         * @return mixed
         */
        public function getValue()
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function setValue($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEndPoints()
        {
        }
    }
    class Zend_Server_Reflection_Parameter
    {
        /**
         * @var ReflectionParameter
         */
        public $_reflection;
        /**
         * @var int
         */
        public $_position;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_description;
        /**
         * @param ReflectionParameter $r
         * @param string $type
         * @param string $description
         */
        public function __construct(\ReflectionParameter $r, $type = 'mixed', $description = '')
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param null|string $type
         *
         * @return void
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param null|string $description
         *
         * @return void
         */
        public function setDescription($description)
        {
        }
        /**
         * @param int $index
         *
         * @return void
         */
        public function setPosition($index)
        {
        }
        /**
         * @return int
         */
        public function getPosition()
        {
        }
    }
    class Zend_Server_Reflection_Prototype
    {
        /**
         * @param Zend_Server_Reflection_ReturnValue $return
         * @param array<array-key, mixed>|null $params
         *
         * @return void
         */
        public function __construct(\Zend_Server_Reflection_ReturnValue $return, $params = null)
        {
        }
        /**
         * @return string
         */
        public function getReturnType()
        {
        }
        /**
         * @return Zend_Server_Reflection_ReturnValue
         */
        public function getReturnValue()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParameters()
        {
        }
    }
    class Zend_Server_Reflection_ReturnValue
    {
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_description;
        /**
         * @param string $type
         * @param string $description
         */
        public function __construct($type = 'mixed', $description = '')
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param null|string $type
         *
         * @return void
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param null|string $description
         *
         * @return void
         */
        public function setDescription($description)
        {
        }
    }
    class Zend_Service_Abstract
    {
        /**
         * @var Zend_Http_Client
         */
        public static $_httpClient;
        /**
         * @param Zend_Http_Client $httpClient
         */
        public static function setHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public static function getHttpClient()
        {
        }
    }
    class Zend_Service_Akismet extends \Zend_Service_Abstract
    {
        /**
         * @var string
         */
        public $_apiKey;
        /**
         * @var string
         */
        public $_blogUrl;
        /**
         * @var string
         */
        public $_charset;
        /**
         * @var int
         */
        public $_port;
        /**
         * @var string
         */
        public $_userAgent;
        /**
         * @param string $apiKey
         * @param string $blog
         *
         * @return void
         */
        public function __construct($apiKey, $blog)
        {
        }
        /**
         * @return string
         */
        public function getBlogUrl()
        {
        }
        /**
         * @param string $blogUrl
         *
         * @return Zend_Service_Akismet
         *
         * @throws Zend_Service_Exception
         */
        public function setBlogUrl($blogUrl)
        {
        }
        /**
         * @return string
         */
        public function getApiKey()
        {
        }
        /**
         * @param string $apiKey
         *
         * @return Zend_Service_Akismet
         */
        public function setApiKey($apiKey)
        {
        }
        /**
         * @return string
         */
        public function getCharset()
        {
        }
        /**
         * @param string $charset
         *
         * @return Zend_Service_Akismet
         */
        public function setCharset($charset)
        {
        }
        /**
         * @return int
         */
        public function getPort()
        {
        }
        /**
         * @param int $port
         *
         * @return Zend_Service_Akismet
         *
         * @throws Zend_Service_Exception
         */
        public function setPort($port)
        {
        }
        /**
         * @return string
         */
        public function getUserAgent()
        {
        }
        /**
         * @param string $userAgent
         *
         * @return Zend_Service_Akismet
         *
         * @throws Zend_Service_Exception
         */
        public function setUserAgent($userAgent)
        {
        }
        /**
         * @param string $host
         * @param string $path
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         */
        public function _post($host, $path, array $params)
        {
        }
        /**
         * @param null|string $key
         * @param null|string $blog
         *
         * @return bool
         */
        public function verifyKey($key = null, $blog = null)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Service_Exception
         */
        public function _makeApiCall($path, $params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         *
         * @throws Zend_Service_Exception
         */
        public function isSpam($params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function submitSpam($params)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return void
         */
        public function submitHam($params)
        {
        }
    }
    class Zend_Service_Amazon
    {
        /**
         * @var string
         */
        public $appId;
        /**
         * @var string
         */
        public $_secretKey;
        /**
         * @var string
         */
        public $_baseUri;
        /**
         * @var array<array-key, mixed>
         */
        public $_baseUriList;
        /**
         * @var Zend_Rest_Client
         */
        public $_rest;
        /**
         * @param string $appId
         * @param string $countryCode
         *
         * @return Zend_Service_Amazon
         *
         * @throws Zend_Service_Exception
         */
        public function __construct($appId, $countryCode = 'US', $secretKey = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Amazon_ResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function itemSearch(array $options)
        {
        }
        /**
         * @param string $asin
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Amazon_Item|Zend_Service_Amazon_ResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function itemLookup($asin, array $options = array())
        {
        }
        /**
         * @return Zend_Rest_Client
         */
        public function getRestClient()
        {
        }
        public function setRestClient(\Zend_Rest_Client $client)
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         * @param array<array-key, mixed> $defaultOptions
         *
         * @return array<array-key, mixed>
         */
        public function _prepareOptions($query, array $options, array $defaultOptions)
        {
        }
        /**
         * @param string $baseUri
         * @param string $secretKey
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public static function computeSignature($baseUri, $secretKey, array $options)
        {
        }
        /**
         * @param string $baseUri
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public static function buildRawSignature($baseUri, $options)
        {
        }
        /**
         * @param DOMDocument $dom
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public static function _checkErrors(\DOMDocument $dom)
        {
        }
    }
    class Zend_Service_Amazon_Abstract extends \Zend_Service_Abstract
    {
        /**
         * @var string
         */
        public static $_defaultAccessKey;
        /**
         * @var string
         */
        public static $_defaultSecretKey;
        /**
         * @var string
         */
        public $_secretKey;
        /**
         * @var string
         */
        public $_accessKey;
        /**
         * @return void
         */
        public static function setKeys($accessKey, $secretKey)
        {
        }
        /**
         * @return void
         */
        public function __construct($accessKey = null, $secretKey = null)
        {
        }
        /**
         * @return string
         */
        public function _getAccessKey()
        {
        }
        /**
         * @return string
         */
        public function _getSecretKey()
        {
        }
    }
    class Zend_Service_Amazon_Accessories
    {
        /**
         * @var string
         */
        public $ASIN;
        /**
         * @var string
         */
        public $Title;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
    }
    class Zend_Service_Amazon_Authentication
    {
        public $_accessKey;
        public $_secretKey;
        public $_apiVersion;
        /**
         * @param string $accessKey
         * @param string $secretKey
         * @param string $apiVersion
         *
         * @return void
         */
        public function __construct($accessKey, $secretKey, $apiVersion)
        {
        }
        /**
         * @param string $accessKey
         *
         * @return void
         */
        public function setAccessKey($accessKey)
        {
        }
        /**
         * @param string $secretKey
         *
         * @return void
         */
        public function setSecretKey($secretKey)
        {
        }
        /**
         * @param string $apiVersion
         *
         * @return void
         */
        public function setApiVersion($apiVersion)
        {
        }
    }
    class Zend_Service_Amazon_Authentication_Exception extends \Zend_Service_Amazon_Exception
    {
    }
    class Zend_Service_Amazon_Authentication_S3 extends \Zend_Service_Amazon_Authentication
    {
        /**
         * @param string $method
         * @param string $path
         * @param array<array-key, mixed> $headers
         *
         * @return string
         */
        public function generateSignature($method, $path, &$headers)
        {
        }
    }
    class Zend_Service_Amazon_Authentication_V1 extends \Zend_Service_Amazon_Authentication
    {
        public $_signatureVersion = '1';
        public $_signatureMethod = 'HmacSHA256';
        /**
         * @param string $url
         * @param array<array-key, mixed> $parameters
         *
         * @return string
         */
        public function generateSignature($url, array &$parameters)
        {
        }
        /**
         * @return string
         */
        public function _signParameters($url, array &$paramaters)
        {
        }
    }
    class Zend_Service_Amazon_Authentication_V2 extends \Zend_Service_Amazon_Authentication
    {
        public $_signatureVersion = '2';
        public $_signatureMethod = 'HmacSHA256';
        /**
         * @var string
         */
        public $_httpMethod;
        /**
         * @param string $url
         * @param array<array-key, mixed> $parameters
         *
         * @return string
         */
        public function generateSignature($url, array &$parameters)
        {
        }
        /**
         * @param string $method
         */
        public function setHttpMethod($method = 'POST')
        {
        }
        /**
         * @return string
         */
        public function getHttpMethod()
        {
        }
        /**
         * @return string
         */
        public function _signParameters($url, array &$paramaters)
        {
        }
    }
    class Zend_Service_Amazon_CustomerReview
    {
        /**
         * @var string
         */
        public $Rating;
        /**
         * @var string
         */
        public $HelpfulVotes;
        /**
         * @var string
         */
        public $CustomerId;
        /**
         * @var string
         */
        public $TotalVotes;
        /**
         * @var string
         */
        public $Date;
        /**
         * @var string
         */
        public $Summary;
        /**
         * @var string
         */
        public $Content;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
    }
    class Zend_Service_Amazon_Ec2
    {
        /**
         * @param string $section
         * @param null|string $key
         * @param null|string $secret_key
         *
         * @return object
         *
         * @throws Zend_Service_Amazon_Ec2_Exception
         */
        public static function factory($section, $key = null, $secret_key = null)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Abstract extends \Zend_Service_Amazon_Abstract
    {
        public $_ec2Endpoint = 'ec2.amazonaws.com';
        public $_ec2ApiVersion = '2009-04-04';
        public $_ec2SignatureVersion = '2';
        public $_ec2SignatureMethod = 'HmacSHA256';
        public $_httpTimeout = 10;
        /**
         * @var string
         */
        public static $_defaultRegion;
        /**
         * @var string
         */
        public $_region;
        /**
         * @var array<array-key, mixed>
         */
        public static $_validEc2Regions;
        /**
         * @param null|string $region
         *
         * @return void
         */
        public function __construct($accessKey = null, $secretKey = null, $region = null)
        {
        }
        /**
         * @param string $region
         */
        public static function setRegion($region)
        {
        }
        /**
         * @return string
         */
        public function _getRegion()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Service_Amazon_Ec2_Response
         *
         * @throws Zend_Service_Amazon_Ec2_Exception
         */
        public function sendRequest(array $params = array())
        {
        }
        /**
         * @param array<array-key, mixed> $parameters
         *
         * @return array<array-key, mixed>
         */
        public function addRequiredParameters(array $parameters)
        {
        }
        /**
         * @return string
         */
        public function signParameters(array $paramaters)
        {
        }
        /**
         * @param Zend_Service_Amazon_Ec2_Response $response
         *
         * @return void
         *
         * @throws Zend_Service_Amazon_Ec2_Exception
         */
        public function checkForErrors(\Zend_Service_Amazon_Ec2_Response $response)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Availabilityzones extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @param array<array-key, mixed>|null|string $zoneName
         *
         * @return array<array-key, mixed>
         */
        public function describe($zoneName = null)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_CloudWatch extends \Zend_Service_Amazon_Ec2_Abstract
    {
        public $_ec2Endpoint = 'monitoring.amazonaws.com';
        public $_ec2ApiVersion = '2009-05-15';
        public $_xmlNamespace = 'http://monitoring.amazonaws.com/doc/2009-05-15/';
        /**
         * @var array<array-key, mixed>
         */
        public $_validMetrics;
        /**
         * @var array<array-key, mixed>
         */
        public $_validStatistics;
        /**
         * @var array<array-key, mixed>
         */
        public $_validDimensionsKeys;
        /**
         * @param array<array-key, mixed> $options
         */
        public function getMetricStatistics(array $options)
        {
        }
        /**
         * @param null|string $nextToken
         *
         * @return array<array-key, mixed>
         */
        public function listMetrics($nextToken = null)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Ebs extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @param string $size
         * @param string $availabilityZone
         *
         * @return array<array-key, mixed>
         */
        public function createNewVolume($size, $availabilityZone)
        {
        }
        /**
         * @param string $snapshotId
         * @param string $availabilityZone
         *
         * @return array<array-key, mixed>
         */
        public function createVolumeFromSnapshot($snapshotId, $availabilityZone)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $volumeId
         *
         * @return array<array-key, mixed>
         */
        public function describeVolume($volumeId = null)
        {
        }
        public function describeAttachedVolumes($instanceId)
        {
        }
        /**
         * @param string $volumeId
         * @param string $instanceId
         * @param string $device
         *
         * @return array<array-key, mixed>
         */
        public function attachVolume($volumeId, $instanceId, $device)
        {
        }
        /**
         * @param string $volumeId
         * @param null|string $instanceId
         * @param null|string $device
         * @param bool $force
         *
         * @return array<array-key, mixed>
         */
        public function detachVolume($volumeId, $instanceId = null, $device = null, $force = false)
        {
        }
        /**
         * @param string $volumeId
         *
         * @return bool
         */
        public function deleteVolume($volumeId)
        {
        }
        /**
         * @param string $volumeId
         *
         * @return array<array-key, mixed>
         */
        public function createSnapshot($volumeId)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $snapshotId
         *
         * @return array<array-key, mixed>
         */
        public function describeSnapshot($snapshotId = null)
        {
        }
        /**
         * @param string $snapshotId
         *
         * @return bool
         */
        public function deleteSnapshot($snapshotId)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Elasticip extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @return string
         */
        public function allocate()
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $publicIp
         *
         * @return array<array-key, mixed>
         */
        public function describe($publicIp = null)
        {
        }
        /**
         * @param string $publicIp
         *
         * @return bool
         */
        public function release($publicIp)
        {
        }
        /**
         * @param string $instanceId
         * @param string $publicIp
         *
         * @return bool
         */
        public function associate($instanceId, $publicIp)
        {
        }
        /**
         * @param string $publicIp
         *
         * @return bool
         */
        public function disassocate($publicIp)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Exception extends \Zend_Service_Amazon_Exception
    {
        public $awsErrorCode = '';
        public function __construct($message, $code = 0, $awsErrorCode = '')
        {
        }
        public function getErrorCode()
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Image extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @param string $imageLocation
         *
         * @return string
         */
        public function register($imageLocation)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $imageId
         * @param array<array-key, mixed>|null|string $owner
         * @param array<array-key, mixed>|null|string $executableBy
         *
         * @return array<array-key, mixed>
         */
        public function describe($imageId = null, $owner = null, $executableBy = null)
        {
        }
        /**
         * @param string $imageId
         *
         * @return bool
         */
        public function deregister($imageId)
        {
        }
        /**
         * @param string $imageId
         * @param string $attribute
         * @param string $operationType
         * @param array<array-key, mixed>|null|string $userId
         * @param array<array-key, mixed>|null|string $userGroup
         * @param null|string $productCode
         *
         * @return bool
         */
        public function modifyAttribute($imageId, $attribute, $operationType = 'add', $userId = null, $userGroup = null, $productCode = null)
        {
        }
        /**
         * @param string $imageId
         * @param string $attribute
         */
        public function describeAttribute($imageId, $attribute)
        {
        }
        /**
         * @param string $imageId
         * @param string $attribute
         *
         * @return bool
         */
        public function resetAttribute($imageId, $attribute)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Instance extends \Zend_Service_Amazon_Ec2_Abstract
    {
        public const MICRO = 't1.micro';
        public const SMALL = 'm1.small';
        public const LARGE = 'm1.large';
        public const XLARGE = 'm1.xlarge';
        public const HCPU_MEDIUM = 'c1.medium';
        public const HCPU_XLARGE = 'c1.xlarge';
        /**
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function run(array $options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function describe($instanceId = null, $ignoreTerminated = false)
        {
        }
        /**
         * @param string $imageId
         *
         * @return array<array-key, mixed>
         */
        public function describeByImageId($imageId, $ignoreTerminated = false)
        {
        }
        /**
         * @param array<array-key, mixed>|string $instanceId
         *
         * @return array<array-key, mixed>
         */
        public function terminate($instanceId)
        {
        }
        /**
         * @param array<array-key, mixed>|string $instanceId
         *
         * @return bool
         */
        public function reboot($instanceId)
        {
        }
        /**
         * @param string $instanceId
         *
         * @return array<array-key, mixed>
         */
        public function consoleOutput($instanceId)
        {
        }
        /**
         * @param string $productCode
         * @param string $instanceId
         *
         * @return array<array-key, mixed>|bool
         */
        public function confirmProduct($productCode, $instanceId)
        {
        }
        /**
         * @param array<array-key, mixed>|string $instanceId
         *
         * @return array<array-key, mixed>
         */
        public function monitor($instanceId)
        {
        }
        /**
         * @param array<array-key, mixed>|string $instanceId
         *
         * @return array<array-key, mixed>
         */
        public function unmonitor($instanceId)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Instance_Reserved extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @param array<array-key, mixed>|string $instanceId
         *
         * @return array<array-key, mixed>
         */
        public function describeInstances($instanceId)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function describeOfferings()
        {
        }
        /**
         * @param string $offeringId
         * @param int $intanceCount
         *
         * @return string
         */
        public function purchaseOffering($offeringId, $intanceCount = 1)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Instance_Windows extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @param string $instanceId
         * @param string $s3Bucket
         * @param string $s3Prefix
         * @param int $uploadExpiration
         *
         * @return array<array-key, mixed>
         */
        public function bundle($instanceId, $s3Bucket, $s3Prefix, $uploadExpiration = 1440)
        {
        }
        /**
         * @param string $bundleId
         *
         * @return array<array-key, mixed>
         */
        public function cancelBundle($bundleId)
        {
        }
        /**
         * @param array<array-key, mixed>|string $bundleId
         *
         * @return array<array-key, mixed>
         */
        public function describeBundle($bundleId = '')
        {
        }
        /**
         * @param string $bucketName
         * @param string $prefix
         * @param int $expireInMinutes
         *
         * @return string
         */
        public function _getS3UploadPolicy($bucketName, $prefix, $expireInMinutes = 1440)
        {
        }
        /**
         * @param string $policy
         *
         * @return string
         */
        public function _signS3UploadPolicy($policy)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Keypair extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @param string $keyName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_Amazon_Ec2_Exception
         */
        public function create($keyName)
        {
        }
        /**
         * @param null|rarray|string $keyName
         *
         * @return array<array-key, mixed>
         */
        public function describe($keyName = null)
        {
        }
        /**
         * @param string $keyName
         *
         * @return bool
         *
         * @throws Zend_Service_Amazon_Ec2_Exception
         */
        public function delete($keyName)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Region extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @param array<array-key, mixed>|null|string $region
         *
         * @return array<array-key, mixed>
         */
        public function describe($region = null)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Response
    {
        public $_xmlNamespace = 'http://ec2.amazonaws.com/doc/2009-04-04/';
        /**
         * @var Zend_Http_Response
         */
        public $_httpResponse;
        /**
         * @var DOMDocument
         */
        public $_document;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var int
         */
        public $_errorCode;
        /**
         * @var string
         */
        public $_errorMessage;
        /**
         * @param Zend_Http_Response $httpResponse
         */
        public function __construct(\Zend_Http_Response $httpResponse)
        {
        }
        /**
         * @return DOMXPath
         */
        public function getXPath()
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDocument()
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @param string $namespace
         */
        public function setNamespace($namespace)
        {
        }
    }
    class Zend_Service_Amazon_Ec2_Securitygroups extends \Zend_Service_Amazon_Ec2_Abstract
    {
        /**
         * @param string $name
         * @param string $description
         *
         * @return bool
         */
        public function create($name, $description)
        {
        }
        /**
         * @param array<array-key, mixed>|null|string $name
         *
         * @return array<array-key, mixed>
         */
        public function describe($name = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function delete($name)
        {
        }
        /**
         * @param string $name
         * @param string $ipProtocol
         * @param int $fromPort
         * @param int $toPort
         * @param string $cidrIp
         *
         * @return bool
         */
        public function authorizeIp($name, $ipProtocol, $fromPort, $toPort, $cidrIp)
        {
        }
        /**
         * @param string $name
         * @param string $groupName
         * @param string $ownerId
         *
         * @return bool
         */
        public function authorizeGroup($name, $groupName, $ownerId)
        {
        }
        /**
         * @param string $name
         * @param string $ipProtocol
         * @param int $fromPort
         * @param int $toPort
         * @param string $cidrIp
         *
         * @return bool
         */
        public function revokeIp($name, $ipProtocol, $fromPort, $toPort, $cidrIp)
        {
        }
        /**
         * @param string $name
         * @param string $groupName
         * @param string $ownerId
         *
         * @return bool
         */
        public function revokeGroup($name, $groupName, $ownerId)
        {
        }
    }
    class Zend_Service_Amazon_EditorialReview
    {
        /**
         * @var string
         */
        public $Source;
        /**
         * @var string
         */
        public $Content;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
    }
    class Zend_Service_Amazon_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_Amazon_Image
    {
        /**
         * @var Zend_Uri
         */
        public $Url;
        /**
         * @var int
         */
        public $Height;
        /**
         * @var int
         */
        public $Width;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
    }
    class Zend_Service_Amazon_Item
    {
        /**
         * @var string
         */
        public $ASIN;
        /**
         * @var string
         */
        public $DetailPageURL;
        /**
         * @var int
         */
        public $SalesRank;
        /**
         * @var int
         */
        public $TotalReviews;
        /**
         * @var int
         */
        public $AverageRating;
        /**
         * @var string
         */
        public $SmallImage;
        /**
         * @var string
         */
        public $MediumImage;
        /**
         * @var string
         */
        public $LargeImage;
        /**
         * @var string
         */
        public $Subjects;
        /**
         * @var Zend_Service_Amazon_OfferSet
         */
        public $Offers;
        /**
         * @var array<array-key, Zend_Service_Amazon_CustomerReview>
         */
        public $CustomerReviews;
        /**
         * @var array<array-key, Zend_Service_Amazon_SimilarProducts>
         */
        public $SimilarProducts;
        /**
         * @var array<array-key, Zend_Service_Amazon_Accessories>
         */
        public $Accessories;
        /**
         * @var array<array-key, mixed>
         */
        public $Tracks;
        /**
         * @var array<array-key, Zend_Service_Amazon_ListmaniaLists>
         */
        public $ListmaniaLists;
        public $_dom;
        /**
         * @param DOMElement|null $dom
         *
         * @return void
         *
         * @throws Zend_Service_Amazon_Exception
         */
        public function __construct($dom)
        {
        }
        /**
         * @return string
         */
        public function asXml()
        {
        }
    }
    class Zend_Service_Amazon_ListmaniaList
    {
        /**
         * @var string
         */
        public $ListId;
        /**
         * @var string
         */
        public $ListName;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
    }
    class Zend_Service_Amazon_Offer
    {
        /**
         * @var string
         */
        public $MerchantId;
        /**
         * @var string
         */
        public $MerchantName;
        /**
         * @var string
         */
        public $GlancePage;
        /**
         * @var string
         */
        public $Condition;
        /**
         * @var string
         */
        public $OfferListingId;
        /**
         * @var string
         */
        public $Price;
        /**
         * @var string
         */
        public $CurrencyCode;
        /**
         * @var string
         */
        public $Availability;
        /**
         * @var bool
         */
        public $IsEligibleForSuperSaverShipping;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
    }
    class Zend_Service_Amazon_OfferSet
    {
        /**
         * @var string
         */
        public $LowestNewPrice;
        /**
         * @var string
         */
        public $LowestNewPriceCurrency;
        /**
         * @var string
         */
        public $LowestUsedPrice;
        /**
         * @var string
         */
        public $LowestUsedPriceCurrency;
        /**
         * @var int
         */
        public $TotalNew;
        /**
         * @var int
         */
        public $TotalUsed;
        /**
         * @var int
         */
        public $TotalCollectible;
        /**
         * @var int
         */
        public $TotalRefurbished;
        /**
         * @var array<array-key, Zend_Service_Amazon_Offer>
         */
        public $Offers;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
    }
    class Zend_Service_Amazon_Query extends \Zend_Service_Amazon
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_search;
        /**
         * @var string
         */
        public $_searchIndex;
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return Zend_Service_Amazon_Query
         *
         * @throws Zend_Service_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return Zend_Service_Amazon_Item|Zend_Service_Amazon_ResultSet
         */
        public function search()
        {
        }
    }
    class Zend_Service_Amazon_ResultSet implements \SeekableIterator
    {
        /**
         * @var DOMNodeList
         */
        public $_results;
        /**
         * @var DOMDocument
         */
        public $_dom;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var int
         */
        public $_currentIndex;
        /**
         * @param DOMDocument $dom
         *
         * @return void
         */
        public function __construct(\DOMDocument $dom)
        {
        }
        /**
         * @return int
         */
        public function totalResults()
        {
        }
        /**
         * @return int
         */
        public function totalPages()
        {
        }
        /**
         * @return Zend_Service_Amazon_Item
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @param int $index
         *
         * @return void
         *
         * @throws OutOfBoundsException
         */
        public function seek($index)
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    class Zend_Service_Amazon_S3 extends \Zend_Service_Amazon_Abstract
    {
        public const S3_ENDPOINT = 's3.amazonaws.com';
        public const S3_ACL_PRIVATE = 'private';
        public const S3_ACL_PUBLIC_READ = 'public-read';
        public const S3_ACL_PUBLIC_WRITE = 'public-read-write';
        public const S3_ACL_AUTH_READ = 'authenticated-read';
        public const S3_REQUESTPAY_HEADER = 'x-amz-request-payer';
        public const S3_ACL_HEADER = 'x-amz-acl';
        public const S3_CONTENT_TYPE_HEADER = 'Content-Type';
        /**
         * @var array<array-key, mixed>
         */
        public static $_wrapperClients;
        /**
         * @var Zend_Uri_Http
         */
        public $_endpoint;
        /**
         * @param Zend_Uri_Http|string $endpoint
         *
         * @return Zend_Service_Amazon_S3
         */
        public function setEndpoint($endpoint)
        {
        }
        /**
         * @return Zend_Uri_Http
         */
        public function getEndpoint()
        {
        }
        /**
         * @param null|string $accessKey
         * @param null|string $secretKey
         * @param null|string $region
         */
        public function __construct($accessKey = null, $secretKey = null, $region = null)
        {
        }
        /**
         * @param string $bucket
         *
         * @return bool
         */
        public function _validBucketName($bucket)
        {
        }
        /**
         * @param string $bucket
         *
         * @return bool
         */
        public function createBucket($bucket, $location = null)
        {
        }
        /**
         * @param string $bucket
         *
         * @return bool
         */
        public function isBucketAvailable($bucket)
        {
        }
        /**
         * @param string $object
         *
         * @return bool
         */
        public function isObjectAvailable($object)
        {
        }
        /**
         * @param string $bucket
         *
         * @return bool
         */
        public function removeBucket($bucket)
        {
        }
        /**
         * @param string $object
         *
         * @return array<array-key, mixed>|false
         */
        public function getInfo($object)
        {
        }
        /**
         * @return array<array-key, mixed>|false
         */
        public function getBuckets()
        {
        }
        /**
         * @param string $bucket
         *
         * @return bool
         */
        public function cleanBucket($bucket)
        {
        }
        /**
         * @param string $bucket
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>|false
         */
        public function getObjectsByBucket($bucket, $params = array())
        {
        }
        /**
         * @param string $bucket
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>|false
         */
        public function getObjectsAndPrefixesByBucket($bucket, $params = array())
        {
        }
        /**
         * @param string $object
         *
         * @return string
         */
        public function _fixupObjectName($object)
        {
        }
        /**
         * @param string $object
         * @param bool $paidobject
         *
         * @return false|string
         */
        public function getObject($object, $paidobject = false)
        {
        }
        /**
         * @param string $object
         * @param null|string $streamfile
         * @param bool $paidobject
         *
         * @return Zend_Http_Response_Stream|false
         */
        public function getObjectStream($object, $streamfile = null, $paidobject = false)
        {
        }
        /**
         * @param string $object
         * @param resource|string $data
         * @param array<array-key, mixed>|null $meta
         *
         * @return bool
         */
        public function putObject($object, $data, $meta = null)
        {
        }
        /**
         * @param string $path
         * @param string $object
         * @param array<array-key, mixed>|null $meta
         *
         * @return bool
         */
        public function putFile($path, $object, $meta = null)
        {
        }
        /**
         * @param string $path
         * @param string $object
         * @param array<array-key, mixed>|null $meta
         *
         * @return bool
         */
        public function putFileStream($path, $object, $meta = null)
        {
        }
        /**
         * @param string $object
         *
         * @return bool
         */
        public function removeObject($object)
        {
        }
        /**
         * @param string $sourceObject
         * @param string $destObject
         * @param array<array-key, mixed>|null $meta
         *
         * @return bool
         */
        public function copyObject($sourceObject, $destObject, $meta = null)
        {
        }
        /**
         * @param string $sourceObject
         * @param string $destObject
         * @param array<array-key, mixed>|null $meta
         */
        public function moveObject($sourceObject, $destObject, $meta = null)
        {
        }
        /**
         * @param string $method
         * @param string $path
         * @param array<array-key, mixed>|null $params
         * @param array<array-key, mixed> $headers
         * @param null|resource|string $data
         *
         * @return Zend_Http_Response
         */
        public function _makeRequest($method, $path = '', $params = null, $headers = array(), $data = null)
        {
        }
        /**
         * @param string $method
         * @param string $path
         * @param array<array-key, mixed> $headers
         *
         * @return string
         */
        public function addSignature($method, $path, &$headers)
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        public static function getMimeType($path)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_Amazon_S3
         */
        public function registerAsClient($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_Amazon_S3
         */
        public function unregisterAsClient($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_Amazon_S3
         */
        public static function getWrapperClient($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_Amazon_S3
         */
        public function registerStreamWrapper($name = 's3')
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_Amazon_S3
         */
        public function unregisterStreamWrapper($name = 's3')
        {
        }
    }
    class Zend_Service_Amazon_S3_Exception extends \Zend_Service_Amazon_Exception
    {
    }
    class Zend_Service_Amazon_S3_Stream
    {
        /**
         * @var bool
         */
        public $_writeBuffer;
        /**
         * @var int
         */
        public $_position;
        /**
         * @var int
         */
        public $_objectSize;
        /**
         * @var string
         */
        public $_objectName;
        /**
         * @var string
         */
        public $_objectBuffer;
        /**
         * @var array<array-key, mixed>
         */
        public $_bucketList;
        /**
         * @var Zend_Service_Amazon_S3
         */
        public $_s3;
        /**
         * @param string $path
         *
         * @return Zend_Service_Amazon_S3
         */
        public function _getS3Client($path)
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        public function _getNamePart($path)
        {
        }
        /**
         * @param string $path
         * @param string $mode
         * @param int $options
         * @param string $opened_path
         *
         * @return bool
         */
        public function stream_open($path, $mode, $options, $opened_path)
        {
        }
        /**
         * @return void
         */
        public function stream_close()
        {
        }
        /**
         * @param int $count
         *
         * @return string
         */
        public function stream_read($count)
        {
        }
        /**
         * @param string $data
         *
         * @return int
         */
        public function stream_write($data)
        {
        }
        /**
         * @return bool
         */
        public function stream_eof()
        {
        }
        /**
         * @return int
         */
        public function stream_tell()
        {
        }
        /**
         * @param int $offset
         * @param int $whence
         *
         * @return bool
         */
        public function stream_seek($offset, $whence)
        {
        }
        /**
         * @return bool
         */
        public function stream_flush()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function stream_stat()
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        public function unlink($path)
        {
        }
        /**
         * @param string $path_from
         * @param string $path_to
         *
         * @return bool
         */
        public function rename($path_from, $path_to)
        {
        }
        /**
         * @param string $path
         * @param int $mode
         * @param int $options
         *
         * @return bool
         */
        public function mkdir($path, $mode, $options)
        {
        }
        /**
         * @param string $path
         * @param int $options
         *
         * @return bool
         */
        public function rmdir($path, $options)
        {
        }
        /**
         * @param string $path
         * @param int $options
         *
         * @return bool
         */
        public function dir_opendir($path, $options)
        {
        }
        /**
         * @param string $path
         * @param int $flags
         *
         * @return array<array-key, mixed>
         */
        public function url_stat($path, $flags)
        {
        }
        /**
         * @return string
         */
        public function dir_readdir()
        {
        }
        /**
         * @return bool
         */
        public function dir_rewinddir()
        {
        }
        /**
         * @return bool
         */
        public function dir_closedir()
        {
        }
    }
    class Zend_Service_Amazon_SimilarProduct
    {
        /**
         * @var string
         */
        public $ASIN;
        /**
         * @var string
         */
        public $Title;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
    }
    class Zend_Service_Amazon_SimpleDb extends \Zend_Service_Amazon_Abstract
    {
        public $_sdbEndpoint = 'sdb.amazonaws.com/';
        public $_httpTimeout = 10;
        public $_sdbApiVersion = '2009-04-15';
        public $_signatureVersion = '2';
        public $_signatureMethod = 'HmacSHA256';
        /**
         * @param string $accessKey
         * @param string $secretKey
         */
        public function __construct($accessKey, $secretKey)
        {
        }
        /**
         * @param Zend_Uri_Http|string $endpoint
         *
         * @return Zend_Service_Amazon_SimpleDb
         *
         * @throws Zend_Service_Amazon_SimpleDb_Exception
         * @throws Zend_Uri_Exception
         */
        public function setEndpoint($endpoint)
        {
        }
        /**
         * @return Zend_Uri_Http
         */
        public function getEndpoint()
        {
        }
        /**
         * @param string $domainName
         * @param string $itemName
         * @param null|string $attributeName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_Amazon_SimpleDb_Exception
         */
        public function getAttributes($domainName, $itemName, $attributeName = null)
        {
        }
        /**
         * @param string $domainName
         * @param string $itemName
         * @param Traversable|array<array-key, mixed> $attributes
         * @param array<array-key, mixed> $replace
         *
         * @return void
         */
        public function putAttributes($domainName, $itemName, $attributes, $replace = array())
        {
        }
        /**
         * @param array<array-key, mixed> $items
         * @param string $domainName
         * @param array<array-key, mixed> $replace
         *
         * @return void
         */
        public function batchPutAttributes($items, $domainName, array $replace = array())
        {
        }
        /**
         * @param string $domainName
         * @param string $itemName
         * @param array<array-key, mixed> $attributes
         *
         * @return void
         */
        public function deleteAttributes($domainName, $itemName, array $attributes = array())
        {
        }
        /**
         * @param int $maxNumberOfDomains
         * @param int|null $nextToken
         *
         * @return array<array-key, mixed>
         */
        public function listDomains($maxNumberOfDomains = 100, $nextToken = null)
        {
        }
        /**
         * @param string $domainName
         *
         * @return array<array-key, mixed>
         */
        public function domainMetadata($domainName)
        {
        }
        /**
         * @param string $domainName
         *
         * @return bool
         */
        public function createDomain($domainName)
        {
        }
        /**
         * @param string $domainName
         *
         * @return bool
         */
        public function deleteDomain($domainName)
        {
        }
        /**
         * @param string $selectExpression
         * @param null|string $nextToken
         *
         * @return Zend_Service_Amazon_SimpleDb_Page
         */
        public function select($selectExpression, $nextToken = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function quote($value)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         *
         * @throws Zend_Service_Amazon_SimpleDb_Exception
         */
        public function quoteName($name)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Service_Amazon_SimpleDb_Response
         *
         * @throws Zend_Service_Amazon_SimpleDb_Exception
         */
        public function _sendRequest(array $params = array())
        {
        }
        /**
         * @param array<array-key, mixed> $parameters
         *
         * @return array<array-key, mixed>
         */
        public function _addRequiredParameters(array $parameters)
        {
        }
        /**
         * @param array<array-key, mixed> $parameters
         *
         * @return string
         */
        public function _signParameters(array $parameters)
        {
        }
        /**
         * @param Zend_Service_Amazon_SimpleDb_Response $response
         *
         * @throws Zend_Service_Amazon_SimpleDb_Exception
         */
        public function _checkForErrors(\Zend_Service_Amazon_SimpleDb_Response $response)
        {
        }
    }
    class Zend_Service_Amazon_SimpleDb_Attribute
    {
        public $_itemName;
        public $_name;
        public $_values;
        /**
         * @param string $itemName
         * @param string $name
         * @param array<array-key, mixed> $values
         *
         * @return void
         */
        public function __construct($itemName, $name, $values)
        {
        }
        /**
         * @return string
         */
        public function getItemName()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getValues()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function addValue($value)
        {
        }
        public function setValues($values)
        {
        }
    }
    class Zend_Service_Amazon_SimpleDb_Exception extends \Zend_Service_Amazon_Exception
    {
        /**
         * @var string
         */
        public $_awsErrorCode;
        /**
         * @param string $message
         * @param int $code
         * @param string $awsErrorCode
         *
         * @return void
         */
        public function __construct($message, $code = 0, $awsErrorCode = '')
        {
        }
        /**
         * @return string
         */
        public function getErrorCode()
        {
        }
    }
    class Zend_Service_Amazon_SimpleDb_Page
    {
        /**
         * @var string
         */
        public $_data;
        /**
         * @var null|string
         */
        public $_token;
        /**
         * @param string $data
         * @param null|string $token
         */
        public function __construct($data, $token = null)
        {
        }
        /**
         * @param string $data
         */
        public function setData($data)
        {
        }
        /**
         * @return string
         */
        public function getData()
        {
        }
        /**
         * @param null|string $token
         */
        public function setToken($token)
        {
        }
        /**
         * @return null|string
         */
        public function getToken()
        {
        }
        /**
         * @return bool
         */
        public function isLast()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Service_Amazon_SimpleDb_Response
    {
        public $_xmlNamespace = 'http://sdb.amazonaws.com/doc/2009-04-15/';
        /**
         * @var Zend_Http_Response
         */
        public $_httpResponse;
        /**
         * @var DOMDocument
         */
        public $_document;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var int
         */
        public $_errorCode;
        /**
         * @var string
         */
        public $_errorMessage;
        /**
         * @param Zend_Http_Response $httpResponse
         *
         * @return void
         */
        public function __construct(\Zend_Http_Response $httpResponse)
        {
        }
        /**
         * @return DOMXPath
         */
        public function getXPath()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function getSimpleXMLDocument()
        {
        }
        /**
         * @return Zend_Http_Response
         */
        public function getHttpResponse()
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDocument()
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @param string $namespace
         */
        public function setNamespace($namespace)
        {
        }
    }
    class Zend_Service_Amazon_Sqs extends \Zend_Service_Amazon_Abstract
    {
        public const CREATE_TIMEOUT_DEFAULT = 30;
        public $_sqsEndpoint = 'queue.amazonaws.com';
        public $_sqsApiVersion = '2009-02-01';
        public $_sqsSignatureVersion = '2';
        public $_sqsSignatureMethod = 'HmacSHA256';
        public $_sqsEndpoints = 'Psalm could not infer this type';
        /**
         * @param null|string $accessKey
         * @param null|string $secretKey
         * @param null|string $region
         */
        public function __construct($accessKey = null, $secretKey = null, $region = null)
        {
        }
        /**
         * @param string $region
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function _setEndpoint($region)
        {
        }
        /**
         * @param string $region
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function setEndpoint($region)
        {
        }
        /**
         * @return string
         */
        public function getEndpoint()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getEndpoints()
        {
        }
        /**
         * @param string $queue_name
         * @param int|null $timeout
         *
         * @return bool|string
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function create($queue_name, $timeout = null)
        {
        }
        /**
         * @param string $queue_url
         *
         * @return bool
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function delete($queue_url)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function getQueues()
        {
        }
        /**
         * @param string $queue_url
         *
         * @return int
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function count($queue_url)
        {
        }
        /**
         * @param string $queue_url
         * @param string $message
         *
         * @return string
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function send($queue_url, $message)
        {
        }
        /**
         * @param string $queue_url
         * @param int|null $max_messages
         * @param int|null $timeout
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function receive($queue_url, $max_messages = null, $timeout = null)
        {
        }
        /**
         * @param string $queue_url
         * @param string $handle
         *
         * @return bool
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function deleteMessage($queue_url, $handle)
        {
        }
        /**
         * @param string $queue_url
         * @param string $attribute
         *
         * @return string
         *
         * @throws Zend_Service_Amazon_Sqs_Exception
         */
        public function getAttribute($queue_url, $attribute = 'All')
        {
        }
        /**
         * @param string $action
         * @param array<array-key, mixed> $params
         *
         * @return SimpleXMLElement
         */
        public function _makeRequest($queue_url, $action, $params = array())
        {
        }
        /**
         * @param string $queue_url
         * @param array<array-key, mixed> $parameters
         *
         * @return array<array-key, mixed>
         */
        public function addRequiredParameters($queue_url, array $parameters)
        {
        }
        /**
         * @param string $queue_url
         *
         * @return string
         */
        public function _signParameters($queue_url, array $paramaters)
        {
        }
    }
    class Zend_Service_Amazon_Sqs_Exception extends \Zend_Service_Amazon_Exception
    {
    }
    class Zend_Service_Audioscrobbler
    {
        /**
         * @var Zend_Http_Client
         */
        public $_client;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var array<array-key, mixed>
         */
        public $_error;
        public function __construct()
        {
        }
        /**
         * @param Zend_Http_Client $client
         */
        public function setHttpClient(\Zend_Http_Client $client)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        /**
         * @return void
         */
        public function lazyLoadHttpClient()
        {
        }
        /**
         * @param string $field
         *
         * @return false|string
         */
        public function get($field)
        {
        }
        /**
         * @param string $field
         * @param string $value
         *
         * @return Zend_Service_Audioscrobbler
         */
        public function set($field, $value)
        {
        }
        /**
         * @param string $service
         * @param null|string $params
         *
         * @return SimpleXMLElement
         *
         * @throws Zend_Http_Client_Exception
         * @throws Zend_Service_Exception
         */
        public function _getInfo($service, $params = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function userGetProfileInformation()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function userGetTopArtists()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetTopAlbums()
        {
        }
        /**
         * @return SimpleXML
         */
        public function userGetTopTracks()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetTopTags()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetTopTagsForArtist()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetTopTagsForAlbum()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetTopTagsForTrack()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetFriends()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetNeighbours()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetRecentTracks()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetRecentBannedTracks()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetRecentLovedTracks()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function userGetWeeklyChartList()
        {
        }
        /**
         * @param int|null $from
         * @param int|null $to
         *
         * @return SimpleXMLElement
         */
        public function userGetWeeklyAlbumChart($from = null, $to = null)
        {
        }
        /**
         * @param int|null $from
         * @param int|null $to
         *
         * @return SimpleXMLElement
         */
        public function userGetWeeklyArtistChart($from = null, $to = null)
        {
        }
        /**
         * @param int|null $from
         * @param int|null $to
         *
         * @return SimpleXMLElement
         */
        public function userGetWeeklyTrackChart($from = null, $to = null)
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function artistGetRelatedArtists()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function artistGetTopFans()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function artistGetTopTracks()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function artistGetTopAlbums()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function artistGetTopTags()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function albumGetInfo()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function trackGetTopFans()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function trackGetTopTags()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function tagGetTopTags()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function tagGetTopAlbums()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function tagGetTopArtists()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function tagGetTopTracks()
        {
        }
        /**
         * @return SimpleXMLElement
         */
        public function groupGetWeeklyChartList()
        {
        }
        /**
         * @param int|null $from
         * @param int|null $to
         *
         * @return SimpleXMLElement
         */
        public function groupGetWeeklyArtistChartList($from = null, $to = null)
        {
        }
        /**
         * @param int|null $from
         * @param int|null $to
         *
         * @return SimpleXMLElement
         */
        public function groupGetWeeklyTrackChartList($from = null, $to = null)
        {
        }
        /**
         * @param int|null $from
         * @param int|null $to
         *
         * @return SimpleXMLElement
         */
        public function groupGetWeeklyAlbumChartList($from = null, $to = null)
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param string $errfile
         * @param int $errline
         * @param array<array-key, mixed> $errcontext
         *
         * @return void
         */
        public function _errorHandler($errno, $errstr, $errfile, $errline, array $errcontext)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return Zend_Service_Audioscrobbler
         */
        public function __call($method, $args)
        {
        }
    }
    class Zend_Service_Console_Command
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_handler;
        /**
         * @return array<array-key, mixed>
         */
        public function getHandler()
        {
        }
        /**
         * @param array<array-key, mixed> $handler
         *
         * @return Zend_Service_Console_Command
         */
        public function setHandler($handler)
        {
        }
        /**
         * @param mixed $errno
         * @param mixed $errstr
         * @param mixed $errfile
         * @param mixed $errline
         */
        public static function phpstderr($errno, $errstr, $errfile, $errline)
        {
        }
        /**
         * @param Exception $exception
         */
        public static function phpstdex($exception)
        {
        }
        /**
         * @param string $errorMessage
         * @param string $newLine
         */
        public static function stderr($errorMessage, $newLine = true)
        {
        }
        /**
         * @param array<array-key, mixed> $argv
         */
        public static function bootstrap($argv)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function _buildModel()
        {
        }
        /**
         * @param string $docCommentName
         * @param unknown_type $docComment
         *
         * @return array<array-key, mixed>
         */
        public static function _findValueForDocComment($docCommentName, $docComment)
        {
        }
        /**
         * @param object $object
         * @param array<array-key, mixed> $propertiesToDump
         */
        public function _displayObjectInformation($object, $propertiesToDump = array())
        {
        }
        public function helpCommand()
        {
        }
    }
    class Zend_Service_Console_Command_ParameterSource_Argv implements \Zend_Service_Console_Command_ParameterSource_ParameterSourceInterface
    {
        /**
         * @param mixed $parameter
         * @param array<array-key, mixed> $argv
         *
         * @return mixed
         */
        public function getValueForParameter($parameter, $argv = array())
        {
        }
    }
    class Zend_Service_Console_Command_ParameterSource_ConfigFile implements \Zend_Service_Console_Command_ParameterSource_ParameterSourceInterface
    {
        /**
         * @param mixed $parameter
         * @param array<array-key, mixed> $argv
         *
         * @return mixed
         */
        public function getValueForParameter($parameter, $argv = array())
        {
        }
    }
    class Zend_Service_Console_Command_ParameterSource_Env implements \Zend_Service_Console_Command_ParameterSource_ParameterSourceInterface
    {
        /**
         * @param mixed $parameter
         * @param array<array-key, mixed> $argv
         *
         * @return mixed
         */
        public function getValueForParameter($parameter, $argv = array())
        {
        }
    }
    interface Zend_Service_Console_Command_ParameterSource_ParameterSourceInterface
    {
        /**
         * @param mixed $parameter
         * @param array<array-key, mixed> $argv
         *
         * @return mixed
         */
        public function getValueForParameter($parameter, $argv = array());
    }
    class Zend_Service_Console_Command_ParameterSource_Prompt implements \Zend_Service_Console_Command_ParameterSource_ParameterSourceInterface
    {
        /**
         * @param mixed $parameter
         * @param array<array-key, mixed> $argv
         *
         * @return mixed
         */
        public function getValueForParameter($parameter, $argv = array())
        {
        }
    }
    class Zend_Service_Console_Command_ParameterSource_StdIn implements \Zend_Service_Console_Command_ParameterSource_ParameterSourceInterface
    {
        /**
         * @param mixed $parameter
         * @param array<array-key, mixed> $argv
         *
         * @return mixed
         */
        public function getValueForParameter($parameter, $argv = array())
        {
        }
    }
    class Zend_Service_Console_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_Delicious
    {
        public const API_URI = 'https://api.del.icio.us';
        public const PATH_UPDATE = '/v1/posts/update';
        public const PATH_TAGS = '/v1/tags/get';
        public const PATH_TAG_RENAME = '/v1/tags/rename';
        public const PATH_BUNDLES = '/v1/tags/bundles/all';
        public const PATH_BUNDLE_DELETE = '/v1/tags/bundles/delete';
        public const PATH_BUNDLE_ADD = '/v1/tags/bundles/set';
        public const PATH_DATES = '/v1/posts/dates';
        public const PATH_POST_DELETE = '/v1/posts/delete';
        public const PATH_POSTS_GET = '/v1/posts/get';
        public const PATH_POSTS_ALL = '/v1/posts/all';
        public const PATH_POSTS_ADD = '/v1/posts/add';
        public const PATH_POSTS_RECENT = '/v1/posts/recent';
        public const JSON_URI = 'http://del.icio.us';
        public const JSON_POSTS = '/feeds/json/%s/%s';
        public const JSON_TAGS = '/feeds/json/tags/%s';
        public const JSON_NETWORK = '/feeds/json/network/%s';
        public const JSON_FANS = '/feeds/json/fans/%s';
        public const JSON_URL = '/feeds/json/url/data';
        /**
         * @var Zend_Service_Rest
         */
        public $_rest;
        /**
         * @var string
         */
        public $_authUname;
        /**
         * @var string
         */
        public $_authPass;
        /**
         * @var float
         */
        public static $_lastRequestTime;
        /**
         * @param null|string $uname
         * @param null|string $pass
         *
         * @return void
         */
        public function __construct($uname = null, $pass = null)
        {
        }
        /**
         * @param string $uname
         * @param string $pass
         *
         * @return Zend_Service_Delicious
         */
        public function setAuth($uname, $pass)
        {
        }
        /**
         * @return Zend_Date
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public function getLastUpdate()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param string $old
         * @param string $new
         *
         * @return Zend_Service_Delicious
         */
        public function renameTag($old, $new)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getBundles()
        {
        }
        /**
         * @param string $bundle
         * @param array<array-key, mixed> $tags
         *
         * @return Zend_Service_Delicious
         */
        public function addBundle($bundle, array $tags)
        {
        }
        /**
         * @param string $bundle
         *
         * @return Zend_Service_Delicious
         */
        public function deleteBundle($bundle)
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Service_Delicious
         */
        public function deletePost($url)
        {
        }
        /**
         * @param null|string $tag
         *
         * @return array<array-key, mixed>
         */
        public function getDates($tag = null)
        {
        }
        /**
         * @param null|string $tag
         * @param Zend_Date|null $dt
         * @param null|string $url
         *
         * @return Zend_Service_Delicious_PostList
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public function getPosts($tag = null, ?\Zend_Date $dt = null, $url = null)
        {
        }
        /**
         * @param null|string $tag
         *
         * @return Zend_Service_Delicious_PostList
         */
        public function getAllPosts($tag = null)
        {
        }
        /**
         * @param null|string $tag
         * @param string $count
         *
         * @return Zend_Service_Delicious_PostList
         */
        public function getRecentPosts($tag = null, $count = 15)
        {
        }
        /**
         * @return Zend_Service_Delicious_Post
         */
        public function createNewPost($title, $url)
        {
        }
        /**
         * @param string $user
         * @param int|null $count
         * @param null|string $tag
         *
         * @return Zend_Service_Delicious_PostList
         */
        public function getUserPosts($user, $count = null, $tag = null)
        {
        }
        /**
         * @param string $user
         * @param int|null $atleast
         * @param int|null $count
         * @param string $sort
         *
         * @return array<array-key, mixed>
         */
        public function getUserTags($user, $atleast = null, $count = null, $sort = 'alpha')
        {
        }
        /**
         * @param string $user
         *
         * @return array<array-key, mixed>
         */
        public function getUserNetwork($user)
        {
        }
        /**
         * @param string $user
         *
         * @return array<array-key, mixed>
         */
        public function getUserFans($user)
        {
        }
        /**
         * @param string $url
         *
         * @return array<array-key, mixed>
         */
        public function getUrlDetails($url)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $parms
         * @param string $type
         *
         * @return mixed
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public function makeRequest($path, array $parms = array(), $type = 'xml')
        {
        }
        /**
         * @param DOMDocument $response
         * @param string $root
         * @param string $child
         * @param string $attKey
         * @param string $attValue
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public static function _xmlResponseToArray(\DOMDocument $response, $root, $child, $attKey, $attValue)
        {
        }
        /**
         * @param DOMDocument $response
         *
         * @return Zend_Service_Delicious_PostList
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public function _parseXmlPostList(\DOMDocument $response)
        {
        }
        /**
         * @param DOMDocument $response
         *
         * @return void
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public static function _evalXmlResult(\DOMDocument $response)
        {
        }
    }
    class Zend_Service_Delicious_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_Delicious_Post extends \Zend_Service_Delicious_SimplePost
    {
        /**
         * @var Zend_Service_Delicious
         */
        public $_service;
        /**
         * @var int
         */
        public $_others;
        /**
         * @var Zend_Date
         */
        public $_date;
        /**
         * @var bool
         */
        public $_shared;
        /**
         * @var string
         */
        public $_hash;
        /**
         * @param Zend_Service_Delicious $service
         * @param DOMElement|array<array-key, mixed> $values
         *
         * @return void
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public function __construct(\Zend_Service_Delicious $service, $values)
        {
        }
        /**
         * @param string $newTitle
         *
         * @return Zend_Service_Delicious_Post
         */
        public function setTitle($newTitle)
        {
        }
        /**
         * @param string $newNotes
         *
         * @return Zend_Service_Delicious_Post
         */
        public function setNotes($newNotes)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return Zend_Service_Delicious_Post
         */
        public function setTags(array $tags)
        {
        }
        /**
         * @param string $tag
         *
         * @return Zend_Service_Delicious_Post
         */
        public function addTag($tag)
        {
        }
        /**
         * @param string $tag
         *
         * @return Zend_Service_Delicious_Post
         */
        public function removeTag($tag)
        {
        }
        /**
         * @return Zend_Date
         */
        public function getDate()
        {
        }
        /**
         * @return int
         */
        public function getOthers()
        {
        }
        /**
         * @return string
         */
        public function getHash()
        {
        }
        /**
         * @return bool
         */
        public function getShared()
        {
        }
        /**
         * @param bool $isShared
         *
         * @return Zend_Service_Delicious_Post
         */
        public function setShared($isShared)
        {
        }
        /**
         * @return Zend_Service_Delicious
         */
        public function delete()
        {
        }
        /**
         * @return DOMDocument
         */
        public function save()
        {
        }
        /**
         * @param DOMElement $node
         *
         * @return array<array-key, mixed>
         */
        public static function _parsePostNode(\DOMElement $node)
        {
        }
    }
    class Zend_Service_Delicious_PostList implements \Countable, \Iterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_posts;
        /**
         * @var Zend_Service_Delicious
         */
        public $_service;
        /**
         * @var int
         */
        public $_iteratorKey;
        /**
         * @param Zend_Service_Delicious $service
         * @param DOMNodeList|array<array-key, mixed>|null $posts
         *
         * @return void
         */
        public function __construct(\Zend_Service_Delicious $service, $posts = null)
        {
        }
        /**
         * @param DOMNodeList $nodeList
         *
         * @return void
         */
        public function _constructFromNodeList(\DOMNodeList $nodeList)
        {
        }
        /**
         * @param array<array-key, mixed> $postList
         *
         * @return void
         */
        public function _constructFromArray(array $postList)
        {
        }
        /**
         * @param Zend_Service_Delicious_SimplePost $post
         *
         * @return Zend_Service_Delicious_PostList
         */
        public function _addPost(\Zend_Service_Delicious_SimplePost $post)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return Zend_Service_Delicious_PostList
         */
        public function withTags(array $tags)
        {
        }
        /**
         * @param string $tag
         *
         * @return Zend_Service_Delicious_PostList
         */
        public function withTag($tag)
        {
        }
        /**
         * @param string $regexp
         *
         * @return Zend_Service_Delicious_PostList
         */
        public function withUrl($regexp)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Service_Delicious_SimplePost
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return Zend_Service_Delicious_SimplePost
         *
         * @throws OutOfBoundsException
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $value
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Service_Delicious_SimplePost
    {
        /**
         * @var string
         */
        public $_url;
        /**
         * @var string
         */
        public $_title;
        /**
         * @var string
         */
        public $_notes;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        /**
         * @param array<array-key, mixed> $post
         *
         * @return void
         *
         * @throws Zend_Service_Delicious_Exception
         */
        public function __construct(array $post)
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @return string
         */
        public function getNotes()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
    }
    class Zend_Service_Ebay_Abstract
    {
        public const OPTION_APP_ID = 'app_id';
        public const OPTION_GLOBAL_ID = 'global_id';
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var mixed
         */
        public $_client;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|string $name
         * @param mixed|null $value
         *
         * @return Zend_Service_Ebay_Abstract
         */
        public function setOption($name, $value = null)
        {
        }
        /**
         * @param null|string $name
         *
         * @return mixed
         */
        public function getOption($name = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasOption($name)
        {
        }
        /**
         * @param mixed $client
         *
         * @return Zend_Service_Ebay_Abstract
         */
        public abstract function setClient($client);
        /**
         * @return mixed
         */
        public abstract function getClient();
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_Ebay_Finding_Exception
         */
        public static function optionsToArray($options)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function _optionsToNameValueSyntax($options)
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         */
        public static function toEbayValue($value)
        {
        }
        /**
         * @param string $value
         * @param string $type
         *
         * @return mixed
         *
         * @throws Zend_Service_Ebay_Finding_Exception
         */
        public static function toPhpValue($value, $type)
        {
        }
    }
    class Zend_Service_Ebay_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_Ebay_Finding extends \Zend_Service_Ebay_Abstract
    {
        public const OPTION_APP_ID = 'app_id';
        public const OPTION_GLOBAL_ID = 'global_id';
        public const SERVICE_NAME = 'FindingService';
        public const SERVICE_VERSION = '1.0.0';
        public const RESPONSE_DATA_FORMAT = 'XML';
        public const ENDPOINT_URI = 'http://svcs.ebay.com';
        public const ENDPOINT_PATH = 'services/search/FindingService/v1';
        public const XMLNS_FINDING = 'e';
        public const XMLNS_MS = 'ms';
        /**
         * @var array<array-key, mixed>
         */
        public static $_xmlNamespaces;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @return array<array-key, mixed>
         */
        public static function getXmlNamespaces()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|string $options
         *
         * @return void
         *
         * @throws Zend_Service_Ebay_Finding_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @param Zend_Rest_Client $client
         *
         * @return Zend_Service_Ebay_Finding
         */
        public function setClient($client)
        {
        }
        /**
         * @return Zend_Rest_Client
         */
        public function getClient()
        {
        }
        /**
         * @param string $keywords
         * @param bool $descriptionSearch
         * @param int|null $categoryId
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItemsAdvanced($keywords, $descriptionSearch = true, $categoryId = null, $options = null)
        {
        }
        /**
         * @param int $categoryId
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItemsByCategory($categoryId, $options = null)
        {
        }
        /**
         * @param string $keywords
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItemsByKeywords($keywords, $options = null)
        {
        }
        /**
         * @param int $productId
         * @param null|string $productIdType
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItemsByProduct($productId, $productIdType = null, $options = null)
        {
        }
        /**
         * @param string $storeName
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItemsInEbayStores($storeName, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         * @param string $operation
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function _findItems(array $options, $operation)
        {
        }
        /**
         * @param int $categoryId
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Histograms
         */
        public function getHistograms($categoryId, $options = null)
        {
        }
        /**
         * @param string $keywords
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Keywords
         */
        public function getSearchKeywordsRecommendation($keywords, $options = null)
        {
        }
        /**
         * @param string $operation
         * @param array<array-key, mixed>|null $options
         *
         * @return DOMDocument
         */
        public function _request($operation, ?array $options = null)
        {
        }
        /**
         * @param Zend_Http_Response $response
         *
         * @return DOMDocument
         *
         * @throws Zend_Service_Ebay_Finding_Exception
         */
        public function _parseResponse(\Zend_Http_Response $response)
        {
        }
    }
    class Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var DOMElement
         */
        public $_dom;
        /**
         * @var DOMXPath
         */
        public $_xPath;
        /**
         * @var array<array-key, mixed>
         */
        public $_attributes;
        /**
         * @param DOMElement $dom
         *
         * @return void
         */
        public function __construct(\DOMElement $dom)
        {
        }
        /**
         * @param string $tag
         * @param null|string $attribute
         *
         * @return mixed
         */
        public function attributes($tag, $attribute = null)
        {
        }
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @return void
         */
        public function _initXPath()
        {
        }
        /**
         * @return DOMElement
         */
        public function getDom()
        {
        }
        /**
         * @return DOMXPath
         */
        public function getXPath()
        {
        }
        /**
         * @param string $path
         * @param string $type
         * @param string $array
         *
         * @return mixed
         */
        public function _query($path, $type, $array = false)
        {
        }
    }
    class Zend_Service_Ebay_Finding_Aspect extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var Zend_Service_Ebay_Finding_Aspect_Histogram_Value_Set
         */
        public $valueHistogram;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Aspect_Histogram_Container extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var Zend_Service_Ebay_Finding_Aspect_Set
         */
        public $aspect;
        /**
         * @var string
         */
        public $domainDisplayName;
        /**
         * @var string
         */
        public $domainName;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Aspect_Histogram_Value extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var int
         */
        public $count;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Aspect_Histogram_Value_Set extends \Zend_Service_Ebay_Finding_Set_Abstract
    {
        /**
         * @return Zend_Service_Ebay_Finding_Aspect_Histogram_Value
         */
        public function current()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Aspect_Set extends \Zend_Service_Ebay_Finding_Set_Abstract
    {
        /**
         * @return Zend_Service_Ebay_Finding_Aspect
         */
        public function current()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Category extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var string
         */
        public $categoryId;
        /**
         * @var string
         */
        public $categoryName;
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItems(\Zend_Service_Ebay_Finding $proxy, $options = null)
        {
        }
    }
    class Zend_Service_Ebay_Finding_Category_Histogram extends \Zend_Service_Ebay_Finding_Category
    {
        /**
         * @var Zend_Service_Ebay_Finding_Category_Histogram_Set
         */
        public $childCategoryHistogram;
        /**
         * @var int
         */
        public $count;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Category_Histogram_Container extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var Zend_Service_Ebay_Finding_Category_Histogram_Set
         */
        public $categoryHistogram;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Category_Histogram_Set extends \Zend_Service_Ebay_Finding_Set_Abstract
    {
        /**
         * @return Zend_Service_Ebay_Finding_Category_Histogram
         */
        public function current()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Error_Data extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var string
         */
        public $category;
        /**
         * @var string
         */
        public $domain;
        /**
         * @var int
         */
        public $errorId;
        /**
         * @var string
         */
        public $exceptionId;
        /**
         * @var string
         */
        public $message;
        /**
         * @var array<array-key, string>
         */
        public $parameter;
        /**
         * @var string
         */
        public $severity;
        /**
         * @var string
         */
        public $subdomain;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Error_Data_Set extends \Zend_Service_Ebay_Finding_Set_Abstract
    {
        /**
         * @return Zend_Service_Ebay_Finding_Error_Data
         */
        public function current()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Error_Message extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var Zend_Service_Ebay_Finding_Error_Data_Set
         */
        public $error;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Exception extends \Zend_Service_Ebay_Exception
    {
    }
    class Zend_Service_Ebay_Finding_ListingInfo extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var bool
         */
        public $bestOfferEnabled;
        /**
         * @var bool
         */
        public $buyItNowAvailable;
        /**
         * @var float
         */
        public $buyItNowPrice;
        /**
         * @var float
         */
        public $convertedBuyItNowPrice;
        /**
         * @var int
         */
        public $endTime;
        /**
         * @var bool
         */
        public $gift;
        /**
         * @var string
         */
        public $listingType;
        /**
         * @var int
         */
        public $startTime;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_PaginationOutput extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var int
         */
        public $entriesPerPage;
        /**
         * @var int
         */
        public $pageNumber;
        /**
         * @var int
         */
        public $totalEntries;
        /**
         * @var int
         */
        public $totalPages;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Response_Abstract extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var string
         */
        public $ack;
        /**
         * @var Zend_Service_Ebay_Finding_Error_Message
         */
        public $errorMessage;
        /**
         * @var string
         */
        public $timestamp;
        /**
         * @var string
         */
        public $version;
        /**
         * @var string
         */
        public $_operation;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param string $operation
         *
         * @return Zend_Service_Ebay_Finding_Response_Abstract
         */
        public function setOperation($operation)
        {
        }
        /**
         * @return string
         */
        public function getOperation()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed>|string $name
         * @param mixed|null $value
         *
         * @return Zend_Service_Ebay_Finding_Response_Abstract
         */
        public function setOption($name, $value = null)
        {
        }
        /**
         * @param null|string $name
         *
         * @return mixed
         */
        public function getOption($name = null)
        {
        }
    }
    class Zend_Service_Ebay_Finding_Response_Histograms extends \Zend_Service_Ebay_Finding_Response_Abstract
    {
        /**
         * @var Zend_Service_Ebay_Finding_Aspect_Histogram_Container
         */
        public $aspectHistogramContainer;
        /**
         * @var Zend_Service_Ebay_Finding_Category_Histogram_Container
         */
        public $categoryHistogramContainer;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Response_Items extends \Zend_Service_Ebay_Finding_Response_Histograms
    {
        public const PAGE_MAX_DEFAULT = 100;
        public const PAGE_MAX_INFINITY = 0;
        /**
         * @var Zend_Service_Ebay_Finding_PaginationOutput
         */
        public $paginationOutput;
        /**
         * @var Zend_Service_Ebay_Finding_Search_Result
         */
        public $searchResult;
        /**
         * @var array<array-key, Zend_Service_Ebay_Finding_Response_Items>
         */
        public static $_pageCache;
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         * @param int $number
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         *
         * @throws Zend_Service_Ebay_Finding_Exception
         */
        public function page(\Zend_Service_Ebay_Finding $proxy, $number)
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function pageFirst(\Zend_Service_Ebay_Finding $proxy)
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         * @param int $max
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function pageLast(\Zend_Service_Ebay_Finding $proxy, $max)
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         * @param int $max
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function pageNext(\Zend_Service_Ebay_Finding $proxy, $max)
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function pagePrevious(\Zend_Service_Ebay_Finding $proxy)
        {
        }
    }
    class Zend_Service_Ebay_Finding_Response_Keywords extends \Zend_Service_Ebay_Finding_Response_Abstract
    {
        /**
         * @var string
         */
        public $keywords;
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItems(\Zend_Service_Ebay_Finding $proxy, $options = null)
        {
        }
    }
    class Zend_Service_Ebay_Finding_Search_Item extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var bool
         */
        public $autoPay;
        /**
         * @var int
         */
        public $charityId;
        /**
         * @var string
         */
        public $country;
        /**
         * @var float
         */
        public $distance;
        /**
         * @var array<array-key, string>
         */
        public $galleryPlusPictureURL;
        /**
         * @var string
         */
        public $galleryURL;
        /**
         * @var string
         */
        public $globalId;
        /**
         * @var string
         */
        public $itemId;
        /**
         * @var Zend_Service_Ebay_Finding_ListingInfo
         */
        public $listingInfo;
        /**
         * @var string
         */
        public $location;
        /**
         * @var array<array-key, string>
         */
        public $paymentMethod;
        /**
         * @var string
         */
        public $postalCode;
        /**
         * @var Zend_Service_Ebay_Finding_Category
         */
        public $primaryCategory;
        /**
         * @var string
         */
        public $productId;
        /**
         * @var Zend_Service_Ebay_Finding_Category
         */
        public $secondaryCategory;
        /**
         * @var Zend_Service_Ebay_Finding_SellerInfo
         */
        public $sellerInfo;
        /**
         * @var Zend_Service_Ebay_Finding_SellingStatus
         */
        public $sellingStatus;
        /**
         * @var Zend_Service_Ebay_Finding_ShippingInfo
         */
        public $shippingInfo;
        /**
         * @var Zend_Service_Ebay_Finding_Storefront
         */
        public $storeInfo;
        /**
         * @var string
         */
        public $subtitle;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $viewItemURL;
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItemsByProduct(\Zend_Service_Ebay_Finding $proxy, $options = null)
        {
        }
    }
    class Zend_Service_Ebay_Finding_Search_Item_Set extends \Zend_Service_Ebay_Finding_Set_Abstract
    {
        /**
         * @return Zend_Service_Ebay_Finding_Search_Item
         */
        public function current()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Search_Result extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var Zend_Service_Ebay_Finding_Search_Item_Set
         */
        public $item;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_SellerInfo extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var string
         */
        public $feedbackRatingStar;
        /**
         * @var int
         */
        public $feedbackScore;
        /**
         * @var float
         */
        public $positiveFeedbackPercent;
        /**
         * @var string
         */
        public $sellerUserName;
        /**
         * @var bool
         */
        public $topRatedSeller;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_SellingStatus extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var int
         */
        public $bidCount;
        /**
         * @var float
         */
        public $convertedCurrentPrice;
        /**
         * @var float
         */
        public $currentPrice;
        /**
         * @var string
         */
        public $sellingState;
        /**
         * @var string
         */
        public $timeLeft;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Set_Abstract implements \SeekableIterator, \Countable
    {
        /**
         * @var DOMNodeList
         */
        public $_nodes;
        /**
         * @var int
         */
        public $_key;
        /**
         * @param DOMNodeList $nodes
         *
         * @return void
         */
        public function __construct(\DOMNodeList $nodes)
        {
        }
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param int $key
         *
         * @return void
         *
         * @throws OutOfBoundsException
         */
        public function seek($key)
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
    }
    class Zend_Service_Ebay_Finding_ShippingInfo extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var float
         */
        public $shippingServiceCost;
        /**
         * @var string
         */
        public $shippingType;
        /**
         * @var array<array-key, string>
         */
        public $shipToLocations;
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_Service_Ebay_Finding_Storefront extends \Zend_Service_Ebay_Finding_Abstract
    {
        /**
         * @var string
         */
        public $storeName;
        /**
         * @var string
         */
        public $storeURL;
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param Zend_Service_Ebay_Finding $proxy
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Ebay_Finding_Response_Items
         */
        public function findItems(\Zend_Service_Ebay_Finding $proxy, $options = null)
        {
        }
    }
    class Zend_Service_Exception extends \Zend_Exception
    {
    }
    class Zend_Service_Flickr
    {
        public const URI_BASE = 'https://www.flickr.com';
        /**
         * @var string
         */
        public $apiKey;
        /**
         * @var Zend_Rest_Client
         */
        public $_restClient;
        /**
         * @param string $apiKey
         *
         * @return void
         */
        public function __construct($apiKey)
        {
        }
        /**
         * @param array<array-key, mixed>|string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Flickr_ResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function tagSearch($query, array $options = array())
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Service_Flickr_ResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function userSearch($query, ?array $options = null)
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Flickr_ResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function groupPoolGetPhotos($query, array $options = array())
        {
        }
        /**
         * @param string $username
         *
         * @return string
         *
         * @throws Zend_Service_Exception
         */
        public function getIdByUsername($username)
        {
        }
        /**
         * @param string $email
         *
         * @return string
         *
         * @throws Zend_Service_Exception
         */
        public function getIdByEmail($email)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_Exception
         */
        public function getImageDetails($id)
        {
        }
        /**
         * @return Zend_Rest_Client
         */
        public function getRestClient()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateUserSearch(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateTagSearch(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateGroupPoolGetPhotos(array $options)
        {
        }
        /**
         * @param DOMDocument $dom
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public static function _checkErrors(\DOMDocument $dom)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $options
         * @param array<array-key, mixed> $defaultOptions
         *
         * @return array<array-key, mixed>
         */
        public function _prepareOptions($method, array $options, array $defaultOptions)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         * @param array<array-key, mixed> $validOptions
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _compareOptions(array $options, array $validOptions)
        {
        }
    }
    class Zend_Service_Flickr_Image
    {
        /**
         * @var string
         */
        public $uri;
        /**
         * @var string
         */
        public $clickUri;
        /**
         * @var string
         */
        public $height;
        /**
         * @var string
         */
        public $width;
        /**
         * @param DOMElement $image
         *
         * @return void
         */
        public function __construct(\DOMElement $image)
        {
        }
    }
    class Zend_Service_Flickr_Result
    {
        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $owner;
        /**
         * @var string
         */
        public $secret;
        /**
         * @var string
         */
        public $server;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $ispublic;
        /**
         * @var string
         */
        public $isfriend;
        /**
         * @var string
         */
        public $isfamily;
        /**
         * @var string
         */
        public $license;
        /**
         * @var string
         */
        public $dateupload;
        /**
         * @var string
         */
        public $datetaken;
        /**
         * @var string
         */
        public $ownername;
        /**
         * @var string
         */
        public $iconserver;
        /**
         * @var Zend_Service_Flickr_Image
         */
        public $Square;
        /**
         * @var Zend_Service_Flickr_Image
         */
        public $Thumbnail;
        /**
         * @var Zend_Service_Flickr_Image
         */
        public $Small;
        /**
         * @var Zend_Service_Flickr_Image
         */
        public $Medium;
        /**
         * @var Zend_Service_Flickr_Image
         */
        public $Large;
        /**
         * @var Zend_Service_Flickr_Image
         */
        public $Original;
        /**
         * @var Zend_Service_Flickr
         */
        public $_flickr;
        /**
         * @param DOMElement $image
         * @param Zend_Service_Flickr $flickr
         *
         * @return void
         */
        public function __construct(\DOMElement $image, \Zend_Service_Flickr $flickr)
        {
        }
    }
    class Zend_Service_Flickr_ResultSet implements \SeekableIterator
    {
        /**
         * @var int
         */
        public $totalResultsAvailable;
        /**
         * @var int
         */
        public $totalResultsReturned;
        /**
         * @var int
         */
        public $firstResultPosition;
        /**
         * @var DOMNodeList
         */
        public $_results;
        /**
         * @var Zend_Service_Flickr
         */
        public $_flickr;
        /**
         * @var int
         */
        public $_currentIndex;
        /**
         * @param DOMDocument $dom
         * @param Zend_Service_Flickr $flickr
         *
         * @return void
         */
        public function __construct(\DOMDocument $dom, \Zend_Service_Flickr $flickr)
        {
        }
        /**
         * @return int
         */
        public function totalResults()
        {
        }
        /**
         * @return Zend_Service_Flickr_Result
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @param int $index
         *
         * @return void
         *
         * @throws OutOfBoundsException
         */
        public function seek($index)
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    class Zend_Service_LiveDocx
    {
        public const VERSION = '2.0';
        /**
         * @var Zend_Soap_Client
         */
        public $_soapClient;
        /**
         * @var string
         */
        public $_wsdl;
        /**
         * @var array<array-key, mixed>
         */
        public $_credentials;
        /**
         * @var bool
         */
        public $_loggedIn;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_LiveDocx
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return bool
         */
        public function __destruct()
        {
        }
        /**
         * @param string $endpoint
         *
         * @return void
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function _initSoapClient($endpoint)
        {
        }
        /**
         * @return Zend_Soap_Client
         */
        public function getSoapClient()
        {
        }
        /**
         * @param Zend_Soap_Client $soapClient
         *
         * @return Zend_Service_LiveDocx
         */
        public function setSoapClient(\Zend_Soap_Client $soapClient)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function logIn()
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function logOut()
        {
        }
        /**
         * @return bool
         */
        public function isLoggedIn()
        {
        }
        /**
         * @param string $username
         *
         * @return Zend_Service_LiveDocx
         */
        public function setUsername($username)
        {
        }
        /**
         * @param string $password
         *
         * @return Zend_Service_LiveDocx
         */
        public function setPassword($password)
        {
        }
        /**
         * @param string $wsdl
         *
         * @return Zend_Service_LiveDocx
         */
        public function setWsdl($wsdl)
        {
        }
        /**
         * @return null|string
         */
        public function getUsername()
        {
        }
        /**
         * @return null|string
         */
        public function getPassword()
        {
        }
        /**
         * @return string
         */
        public function getWsdl()
        {
        }
        /**
         * @param string $filename
         *
         * @return string
         */
        public function getFormat($filename)
        {
        }
        /**
         * @return string
         */
        public function getVersion()
        {
        }
        /**
         * @param string $version
         *
         * @return int
         */
        public function compareVersion($version)
        {
        }
    }
    class Zend_Service_LiveDocx_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_LiveDocx_MailMerge extends \Zend_Service_LiveDocx
    {
        public const VERSION = '2.0';
        public const WSDL = 'https://api.livedocx.com/2.0/mailmerge.asmx?WSDL';
        /**
         * @var array<array-key, mixed>
         */
        public $_fieldValues;
        /**
         * @var array<array-key, mixed>
         */
        public $_blockFieldValues;
        public function __construct($options = null)
        {
        }
        /**
         * @param string $filename
         *
         * @return Zend_Service_LiveDocx_MailMerge
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function setLocalTemplate($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return Zend_Service_LiveDocx_MailMerge
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function setRemoteTemplate($filename)
        {
        }
        /**
         * @param array<array-key, mixed> $values
         *
         * @return Zend_Service_LiveDocx_MailMerge
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function setFieldValues($values)
        {
        }
        /**
         * @param string $field
         * @param array<array-key, mixed>|string $value
         *
         * @return Zend_Service_LiveDocx_MailMerge
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function setFieldValue($field, $value)
        {
        }
        /**
         * @param string $blockName
         * @param array<array-key, mixed> $blockFieldValues
         *
         * @return Zend_Service_LiveDocx_MailMerge
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function setBlockFieldValues($blockName, $blockFieldValues)
        {
        }
        /**
         * @param array<array-key, mixed>|string $field
         * @param array<array-key, mixed>|null|string $value
         *
         * @return Zend_Service_LiveDocx_MailMerge
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function assign($field, $value = null)
        {
        }
        /**
         * @param string $password
         *
         * @return Zend_Service_LiveDocx_MailMerge
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function setDocumentPassword($password)
        {
        }
        /**
         * @param array<array-key, mixed> $permissions
         * @param string $password
         *
         * @return Zend_Service_LiveDocx_MailMerge
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function setDocumentAccessPermissions($permissions, $password)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Service_LiveDocx_Excpetion
         */
        public function createDocument()
        {
        }
        /**
         * @param string $format
         *
         * @return binary
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function retrieveDocument($format)
        {
        }
        /**
         * @param int $fromPage
         * @param int $toPage
         *
         * @return array<array-key, mixed>
         */
        public function getMetafiles($fromPage, $toPage)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAllMetafiles()
        {
        }
        /**
         * @param int $fromPage
         * @param int $toPage
         * @param int $zoomFactor
         * @param string $format
         *
         * @return array<array-key, mixed>
         */
        public function getBitmaps($fromPage, $toPage, $zoomFactor, $format)
        {
        }
        /**
         * @param int $zoomFactor
         * @param string $format
         *
         * @return array<array-key, mixed>
         */
        public function getAllBitmaps($zoomFactor, $format)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFieldNames()
        {
        }
        /**
         * @param string $blockName
         *
         * @return array<array-key, mixed>
         */
        public function getBlockFieldNames($blockName)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getBlockNames()
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function uploadTemplate($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return binary
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function downloadTemplate($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function deleteTemplate($filename)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTemplates()
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public function templateExists($filename)
        {
        }
        /**
         * @return string
         */
        public function shareDocument()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listSharedDocuments()
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         */
        public function deleteSharedDocument($filename)
        {
        }
        public function downloadSharedDocument($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public function sharedDocumentExists($filename)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTemplateFormats()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDocumentFormats()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFontNames()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDocumentAccessOptions()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImageImportFormats()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImageExportFormats()
        {
        }
        public function getImageFormats()
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function uploadImage($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function downloadImage($filename)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listImages()
        {
        }
        /**
         * @param string $filename
         *
         * @return void
         *
         * @throws Zend_Service_LiveDocx_Exception
         */
        public function deleteImage($filename)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         */
        public function imageExists($filename)
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return array<array-key, mixed>
         */
        public function _backendListArrayToMultiAssocArray($list)
        {
        }
        /**
         * @param array<array-key, mixed> $assoc
         *
         * @return array<array-key, mixed>
         */
        public static function assocArrayToArrayOfArrayOfString($assoc)
        {
        }
        /**
         * @param array<array-key, mixed> $multi
         *
         * @return array<array-key, mixed>
         */
        public static function multiAssocArrayToArrayOfArrayOfString($multi)
        {
        }
    }
    class Zend_Service_Rackspace_Abstract
    {
        public const VERSION = 'v1.0';
        public const US_AUTH_URL = 'https://auth.api.rackspacecloud.com';
        public const UK_AUTH_URL = 'https://lon.auth.api.rackspacecloud.com';
        public const API_FORMAT = 'json';
        public const USER_AGENT = 'Zend_Service_Rackspace';
        public const STORAGE_URL = 'X-Storage-Url';
        public const AUTHTOKEN = 'X-Auth-Token';
        public const AUTHUSER_HEADER = 'X-Auth-User';
        public const AUTHKEY_HEADER = 'X-Auth-Key';
        public const AUTHUSER_HEADER_LEGACY = 'X-Storage-User';
        public const AUTHKEY_HEADER_LEGACY = 'X-Storage-Pass';
        public const AUTHTOKEN_LEGACY = 'X-Storage-Token';
        public const CDNM_URL = 'X-CDN-Management-Url';
        public const MANAGEMENT_URL = 'X-Server-Management-Url';
        /**
         * @var string
         */
        public $key;
        /**
         * @var string
         */
        public $user;
        /**
         * @var string
         */
        public $token;
        /**
         * @var string
         */
        public $authUrl;
        /**
         * @var Zend_Http_Client
         */
        public $httpClient;
        /**
         * @var string
         */
        public $errorMsg;
        /**
         * @var string
         */
        public $errorCode;
        /**
         * @var string
         */
        public $storageUrl;
        /**
         * @var string
         */
        public $cdnUrl;
        /**
         * @var string
         */
        public $managementUrl;
        /**
         * @var bool
         */
        public $useServiceNet;
        /**
         * @param string $user
         * @param string $key
         * @param string $authUrl
         */
        public function __construct($user, $key, $authUrl)
        {
        }
        /**
         * @return string
         */
        public function getUser()
        {
        }
        /**
         * @return string
         */
        public function getKey()
        {
        }
        /**
         * @return string
         */
        public function getAuthUrl()
        {
        }
        /**
         * @return bool|string
         */
        public function getStorageUrl()
        {
        }
        /**
         * @return bool|string
         */
        public function getCdnUrl()
        {
        }
        /**
         * @return bool|string
         */
        public function getManagementUrl()
        {
        }
        /**
         * @param string $user
         *
         * @return void
         */
        public function setUser($user)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function setKey($key)
        {
        }
        /**
         * @param string $url
         *
         * @return void
         */
        public function setAuthUrl($url)
        {
        }
        /**
         * @param bool $useServiceNet
         */
        public function setServiceNet($useServiceNet = true)
        {
        }
        /**
         * @return bool
         */
        public function getServiceNet()
        {
        }
        /**
         * @return string
         */
        public function getToken()
        {
        }
        /**
         * @return string
         */
        public function getErrorMsg()
        {
        }
        /**
         * @return strig
         */
        public function getErrorCode()
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        /**
         * @return bool
         */
        public function isSuccessful()
        {
        }
        /**
         * @param string $url
         * @param string $method
         * @param array<array-key, mixed> $headers
         * @param null|string $body
         *
         * @return Zend_Http_Response
         */
        public function httpCall($url, $method, $headers = array(), $data = array(), $body = null)
        {
        }
        /**
         * @return bool
         */
        public function authenticate()
        {
        }
    }
    class Zend_Service_Rackspace_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_Rackspace_Files extends \Zend_Service_Rackspace_Abstract
    {
        public const VERSION = 'v1.0';
        public const US_AUTH_URL = 'https://auth.api.rackspacecloud.com';
        public const UK_AUTH_URL = 'https://lon.auth.api.rackspacecloud.com';
        public const API_FORMAT = 'json';
        public const USER_AGENT = 'Zend_Service_Rackspace';
        public const STORAGE_URL = 'X-Storage-Url';
        public const AUTHTOKEN = 'X-Auth-Token';
        public const AUTHUSER_HEADER = 'X-Auth-User';
        public const AUTHKEY_HEADER = 'X-Auth-Key';
        public const AUTHUSER_HEADER_LEGACY = 'X-Storage-User';
        public const AUTHKEY_HEADER_LEGACY = 'X-Storage-Pass';
        public const AUTHTOKEN_LEGACY = 'X-Storage-Token';
        public const CDNM_URL = 'X-CDN-Management-Url';
        public const MANAGEMENT_URL = 'X-Server-Management-Url';
        public const ERROR_CONTAINER_NOT_EMPTY = 'The container is not empty, I cannot delete it.';
        public const ERROR_CONTAINER_NOT_FOUND = 'The container was not found.';
        public const ERROR_OBJECT_NOT_FOUND = 'The object was not found.';
        public const ERROR_OBJECT_MISSING_PARAM = 'Missing Content-Length or Content-Type header in the request';
        public const ERROR_OBJECT_CHECKSUM = 'Checksum of the file content failed';
        public const ERROR_CONTAINER_EXIST = 'The container already exists';
        public const ERROR_PARAM_NO_NAME_CONTAINER = 'You must specify the container name';
        public const ERROR_PARAM_NO_NAME_OBJECT = 'You must specify the object name';
        public const ERROR_PARAM_NO_CONTENT = 'You must specify the content of the object';
        public const ERROR_PARAM_NO_NAME_SOURCE_CONTAINER = 'You must specify the source container name';
        public const ERROR_PARAM_NO_NAME_SOURCE_OBJECT = 'You must specify the source object name';
        public const ERROR_PARAM_NO_NAME_DEST_CONTAINER = 'You must specify the destination container name';
        public const ERROR_PARAM_NO_NAME_DEST_OBJECT = 'You must specify the destination object name';
        public const ERROR_PARAM_NO_METADATA = 'You must specify the metadata array';
        public const ERROR_CDN_TTL_OUT_OF_RANGE = 'TTL must be a number in seconds, min is 900 sec and maximum is 1577836800 (50 years)';
        public const ERROR_PARAM_UPDATE_CDN = 'You must specify at least one the parameters: ttl, cdn_enabled or log_retention';
        public const HEADER_CONTENT_TYPE = 'Content-Type';
        public const HEADER_HASH = 'Etag';
        public const HEADER_LAST_MODIFIED = 'Last-Modified';
        public const HEADER_CONTENT_LENGTH = 'Content-Length';
        public const HEADER_COPY_FROM = 'X-Copy-From';
        public const METADATA_OBJECT_HEADER = 'X-Object-Meta-';
        public const METADATA_CONTAINER_HEADER = 'X-Container-Meta-';
        public const CDN_URI = 'X-CDN-URI';
        public const CDN_SSL_URI = 'X-CDN-SSL-URI';
        public const CDN_ENABLED = 'X-CDN-Enabled';
        public const CDN_LOG_RETENTION = 'X-Log-Retention';
        public const CDN_ACL_USER_AGENT = 'X-User-Agent-ACL';
        public const CDN_ACL_REFERRER = 'X-Referrer-ACL';
        public const CDN_TTL = 'X-TTL';
        public const CDN_TTL_MIN = 900;
        public const CDN_TTL_MAX = 1577836800;
        public const CDN_EMAIL = 'X-Purge-Email';
        public const ACCOUNT_CONTAINER_COUNT = 'X-Account-Container-Count';
        public const ACCOUNT_BYTES_USED = 'X-Account-Bytes-Used';
        public const ACCOUNT_OBJ_COUNT = 'X-Account-Object-Count';
        public const CONTAINER_OBJ_COUNT = 'X-Container-Object-Count';
        public const CONTAINER_BYTES_USE = 'X-Container-Bytes-Used';
        public const MANIFEST_OBJECT_HEADER = 'X-Object-Manifest';
        /**
         * @return int
         */
        public function getCountContainers()
        {
        }
        /**
         * @return int
         */
        public function getSizeContainers()
        {
        }
        /**
         * @return int
         */
        public function getCountObjects()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Rackspace_Files_ContainerList|bool
         */
        public function getContainers($options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>|bool
         */
        public function getCdnContainers($options = array())
        {
        }
        /**
         * @return array<array-key, mixed>|bool
         */
        public function getInfoAccount()
        {
        }
        /**
         * @param string $container
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Rackspace_Files_ObjectList|bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function getObjects($container, $options = array())
        {
        }
        /**
         * @param string $container
         * @param array<array-key, mixed> $metadata
         *
         * @return Zend_Service_Rackspace_Files_Container|bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function createContainer($container, $metadata = array())
        {
        }
        /**
         * @param string $container
         *
         * @return bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function deleteContainer($container)
        {
        }
        /**
         * @param string $container
         *
         * @return array<array-key, mixed>|bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function getMetadataContainer($container)
        {
        }
        /**
         * @param string $container
         *
         * @return Zend_Service_Rackspace_Files_Container|bool
         */
        public function getContainer($container)
        {
        }
        /**
         * @param string $container
         * @param string $object
         * @param array<array-key, mixed> $headers
         *
         * @return Zend_Service_Rackspace_Files_Object|bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function getObject($container, $object, $headers = array())
        {
        }
        /**
         * @param string $container
         * @param string $object
         * @param string $content
         * @param array<array-key, mixed> $metadata
         * @param null|string $content_type
         *
         * @return bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function storeObject($container, $object, $content, $metadata = array(), $content_type = null)
        {
        }
        /**
         * @param string $container
         * @param string $object
         *
         * @return bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function deleteObject($container, $object)
        {
        }
        /**
         * @param string $container_source
         * @param string $obj_source
         * @param string $container_dest
         * @param string $obj_dest
         * @param array<array-key, mixed> $metadata
         * @param null|string $content_type
         *
         * @return bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function copyObject($container_source, $obj_source, $container_dest, $obj_dest, $metadata = array(), $content_type = null)
        {
        }
        /**
         * @param string $container
         * @param string $object
         *
         * @return array<array-key, mixed>|bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function getMetadataObject($container, $object)
        {
        }
        /**
         * @param string $container
         * @param string $object
         * @param array<array-key, mixed> $metadata
         *
         * @return bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function setMetadataObject($container, $object, $metadata)
        {
        }
        /**
         * @param string $container
         * @param int $ttl
         *
         * @return array<array-key, mixed>|bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function enableCdnContainer($container, $ttl)
        {
        }
        /**
         * @param string $container
         * @param int|null $ttl
         * @param bool|null $cdn_enabled
         * @param bool|null $log
         *
         * @return bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function updateCdnContainer($container, $ttl = null, $cdn_enabled = null, $log = null)
        {
        }
        /**
         * @param string $container
         *
         * @return array<array-key, mixed>|bool
         *
         * @throws Zend_Service_Rackspace_Exception
         */
        public function getInfoCdnContainer($container)
        {
        }
    }
    class Zend_Service_Rackspace_Files_Container
    {
        public const ERROR_PARAM_FILE_CONSTRUCT = 'The Zend_Service_Rackspace_Files passed in construction is not valid';
        public const ERROR_PARAM_ARRAY_CONSTRUCT = 'The array passed in construction is not valid';
        public const ERROR_PARAM_NO_NAME = 'The container name is empty';
        /**
         * @var string
         */
        public $name;
        /**
         * @param Zend_Service_Rackspace_Files $service
         *
         * @throws Zend_Service_Rackspace_Files_Exception
         */
        public function __construct($service, $data)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return bool|int
         */
        public function getSize()
        {
        }
        /**
         * @return bool|int
         */
        public function getObjectCount()
        {
        }
        /**
         * @return bool
         */
        public function isCdnEnabled()
        {
        }
        /**
         * @return bool|int
         */
        public function getCdnTtl()
        {
        }
        /**
         * @return bool
         */
        public function isCdnLogEnabled()
        {
        }
        /**
         * @return bool|string
         */
        public function getCdnUri()
        {
        }
        /**
         * @return bool|string
         */
        public function getCdnUriSsl()
        {
        }
        /**
         * @param null|string $key
         *
         * @return array<array-key, mixed>|bool|string
         */
        public function getMetadata($key = null)
        {
        }
        /**
         * @return array<array-key, mixed>|bool
         */
        public function getInfo()
        {
        }
        /**
         * @return Zend_Service_Rackspace_Files_ObjectList
         */
        public function getObjects()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $headers
         *
         * @return Zend_Service_Rackspace_Files_Object|bool
         */
        public function getObject($name, $headers = array())
        {
        }
        /**
         * @param string $name
         * @param string $file
         * @param array<array-key, mixed> $metadata
         *
         * @return bool
         */
        public function addObject($name, $file, $metadata = array())
        {
        }
        /**
         * @param string $obj
         *
         * @return bool
         */
        public function deleteObject($obj)
        {
        }
        /**
         * @param string $obj_source
         * @param string $container_dest
         * @param string $obj_dest
         * @param array<array-key, mixed> $metadata
         * @param null|string $content_type
         *
         * @return bool
         */
        public function copyObject($obj_source, $container_dest, $obj_dest, $metadata = array(), $content_type = null)
        {
        }
        /**
         * @param string $object
         *
         * @return array<array-key, mixed>
         */
        public function getMetadataObject($object)
        {
        }
        /**
         * @param string $object
         * @param array<array-key, mixed> $metadata
         *
         * @return bool
         */
        public function setMetadataObject($object, $metadata = array())
        {
        }
        /**
         * @param int $ttl
         *
         * @return array<array-key, mixed>|bool
         */
        public function enableCdn($ttl)
        {
        }
        /**
         * @return bool
         */
        public function disableCdn()
        {
        }
        /**
         * @param int $ttl
         *
         * @return bool
         */
        public function changeTtlCdn($ttl)
        {
        }
        /**
         * @return bool
         */
        public function enableLogCdn()
        {
        }
        /**
         * @return bool
         */
        public function disableLogCdn()
        {
        }
        /**
         * @return array<array-key, mixed>|bool
         */
        public function getCdnInfo()
        {
        }
    }
    class Zend_Service_Rackspace_Files_ContainerList implements \Countable, \Iterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $objects;
        /**
         * @var int
         */
        public $iteratorKey;
        /**
         * @var RackspaceFiles
         */
        public $service;
        /**
         * @param array<array-key, mixed> $list
         *
         * @return bool
         */
        public function __construct($service, $list = array())
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function _constructFromArray(array $list)
        {
        }
        /**
         * @param Zend_Service_Rackspace_Files_Container $obj
         *
         * @return Zend_Service_Rackspace_Files_ContainerList
         */
        public function _addObject(\Zend_Service_Rackspace_Files_Container $obj)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Service_Rackspace_Files_Container
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return Zend_Service_Rackspace_Files_Container
         *
         * @throws Zend_Service_Rackspace_Files_Exception
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $value
         *
         * @throws Zend_Service_Rackspace_Files_Exception
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Service_Rackspace_Files_Exception
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Service_Rackspace_Files_Exception extends \Zend_Service_Rackspace_Exception
    {
    }
    class Zend_Service_Rackspace_Files_Object
    {
        /**
         * @var Zend_Service_Rackspace_Files
         */
        public $service;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $hash;
        /**
         * @var int
         */
        public $size;
        /**
         * @var string
         */
        public $contentType;
        /**
         * @var string
         */
        public $lastModified;
        /**
         * @var string
         */
        public $content;
        /**
         * @var string
         */
        public $container;
        /**
         * @param Zend_Service_Rackspace_Files $service
         * @param array<array-key, mixed> $data
         *
         * @throws Zend_Service_Rackspace_Files_Exception
         */
        public function __construct($service, $data)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getContainer()
        {
        }
        /**
         * @return bool|string
         */
        public function getHash()
        {
        }
        /**
         * @return bool|int
         */
        public function getSize()
        {
        }
        /**
         * @return string
         */
        public function getContentType()
        {
        }
        /**
         * @return string
         */
        public function getLastModified()
        {
        }
        /**
         * @return string
         */
        public function getContent()
        {
        }
        /**
         * @param null|string $key
         *
         * @return array<array-key, mixed>|bool|string
         */
        public function getMetadata($key = null)
        {
        }
        /**
         * @param array<array-key, mixed> $metadata
         *
         * @return bool
         */
        public function setMetadata($metadata)
        {
        }
        /**
         * @param string $container_dest
         * @param string $name_dest
         * @param array<array-key, mixed> $metadata
         * @param null|string $content_type
         *
         * @return bool
         */
        public function copyTo($container_dest, $name_dest, $metadata = array(), $content_type = null)
        {
        }
        /**
         * @return string
         */
        public function getCdnUrl()
        {
        }
        /**
         * @return string
         */
        public function getCdnUrlSsl()
        {
        }
    }
    class Zend_Service_Rackspace_Files_ObjectList implements \Countable, \Iterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $objects;
        /**
         * @var int
         */
        public $iteratorKey;
        /**
         * @var RackspaceFiles
         */
        public $service;
        /**
         * @var string
         */
        public $container;
        /**
         * @param array<array-key, mixed> $list
         *
         * @return bool
         */
        public function __construct($service, $list, $container)
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function _constructFromArray(array $list)
        {
        }
        /**
         * @param Zend_Service_Rackspace_Files_Object $obj
         *
         * @return Zend_Service_Rackspace_Files_ObjectList
         */
        public function _addObject(\Zend_Service_Rackspace_Files_Object $obj)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Service_Rackspace_Files_Object
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return Zend_Service_Rackspace_Files_Object
         *
         * @throws Zend_Service_Rackspace_Files_Exception
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $value
         *
         * @throws Zend_Service_Rackspace_Files_Exception
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Service_Rackspace_Files_Exception
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Service_Rackspace_Servers extends \Zend_Service_Rackspace_Abstract
    {
        public const VERSION = 'v1.0';
        public const US_AUTH_URL = 'https://auth.api.rackspacecloud.com';
        public const UK_AUTH_URL = 'https://lon.auth.api.rackspacecloud.com';
        public const API_FORMAT = 'json';
        public const USER_AGENT = 'Zend_Service_Rackspace';
        public const STORAGE_URL = 'X-Storage-Url';
        public const AUTHTOKEN = 'X-Auth-Token';
        public const AUTHUSER_HEADER = 'X-Auth-User';
        public const AUTHKEY_HEADER = 'X-Auth-Key';
        public const AUTHUSER_HEADER_LEGACY = 'X-Storage-User';
        public const AUTHKEY_HEADER_LEGACY = 'X-Storage-Pass';
        public const AUTHTOKEN_LEGACY = 'X-Storage-Token';
        public const CDNM_URL = 'X-CDN-Management-Url';
        public const MANAGEMENT_URL = 'X-Server-Management-Url';
        public const LIMIT_FILE_SIZE = 10240;
        public const LIMIT_NUM_FILE = 5;
        public const ERROR_SERVICE_UNAVAILABLE = 'The service is unavailable';
        public const ERROR_UNAUTHORIZED = 'Unauthorized';
        public const ERROR_OVERLIMIT = 'You reached the limit of requests, please wait some time before retry';
        public const ERROR_PARAM_NO_ID = 'You must specify the item\'s id';
        public const ERROR_PARAM_NO_NAME = 'You must specify the name';
        public const ERROR_PARAM_NO_SERVERID = 'You must specify the server Id';
        public const ERROR_PARAM_NO_IMAGEID = 'You must specify the server\'s image ID';
        public const ERROR_PARAM_NO_FLAVORID = 'You must specify the server\'s flavor ID';
        public const ERROR_PARAM_NO_ARRAY = 'You must specify an array of parameters';
        public const ERROR_PARAM_NO_WEEKLY = 'You must specify a weekly backup schedule';
        public const ERROR_PARAM_NO_DAILY = 'You must specify a daily backup schedule';
        public const ERROR_ITEM_NOT_FOUND = 'The item specified doesn\'t exist.';
        public const ERROR_NO_FILE_EXISTS = 'The file specified doesn\'t exist';
        public const ERROR_LIMIT_FILE_SIZE = 'You reached the size length of a file';
        public const ERROR_IN_PROGRESS = 'The item specified is still in progress';
        public const ERROR_BUILD_IN_PROGRESS = 'The build is still in progress';
        public const ERROR_RESIZE_NOT_ALLOWED = 'The resize is not allowed';
        /**
         * @param bool $details
         *
         * @return Zend_Service_Rackspace_Servers_ServerList|bool
         */
        public function listServers($details = false)
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Service_Rackspace_Servers_Server
         */
        public function getServer($id)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed> $files
         *
         * @return Zend_Service_Rackspace_Servers_Server|bool
         */
        public function createServer(array $data, $metadata = array(), $files = array())
        {
        }
        /**
         * @param string $id
         * @param null|string $name
         * @param null|string $password
         *
         * @return bool
         */
        public function updateServer($id, $name = null, $password = null)
        {
        }
        /**
         * @param string $id
         * @param string $name
         *
         * @return bool
         */
        public function changeServerName($id, $name)
        {
        }
        /**
         * @param string $id
         * @param string $password
         *
         * @return bool
         */
        public function changeServerPassword($id, $password)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function deleteServer($id)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>|bool
         */
        public function getServerIp($id)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>|bool
         */
        public function getServerPublicIp($id)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>|bool
         */
        public function getServerPrivateIp($id)
        {
        }
        /**
         * @param string $id
         * @param string $ip
         * @param string $groupId
         *
         * @return bool
         */
        public function shareIpAddress($id, $ip, $groupId, $configure = true)
        {
        }
        /**
         * @param string $id
         * @param string $ip
         *
         * @return bool
         */
        public function unshareIpAddress($id, $ip)
        {
        }
        /**
         * @param string $id
         * @param bool $hard
         *
         * @return bool
         */
        public function rebootServer($id, $hard = false)
        {
        }
        /**
         * @param string $id
         * @param string $imageId
         *
         * @return bool
         */
        public function rebuildServer($id, $imageId)
        {
        }
        /**
         * @param string $id
         * @param string $flavorId
         *
         * @return bool
         */
        public function resizeServer($id, $flavorId)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function confirmResizeServer($id)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function revertResizeServer($id)
        {
        }
        /**
         * @param bool $details
         *
         * @return array<array-key, mixed>|bool
         */
        public function listFlavors($details = false)
        {
        }
        /**
         * @param string $flavorId
         *
         * @return array<array-key, mixed>|bool
         */
        public function getFlavor($flavorId)
        {
        }
        /**
         * @param bool $details
         *
         * @return Zend_Service_Rackspace_Servers_ImageList|bool
         */
        public function listImages($details = false)
        {
        }
        /**
         * @param string $id
         *
         * @return Zend_Service_Rackspace_Servers_Image|bool
         */
        public function getImage($id)
        {
        }
        /**
         * @param string $serverId
         * @param string $name
         *
         * @return Zend_Service_Rackspace_Servers_Image
         */
        public function createImage($serverId, $name)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function deleteImage($id)
        {
        }
        /**
         * @param string $id
         *
         * @return array<array-key, mixed>|bool
         */
        public function getBackupSchedule($id)
        {
        }
        /**
         * @param string $id
         * @param string $weekly
         * @param string $daily
         *
         * @return bool
         */
        public function changeBackupSchedule($id, $weekly, $daily)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function disableBackupSchedule($id)
        {
        }
        /**
         * @param bool $details
         *
         * @return Zend_Service_Rackspace_Servers_SharedIpGroupList|bool
         */
        public function listSharedIpGroups($details = false)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Service_Rackspace_Servers_SharedIpGroup|bool
         */
        public function getSharedIpGroup($id)
        {
        }
        /**
         * @param string $name
         * @param string $serverId
         *
         * @return array<array-key, mixed>|bool
         */
        public function createSharedIpGroup($name, $serverId)
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        public function deleteSharedIpGroup($id)
        {
        }
    }
    class Zend_Service_Rackspace_Servers_Exception extends \Zend_Service_Rackspace_Exception
    {
    }
    class Zend_Service_Rackspace_Servers_Image
    {
        public const ERROR_PARAM_CONSTRUCT = 'You must pass a Zend_Service_Rackspace_Servers object and an array';
        public const ERROR_PARAM_NO_NAME = 'You must pass the image\'s name in the array (name)';
        public const ERROR_PARAM_NO_ID = 'You must pass the image\'s id in the array (id)';
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $serverId;
        /**
         * @var string
         */
        public $updated;
        /**
         * @var string
         */
        public $created;
        /**
         * @var string
         */
        public $status;
        /**
         * @var int
         */
        public $progress;
        /**
         * @var Zend_Service_Rackspace_Servers
         */
        public $service;
        /**
         * @param array<array-key, mixed> $data
         *
         * @return void
         */
        public function __construct($service, $data)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getServerId()
        {
        }
        /**
         * @return string
         */
        public function getUpdated()
        {
        }
        /**
         * @return string
         */
        public function getCreated()
        {
        }
        /**
         * @return bool|string
         */
        public function getStatus()
        {
        }
        /**
         * @return bool|int
         */
        public function getProgress()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Service_Rackspace_Servers_ImageList implements \Countable, \Iterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $images;
        /**
         * @var int
         */
        public $iteratorKey;
        /**
         * @var Zend_Service_Rackspace_Servers
         */
        public $service;
        /**
         * @param RackspaceServers $service
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function __construct($service, $list = array())
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function constructFromArray(array $list)
        {
        }
        /**
         * @param Zend_Service_Rackspace_Servers_Image $image
         *
         * @return Zend_Service_Rackspace_Servers_ImageList
         */
        public function addImage(\Zend_Service_Rackspace_Servers_Image $image)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Service_Rackspace_Servers_Image
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return Zend_Service_Rackspace_Servers_Image
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $value
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Service_Rackspace_Servers_Server
    {
        public const ERROR_PARAM_CONSTRUCT = 'You must pass a Zend_Service_Rackspace_Servers object and an array';
        public const ERROR_PARAM_NO_NAME = 'You must pass the server\'s name in the array (name)';
        public const ERROR_PARAM_NO_ID = 'You must pass the server\'s id in the array (id)';
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $imageId;
        /**
         * @var string
         */
        public $flavorId;
        /**
         * @var string
         */
        public $hostId;
        /**
         * @var string
         */
        public $status;
        /**
         * @var int
         */
        public $progress;
        /**
         * @var string
         */
        public $adminPass;
        /**
         * @var array<array-key, mixed>
         */
        public $addresses;
        /**
         * @var array<array-key, mixed>
         */
        public $metadata;
        /**
         * @var Zend_Service_Rackspace_Servers
         */
        public $service;
        /**
         * @param Zend_Service_Rackspace_Servers $service
         * @param array<array-key, mixed> $data
         *
         * @return void
         */
        public function __construct($service, $data)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getImageId()
        {
        }
        /**
         * @return string
         */
        public function getFlavorId()
        {
        }
        /**
         * @return string
         */
        public function getHostId()
        {
        }
        /**
         * @return string
         */
        public function getAdminPass()
        {
        }
        /**
         * @return bool|string
         */
        public function getStatus()
        {
        }
        /**
         * @return bool|int
         */
        public function getProgress()
        {
        }
        /**
         * @return array<array-key, mixed>|bool
         */
        public function getPrivateIp()
        {
        }
        /**
         * @return array<array-key, mixed>|bool
         */
        public function getPublicIp()
        {
        }
        /**
         * @param null|string $key
         *
         * @return array<array-key, mixed>|string
         */
        public function getMetadata($key = null)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function changeName($name)
        {
        }
        /**
         * @param string $password
         *
         * @return bool
         */
        public function changePassword($password)
        {
        }
        /**
         * @return bool
         */
        public function reboot($hard = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Service_Rackspace_Servers_ServerList implements \Countable, \Iterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $servers;
        /**
         * @var int
         */
        public $iteratorKey;
        /**
         * @var Zend_Service_Rackspace_Servers
         */
        public $service;
        /**
         * @param Zend_Service_Rackspace_Servers $service
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function __construct($service, $list = array())
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function constructFromArray(array $list)
        {
        }
        /**
         * @param Zend_Service_Rackspace_Servers_Server $server
         *
         * @return Zend_Service_Rackspace_Servers_ServerList
         */
        public function addServer(\Zend_Service_Rackspace_Servers_Server $server)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Service_Rackspace_Servers_Server
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return Zend_Service_Rackspace_Servers_Server
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $value
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Service_Rackspace_Servers_SharedIpGroup
    {
        public const ERROR_PARAM_CONSTRUCT = 'You must pass a Zend_Service_Rackspace_Servers object and an array';
        public const ERROR_PARAM_NO_NAME = 'You must pass the image\'s name in the array (name)';
        public const ERROR_PARAM_NO_ID = 'You must pass the image\'s id in the array (id)';
        public const ERROR_PARAM_NO_SERVERS = 'The servers parameter must be an array of Ids';
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $id;
        /**
         * @var array<array-key, mixed>
         */
        public $serversId;
        /**
         * @var Zend_Service_Rackspace_Servers
         */
        public $service;
        /**
         * @param Zend_Service_Rackspace_Servers $service
         * @param array<array-key, mixed> $data
         *
         * @return void
         */
        public function __construct($service, $data)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getServersId()
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Service_Rackspace_Servers_Server|bool
         */
        public function getServer($id)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed> $files
         *
         * @return Zend_Service_Rackspace_Servers_Server|bool
         */
        public function createServer(array $data, $metadata = array(), $files = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
    }
    class Zend_Service_Rackspace_Servers_SharedIpGroupList implements \Countable, \Iterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $shared;
        /**
         * @var int
         */
        public $iteratorKey;
        /**
         * @var Zend_Service_Rackspace_Servers
         */
        public $service;
        /**
         * @param Zend_Service_Rackspace_Servers $service
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function __construct($service, $list = array())
        {
        }
        /**
         * @param array<array-key, mixed> $list
         *
         * @return void
         */
        public function constructFromArray(array $list)
        {
        }
        /**
         * @return Zend_Service_Rackspace_Servers_SharedIpGroupList
         */
        public function addSharedIpGroup(\Zend_Service_Rackspace_Servers_SharedIpGroup $share)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return Zend_Service_Rackspace_Servers_SharedIpGroup
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @param int $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int $offset
         *
         * @return Zend_Service_Rackspace_Servers_SharedIpGroup
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int $offset
         * @param string $value
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int $offset
         *
         * @throws Zend_Service_Rackspace_Servers_Exception
         */
        public function offsetUnset($offset)
        {
        }
    }
    class Zend_Service_ReCaptcha extends \Zend_Service_Abstract
    {
        public const API_SERVER = 'http://www.google.com/recaptcha/api';
        public const API_SECURE_SERVER = 'https://www.google.com/recaptcha/api';
        public const VERIFY_SERVER = 'http://www.google.com/recaptcha/api/verify';
        /**
         * @var string
         */
        public $_publicKey;
        /**
         * @var string
         */
        public $_privateKey;
        /**
         * @var string
         */
        public $_ip;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var Zend_Service_ReCaptcha_Response
         */
        public $_response;
        public function __construct($publicKey = null, $privateKey = null, $params = null, $options = null, $ip = null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $ip
         *
         * @return Zend_Service_ReCaptcha
         */
        public function setIp($ip)
        {
        }
        /**
         * @return string
         */
        public function getIp()
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return Zend_Service_ReCaptcha
         */
        public function setParam($key, $value)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $params
         *
         * @return Zend_Service_ReCaptcha
         *
         * @throws Zend_Service_ReCaptcha_Exception
         */
        public function setParams($params)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getParam($key)
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return Zend_Service_ReCaptcha
         */
        public function setOption($key, $value)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Service_ReCaptcha
         *
         * @throws Zend_Service_ReCaptcha_Exception
         */
        public function setOptions($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getOption($key)
        {
        }
        /**
         * @return string
         */
        public function getPublicKey()
        {
        }
        /**
         * @param string $publicKey
         *
         * @return Zend_Service_ReCaptcha
         */
        public function setPublicKey($publicKey)
        {
        }
        /**
         * @return string
         */
        public function getPrivateKey()
        {
        }
        /**
         * @param string $privateKey
         *
         * @return Zend_Service_ReCaptcha
         */
        public function setPrivateKey($privateKey)
        {
        }
        /**
         * @param null|string $name
         *
         * @return string
         *
         * @throws Zend_Service_ReCaptcha_Exception
         */
        public function getHtml($name = null)
        {
        }
        /**
         * @param string $challengeField
         * @param string $responseField
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Service_ReCaptcha_Exception
         */
        public function _post($challengeField, $responseField)
        {
        }
        /**
         * @param string $challengeField
         * @param string $responseField
         *
         * @return Zend_Service_ReCaptcha_Response
         */
        public function verify($challengeField, $responseField)
        {
        }
    }
    class Zend_Service_ReCaptcha_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_ReCaptcha_MailHide extends \Zend_Service_ReCaptcha
    {
        public const API_SERVER = 'http://www.google.com/recaptcha/api';
        public const API_SECURE_SERVER = 'https://www.google.com/recaptcha/api';
        public const VERIFY_SERVER = 'http://www.google.com/recaptcha/api/verify';
        public const ENCRYPTION_BLOCK_SIZE = 16;
        public const ENCRYPTION_IV = '                ';
        public const MAILHIDE_SERVER = 'http://mailhide.recaptcha.net/d';
        /**
         * @var string
         */
        public $_email;
        /**
         * @var Zend_Validate_Interface
         */
        public $_emailValidator;
        /**
         * @var string
         */
        public $_privateKeyPacked;
        /**
         * @var string
         */
        public $_emailLocalPart;
        /**
         * @var string
         */
        public $_emailDomainPart;
        /**
         * @param null|string $publicKey
         * @param null|string $privateKey
         * @param null|string $email
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($publicKey = null, $privateKey = null, $email = null, $options = null)
        {
        }
        /**
         * @return Zend_Validate_Interface
         */
        public function getEmailValidator()
        {
        }
        /**
         * @param Zend_Validate_Interface $validator
         *
         * @return Zend_Service_ReCaptcha_MailHide
         */
        public function setEmailValidator(\Zend_Validate_Interface $validator)
        {
        }
        /**
         * @throws Zend_Service_ReCaptcha_MailHide_Exception
         */
        public function _requireMcrypt()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDefaultOptions()
        {
        }
        /**
         * @param string $privateKey
         *
         * @return Zend_Service_ReCaptcha_MailHide
         */
        public function setPrivateKey($privateKey)
        {
        }
        /**
         * @param string $email
         *
         * @return Zend_Service_ReCaptcha_MailHide
         */
        public function setEmail($email)
        {
        }
        /**
         * @return string
         */
        public function getEmail()
        {
        }
        /**
         * @return string
         */
        public function getEmailLocalPart()
        {
        }
        /**
         * @return string
         */
        public function getEmailDomainPart()
        {
        }
        /**
         * @param null|string $email
         *
         * @return string
         *
         * @throws Zend_Service_ReCaptcha_MailHide_Exception
         */
        public function getHtml($email = null)
        {
        }
        /**
         * @return string
         */
        public function _getUrl()
        {
        }
    }
    class Zend_Service_ReCaptcha_MailHide_Exception extends \Zend_Service_ReCaptcha_Exception
    {
    }
    class Zend_Service_ReCaptcha_Response
    {
        /**
         * @var bool
         */
        public $_status;
        /**
         * @var string
         */
        public $_errorCode;
        /**
         * @param null|string $status
         * @param null|string $errorCode
         * @param Zend_Http_Response|null $httpResponse
         */
        public function __construct($status = null, $errorCode = null, ?\Zend_Http_Response $httpResponse = null)
        {
        }
        /**
         * @param string $status
         *
         * @return Zend_Service_ReCaptcha_Response
         */
        public function setStatus($status)
        {
        }
        /**
         * @return bool
         */
        public function getStatus()
        {
        }
        /**
         * @return bool
         */
        public function isValid()
        {
        }
        /**
         * @param string $errorCode
         *
         * @return Zend_Service_ReCaptcha_Response
         */
        public function setErrorCode($errorCode)
        {
        }
        /**
         * @return string
         */
        public function getErrorCode()
        {
        }
        /**
         * @param Zend_Http_Response $response
         *
         * @return Zend_Service_ReCaptcha_Response
         */
        public function setFromHttpResponse(\Zend_Http_Response $response)
        {
        }
    }
    class Zend_Service_ShortUrl_AbstractShortener extends \Zend_Service_Abstract
    {
        /**
         * @var string
         */
        public $_baseUri;
        /**
         * @param string $url
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function _validateUri($url)
        {
        }
        /**
         * @param string $shortenedUrl
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function _verifyBaseUri($shortenedUrl)
        {
        }
    }
    class Zend_Service_ShortUrl_BitLy extends \Zend_Service_ShortUrl_AbstractShortener
    {
        /**
         * @var string
         */
        public $_apiUri;
        /**
         * @var string
         */
        public $_loginName;
        /**
         * @var string
         */
        public $_apiKey;
        /**
         * @param string $login
         * @param null|string $apiKey
         */
        public function __construct($login, $apiKey = null)
        {
        }
        /**
         * @return Zend_Service_ShortUrl_BitLy
         */
        public function setOAuthAccessToken($accessToken)
        {
        }
        /**
         * @return Zend_Service_ShortUrl_BitLy
         */
        public function setApiLogin($login, $apiKey)
        {
        }
        /**
         * @return void
         */
        public function _setAccessParameter()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function _processRequest()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function shorten($url)
        {
        }
        /**
         * @param string $shortenedUrl
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function unshorten($shortenedUrl)
        {
        }
    }
    class Zend_Service_ShortUrl_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_ShortUrl_IsGd extends \Zend_Service_ShortUrl_AbstractShortener
    {
        /**
         * @var string
         */
        public $_baseUri;
        /**
         * @param string $url
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function shorten($url)
        {
        }
        /**
         * @param string $shortenedUrl
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function unshorten($shortenedUrl)
        {
        }
    }
    class Zend_Service_ShortUrl_JdemCz extends \Zend_Service_ShortUrl_AbstractShortener
    {
        /**
         * @var string
         */
        public $_baseUri;
        /**
         * @param string $url
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function shorten($url)
        {
        }
        /**
         * @param string $shortenedUrl
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function unshorten($shortenedUrl)
        {
        }
    }
    class Zend_Service_ShortUrl_MetamarkNet extends \Zend_Service_ShortUrl_AbstractShortener
    {
        /**
         * @var string
         */
        public $_baseUri;
        public $_apiUri = 'http://metamark.net/api/rest/simple';
        /**
         * @param string $url
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function shorten($url)
        {
        }
        /**
         * @param string $shortenedUrl
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function unshorten($shortenedUrl)
        {
        }
    }
    interface Zend_Service_ShortUrl_Shortener
    {
        /**
         * @param string $url
         *
         * @return string
         */
        public function shorten($url);
        /**
         * @param string $shortenedUrl
         *
         * @return string
         */
        public function unshorten($shortenedUrl);
    }
    class Zend_Service_ShortUrl_TinyUrlCom extends \Zend_Service_ShortUrl_AbstractShortener
    {
        /**
         * @var string
         */
        public $_baseUri;
        /**
         * @param string $url
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function shorten($url)
        {
        }
        /**
         * @param string $shortenedUrl
         *
         * @return string
         *
         * @throws Zend_Service_ShortUrl_Exception
         */
        public function unshorten($shortenedUrl)
        {
        }
    }
    class Zend_Service_SlideShare
    {
        public const SERVICE_ERROR_BAD_APIKEY = 1;
        public const SERVICE_ERROR_BAD_AUTH = 2;
        public const SERVICE_ERROR_MISSING_TITLE = 3;
        public const SERVICE_ERROR_MISSING_FILE = 4;
        public const SERVICE_ERROR_EMPTY_TITLE = 5;
        public const SERVICE_ERROR_NOT_SOURCEOBJ = 6;
        public const SERVICE_ERROR_INVALID_EXT = 7;
        public const SERVICE_ERROR_FILE_TOO_BIG = 8;
        public const SERVICE_ERROR_SHOW_NOT_FOUND = 9;
        public const SERVICE_ERROR_USER_NOT_FOUND = 10;
        public const SERVICE_ERROR_GROUP_NOT_FOUND = 11;
        public const SERVICE_ERROR_MISSING_TAG = 12;
        public const SERVICE_ERROR_DAILY_LIMIT = 99;
        public const SERVICE_ERROR_ACCOUNT_BLOCKED = 100;
        public const SERVICE_UPLOAD_URI = 'https://www.slideshare.net/api/2/upload_slideshow';
        public const SERVICE_GET_SHOW_URI = 'https://www.slideshare.net/api/2/get_slideshow';
        public const SERVICE_GET_SHOW_BY_USER_URI = 'https://www.slideshare.net/api/2/get_slideshows_by_user';
        public const SERVICE_GET_SHOW_BY_TAG_URI = 'https://www.slideshare.net/api/2/get_slideshows_by_tag';
        public const SERVICE_GET_SHOW_BY_GROUP_URI = 'https://www.slideshare.net/api/2/get_slideshows_by_group';
        public const POWERPOINT_MIME_TYPE = 'application/vnd.ms-powerpoint';
        /**
         * @var string
         */
        public $_apiKey;
        /**
         * @var string
         */
        public $_sharedSecret;
        /**
         * @var string
         */
        public $_username;
        /**
         * @var string
         */
        public $_password;
        /**
         * @var Zend_Http_Client
         */
        public $_httpclient;
        /**
         * @var Zend_Cache_Core
         */
        public $_cacheobject;
        /**
         * @param Zend_Http_Client $client
         *
         * @return Zend_Service_SlideShare
         */
        public function setHttpClient(\Zend_Http_Client $client)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        /**
         * @param Zend_Cache_Core $cacheobject
         *
         * @return Zend_Service_SlideShare
         */
        public function setCacheObject(\Zend_Cache_Core $cacheobject)
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public function getCacheObject()
        {
        }
        /**
         * @return string
         */
        public function getUserName()
        {
        }
        /**
         * @param string $un
         *
         * @return Zend_Service_SlideShare
         */
        public function setUserName($un)
        {
        }
        /**
         * @return string
         */
        public function getPassword()
        {
        }
        /**
         * @param string $pw
         *
         * @return Zend_Service_SlideShare
         */
        public function setPassword($pw)
        {
        }
        /**
         * @return string
         */
        public function getApiKey()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_Service_SlideShare
         */
        public function setApiKey($key)
        {
        }
        /**
         * @return string
         */
        public function getSharedSecret()
        {
        }
        /**
         * @param string $secret
         *
         * @return Zend_Service_SlideShare
         */
        public function setSharedSecret($secret)
        {
        }
        /**
         * @param string $apikey
         * @param string $sharedSecret
         * @param null|string $username
         * @param null|string $password
         */
        public function __construct($apikey, $sharedSecret, $username = null, $password = null)
        {
        }
        /**
         * @param Zend_Service_SlideShare_SlideShow $ss
         * @param bool $makeSrcPublic
         *
         * @return Zend_Service_SlideShare_SlideShow
         *
         * @throws Zend_Service_SlideShare_Exception
         */
        public function uploadSlideShow(\Zend_Service_SlideShare_SlideShow $ss, $makeSrcPublic = true)
        {
        }
        /**
         * @param int $ssId
         *
         * @return Zend_Service_SlideShare_SlideShow
         *
         * @throws Zend_Service_SlideShare_Exception
         */
        public function getSlideShow($ssId)
        {
        }
        /**
         * @param string $username
         * @param int|null $offset
         * @param int|null $limit
         *
         * @return array<array-key, mixed>
         */
        public function getSlideShowsByUsername($username, $offset = null, $limit = null)
        {
        }
        /**
         * @param string $tag
         * @param int|null $offset
         * @param int|null $limit
         *
         * @return array<array-key, mixed>
         */
        public function getSlideShowsByTag($tag, $offset = null, $limit = null)
        {
        }
        /**
         * @param string $group
         * @param int|null $offset
         * @param int|null $limit
         *
         * @return array<array-key, mixed>
         */
        public function getSlideShowsByGroup($group, $offset = null, $limit = null)
        {
        }
        /**
         * @param string $key
         * @param string $value
         * @param int|null $offset
         * @param int|null $limit
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_SlideShare_Exception
         */
        public function _getSlideShowsByType($key, $value, $offset = null, $limit = null)
        {
        }
        /**
         * @param SimpleXMLElement $node
         *
         * @return Zend_Service_SlideShare_SlideShow
         *
         * @throws Zend_Service_SlideShare_Exception
         */
        public function _slideShowNodeToObject(\SimpleXMLElement $node)
        {
        }
    }
    class Zend_Service_SlideShare_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_SlideShare_SlideShow
    {
        public const STATUS_QUEUED = 0;
        public const STATUS_PROCESSING = 1;
        public const STATUS_READY = 2;
        public const STATUS_FAILED = 3;
        /**
         * @var string
         */
        public $_embedCode;
        /**
         * @var string
         */
        public $_thumbnailUrl;
        /**
         * @var string
         */
        public $_title;
        /**
         * @var string
         */
        public $_description;
        /**
         * @var int
         */
        public $_status;
        /**
         * @var string
         */
        public $_statusDescription;
        /**
         * @var string
         */
        public $_url;
        /**
         * @var int
         */
        public $_numViews;
        /**
         * @var int
         */
        public $_slideShowId;
        /**
         * @var string
         */
        public $_slideShowFilename;
        /**
         * @var array<array-key, mixed>
         */
        public $_tags;
        /**
         * @var string
         */
        public $_location;
        /**
         * @var string
         */
        public $_transcript;
        /**
         * @return string
         */
        public function getLocation()
        {
        }
        /**
         * @param string $loc
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setLocation($loc)
        {
        }
        /**
         * @return string
         */
        public function getTranscript()
        {
        }
        /**
         * @param string $t
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setTranscript($t)
        {
        }
        /**
         * @param string $tag
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function addTag($tag)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setTags(array $tags)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTags()
        {
        }
        /**
         * @param string $file
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setFilename($file)
        {
        }
        /**
         * @return string
         */
        public function getFilename()
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setId($id)
        {
        }
        /**
         * @return int
         */
        public function getId()
        {
        }
        /**
         * @param string $code
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setEmbedCode($code)
        {
        }
        /**
         * @return string
         */
        public function getEmbedCode()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setThumbnailUrl($url)
        {
        }
        /**
         * @return string
         */
        public function getThumbnailUrl()
        {
        }
        /**
         * @param string $title
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setTitle($title)
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @param string $desc
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setDescription($desc)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param int $status
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setStatus($status)
        {
        }
        /**
         * @return int
         */
        public function getStatus()
        {
        }
        /**
         * @param string $desc
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setStatusDescription($desc)
        {
        }
        /**
         * @return string
         */
        public function getStatusDescription()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setPermaLink($url)
        {
        }
        /**
         * @return string
         */
        public function getPermaLink()
        {
        }
        /**
         * @param string $url
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setUrl($url)
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @param int $views
         *
         * @return Zend_Service_SlideShare_SlideShow
         */
        public function setNumViews($views)
        {
        }
        /**
         * @return int
         */
        public function getNumViews()
        {
        }
    }
    class Zend_Service_SqlAzure_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_SqlAzure_Management_Client
    {
        public const URL_MANAGEMENT = 'https://management.database.windows.net:8443';
        public const OP_OPERATIONS = 'operations';
        public const OP_SERVERS = 'servers';
        public const OP_FIREWALLRULES = 'firewallrules';
        /**
         * @var string
         */
        public $_apiVersion;
        /**
         * @var string
         */
        public $_subscriptionId;
        /**
         * @var string
         */
        public $_certificatePath;
        /**
         * @var string
         */
        public $_certificatePassphrase;
        /**
         * @var Zend_Http_Client
         */
        public $_httpClientChannel;
        /**
         * @var Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract
         */
        public $_retryPolicy;
        /**
         * @var string
         */
        public $_lastRequestId;
        /**
         * @param string $subscriptionId
         * @param string $certificatePath
         * @param string $certificatePassphrase
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         */
        public function __construct($subscriptionId, $certificatePath, $certificatePassphrase, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param Zend_Http_Client_Adapter_Interface|string $adapterInstance
         */
        public function setHttpClientChannel($adapterInstance = 'Zend_Http_Client_Adapter_Socket')
        {
        }
        /**
         * @return Zend_Http_Client_Adapter_Interface
         */
        public function getHttpClientChannel()
        {
        }
        /**
         * @return string
         */
        public function getSubscriptionId()
        {
        }
        /**
         * @return string
         */
        public function getLastRequestId()
        {
        }
        /**
         * @return string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @param string $path
         * @param string $queryString
         * @param string $httpVerb
         * @param array<array-key, mixed> $headers
         * @param mixed|null $rawData
         *
         * @return Zend_Http_Response
         */
        public function _performRequest($path = '/', $queryString = '', $httpVerb, $headers = array(), $rawData = null)
        {
        }
        /**
         * @param Zend_Http_Response|null $response
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function _parseResponse(?\Zend_Http_Response $response = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function urlencode($value)
        {
        }
        /**
         * @return string
         */
        public static function createQueryStringFromArray($queryString)
        {
        }
        /**
         * @param Zend_Http_Response $response
         * @param string $alternativeError
         *
         * @return string
         */
        public function _getErrorMessage(\Zend_Http_Response $response, $alternativeError = 'Unknown error.')
        {
        }
        /**
         * @param string $administratorLogin
         * @param string $administratorPassword
         * @param string $location
         *
         * @return Zend_Service_SqlAzure_Management_ServerInstance
         *
         * @throws Zend_Service_SqlAzure_Management_Exception
         */
        public function createServer($administratorLogin, $administratorPassword, $location)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_SqlAzure_Management_Exception
         */
        public function listServers()
        {
        }
        /**
         * @param string $serverName
         *
         * @throws Zend_Service_SqlAzure_Management_Exception
         */
        public function dropServer($serverName)
        {
        }
        /**
         * @param string $serverName
         * @param string $administratorPassword
         *
         * @throws Zend_Service_SqlAzure_Management_Exception
         */
        public function setAdministratorPassword($serverName, $administratorPassword)
        {
        }
        /**
         * @param string $serverName
         * @param string $ruleName
         * @param string $startIpAddress
         * @param string $endIpAddress
         *
         * @return Zend_Service_SqlAzure_Management_FirewallRuleInstance
         *
         * @throws Zend_Service_SqlAzure_Management_Exception
         */
        public function createFirewallRule($serverName, $ruleName, $startIpAddress, $endIpAddress)
        {
        }
        /**
         * @param string $serverName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_SqlAzure_Management_Exception
         */
        public function listFirewallRules($serverName)
        {
        }
        /**
         * @param string $serverName
         * @param string $ruleName
         *
         * @throws Zend_Service_SqlAzure_Management_Exception
         */
        public function deleteFirewallRule($serverName, $ruleName)
        {
        }
        /**
         * @param string $serverName
         * @param bool $allowAccess
         *
         * @throws Zend_Service_SqlAzure_Management_Exception
         */
        public function createFirewallRuleForMicrosoftServices($serverName, $allowAccess)
        {
        }
    }
    class Zend_Service_SqlAzure_Management_Exception extends \Zend_Service_SqlAzure_Exception
    {
    }
    class Zend_Service_SqlAzure_Management_FirewallRuleInstance extends \Zend_Service_SqlAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $name
         * @param string $startIpAddress
         * @param string $endIpAddress
         */
        public function __construct($name, $startIpAddress, $endIpAddress)
        {
        }
    }
    class Zend_Service_SqlAzure_Management_ServerInstance extends \Zend_Service_SqlAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $name
         * @param string $administratorLogin
         * @param string $location
         */
        public function __construct($name, $administratorLogin, $location)
        {
        }
    }
    class Zend_Service_SqlAzure_Management_ServiceEntityAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param string $name
         * @param string $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         */
        public function __get($name)
        {
        }
    }
    class Zend_Service_StrikeIron
    {
        public $_options;
        /**
         * @param array<array-key, mixed> $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param null|string $options
         *
         * @return object
         *
         * @throws Zend_Service_StrikeIron_Exception
         */
        public function getService($options = array())
        {
        }
    }
    class Zend_Service_StrikeIron_Base
    {
        public $_options = 'Psalm could not infer this type';
        public $_outputHeaders = array();
        /**
         * @param array<array-key, mixed> $options
         *
         * @throws Zend_Service_StrikeIron_Exception
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         *
         * @throws Zend_Service_StrikeIron_Exception
         */
        public function __call($method, $params)
        {
        }
        /**
         * @return void
         */
        public function _initSoapClient()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Service_StrikeIron_Exception
         */
        public function _initSoapHeaders()
        {
        }
        /**
         * @param string $method
         *
         * @return array<array-key, mixed>
         */
        public function _transformCall($method, $params)
        {
        }
        /**
         * @param object $result
         * @param string $method
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         */
        public function _transformResult($result, $method, $params)
        {
        }
        /**
         * @return string
         */
        public function getWsdl()
        {
        }
        public function getSoapClient()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLastOutputHeaders()
        {
        }
        /**
         * @param bool $now
         * @param string $queryMethod
         *
         * @return Zend_Service_StrikeIron_Decorator
         *
         * @throws Zend_Service_StrikeIron_Exception
         */
        public function getSubscriptionInfo($now = false, $queryMethod = 'GetRemainingHits')
        {
        }
    }
    class Zend_Service_StrikeIron_Decorator
    {
        /**
         * @var null|string
         */
        public $_name;
        /**
         * @var object
         */
        public $_object;
        /**
         * @param object $object
         * @param null|string $name
         */
        public function __construct($object, $name = null)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function __get($property)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $property
         *
         * @return string
         */
        public function _inflect($property)
        {
        }
        /**
         * @param mixed $result
         *
         * @return mixed
         */
        public function _decorate($result)
        {
        }
        /**
         * @return object
         */
        public function getDecoratedObject()
        {
        }
        /**
         * @return null|string
         */
        public function getDecoratedObjectName()
        {
        }
    }
    class Zend_Service_StrikeIron_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_StrikeIron_SalesUseTaxBasic extends \Zend_Service_StrikeIron_Base
    {
        public $_options = 'Psalm could not infer this type';
    }
    class Zend_Service_StrikeIron_USAddressVerification extends \Zend_Service_StrikeIron_Base
    {
        public $_options = 'Psalm could not infer this type';
    }
    class Zend_Service_StrikeIron_ZipCodeInfo extends \Zend_Service_StrikeIron_Base
    {
        public $_options = 'Psalm could not infer this type';
    }
    class Zend_Service_Twitter
    {
        public const API_BASE_URI = 'https://api.twitter.com/1.1/';
        public const OAUTH_BASE_URI = 'https://api.twitter.com/oauth';
        public const STATUS_MAX_CHARACTERS = 246;
        /**
         * @var array<array-key, mixed>
         */
        public $cookieJar;
        /**
         * @var string
         */
        public $dateFormat;
        /**
         * @var Zend_Http_Client
         */
        public $httpClient;
        /**
         * @var string
         */
        public $methodType;
        /**
         * @var Zend_Oauth_Consumer
         */
        public $oauthConsumer;
        /**
         * @var array<array-key, mixed>
         */
        public $methodTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $options;
        /**
         * @var string
         */
        public $username;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         * @param Zend_Oauth_Consumer|null $consumer
         * @param Zend_Http_Client|null $httpClient
         */
        public function __construct($options = null, ?\Zend_Oauth_Consumer $consumer = null, ?\Zend_Http_Client $httpClient = null)
        {
        }
        /**
         * @param string $type
         *
         * @return Twitter
         *
         * @throws \Exception\DomainException
         */
        public function __get($type)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         *
         * @throws \Exception\BadMethodCallException
         */
        public function __call($method, $params)
        {
        }
        /**
         * @param Zend_Http_Client $client
         *
         * @return Zend_Service_Twitter
         */
        public function setHttpClient(\Zend_Http_Client $client)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        /**
         * @return string
         */
        public function getUsername()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Service_Twitter
         */
        public function setUsername($value)
        {
        }
        /**
         * @return bool
         */
        public function isAuthorised()
        {
        }
        /**
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function accountVerifyCredentials()
        {
        }
        /**
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function applicationRateLimitStatus()
        {
        }
        /**
         * @param int|string $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws \Exception\DomainException
         */
        public function blocksCreate($id)
        {
        }
        /**
         * @param int|string $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws \Exception\DomainException
         */
        public function blocksDestroy($id)
        {
        }
        /**
         * @param int $cursor
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws \Exception\DomainException
         */
        public function blocksIds($cursor = -1)
        {
        }
        /**
         * @param int $cursor
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws \Exception\DomainException
         */
        public function blocksList($cursor = -1)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function directMessagesDestroy($id)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function directMessagesMessages(array $options = array())
        {
        }
        /**
         * @param int|string $user
         * @param string $text
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws \Exception\InvalidArgumentException
         * @throws \Exception\OutOfRangeException
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function directMessagesNew($user, $text)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function directMessagesSent(array $options = array())
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function favoritesCreate($id)
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function favoritesDestroy($id)
        {
        }
        /**
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function favoritesList(array $options = array())
        {
        }
        /**
         * @param int|string $id
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function friendshipsCreate($id, array $params = array())
        {
        }
        /**
         * @param int|string $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function friendshipsDestroy($id)
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function searchTweets($query, array $options = array())
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function statusesDestroy($id)
        {
        }
        /**
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function statusesHomeTimeline(array $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function statusesMentionsTimeline(array $options = array())
        {
        }
        /**
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function statusesSample()
        {
        }
        /**
         * @param int $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function statusesShow($id)
        {
        }
        /**
         * @param string $status
         * @param int|null $inReplyToStatusId
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\OutOfRangeException
         * @throws \Exception\InvalidArgumentException
         * @throws \Exception\DomainException
         */
        public function statusesUpdate($status, $inReplyToStatusId = null)
        {
        }
        /**
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function statusesUserTimeline(array $options = array())
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function usersSearch($query, array $options = array())
        {
        }
        /**
         * @param int|string $id
         *
         * @return Zend_Service_Twitter_Response
         *
         * @throws Zend_Http_Client_Exception
         * @throws \Exception\DomainException
         */
        public function usersShow($id)
        {
        }
        /**
         * @return void
         *
         * @throws \Exception\DomainException
         */
        public function init()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Http_Client_Exception
         */
        public function validInteger($int)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         *
         * @throws \Exception\InvalidArgumentException
         */
        public function validateScreenName($name)
        {
        }
        /**
         * @param string $path
         * @param Zend_Http_Client $client
         *
         * @return void
         *
         * @throws Zend_Http_Client_Exception
         */
        public function prepare($path, \Zend_Http_Client $client)
        {
        }
        /**
         * @param string $path
         * @param array<array-key, mixed> $query
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Http_Client_Exception
         */
        public function get($path, array $query = array())
        {
        }
        /**
         * @param string $path
         * @param mixed|null $data
         *
         * @return Zend_Http_Response
         *
         * @throws Zend_Http_Client_Exception
         */
        public function post($path, $data = null)
        {
        }
        /**
         * @param mixed $method
         * @param mixed $data
         *
         * @return Zend_Http_Response
         */
        public function performPost($method, $data, \Zend_Http_Client $client)
        {
        }
        /**
         * @param int|string $id
         * @param array<array-key, mixed> $params
         *
         * @return array<array-key, mixed>
         */
        public function createUserParameter($id, array $params)
        {
        }
    }
    class Zend_Service_Twitter_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_Twitter_Response
    {
        /**
         * @var Zend_Http_Response
         */
        public $httpResponse;
        /**
         * @var array<array-key, mixed>|stdClass
         */
        public $jsonBody;
        /**
         * @var string
         */
        public $rawBody;
        /**
         * @param Zend_Http_Response $httpResponse
         *
         * @throws Zend_Service_Twitter_Exception
         */
        public function __construct(\Zend_Http_Response $httpResponse)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @return bool
         */
        public function isSuccess()
        {
        }
        /**
         * @return bool
         */
        public function isError()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws \Exception\DomainException
         */
        public function getErrors()
        {
        }
        /**
         * @return string
         */
        public function getRawResponse()
        {
        }
        /**
         * @return array<array-key, mixed>|stdClass
         */
        public function toValue()
        {
        }
    }
    class Zend_Service_WindowsAzure_CommandLine_Certificate extends \Zend_Service_Console_Command
    {
        public function listCertificatesCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName)
        {
        }
        public function addCertificateCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $certificateLocation, $certificatePassword, $waitForOperation = false)
        {
        }
        public function getCertificateCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $thumbprint, $algorithm = 'sha1')
        {
        }
        public function getCertificatePropertyCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $thumbprint, $algorithm = 'sha1', $property)
        {
        }
        public function deleteCertificateCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $thumbprint, $algorithm = 'sha1', $waitForOperation = false)
        {
        }
    }
    class Zend_Service_WindowsAzure_CommandLine_Deployment extends \Zend_Service_Console_Command
    {
        public function createFromStorageCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentName, $label, $staging = false, $production = false, $packageUrl, $serviceConfigurationLocation, $startImmediately = true, $warningsAsErrors = false, $waitForOperation = false)
        {
        }
        public function createFromLocalCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentName, $label, $staging = false, $production = false, $packageLocation, $serviceConfigurationLocation, $storageAccount, $startImmediately = true, $warningsAsErrors = false, $waitForOperation = false)
        {
        }
        public function getPropertiesCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName)
        {
        }
        public function getPropertyCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $property)
        {
        }
        public function swapCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $waitForOperation = false)
        {
        }
        public function deleteCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $waitForOperation = false)
        {
        }
        public function updateConfigurationCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $serviceConfigurationLocation, $waitForOperation = false)
        {
        }
        public function updateStatusCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $newStatus, $waitForOperation = false)
        {
        }
        public function editInstanceNumberCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $roleName, $newInstanceNumber = 1, $waitForOperation = false)
        {
        }
        public function rebootInstanceCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $instanceName, $waitForOperation = false)
        {
        }
        public function reimageInstanceCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $instanceName, $waitForOperation = false)
        {
        }
        public function upgradeFromStorageCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $label, $packageUrl, $serviceConfigurationLocation, $mode = 'auto', $roleName = null, $waitForOperation = false)
        {
        }
        public function upgradeFromLocalCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $label, $packageLocation, $serviceConfigurationLocation, $storageAccount, $mode = 'auto', $roleName = null, $waitForOperation = false)
        {
        }
        public function walkUpgradeDomainsCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $deploymentSlot, $deploymentName, $upgradeDomain, $waitForOperation = false)
        {
        }
    }
    class Zend_Service_WindowsAzure_CommandLine_GetAsynchronousOperation extends \Zend_Service_Console_Command
    {
        public function getInfoCommand($subscriptionId, $certificate, $certificatePassphrase, $requestId)
        {
        }
        public function waitForCommand($subscriptionId, $certificate, $certificatePassphrase, $requestId, $interval = 250)
        {
        }
    }
    class Zend_Service_WindowsAzure_CommandLine_Package extends \Zend_Service_Console_Command
    {
        public function scaffoldCommand($path, $scaffolder, $argv)
        {
        }
        public function createPackageCommand($path, $runDevFabric, $outputPath)
        {
        }
        public function createScaffolderCommand($rootPath, $scaffolderFile)
        {
        }
    }
    class Zend_Service_WindowsAzure_CommandLine_PackageScaffolder_PackageScaffolderAbstract
    {
        /**
         * @param Phar $phar
         * @param array<array-key, mixed> $options
         */
        public abstract function invoke(\Phar $phar, $rootPath, $options = array());
        /**
         * @param string $message
         * @param string $newLine
         */
        public function log($message, $newLine = true)
        {
        }
        /**
         * @param Phar $phar
         * @param string $path
         */
        public function extractResources(\Phar $phar, $path)
        {
        }
        /**
         * @param string $rootPath
         * @param array<array-key, mixed> $values
         */
        public function applyTransforms($rootPath, $values)
        {
        }
        /**
         * @param string $path
         * @param bool $abortIfExists
         * @param bool $recursive
         *
         * @return bool
         */
        public function createDirectory($path, $abortIfExists = true, $recursive = true)
        {
        }
        /**
         * @param string $sourcePath
         * @param string $destinationPath
         * @param bool $abortIfExists
         * @param octal $mode
         *
         * @return bool
         */
        public function copyDirectory($sourcePath, $destinationPath, $abortIfExists = true, $mode = '0775')
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        public function deleteDirectory($path)
        {
        }
    }
    class Zend_Service_WindowsAzure_CommandLine_Service extends \Zend_Service_Console_Command
    {
        public function listCommand($subscriptionId, $certificate, $certificatePassphrase)
        {
        }
        public function getPropertiesCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName)
        {
        }
        public function getPropertyCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $property)
        {
        }
        public function createCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $label, $description, $location, $affinityGroup, $waitForOperation = false)
        {
        }
        public function updateCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $label, $description, $waitForOperation = false)
        {
        }
        public function deleteCommand($subscriptionId, $certificate, $certificatePassphrase, $serviceName, $waitForOperation = false)
        {
        }
    }
    class Zend_Service_WindowsAzure_CommandLine_Storage extends \Zend_Service_Console_Command
    {
        public function listAccountsCommand($subscriptionId, $certificate, $certificatePassphrase)
        {
        }
        public function getPropertiesCommand($subscriptionId, $certificate, $certificatePassphrase, $accountName)
        {
        }
        public function getPropertyCommand($subscriptionId, $certificate, $certificatePassphrase, $accountName, $property)
        {
        }
        public function getKeysCommand($subscriptionId, $certificate, $certificatePassphrase, $accountName)
        {
        }
        public function getKeyCommand($subscriptionId, $certificate, $certificatePassphrase, $accountName, $key = 'primary')
        {
        }
        public function regenerateKeysCommand($subscriptionId, $certificate, $certificatePassphrase, $accountName, $key = 'primary', $waitForOperation = false)
        {
        }
    }
    class Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
    {
        public const DEVSTORE_ACCOUNT = 'devstoreaccount1';
        public const DEVSTORE_KEY = 'Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        public const PERMISSION_READ = 'r';
        public const PERMISSION_WRITE = 'w';
        public const PERMISSION_DELETE = 'd';
        public const PERMISSION_LIST = 'l';
        /**
         * @var string
         */
        public $_accountName;
        /**
         * @var string
         */
        public $_accountKey;
        /**
         * @var bool
         */
        public $_usePathStyleUri;
        /**
         * @param string $accountName
         * @param string $accountKey
         * @param bool $usePathStyleUri
         */
        public function __construct($accountName, $accountKey, $usePathStyleUri = false)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
         */
        public function setAccountName($value)
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
         */
        public function setAccountkey($value)
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
         */
        public function setUsePathStyleUri($value = false)
        {
        }
        /**
         * @param string $requestUrl
         * @param string $resourceType
         * @param string $requiredPermission
         *
         * @return string
         */
        public abstract function signRequestUrl($requestUrl = '', $resourceType, $requiredPermission);
        /**
         * @param string $httpVerb
         * @param string $path
         * @param string $queryString
         * @param array<array-key, mixed>|null $headers
         * @param bool $forTableStorage
         * @param string $resourceType
         * @param string $requiredPermission
         * @param mixed|null $rawData
         *
         * @return array<array-key, mixed>
         */
        public abstract function signRequestHeaders($httpVerb, $path = '/', $queryString = '', $headers = null, $forTableStorage = false, $resourceType, $requiredPermission, $rawData = null);
        /**
         * @param string $value
         *
         * @return string
         */
        public function _prepareQueryStringForSigning($value)
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function _makeArrayOfQueryString($value)
        {
        }
        /**
         * @param array<array-key, mixed> $array
         * @param mixed $key
         * @param mixed $valueIfNotSet
         *
         * @return mixed
         */
        public function _issetOr($array, $key, $valueIfNotSet)
        {
        }
    }
    class Zend_Service_WindowsAzure_Credentials_Exception extends \Zend_Service_WindowsAzure_Exception
    {
    }
    class Zend_Service_WindowsAzure_Credentials_SharedAccessSignature extends \Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
    {
        public const DEVSTORE_ACCOUNT = 'devstoreaccount1';
        public const DEVSTORE_KEY = 'Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        public const PERMISSION_READ = 'r';
        public const PERMISSION_WRITE = 'w';
        public const PERMISSION_DELETE = 'd';
        public const PERMISSION_LIST = 'l';
        /**
         * @var array<array-key, mixed>
         */
        public $_permissionSet;
        /**
         * @param string $accountName
         * @param string $accountKey
         * @param bool $usePathStyleUri
         * @param array<array-key, mixed> $permissionSet
         */
        public function __construct($accountName, $accountKey, $usePathStyleUri = false, $permissionSet = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPermissionSet()
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return void
         */
        public function setPermissionSet($value = array())
        {
        }
        /**
         * @param string $path
         * @param string $resource
         * @param string $permissions
         * @param string $start
         * @param string $expiry
         * @param string $identifier
         *
         * @return string
         */
        public function createSignature($path = '/', $resource = 'b', $permissions = 'r', $start = '', $expiry = '', $identifier = '')
        {
        }
        /**
         * @param string $path
         * @param string $queryString
         * @param string $resource
         * @param string $permissions
         * @param string $start
         * @param string $expiry
         * @param string $identifier
         *
         * @return string
         */
        public function createSignedQueryString($path = '/', $queryString = '', $resource = 'b', $permissions = 'r', $start = '', $expiry = '', $identifier = '')
        {
        }
        /**
         * @param string $permissionUrl
         * @param string $requestUrl
         * @param string $resourceType
         * @param string $requiredPermission
         *
         * @return string
         */
        public function permissionMatchesRequest($permissionUrl = '', $requestUrl = '', $resourceType, $requiredPermission)
        {
        }
        /**
         * @param string $requestUrl
         * @param string $resourceType
         * @param string $requiredPermission
         *
         * @return string
         */
        public function signRequestUrl($requestUrl = '', $resourceType, $requiredPermission)
        {
        }
        /**
         * @param string $httpVerb
         * @param string $path
         * @param string $queryString
         * @param array<array-key, mixed>|null $headers
         * @param bool $forTableStorage
         * @param string $resourceType
         * @param string $requiredPermission
         * @param mixed|null $rawData
         *
         * @return array<array-key, mixed>
         */
        public function signRequestHeaders($httpVerb, $path = '/', $queryString = '', $headers = null, $forTableStorage = false, $resourceType, $requiredPermission, $rawData = null)
        {
        }
    }
    class Zend_Service_WindowsAzure_Credentials_SharedKey extends \Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
    {
        public const DEVSTORE_ACCOUNT = 'devstoreaccount1';
        public const DEVSTORE_KEY = 'Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        public const PERMISSION_READ = 'r';
        public const PERMISSION_WRITE = 'w';
        public const PERMISSION_DELETE = 'd';
        public const PERMISSION_LIST = 'l';
        /**
         * @param string $requestUrl
         * @param string $resourceType
         * @param string $requiredPermission
         *
         * @return string
         */
        public function signRequestUrl($requestUrl = '', $resourceType, $requiredPermission)
        {
        }
        /**
         * @param string $httpVerb
         * @param string $path
         * @param string $queryString
         * @param array<array-key, mixed>|null $headers
         * @param bool $forTableStorage
         * @param string $resourceType
         * @param string $requiredPermission
         * @param mixed|null $rawData
         *
         * @return array<array-key, mixed>
         */
        public function signRequestHeaders($httpVerb, $path = '/', $queryString = '', $headers = null, $forTableStorage = false, $resourceType, $requiredPermission, $rawData = null)
        {
        }
    }
    class Zend_Service_WindowsAzure_Credentials_SharedKeyLite extends \Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
    {
        public const DEVSTORE_ACCOUNT = 'devstoreaccount1';
        public const DEVSTORE_KEY = 'Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        public const PERMISSION_READ = 'r';
        public const PERMISSION_WRITE = 'w';
        public const PERMISSION_DELETE = 'd';
        public const PERMISSION_LIST = 'l';
        /**
         * @param string $requestUrl
         * @param string $resourceType
         * @param string $requiredPermission
         *
         * @return string
         */
        public function signRequestUrl($requestUrl = '', $resourceType, $requiredPermission)
        {
        }
        /**
         * @param string $httpVerb
         * @param string $path
         * @param string $queryString
         * @param array<array-key, mixed>|null $headers
         * @param bool $forTableStorage
         * @param string $resourceType
         * @param string $requiredPermission
         * @param mixed|null $rawData
         *
         * @return array<array-key, mixed>
         */
        public function signRequestHeaders($httpVerb, $path = '/', $queryString = '', $headers = null, $forTableStorage = false, $resourceType, $requiredPermission, $rawData = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _prepareQueryStringForSigning($value)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_ConfigurationDataSources extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @param int $overallQuotaInMB
         */
        public function __construct($overallQuotaInMB = 0)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_ConfigurationDiagnosticInfrastructureLogs extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @param int $bufferQuotaInMB
         * @param int $scheduledTransferPeriodInMinutes
         * @param string $scheduledTransferLogLevelFilter
         */
        public function __construct($bufferQuotaInMB = 0, $scheduledTransferPeriodInMinutes = 0, $scheduledTransferLogLevelFilter)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_ConfigurationDirectories extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @param int $bufferQuotaInMB
         * @param int $scheduledTransferPeriodInMinutes
         */
        public function __construct($bufferQuotaInMB = 0, $scheduledTransferPeriodInMinutes = 0)
        {
        }
        /**
         * @param string $path
         * @param string $container
         * @param int $directoryQuotaInMB
         */
        public function addSubscription($path, $container, $directoryQuotaInMB = 1024)
        {
        }
        /**
         * @param string $path
         */
        public function removeSubscription($path)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_ConfigurationInstance extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        public function __construct()
        {
        }
        /**
         * @param string $configurationXml
         */
        public function loadXml($configurationXml)
        {
        }
        /**
         * @return string
         */
        public function toXml()
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_ConfigurationLogs extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @param int $bufferQuotaInMB
         * @param int $scheduledTransferPeriodInMinutes
         * @param string $scheduledTransferLogLevelFilter
         */
        public function __construct($bufferQuotaInMB = 0, $scheduledTransferPeriodInMinutes = 0, $scheduledTransferLogLevelFilter)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param string $name
         * @param string $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         */
        public function __get($name)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_ConfigurationPerformanceCounters extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @param int $bufferQuotaInMB
         * @param int $scheduledTransferPeriodInMinutes
         */
        public function __construct($bufferQuotaInMB = 0, $scheduledTransferPeriodInMinutes = 0)
        {
        }
        /**
         * @param string $counterSpecifier
         * @param int $sampleRateInSeconds
         */
        public function addSubscription($counterSpecifier, $sampleRateInSeconds = 1)
        {
        }
        /**
         * @param string $counterSpecifier
         */
        public function removeSubscription($counterSpecifier)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_ConfigurationWindowsEventLog extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @param int $bufferQuotaInMB
         * @param int $scheduledTransferPeriodInMinutes
         * @param string $scheduledTransferLogLevelFilter
         */
        public function __construct($bufferQuotaInMB = 0, $scheduledTransferPeriodInMinutes = 0, $scheduledTransferLogLevelFilter)
        {
        }
        /**
         * @param string $filter
         */
        public function addSubscription($filter)
        {
        }
        /**
         * @param string $filter
         */
        public function removeSubscription($filter)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_DirectoryConfigurationSubscription extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @param string $path
         * @param string $container
         * @param int $directoryQuotaInMB
         */
        public function __construct($path, $container, $directoryQuotaInMB = 1024)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_Exception extends \Zend_Service_WindowsAzure_Exception
    {
    }
    class Zend_Service_WindowsAzure_Diagnostics_LogLevel
    {
        public const UNDEFINED = 'Undefined';
        public const CRITICAL = 'Critical';
        public const ERROR = 'Error';
        public const WARNING = 'Warning';
        public const INFORMATION = 'Information';
        public const VERBOSE = 'Verbose';
    }
    class Zend_Service_WindowsAzure_Diagnostics_Manager
    {
        /**
         * @var Zend_Service_WindowsAzure_Storage_Blob
         */
        public $_blobStorageClient;
        /**
         * @var string
         */
        public $_controlContainer;
        /**
         * @param Zend_Service_WindowsAzure_Storage_Blob|null $blobStorageClient
         * @param string $controlContainer
         */
        public function __construct(?\Zend_Service_WindowsAzure_Storage_Blob $blobStorageClient = null, $controlContainer = 'wad-control-container')
        {
        }
        public function _ensureStorageInitialized()
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Diagnostics_ConfigurationInstance
         */
        public function getDefaultConfiguration()
        {
        }
        /**
         * @param null|string $roleInstance
         *
         * @return bool
         *
         * @throws Zend_Service_WindowsAzure_Diagnostics_Exception
         */
        public function configurationForRoleInstanceExists($roleInstance = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Service_WindowsAzure_Diagnostics_Exception
         */
        public function configurationForCurrentRoleInstanceExists()
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Diagnostics_ConfigurationInstance
         *
         * @throws Zend_Service_WindowsAzure_Diagnostics_Exception
         */
        public function getConfigurationForCurrentRoleInstance()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Service_WindowsAzure_Diagnostics_Exception
         */
        public function _getCurrentRoleInstanceId()
        {
        }
        /**
         * @param Zend_Service_WindowsAzure_Diagnostics_ConfigurationInstance $configuration
         *
         * @throws Zend_Service_WindowsAzure_Diagnostics_Exception
         */
        public function setConfigurationForCurrentRoleInstance(\Zend_Service_WindowsAzure_Diagnostics_ConfigurationInstance $configuration)
        {
        }
        /**
         * @param null|string $roleInstance
         *
         * @return Zend_Service_WindowsAzure_Diagnostics_ConfigurationInstance
         *
         * @throws Zend_Service_WindowsAzure_Diagnostics_Exception
         */
        public function getConfigurationForRoleInstance($roleInstance = null)
        {
        }
        /**
         * @param null|string $roleInstance
         * @param Zend_Service_WindowsAzure_Diagnostics_ConfigurationInstance $configuration
         *
         * @throws Zend_Service_WindowsAzure_Diagnostics_Exception
         */
        public function setConfigurationForRoleInstance($roleInstance = null, \Zend_Service_WindowsAzure_Diagnostics_ConfigurationInstance $configuration)
        {
        }
    }
    class Zend_Service_WindowsAzure_Diagnostics_PerformanceCounterSubscription extends \Zend_Service_WindowsAzure_Diagnostics_ConfigurationObjectBaseAbstract
    {
        /**
         * @param string $counterSpecifier
         * @param int $sampleRateInSeconds
         */
        public function __construct($counterSpecifier, $sampleRateInSeconds = 1)
        {
        }
    }
    class Zend_Service_WindowsAzure_Exception extends \Zend_Service_Exception
    {
    }
    class Zend_Service_WindowsAzure_Log_Exception extends \Zend_Service_WindowsAzure_Exception
    {
    }
    class Zend_Service_WindowsAzure_Log_Formatter_WindowsAzure implements \Zend_Log_Formatter_Interface
    {
        /**
         * @param array<array-key, mixed> $event
         *
         * @return Zend_Service_WindowsAzure_Storage_DynamicTableEntity
         */
        public function format($event)
        {
        }
    }
    class Zend_Service_WindowsAzure_Log_Writer_WindowsAzure extends \Zend_Log_Writer_Abstract
    {
        /**
         * @var Zend_Service_Log_Formatter_Interface
         */
        public $_formatter;
        /**
         * @var Zend_Service_Service_WindowsAzure_Storage_Table
         */
        public $_tableStorageConnection;
        /**
         * @var string
         */
        public $_tableName;
        /**
         * @var bool
         */
        public $_bufferMessages;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageBuffer;
        /**
         * @param Zend_Service_Service_WindowsAzure_Storage_Table|Zend_Service_WindowsAzure_Storage_Table $tableStorageConnection
         * @param string $tableName
         * @param bool $createTable
         * @param bool $bufferMessages
         *
         * @throws Zend_Service_Log_Exception
         */
        public function __construct(\Zend_Service_WindowsAzure_Storage_Table $tableStorageConnection, $tableName, $createTable = true, $bufferMessages = true)
        {
        }
        public function shutdown()
        {
        }
        /**
         * @param array<array-key, mixed> $config
         *
         * @return Zend_Service_Log_Writer_WindowsAzure
         *
         * @throws Zend_Service_Log_Exception
         */
        public static function factory($config)
        {
        }
        public function setFormatter(\Zend_Service_Log_Formatter_Interface $formatter)
        {
        }
        /**
         * @param array<array-key, mixed> $event
         *
         * @return void
         */
        public function _write($event)
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_AffinityGroupInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        public function __construct($name, $label, $description, $location, $hostedServices = array(), $storageServices = array())
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_CertificateInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $certificateUrl
         * @param string $thumbprint
         * @param string $thumbprintAlgorithm
         * @param string $data
         */
        public function __construct($certificateUrl, $thumbprint, $thumbprintAlgorithm, $data)
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_Client
    {
        public const URL_MANAGEMENT = 'https://management.core.windows.net';
        public const OP_OPERATIONS = 'operations';
        public const OP_STORAGE_ACCOUNTS = 'services/storageservices';
        public const OP_HOSTED_SERVICES = 'services/hostedservices';
        public const OP_AFFINITYGROUPS = 'affinitygroups';
        public const OP_LOCATIONS = 'locations';
        public const OP_OPERATINGSYSTEMS = 'operatingsystems';
        public const OP_OPERATINGSYSTEMFAMILIES = 'operatingsystemfamilies';
        /**
         * @var string
         */
        public $_apiVersion;
        /**
         * @var string
         */
        public $_subscriptionId;
        /**
         * @var string
         */
        public $_certificatePath;
        /**
         * @var string
         */
        public $_certificatePassphrase;
        /**
         * @var Zend_Http_Client
         */
        public $_httpClientChannel;
        /**
         * @var Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract
         */
        public $_retryPolicy;
        /**
         * @var string
         */
        public $_lastRequestId;
        /**
         * @param string $subscriptionId
         * @param string $certificatePath
         * @param string $certificatePassphrase
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         */
        public function __construct($subscriptionId, $certificatePath, $certificatePassphrase, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param Zend_Http_Client_Adapter_Interface|string $adapterInstance
         */
        public function setHttpClientChannel($adapterInstance = 'Zend_Http_Client_Adapter_Socket')
        {
        }
        /**
         * @return Zend_Http_Client_Adapter_Interface
         */
        public function getHttpClientChannel()
        {
        }
        /**
         * @return string
         */
        public function getSubscriptionId()
        {
        }
        /**
         * @return string
         */
        public function getLastRequestId()
        {
        }
        /**
         * @return string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @param string $path
         * @param string $queryString
         * @param string $httpVerb
         * @param array<array-key, mixed> $headers
         * @param mixed|null $rawData
         *
         * @return Zend_Http_Response
         */
        public function _performRequest($path = '/', $queryString = '', $httpVerb, $headers = array(), $rawData = null)
        {
        }
        /**
         * @param Zend_Http_Response|null $response
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function _parseResponse(?\Zend_Http_Response $response = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function urlencode($value)
        {
        }
        /**
         * @return string
         */
        public static function createQueryStringFromArray($queryString)
        {
        }
        /**
         * @param Zend_Http_Response $response
         * @param string $alternativeError
         *
         * @return string
         */
        public function _getErrorMessage(\Zend_Http_Response $response, $alternativeError = 'Unknown error.')
        {
        }
        /**
         * @param string $requestId
         *
         * @return Zend_Service_WindowsAzure_Management_OperationStatusInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function getOperationStatus($requestId = '')
        {
        }
        /**
         * @param string $startTime
         * @param string $endTime
         * @param null|string $objectIdFilter
         * @param null|string $operationResultFilter
         * @param null|string $continuationToken
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function listSubscriptionOperations($startTime, $endTime, $objectIdFilter = null, $operationResultFilter = null, $continuationToken = null)
        {
        }
        /**
         * @param string $requestId
         * @param int $sleepInterval
         *
         * @return Zend_Service_WindowsAzure_Management_OperationStatusInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function waitForOperation($requestId = '', $sleepInterval = 250)
        {
        }
        /**
         * @param string $serviceName
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         *
         * @return Zend_Service_WindowsAzure_Storage_Blob
         */
        public function createBlobClientForService($serviceName, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param string $serviceName
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         *
         * @return Zend_Service_WindowsAzure_Storage_Table
         */
        public function createTableClientForService($serviceName, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param string $serviceName
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         *
         * @return Zend_Service_WindowsAzure_Storage_Queue
         */
        public function createQueueClientForService($serviceName, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listStorageAccounts()
        {
        }
        /**
         * @param string $serviceName
         *
         * @return Zend_Service_WindowsAzure_Management_StorageServiceInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function getStorageAccountProperties($serviceName)
        {
        }
        /**
         * @param string $serviceName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function getStorageAccountKeys($serviceName)
        {
        }
        /**
         * @param string $serviceName
         * @param string $key
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function regenerateStorageAccountKey($serviceName, $key = 'primary')
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function listHostedServices()
        {
        }
        /**
         * @param string $serviceName
         * @param string $label
         * @param string $description
         * @param null|string $location
         * @param null|string $affinityGroup
         */
        public function createHostedService($serviceName, $label, $description = '', $location = null, $affinityGroup = null)
        {
        }
        /**
         * @param string $serviceName
         * @param string $label
         * @param string $description
         */
        public function updateHostedService($serviceName, $label, $description = '')
        {
        }
        /**
         * @param string $serviceName
         */
        public function deleteHostedService($serviceName)
        {
        }
        /**
         * @param string $serviceName
         *
         * @return Zend_Service_WindowsAzure_Management_HostedServiceInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function getHostedServiceProperties($serviceName)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         * @param string $name
         * @param string $label
         * @param string $packageUrl
         * @param string $configuration
         * @param bool $startDeployment
         * @param bool $treatWarningsAsErrors
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function createDeployment($serviceName, $deploymentSlot, $name, $label, $packageUrl, $configuration, $startDeployment = false, $treatWarningsAsErrors = false)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         *
         * @return Zend_Service_WindowsAzure_Management_DeploymentInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function getDeploymentBySlot($serviceName, $deploymentSlot)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentId
         *
         * @return Zend_Service_WindowsAzure_Management_DeploymentInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function getDeploymentByDeploymentId($serviceName, $deploymentId)
        {
        }
        /**
         * @param string $operationUrl
         *
         * @return Zend_Service_WindowsAzure_Management_DeploymentInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _getDeployment($operationUrl)
        {
        }
        /**
         * @param string $serviceName
         * @param string $productionDeploymentName
         * @param string $sourceDeploymentName
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function swapDeployment($serviceName, $productionDeploymentName, $sourceDeploymentName)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function deleteDeploymentBySlot($serviceName, $deploymentSlot)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentId
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function deleteDeploymentByDeploymentId($serviceName, $deploymentId)
        {
        }
        /**
         * @param string $operationUrl
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _deleteDeployment($operationUrl)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         * @param string $status
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function updateDeploymentStatusBySlot($serviceName, $deploymentSlot, $status = 'running')
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentId
         * @param string $status
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function updateDeploymentStatusByDeploymentId($serviceName, $deploymentId, $status = 'running')
        {
        }
        /**
         * @param string $operationUrl
         * @param string $status
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _updateDeploymentStatus($operationUrl, $status = 'running')
        {
        }
        /**
         * @param object $xmlService
         *
         * @return Zend_Service_WindowsAzure_Management_DeploymentInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _convertXmlElementToDeploymentInstance($xmlService)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         * @param array<array-key, mixed>|string $roleName
         * @param array<array-key, mixed>|string $instanceCount
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function setInstanceCountBySlot($serviceName, $deploymentSlot, $roleName, $instanceCount)
        {
        }
        /**
         * @param string $serviceName
         * @param array<array-key, mixed>|string $roleName
         * @param array<array-key, mixed>|string $instanceCount
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function setInstanceCountByDeploymentId($serviceName, $deploymentId, $roleName, $instanceCount)
        {
        }
        /**
         * @param array<array-key, mixed>|string $roleName
         * @param array<array-key, mixed>|string $instanceCount
         * @param string $configuration
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _updateInstanceCountInConfiguration($roleName, $instanceCount, $configuration)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         * @param string $configuration
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function configureDeploymentBySlot($serviceName, $deploymentSlot, $configuration)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentId
         * @param string $configuration
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function configureDeploymentByDeploymentId($serviceName, $deploymentId, $configuration)
        {
        }
        /**
         * @param string $operationUrl
         * @param string $configuration
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _configureDeployment($operationUrl, $configuration)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         * @param string $label
         * @param string $packageUrl
         * @param string $configuration
         * @param string $mode
         * @param null|string $roleToUpgrade
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function upgradeDeploymentBySlot($serviceName, $deploymentSlot, $label, $packageUrl, $configuration, $mode = 'auto', $roleToUpgrade = null)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentId
         * @param string $label
         * @param string $packageUrl
         * @param string $configuration
         * @param string $mode
         * @param null|string $roleToUpgrade
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function upgradeDeploymentByDeploymentId($serviceName, $deploymentId, $label, $packageUrl, $configuration, $mode = 'auto', $roleToUpgrade = null)
        {
        }
        /**
         * @param string $operationUrl
         * @param string $label
         * @param string $packageUrl
         * @param string $configuration
         * @param string $mode
         * @param string $roleToUpgrade
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _upgradeDeployment($operationUrl, $label, $packageUrl, $configuration, $mode, $roleToUpgrade)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         * @param int $upgradeDomain
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function walkUpgradeDomainBySlot($serviceName, $deploymentSlot, $upgradeDomain = 0)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentId
         * @param int $upgradeDomain
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function walkUpgradeDomainByDeploymentId($serviceName, $deploymentId, $upgradeDomain = 0)
        {
        }
        /**
         * @param string $operationUrl
         * @param int $upgradeDomain
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _walkUpgradeDomain($operationUrl, $upgradeDomain = 0)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         * @param string $roleInstanceName
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function rebootRoleInstanceBySlot($serviceName, $deploymentSlot, $roleInstanceName)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentId
         * @param string $roleInstanceName
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function rebootRoleInstanceByDeploymentId($serviceName, $deploymentId, $roleInstanceName)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentSlot
         * @param string $roleInstanceName
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function reimageRoleInstanceBySlot($serviceName, $deploymentSlot, $roleInstanceName)
        {
        }
        /**
         * @param string $serviceName
         * @param string $deploymentId
         * @param string $roleInstanceName
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function reimageRoleInstanceByDeploymentId($serviceName, $deploymentId, $roleInstanceName)
        {
        }
        /**
         * @param string $operationUrl
         * @param string $operation
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function _rebootOrReimageRoleInstance($operationUrl, $operation = 'reboot')
        {
        }
        /**
         * @param string $serviceName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function listCertificates($serviceName)
        {
        }
        /**
         * @param string $algorithm
         * @param string $thumbprint
         *
         * @return Zend_Service_WindowsAzure_Management_CertificateInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function getCertificate($serviceName, $algorithm = '', $thumbprint = '')
        {
        }
        /**
         * @param string $serviceName
         * @param string $certificateData
         * @param string $certificatePassword
         * @param string $certificateFormat
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function addCertificate($serviceName, $certificateData, $certificatePassword, $certificateFormat = 'pfx')
        {
        }
        /**
         * @param string $algorithm
         * @param string $thumbprint
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function deleteCertificate($serviceName, $algorithm = '', $thumbprint = '')
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function listAffinityGroups()
        {
        }
        /**
         * @param string $name
         * @param string $label
         * @param string $description
         * @param string $location
         */
        public function createAffinityGroup($name, $label, $description = '', $location = '')
        {
        }
        /**
         * @param string $name
         * @param string $label
         * @param string $description
         */
        public function updateAffinityGroup($name, $label, $description = '')
        {
        }
        /**
         * @param string $name
         */
        public function deleteAffinityGroup($name)
        {
        }
        /**
         * @param string $affinityGroupName
         *
         * @return Zend_Service_WindowsAzure_Management_AffinityGroupInstance
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function getAffinityGroupProperties($affinityGroupName)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function listLocations()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function listOperatingSystems()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Management_Exception
         */
        public function listOperatingSystemFamilies()
        {
        }
        /**
         * @param string $configuration
         *
         * @return string
         */
        public function _cleanConfiguration($configuration)
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_DeploymentInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $name
         * @param string $deploymentSlot
         * @param string $privateID
         * @param string $label
         * @param string $url
         * @param string $configuration
         * @param string $status
         * @param string $upgradeStatus
         * @param string $upgradeType
         * @param string $currentUpgradeDomainState
         * @param string $currentUpgradeDomain
         * @param string $upgradeDomainCount
         * @param array<array-key, mixed> $roleInstanceList
         * @param array<array-key, mixed> $roleList
         */
        public function __construct($name, $deploymentSlot, $privateID, $label, $url, $configuration, $status, $upgradeStatus, $upgradeType, $currentUpgradeDomainState, $currentUpgradeDomain, $upgradeDomainCount, $roleInstanceList = array(), $roleList = array())
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_Exception extends \Zend_Service_WindowsAzure_Exception
    {
    }
    class Zend_Service_WindowsAzure_Management_HostedServiceInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $url
         * @param string $serviceName
         * @param string $description
         * @param string $affinityGroup
         * @param string $location
         * @param string $label
         * @param array<array-key, mixed> $deployments
         */
        public function __construct($url, $serviceName, $description = '', $affinityGroup = '', $location = '', $label = '', $deployments = array())
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_LocationInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $name
         */
        public function __construct($name)
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_OperatingSystemFamilyInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $name
         * @param string $label
         * @param array<array-key, mixed> $operatingSystems
         */
        public function __construct($name, $label, $operatingSystems = array())
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_OperatingSystemInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $version
         * @param string $label
         * @param string $isDefault
         * @param string $isActive
         * @param string $family
         * @param string $familyLabel
         */
        public function __construct($version, $label, $isDefault, $isActive, $family, $familyLabel)
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_OperationStatusInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $id
         * @param string $status
         * @param string $errorCode
         * @param string $errorMessage
         */
        public function __construct($id, $status, $errorCode, $errorMessage)
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param string $name
         * @param string $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         */
        public function __get($name)
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_StorageServiceInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $url
         * @param string $serviceName
         * @param string $description
         * @param string $affinityGroup
         * @param string $location
         * @param string $label
         */
        public function __construct($url, $serviceName, $description = '', $affinityGroup = '', $location = '', $label = '')
        {
        }
    }
    class Zend_Service_WindowsAzure_Management_SubscriptionOperationInstance extends \Zend_Service_WindowsAzure_Management_ServiceEntityAbstract
    {
        /**
         * @param string $operationId
         * @param string $operationObjectId
         * @param string $operationName
         * @param array<array-key, mixed> $operationParameters
         * @param array<array-key, mixed> $operationCaller
         * @param array<array-key, mixed> $operationStatus
         */
        public function __construct($operationId, $operationObjectId, $operationName, $operationParameters = array(), $operationCaller = array(), $operationStatus = array())
        {
        }
        /**
         * @param string $name
         * @param string $value
         */
        public function addOperationParameter($name, $value)
        {
        }
    }
    class Zend_Service_WindowsAzure_RetryPolicy_Exception extends \Zend_Service_WindowsAzure_Exception
    {
    }
    class Zend_Service_WindowsAzure_RetryPolicy_NoRetry extends \Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract
    {
        /**
         * @param array<array-key, mixed>|string $function
         * @param array<array-key, mixed> $parameters
         *
         * @return mixed
         */
        public function execute($function, $parameters = array())
        {
        }
    }
    class Zend_Service_WindowsAzure_RetryPolicy_RetryN extends \Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract
    {
        /**
         * @var int
         */
        public $_retryCount;
        /**
         * @var int
         */
        public $_retryInterval;
        /**
         * @param int $count
         * @param int $intervalBetweenRetries
         */
        public function __construct($count = 1, $intervalBetweenRetries = 0)
        {
        }
        /**
         * @param array<array-key, mixed>|string $function
         * @param array<array-key, mixed> $parameters
         *
         * @return mixed
         */
        public function execute($function, $parameters = array())
        {
        }
    }
    class Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract
    {
        /**
         * @param array<array-key, mixed>|string $function
         * @param array<array-key, mixed> $parameters
         *
         * @return mixed
         */
        public abstract function execute($function, $parameters = array());
        /**
         * @return Zend_Service_WindowsAzure_RetryPolicy_NoRetry
         */
        public static function noRetry()
        {
        }
        /**
         * @param int $count
         * @param int $intervalBetweenRetries
         *
         * @return Zend_Service_WindowsAzure_RetryPolicy_RetryN
         */
        public static function retryN($count = 1, $intervalBetweenRetries = 0)
        {
        }
    }
    class Zend_Service_WindowsAzure_SessionHandler
    {
        public const MAX_TS_PROPERTY_SIZE = 65536;
        public const STORAGE_TYPE_TABLE = 'table';
        public const STORAGE_TYPE_BLOB = 'blob';
        /**
         * @var Zend_Service_WindowsAzure_Storage_Blob|Zend_Service_WindowsAzure_Storage_Table
         */
        public $_storage;
        /**
         * @var string
         */
        public $_storageType;
        /**
         * @var string
         */
        public $_sessionContainer;
        /**
         * @var string
         */
        public $_sessionContainerPartition;
        /**
         * @param Zend_Service_WindowsAzure_Storage_Blob|Zend_Service_WindowsAzure_Storage_Table $storage
         * @param string $sessionContainer
         * @param string $sessionContainerPartition
         */
        public function __construct(\Zend_Service_WindowsAzure_Storage $storage, $sessionContainer = 'phpsessions', $sessionContainerPartition = 'sessions')
        {
        }
        /**
         * @return bool
         */
        public function register()
        {
        }
        /**
         * @return bool
         */
        public function open()
        {
        }
        /**
         * @return bool
         */
        public function close()
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function read($id)
        {
        }
        /**
         * @param int $id
         * @param string $serializedData
         *
         * @throws Exception
         */
        public function write($id, $serializedData)
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        public function destroy($id)
        {
        }
        /**
         * @param int $lifeTime
         *
         * @return bool
         */
        public function gc($lifeTime)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage
    {
        public const URL_DEV_BLOB = '127.0.0.1:10000';
        public const URL_DEV_QUEUE = '127.0.0.1:10001';
        public const URL_DEV_TABLE = '127.0.0.1:10002';
        public const URL_CLOUD_BLOB = 'blob.core.windows.net';
        public const URL_CLOUD_QUEUE = 'queue.core.windows.net';
        public const URL_CLOUD_TABLE = 'table.core.windows.net';
        public const RESOURCE_UNKNOWN = 'unknown';
        public const RESOURCE_CONTAINER = 'c';
        public const RESOURCE_BLOB = 'b';
        public const RESOURCE_TABLE = 't';
        public const RESOURCE_ENTITY = 'e';
        public const RESOURCE_QUEUE = 'q';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        /**
         * @var string
         */
        public $_apiVersion;
        /**
         * @var string
         */
        public $_host;
        /**
         * @var string
         */
        public $_accountName;
        /**
         * @var string
         */
        public $_accountKey;
        /**
         * @var bool
         */
        public $_usePathStyleUri;
        /**
         * @var Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
         */
        public $_credentials;
        /**
         * @var Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract
         */
        public $_retryPolicy;
        /**
         * @var Zend_Http_Client
         */
        public $_httpClientChannel;
        /**
         * @var bool
         */
        public $_useProxy;
        /**
         * @var string
         */
        public $_proxyUrl;
        /**
         * @var int
         */
        public $_proxyPort;
        /**
         * @var string
         */
        public $_proxyCredentials;
        /**
         * @param string $host
         * @param string $accountName
         * @param string $accountKey
         * @param bool $usePathStyleUri
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         */
        public function __construct($host, $accountName, $accountKey, $usePathStyleUri = false, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param Zend_Http_Client_Adapter_Interface|string $adapterInstance
         */
        public function setHttpClientChannel($adapterInstance = 'Zend_Http_Client_Adapter_Proxy')
        {
        }
        /**
         * @return Zend_Http_Client_Adapter_Interface
         */
        public function getHttpClientChannel()
        {
        }
        /**
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         */
        public function setRetryPolicy(?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param bool $useProxy
         * @param string $proxyUrl
         * @param int $proxyPort
         * @param string $proxyCredentials
         */
        public function setProxy($useProxy = false, $proxyUrl = '', $proxyPort = 80, $proxyCredentials = '')
        {
        }
        /**
         * @return string
         */
        public function getAccountName()
        {
        }
        /**
         * @return string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @param Zend_Service_WindowsAzure_Credentials_CredentialsAbstract $credentials
         */
        public function setCredentials(\Zend_Service_WindowsAzure_Credentials_CredentialsAbstract $credentials)
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Credentials_CredentialsAbstract
         */
        public function getCredentials()
        {
        }
        /**
         * @param string $path
         * @param string $queryString
         * @param string $httpVerb
         * @param array<array-key, mixed> $headers
         * @param bool $forTableStorage
         * @param mixed|null $rawData
         * @param string $resourceType
         * @param string $requiredPermission
         *
         * @return Zend_Http_Response
         */
        public function _performRequest($path = '/', $queryString = '', $httpVerb, $headers = array(), $forTableStorage = false, $rawData = null, $resourceType, $requiredPermission)
        {
        }
        /**
         * @param Zend_Http_Response|null $response
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function _parseResponse(?\Zend_Http_Response $response = null)
        {
        }
        /**
         * @param array<array-key, mixed> $metadata
         *
         * @return HTTP
         */
        public function _generateMetadataHeaders($metadata = array())
        {
        }
        /**
         * @param array<array-key, mixed> $headers
         *
         * @return array<array-key, mixed>
         */
        public function _parseMetadataHeaders($headers = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _parseMetadataElement($element = null)
        {
        }
        /**
         * @param int|null $timestamp
         *
         * @return string
         */
        public function isoDate($timestamp = null)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public static function urlencode($value)
        {
        }
        /**
         * @param string $metadataName
         *
         * @return bool
         */
        public static function isValidMetadataName($metadataName = '')
        {
        }
        /**
         * @return string
         */
        public static function createQueryStringFromArray($queryString)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_Batch
    {
        /**
         * @var Zend_Service_WindowsAzure_Storage_BatchStorageAbstract
         */
        public $_storageClient;
        /**
         * @var bool
         */
        public $_forTableStorage;
        /**
         * @var string
         */
        public $_baseUrl;
        /**
         * @var unknown_type
         */
        public $_operations;
        /**
         * @var bool
         */
        public $_isSingleSelect;
        /**
         * @param Zend_Service_WindowsAzure_Storage_BatchStorageAbstract|null $storageClient
         */
        public function __construct(?\Zend_Service_WindowsAzure_Storage_BatchStorageAbstract $storageClient = null, $baseUrl = '')
        {
        }
        /**
         * @return string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function _beginBatch()
        {
        }
        public function _clean()
        {
        }
        /**
         * @param string $path
         * @param string $queryString
         * @param string $httpVerb
         * @param array<array-key, mixed> $headers
         * @param bool $forTableStorage
         * @param mixed|null $rawData
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function enlistOperation($path = '/', $queryString = '', $httpVerb, $headers = array(), $forTableStorage = false, $rawData = null)
        {
        }
        /**
         * @return Zend_Http_Response
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function commit()
        {
        }
        public function rollback()
        {
        }
        /**
         * @return int
         */
        public function getOperationCount()
        {
        }
        /**
         * @return bool
         */
        public function isSingleSelect()
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_BatchStorageAbstract extends \Zend_Service_WindowsAzure_Storage
    {
        public const URL_DEV_BLOB = '127.0.0.1:10000';
        public const URL_DEV_QUEUE = '127.0.0.1:10001';
        public const URL_DEV_TABLE = '127.0.0.1:10002';
        public const URL_CLOUD_BLOB = 'blob.core.windows.net';
        public const URL_CLOUD_QUEUE = 'queue.core.windows.net';
        public const URL_CLOUD_TABLE = 'table.core.windows.net';
        public const RESOURCE_UNKNOWN = 'unknown';
        public const RESOURCE_CONTAINER = 'c';
        public const RESOURCE_BLOB = 'b';
        public const RESOURCE_TABLE = 't';
        public const RESOURCE_ENTITY = 'e';
        public const RESOURCE_QUEUE = 'q';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        /**
         * @var Zend_Service_WindowsAzure_Storage_Batch
         */
        public $_currentBatch;
        /**
         * @param Zend_Service_WindowsAzure_Storage_Batch|null $batch
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function setCurrentBatch(?\Zend_Service_WindowsAzure_Storage_Batch $batch = null)
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Storage_Batch
         */
        public function getCurrentBatch()
        {
        }
        /**
         * @return bool
         */
        public function isInBatch()
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Storage_Batch
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function startBatch()
        {
        }
        /**
         * @param array<array-key, mixed> $operations
         * @param bool $forTableStorage
         * @param bool $isSingleSelect
         * @param string $resourceType
         * @param string $requiredPermission
         *
         * @return Zend_Http_Response
         */
        public function performBatch($operations = array(), $forTableStorage = false, $isSingleSelect = false, $resourceType, $requiredPermission)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_Blob extends \Zend_Service_WindowsAzure_Storage
    {
        public const URL_DEV_BLOB = '127.0.0.1:10000';
        public const URL_DEV_QUEUE = '127.0.0.1:10001';
        public const URL_DEV_TABLE = '127.0.0.1:10002';
        public const URL_CLOUD_BLOB = 'blob.core.windows.net';
        public const URL_CLOUD_QUEUE = 'queue.core.windows.net';
        public const URL_CLOUD_TABLE = 'table.core.windows.net';
        public const RESOURCE_UNKNOWN = 'unknown';
        public const RESOURCE_CONTAINER = 'c';
        public const RESOURCE_BLOB = 'b';
        public const RESOURCE_TABLE = 't';
        public const RESOURCE_ENTITY = 'e';
        public const RESOURCE_QUEUE = 'q';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        public const ACL_PRIVATE = null;
        public const ACL_PUBLIC = 'container';
        public const ACL_PUBLIC_BLOB = 'blob';
        public const ACL_PUBLIC_CONTAINER = 'container';
        public const LEASE_ACQUIRE = 'acquire';
        public const LEASE_RENEW = 'renew';
        public const LEASE_RELEASE = 'release';
        public const LEASE_BREAK = 'break';
        public const MAX_BLOB_SIZE = 67108864;
        public const MAX_BLOB_TRANSFER_SIZE = 4194304;
        public const BLOBTYPE_BLOCK = 'BlockBlob';
        public const BLOBTYPE_PAGE = 'PageBlob';
        public const PAGE_WRITE_UPDATE = 'update';
        public const PAGE_WRITE_CLEAR = 'clear';
        /**
         * @var array<array-key, mixed>
         */
        public static $_wrapperClients;
        /**
         * @var Zend_Service_WindowsAzure_Credentials_SharedAccessSignature
         */
        public $_sharedAccessSignatureCredentials;
        /**
         * @param string $host
         * @param string $accountName
         * @param string $accountKey
         * @param bool $usePathStyleUri
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         */
        public function __construct($host, $accountName, $accountKey, $usePathStyleUri = false, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param null|string $snapshotId
         *
         * @return bool
         */
        public function blobExists($containerName = '', $blobName = '', $snapshotId = null)
        {
        }
        /**
         * @param string $containerName
         *
         * @return bool
         */
        public function containerExists($containerName = '')
        {
        }
        /**
         * @param string $containerName
         * @param array<array-key, mixed> $metadata
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function createContainer($containerName = '', $metadata = array())
        {
        }
        /**
         * @param string $containerName
         * @param array<array-key, mixed> $metadata
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function createContainerIfNotExists($containerName = '', $metadata = array())
        {
        }
        /**
         * @param string $containerName
         * @param bool $signedIdentifiers
         *
         * @return string
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getContainerAcl($containerName = '', $signedIdentifiers = false)
        {
        }
        /**
         * @param string $containerName
         * @param bool $acl
         * @param array<array-key, mixed> $signedIdentifiers
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function setContainerAcl($containerName = '', $acl, $signedIdentifiers = array())
        {
        }
        /**
         * @param string $containerName
         *
         * @return Zend_Service_WindowsAzure_Storage_BlobContainer
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getContainer($containerName = '')
        {
        }
        /**
         * @param string $containerName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getContainerMetadata($containerName = '')
        {
        }
        /**
         * @param string $containerName
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function setContainerMetadata($containerName = '', $metadata = array(), $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function deleteContainer($containerName = '', $additionalHeaders = array())
        {
        }
        /**
         * @param null|string $prefix
         * @param int|null $maxResults
         * @param null|string $marker
         * @param null|string $include
         * @param int $currentResultCount
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function listContainers($prefix = null, $maxResults = null, $marker = null, $include = null, $currentResultCount = 0)
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param string $localFileName
         * @param array<array-key, mixed> $metadata
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function putBlob($containerName = '', $blobName = '', $localFileName = '', $metadata = array(), $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param mixed $data
         * @param array<array-key, mixed> $metadata
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function putBlobData($containerName = '', $blobName = '', $data = '', $metadata = array(), $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param string $localFileName
         * @param array<array-key, mixed> $metadata
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function putLargeBlob($containerName = '', $blobName = '', $localFileName = '', $metadata = array(), $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param string $identifier
         * @param array<array-key, mixed> $contents
         * @param null|string $leaseId
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function putBlock($containerName = '', $blobName = '', $identifier = '', $contents = '', $leaseId = null)
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param array<array-key, mixed> $blockList
         * @param array<array-key, mixed> $metadata
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function putBlockList($containerName = '', $blobName = '', $blockList = array(), $metadata = array(), $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param null|string $snapshotId
         * @param null|string $leaseId
         * @param int $type
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getBlockList($containerName = '', $blobName = '', $snapshotId = null, $leaseId = null, $type = 0)
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param int $size
         * @param array<array-key, mixed> $metadata
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function createPageBlob($containerName = '', $blobName = '', $size = 0, $metadata = array(), $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param int $startByteOffset
         * @param int $endByteOffset
         * @param mixed $contents
         * @param string $writeMethod
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function putPage($containerName = '', $blobName = '', $startByteOffset = 0, $endByteOffset = 0, $contents = '', $writeMethod, $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param int $startByteOffset
         * @param int $endByteOffset
         * @param null|string $leaseId
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getPageRegions($containerName = '', $blobName = '', $startByteOffset = 0, $endByteOffset = 0, $leaseId = null)
        {
        }
        /**
         * @param string $sourceContainerName
         * @param string $sourceBlobName
         * @param string $destinationContainerName
         * @param string $destinationBlobName
         * @param array<array-key, mixed> $metadata
         * @param null|string $sourceSnapshotId
         * @param null|string $destinationLeaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function copyBlob($sourceContainerName = '', $sourceBlobName = '', $destinationContainerName = '', $destinationBlobName = '', $metadata = array(), $sourceSnapshotId = null, $destinationLeaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param string $localFileName
         * @param null|string $snapshotId
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getBlob($containerName = '', $blobName = '', $localFileName = '', $snapshotId = null, $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param null|string $snapshotId
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @return mixed
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getBlobData($containerName = '', $blobName = '', $snapshotId = null, $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param null|string $snapshotId
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @return Zend_Service_WindowsAzure_Storage_BlobInstance
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getBlobInstance($containerName = '', $blobName = '', $snapshotId = null, $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param null|string $snapshotId
         * @param null|string $leaseId
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getBlobMetadata($containerName = '', $blobName = '', $snapshotId = null, $leaseId = null)
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param array<array-key, mixed> $metadata
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function setBlobMetadata($containerName = '', $blobName = '', $metadata = array(), $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function setBlobProperties($containerName = '', $blobName = '', $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param null|string $snapshotId
         * @param null|string $leaseId
         *
         * @return Zend_Service_WindowsAzure_Storage_BlobInstance
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getBlobProperties($containerName = '', $blobName = '', $snapshotId = null, $leaseId = null)
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param null|string $snapshotId
         * @param null|string $leaseId
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function deleteBlob($containerName = '', $blobName = '', $snapshotId = null, $leaseId = null, $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param array<array-key, mixed> $metadata
         * @param array<array-key, mixed> $additionalHeaders
         *
         * @return string
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function snapshotBlob($containerName = '', $blobName = '', $metadata = array(), $additionalHeaders = array())
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param string $leaseAction
         * @param null|string $leaseId
         *
         * @return Zend_Service_WindowsAzure_Storage_LeaseInstance
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function leaseBlob($containerName = '', $blobName = '', $leaseAction, $leaseId = null)
        {
        }
        /**
         * @param string $containerName
         * @param string $prefix
         * @param string $delimiter
         * @param int|null $maxResults
         * @param null|string $marker
         * @param null|string $include
         * @param int $currentResultCount
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function listBlobs($containerName = '', $prefix = '', $delimiter = '', $maxResults = null, $marker = null, $include = null, $currentResultCount = 0)
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         * @param string $resource
         * @param string $permissions
         * @param string $start
         * @param string $expiry
         * @param string $identifier
         *
         * @return string
         */
        public function generateSharedAccessUrl($containerName = '', $blobName = '', $resource = 'b', $permissions = 'r', $start = '', $expiry = '', $identifier = '')
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_WindowsAzure_Storage_Blob
         */
        public function registerAsClient($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_WindowsAzure_Storage_Blob
         */
        public function unregisterAsClient($name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_WindowsAzure_Storage_Blob
         */
        public static function getWrapperClient($name)
        {
        }
        /**
         * @param string $name
         */
        public function registerStreamWrapper($name = 'azure')
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_WindowsAzure_Storage_Blob
         */
        public function unregisterStreamWrapper($name = 'azure')
        {
        }
        /**
         * @param string $containerName
         * @param string $blobName
         *
         * @return string
         */
        public static function createResourceName($containerName = '', $blobName = '')
        {
        }
        /**
         * @param string $containerName
         *
         * @return bool
         */
        public static function isValidContainerName($containerName = '')
        {
        }
        /**
         * @param Zend_Http_Response $response
         * @param string $alternativeError
         *
         * @return string
         */
        public function _getErrorMessage(\Zend_Http_Response $response, $alternativeError = 'Unknown error.')
        {
        }
        /**
         * @param int $part
         *
         * @return string
         */
        public function _generateBlockId($part = 0)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_BlobContainer
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param string $name
         * @param string $etag
         * @param string $lastModified
         * @param array<array-key, mixed> $metadata
         */
        public function __construct($name, $etag, $lastModified, $metadata = array())
        {
        }
        /**
         * @param string $name
         * @param string $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         */
        public function __get($name)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_BlobInstance extends \Zend_Service_WindowsAzure_Storage_StorageEntityAbstract
    {
        /**
         * @param string $containerName
         * @param string $name
         * @param string $snapshotId
         * @param string $etag
         * @param string $lastModified
         * @param string $url
         * @param int $size
         * @param string $contentType
         * @param string $contentEncoding
         * @param string $contentLanguage
         * @param string $cacheControl
         * @param string $blobType
         * @param string $leaseStatus
         * @param bool $isPrefix
         * @param array<array-key, mixed> $metadata
         */
        public function __construct($containerName, $name, $snapshotId, $etag, $lastModified, $url = '', $size = 0, $contentType = '', $contentEncoding = '', $contentLanguage = '', $cacheControl = '', $blobType = '', $leaseStatus = '', $isPrefix = false, $metadata = array())
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_Blob_Stream
    {
        /**
         * @var string
         */
        public $_fileName;
        /**
         * @var string
         */
        public $_temporaryFileName;
        /**
         * @var resource
         */
        public $_temporaryFileHandle;
        /**
         * @var Zend_Service_WindowsAzure_Storage_Blob
         */
        public $_storageClient;
        /**
         * @var bool
         */
        public $_writeMode;
        /**
         * @var array<array-key, mixed>
         */
        public $_blobs;
        /**
         * @param string $path
         *
         * @return Zend_Service_WindowsAzure_Storage_Blob
         */
        public function _getStorageClient($path = '')
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        public function _getContainerName($path)
        {
        }
        /**
         * @param string $path
         *
         * @return string
         */
        public function _getFileName($path)
        {
        }
        /**
         * @param string $path
         * @param string $mode
         * @param int $options
         * @param string $opened_path
         *
         * @return bool
         */
        public function stream_open($path, $mode, $options, &$opened_path)
        {
        }
        /**
         * @return void
         */
        public function stream_close()
        {
        }
        /**
         * @param int $count
         *
         * @return string
         */
        public function stream_read($count)
        {
        }
        /**
         * @param string $data
         *
         * @return int
         */
        public function stream_write($data)
        {
        }
        /**
         * @return bool
         */
        public function stream_eof()
        {
        }
        /**
         * @return int
         */
        public function stream_tell()
        {
        }
        /**
         * @param int $offset
         * @param int $whence
         *
         * @return bool
         */
        public function stream_seek($offset, $whence)
        {
        }
        /**
         * @return bool
         */
        public function stream_flush()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function stream_stat()
        {
        }
        /**
         * @param string $path
         *
         * @return bool
         */
        public function unlink($path)
        {
        }
        /**
         * @param string $path_from
         * @param string $path_to
         *
         * @return bool
         */
        public function rename($path_from, $path_to)
        {
        }
        /**
         * @param string $path
         * @param int $flags
         *
         * @return array<array-key, mixed>
         */
        public function url_stat($path, $flags)
        {
        }
        /**
         * @param string $path
         * @param int $mode
         * @param int $options
         *
         * @return bool
         */
        public function mkdir($path, $mode, $options)
        {
        }
        /**
         * @param string $path
         * @param int $options
         *
         * @return bool
         */
        public function rmdir($path, $options)
        {
        }
        /**
         * @param string $path
         * @param int $options
         *
         * @return bool
         */
        public function dir_opendir($path, $options)
        {
        }
        /**
         * @return string
         */
        public function dir_readdir()
        {
        }
        /**
         * @return bool
         */
        public function dir_rewinddir()
        {
        }
        /**
         * @return bool
         */
        public function dir_closedir()
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_DynamicTableEntity extends \Zend_Service_WindowsAzure_Storage_TableEntity
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_dynamicProperties;
        /**
         * @param string $name
         * @param string $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @param null|string $type
         *
         * @return Zend_Service_WindowsAzure_Storage_DynamicTableEntity
         */
        public function setAzureProperty($name, $value = '', $type = null)
        {
        }
        /**
         * @param string $name
         * @param string $type
         *
         * @return Zend_Service_WindowsAzure_Storage_DynamicTableEntity
         */
        public function setAzurePropertyType($name, $type = 'Edm.String')
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_WindowsAzure_Storage_DynamicTableEntity
         */
        public function getAzureProperty($name)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getAzurePropertyType($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAzureValues()
        {
        }
        /**
         * @param array<array-key, mixed> $values
         * @param bool $throwOnError
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function setAzureValues($values = array(), $throwOnError = false)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_LeaseInstance extends \Zend_Service_WindowsAzure_Storage_StorageEntityAbstract
    {
        /**
         * @param string $containerName
         * @param string $name
         * @param string $leaseId
         * @param string $leaseTime
         */
        public function __construct($containerName, $name, $leaseId, $leaseTime)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_PageRegionInstance extends \Zend_Service_WindowsAzure_Storage_StorageEntityAbstract
    {
        /**
         * @param int $start
         * @param int $end
         */
        public function __construct($start = 0, $end = 0)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_Queue extends \Zend_Service_WindowsAzure_Storage
    {
        public const URL_DEV_BLOB = '127.0.0.1:10000';
        public const URL_DEV_QUEUE = '127.0.0.1:10001';
        public const URL_DEV_TABLE = '127.0.0.1:10002';
        public const URL_CLOUD_BLOB = 'blob.core.windows.net';
        public const URL_CLOUD_QUEUE = 'queue.core.windows.net';
        public const URL_CLOUD_TABLE = 'table.core.windows.net';
        public const RESOURCE_UNKNOWN = 'unknown';
        public const RESOURCE_CONTAINER = 'c';
        public const RESOURCE_BLOB = 'b';
        public const RESOURCE_TABLE = 't';
        public const RESOURCE_ENTITY = 'e';
        public const RESOURCE_QUEUE = 'q';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        public const MAX_MESSAGE_SIZE = 8388608;
        public const MAX_MESSAGE_TTL = 604800;
        /**
         * @param string $host
         * @param string $accountName
         * @param string $accountKey
         * @param bool $usePathStyleUri
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         */
        public function __construct($host, $accountName, $accountKey, $usePathStyleUri = false, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param string $queueName
         *
         * @return bool
         */
        public function queueExists($queueName = '')
        {
        }
        /**
         * @param string $queueName
         * @param array<array-key, mixed> $metadata
         *
         * @return object
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function createQueue($queueName = '', $metadata = array())
        {
        }
        /**
         * @param string $queueName
         * @param array<array-key, mixed> $metadata
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function createQueueIfNotExists($queueName = '', $metadata = array())
        {
        }
        /**
         * @param string $queueName
         *
         * @return Zend_Service_WindowsAzure_Storage_QueueInstance
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getQueue($queueName = '')
        {
        }
        /**
         * @param string $queueName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getQueueMetadata($queueName = '')
        {
        }
        /**
         * @param string $queueName
         * @param array<array-key, mixed> $metadata
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function setQueueMetadata($queueName = '', $metadata = array())
        {
        }
        /**
         * @param string $queueName
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function deleteQueue($queueName = '')
        {
        }
        /**
         * @param null|string $prefix
         * @param int|null $maxResults
         * @param null|string $marker
         * @param null|string $include
         * @param int $currentResultCount
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function listQueues($prefix = null, $maxResults = null, $marker = null, $include = null, $currentResultCount = 0)
        {
        }
        /**
         * @param string $queueName
         * @param string $message
         * @param int|null $ttl
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function putMessage($queueName = '', $message = '', $ttl = null)
        {
        }
        /**
         * @param string $queueName
         * @param string $numOfMessages
         * @param int|null $visibilityTimeout
         * @param string $peek
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function getMessages($queueName = '', $numOfMessages = 1, $visibilityTimeout = null, $peek = false)
        {
        }
        /**
         * @param string $queueName
         * @param string $numOfMessages
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function peekMessages($queueName = '', $numOfMessages = 1)
        {
        }
        /**
         * @param string $queueName
         *
         * @return bool
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function hasMessages($queueName = '')
        {
        }
        /**
         * @param string $queueName
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function clearMessages($queueName = '')
        {
        }
        /**
         * @param string $queueName
         * @param Zend_Service_WindowsAzure_Storage_QueueMessage $message
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function deleteMessage($queueName = '', \Zend_Service_WindowsAzure_Storage_QueueMessage $message)
        {
        }
        /**
         * @param string $queueName
         *
         * @return bool
         */
        public static function isValidQueueName($queueName = '')
        {
        }
        /**
         * @param Zend_Http_Response $response
         * @param string $alternativeError
         *
         * @return string
         */
        public function _getErrorMessage(\Zend_Http_Response $response, $alternativeError = 'Unknown error.')
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_QueueInstance extends \Zend_Service_WindowsAzure_Storage_StorageEntityAbstract
    {
        /**
         * @param string $name
         * @param array<array-key, mixed> $metadata
         */
        public function __construct($name, $metadata = array())
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_QueueMessage extends \Zend_Service_WindowsAzure_Storage_StorageEntityAbstract
    {
        /**
         * @param string $messageId
         * @param string $insertionTime
         * @param string $expirationTime
         * @param string $popReceipt
         * @param string $timeNextVisible
         * @param int $dequeueCount
         * @param string $messageText
         */
        public function __construct($messageId, $insertionTime, $expirationTime, $popReceipt, $timeNextVisible, $dequeueCount, $messageText)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_SignedIdentifier extends \Zend_Service_WindowsAzure_Storage_StorageEntityAbstract
    {
        /**
         * @param string $id
         * @param string $start
         * @param string $expiry
         * @param string $permissions
         */
        public function __construct($id = '', $start = '', $expiry = '', $permissions = '')
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_StorageEntityAbstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @param string $name
         * @param string $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         */
        public function __get($name)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_Table extends \Zend_Service_WindowsAzure_Storage_BatchStorageAbstract
    {
        public const URL_DEV_BLOB = '127.0.0.1:10000';
        public const URL_DEV_QUEUE = '127.0.0.1:10001';
        public const URL_DEV_TABLE = '127.0.0.1:10002';
        public const URL_CLOUD_BLOB = 'blob.core.windows.net';
        public const URL_CLOUD_QUEUE = 'queue.core.windows.net';
        public const URL_CLOUD_TABLE = 'table.core.windows.net';
        public const RESOURCE_UNKNOWN = 'unknown';
        public const RESOURCE_CONTAINER = 'c';
        public const RESOURCE_BLOB = 'b';
        public const RESOURCE_TABLE = 't';
        public const RESOURCE_ENTITY = 'e';
        public const RESOURCE_QUEUE = 'q';
        public const PREFIX_PROPERTIES = 'x-ms-prop-';
        public const PREFIX_METADATA = 'x-ms-meta-';
        public const PREFIX_STORAGE_HEADER = 'x-ms-';
        /**
         * @var bool
         */
        public $_throwExceptionOnMissingData;
        /**
         * @param bool $value
         */
        public function setThrowExceptionOnMissingData($value = true)
        {
        }
        public function getThrowExceptionOnMissingData()
        {
        }
        /**
         * @param string $host
         * @param string $accountName
         * @param string $accountKey
         * @param bool $usePathStyleUri
         * @param Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract|null $retryPolicy
         */
        public function __construct($host, $accountName, $accountKey, $usePathStyleUri = false, ?\Zend_Service_WindowsAzure_RetryPolicy_RetryPolicyAbstract $retryPolicy = null)
        {
        }
        /**
         * @param string $tableName
         *
         * @return bool
         */
        public function tableExists($tableName = '')
        {
        }
        /**
         * @param string $nextTableName
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function listTables($nextTableName = '')
        {
        }
        /**
         * @param string $tableName
         *
         * @return Zend_Service_WindowsAzure_Storage_TableInstance
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function createTable($tableName = '')
        {
        }
        /**
         * @param string $tableName
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function createTableIfNotExists($tableName = '')
        {
        }
        /**
         * @param string $tableName
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function deleteTable($tableName = '')
        {
        }
        /**
         * @param string $tableName
         * @param Zend_Service_WindowsAzure_Storage_TableEntity|null $entity
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntity
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function insertEntity($tableName = '', ?\Zend_Service_WindowsAzure_Storage_TableEntity $entity = null)
        {
        }
        /**
         * @param string $tableName
         * @param Zend_Service_WindowsAzure_Storage_TableEntity|null $entity
         * @param bool $verifyEtag
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function deleteEntity($tableName = '', ?\Zend_Service_WindowsAzure_Storage_TableEntity $entity = null, $verifyEtag = false)
        {
        }
        /**
         * @param string $tableName
         * @param string $partitionKey
         * @param string $rowKey
         * @param string $entityClass
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntity
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function retrieveEntityById($tableName, $partitionKey, $rowKey, $entityClass = 'Zend_Service_WindowsAzure_Storage_DynamicTableEntity')
        {
        }
        /**
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function select()
        {
        }
        /**
         * @param string $filter
         * @param string $entityClass
         * @param null|string $nextPartitionKey
         * @param null|string $nextRowKey
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function retrieveEntities($tableName = '', $filter = '', $entityClass = 'Zend_Service_WindowsAzure_Storage_DynamicTableEntity', $nextPartitionKey = null, $nextRowKey = null)
        {
        }
        /**
         * @param string $tableName
         * @param Zend_Service_WindowsAzure_Storage_TableEntity|null $entity
         * @param bool $verifyEtag
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function updateEntity($tableName = '', ?\Zend_Service_WindowsAzure_Storage_TableEntity $entity = null, $verifyEtag = false)
        {
        }
        /**
         * @param string $tableName
         * @param Zend_Service_WindowsAzure_Storage_TableEntity|null $entity
         * @param bool $verifyEtag
         * @param array<array-key, mixed> $properties
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function mergeEntity($tableName = '', ?\Zend_Service_WindowsAzure_Storage_TableEntity $entity = null, $verifyEtag = false, $properties = array())
        {
        }
        /**
         * @param Zend_Http_Response $response
         * @param string $alternativeError
         *
         * @return string
         */
        public function _getErrorMessage(\Zend_Http_Response $response, $alternativeError = 'Unknown error.')
        {
        }
        /**
         * @param string $httpVerb
         * @param string $tableName
         * @param Zend_Service_WindowsAzure_Storage_TableEntity|null $entity
         * @param bool $verifyEtag
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function _changeEntity($httpVerb, $tableName = '', ?\Zend_Service_WindowsAzure_Storage_TableEntity $entity = null, $verifyEtag = false)
        {
        }
        /**
         * @return string
         */
        public function _rfcDate()
        {
        }
        /**
         * @param string $templateText
         * @param array<array-key, mixed> $variables
         *
         * @return string
         */
        public function _fillTemplate($templateText, $variables = array())
        {
        }
        /**
         * @param Zend_Service_WindowsAzure_Storage_TableEntity|null $entity
         *
         * @return string
         */
        public function _generateAzureRepresentation(?\Zend_Service_WindowsAzure_Storage_TableEntity $entity = null)
        {
        }
        /**
         * @param string $path
         * @param string $queryString
         * @param string $httpVerb
         * @param array<array-key, mixed> $headers
         * @param bool $forTableStorage
         * @param mixed|null $rawData
         * @param string $resourceType
         * @param string $requiredPermission
         *
         * @return Zend_Http_Response
         */
        public function _performRequest($path = '/', $queryString = '', $httpVerb, $headers = array(), $forTableStorage = false, $rawData = null, $resourceType, $requiredPermission)
        {
        }
        /**
         * @param string $value
         *
         * @return DateTime|bool
         */
        public function _convertToDateTime($value = '')
        {
        }
        /**
         * @param DateTime $value
         *
         * @return string
         */
        public function _convertToEdmDateTime(\DateTime $value)
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_TableEntity
    {
        /**
         * @var string
         */
        public $_partitionKey;
        /**
         * @var string
         */
        public $_rowKey;
        /**
         * @var string
         */
        public $_timestamp;
        /**
         * @var string
         */
        public $_etag;
        /**
         * @param string $partitionKey
         * @param string $rowKey
         */
        public function __construct($partitionKey = '', $rowKey = '')
        {
        }
        /**
         * @return string
         */
        public function getPartitionKey()
        {
        }
        /**
         * @param string $value
         */
        public function setPartitionKey($value)
        {
        }
        /**
         * @return string
         */
        public function getRowKey()
        {
        }
        /**
         * @param string $value
         */
        public function setRowKey($value)
        {
        }
        /**
         * @return string
         */
        public function getTimestamp()
        {
        }
        /**
         * @param DateTime $value
         */
        public function setTimestamp(\DateTime $value)
        {
        }
        /**
         * @return string
         */
        public function getEtag()
        {
        }
        /**
         * @param string $value
         */
        public function setEtag($value = '')
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAzureValues()
        {
        }
        /**
         * @param array<array-key, mixed> $values
         * @param bool $throwOnError
         *
         * @throws Zend_Service_WindowsAzure_Exception
         */
        public function setAzureValues($values = array(), $throwOnError = false)
        {
        }
        /**
         * @param string $className
         *
         * @return array<array-key, mixed>
         */
        public static function getAzureAccessors($className = '')
        {
        }
        /**
         * @param ReflectionMethod|ReflectionProperty $member
         *
         * @return object
         */
        public static function getAzureAccessor($member)
        {
        }
        /**
         * @param string $value
         *
         * @return DateTime|bool
         */
        public function _convertToDateTime($value = '')
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_TableEntityQuery
    {
        /**
         * @var string
         */
        public $_from;
        /**
         * @var array<array-key, mixed>
         */
        public $_where;
        /**
         * @var array<array-key, mixed>
         */
        public $_orderBy;
        /**
         * @var int
         */
        public $_top;
        /**
         * @var string
         */
        public $_partitionKey;
        /**
         * @var string
         */
        public $_rowKey;
        /**
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function select()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function from($name)
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function wherePartitionKey($value = null)
        {
        }
        /**
         * @param null|string $value
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function whereRowKey($value = null)
        {
        }
        /**
         * @param string $condition
         * @param array<array-key, mixed>|null|string $value
         * @param string $cond
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function where($condition, $value = null, $cond = '')
        {
        }
        /**
         * @param string $condition
         * @param array<array-key, mixed>|null|string $value
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function andWhere($condition, $value = null)
        {
        }
        /**
         * @param string $condition
         * @param array<array-key, mixed>|null|string $value
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function orWhere($condition, $value = null)
        {
        }
        /**
         * @param string $column
         * @param string $direction
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function orderBy($column, $direction = 'asc')
        {
        }
        /**
         * @param int|null $top
         *
         * @return Zend_Service_WindowsAzure_Storage_TableEntityQuery
         */
        public function top($top = null)
        {
        }
        /**
         * @param bool $urlEncode
         *
         * @return string
         */
        public function assembleQueryString($urlEncode = false)
        {
        }
        /**
         * @param bool $includeParentheses
         *
         * @return string
         */
        public function assembleFrom($includeParentheses = true)
        {
        }
        /**
         * @return string
         */
        public function assembleQuery()
        {
        }
        /**
         * @param string $text
         * @param array<array-key, mixed>|null|string $value
         *
         * @return string
         */
        public function _quoteInto($text, $value = null)
        {
        }
        /**
         * @param string $text
         *
         * @return string
         */
        public function _replaceOperators($text)
        {
        }
        /**
         * @param string $query
         *
         * @return string
         */
        public static function encodeQuery($query)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Service_WindowsAzure_Storage_TableInstance extends \Zend_Service_WindowsAzure_Storage_StorageEntityAbstract
    {
        /**
         * @param string $id
         * @param string $name
         * @param string $href
         * @param string $updated
         */
        public function __construct($id, $name, $href, $updated)
        {
        }
    }
    class Zend_Service_Yahoo
    {
        /**
         * @var string
         */
        public $appId;
        /**
         * @var Zend_Rest_Client
         */
        public $_rest;
        /**
         * @param string $appId
         *
         * @return void
         */
        public function __construct($appId)
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Yahoo_ResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function inlinkDataSearch($query, array $options = array())
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Yahoo_ImageResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function imageSearch($query, array $options = array())
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Yahoo_LocalResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function localSearch($query, array $options = array())
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Yahoo_NewsResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function newsSearch($query, array $options = array())
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Yahoo_ResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function pageDataSearch($query, array $options = array())
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Yahoo_VideoResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function videoSearch($query, array $options = array())
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Service_Yahoo_WebResultSet
         *
         * @throws Zend_Service_Exception
         */
        public function webSearch($query, array $options = array())
        {
        }
        /**
         * @return Zend_Rest_Client
         */
        public function getRestClient()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateInlinkDataSearch(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateImageSearch(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateLocalSearch(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateNewsSearch(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validatePageDataSearch(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateVideoSearch(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateWebSearch(array $options)
        {
        }
        /**
         * @param string $query
         * @param array<array-key, mixed> $options
         * @param array<array-key, mixed> $defaultOptions
         *
         * @return array<array-key, mixed>
         */
        public function _prepareOptions($query, array $options, array $defaultOptions = array())
        {
        }
        /**
         * @param string $lang
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateLanguage($lang)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         * @param array<array-key, mixed> $validOptions
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _compareOptions(array $options, array $validOptions)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         * @param array<array-key, mixed> $array
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public function _validateInArray($name, $value, array $array)
        {
        }
        /**
         * @param DOMDocument $dom
         *
         * @return void
         *
         * @throws Zend_Service_Exception
         */
        public static function _checkErrors(\DOMDocument $dom)
        {
        }
    }
    class Zend_Service_Yahoo_Image
    {
        /**
         * @var string
         */
        public $Url;
        /**
         * @var int
         */
        public $Height;
        /**
         * @var int
         */
        public $Width;
        /**
         * @param DOMNode $dom
         * @param string $namespace
         *
         * @return void
         */
        public function __construct(\DOMNode $dom, $namespace)
        {
        }
    }
    class Zend_Service_Yahoo_ImageResult extends \Zend_Service_Yahoo_Result
    {
        /**
         * @var string
         */
        public $Summary;
        /**
         * @var string
         */
        public $RefererUrl;
        /**
         * @var string
         */
        public $FileSize;
        /**
         * @var string
         */
        public $FileFormat;
        /**
         * @var string
         */
        public $Height;
        /**
         * @var string
         */
        public $Width;
        /**
         * @var Zend_Service_Yahoo_Image
         */
        public $Thumbnail;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @param DOMElement $result
         *
         * @return void
         */
        public function __construct(\DOMElement $result)
        {
        }
    }
    class Zend_Service_Yahoo_ImageResultSet extends \Zend_Service_Yahoo_ResultSet
    {
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @return Zend_Service_Yahoo_ImageResult
         *
         * @throws Zend_Service_Exception
         */
        public function current()
        {
        }
    }
    class Zend_Service_Yahoo_InlinkDataResult extends \Zend_Service_Yahoo_Result
    {
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @param DOMElement $result
         *
         * @return void
         */
        public function __construct(\DOMElement $result)
        {
        }
    }
    class Zend_Service_Yahoo_InlinkDataResultSet extends \Zend_Service_Yahoo_ResultSet
    {
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @return Zend_Service_Yahoo_InlinkDataResult
         *
         * @throws Zend_Service_Exception
         */
        public function current()
        {
        }
    }
    class Zend_Service_Yahoo_LocalResult extends \Zend_Service_Yahoo_Result
    {
        /**
         * @var string
         */
        public $Address;
        /**
         * @var string
         */
        public $City;
        /**
         * @var string
         */
        public $State;
        /**
         * @var string
         */
        public $Phone;
        /**
         * @var string
         */
        public $Rating;
        /**
         * @var string
         */
        public $Distance;
        /**
         * @var string
         */
        public $MapUrl;
        /**
         * @var string
         */
        public $BusinessUrl;
        /**
         * @var string
         */
        public $BusinessClickUrl;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @param DOMElement $result
         *
         * @return void
         */
        public function __construct(\DOMElement $result)
        {
        }
    }
    class Zend_Service_Yahoo_LocalResultSet extends \Zend_Service_Yahoo_ResultSet
    {
        /**
         * @var string
         */
        public $resultSetMapURL;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @param DOMDocument $dom
         *
         * @return void
         */
        public function __construct(\DOMDocument $dom)
        {
        }
        /**
         * @return Zend_Service_Yahoo_LocalResult
         *
         * @throws Zend_Service_Exception
         */
        public function current()
        {
        }
    }
    class Zend_Service_Yahoo_NewsResult extends \Zend_Service_Yahoo_Result
    {
        /**
         * @var string
         */
        public $Summary;
        /**
         * @var string
         */
        public $NewsSource;
        /**
         * @var string
         */
        public $NewsSourceUrl;
        /**
         * @var string
         */
        public $Language;
        /**
         * @var string
         */
        public $PublishDate;
        /**
         * @var string
         */
        public $ModificationDate;
        /**
         * @var Zend_Service_Yahoo_Image
         */
        public $Thumbnail;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @param DOMElement $result
         *
         * @return void
         */
        public function __construct(\DOMElement $result)
        {
        }
    }
    class Zend_Service_Yahoo_NewsResultSet extends \Zend_Service_Yahoo_ResultSet
    {
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @return Zend_Service_Yahoo_NewsResult
         *
         * @throws Zend_Service_Exception
         */
        public function current()
        {
        }
    }
    class Zend_Service_Yahoo_PageDataResult extends \Zend_Service_Yahoo_Result
    {
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @param DOMElement $result
         *
         * @return void
         */
        public function __construct(\DOMElement $result)
        {
        }
    }
    class Zend_Service_Yahoo_PageDataResultSet extends \Zend_Service_Yahoo_ResultSet
    {
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @return Zend_Service_Yahoo_WebResult
         *
         * @throws Zend_Service_Exception
         */
        public function current()
        {
        }
    }
    class Zend_Service_Yahoo_Result
    {
        /**
         * @var string
         */
        public $Title;
        /**
         * @var string
         */
        public $Url;
        /**
         * @var string
         */
        public $ClickUrl;
        /**
         * @var array<array-key, mixed>
         */
        public $_fields;
        /**
         * @var DOMElement
         */
        public $_result;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @param DOMElement $result
         *
         * @return void
         */
        public function __construct(\DOMElement $result)
        {
        }
        /**
         * @return void
         */
        public function _setThumbnail()
        {
        }
    }
    class Zend_Service_Yahoo_ResultSet implements \SeekableIterator
    {
        /**
         * @var int
         */
        public $totalResultsAvailable;
        /**
         * @var int
         */
        public $totalResultsReturned;
        /**
         * @var int
         */
        public $firstResultPosition;
        /**
         * @var DOMNodeList
         */
        public $_results;
        /**
         * @var DOMDocument
         */
        public $_dom;
        /**
         * @var DOMXPath
         */
        public $_xpath;
        /**
         * @var int
         */
        public $_currentIndex;
        /**
         * @param DOMDocument $dom
         *
         * @return void
         */
        public function __construct(\DOMDocument $dom)
        {
        }
        /**
         * @return int
         */
        public function totalResults()
        {
        }
        /**
         * @return Zend_Service_Yahoo_Result
         *
         * @throws Zend_Service_Exception
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return void
         */
        public function next()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @param int $index
         *
         * @return void
         *
         * @throws OutOfBoundsException
         */
        public function seek($index)
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    class Zend_Service_Yahoo_VideoResult extends \Zend_Service_Yahoo_Result
    {
        /**
         * @var string
         */
        public $Summary;
        /**
         * @var string
         */
        public $RefererUrl;
        /**
         * @var string
         */
        public $FileSize;
        /**
         * @var string
         */
        public $FileFormat;
        /**
         * @var string
         */
        public $Height;
        /**
         * @var string
         */
        public $Width;
        /**
         * @var string
         */
        public $Duration;
        /**
         * @var string
         */
        public $Channels;
        /**
         * @var bool
         */
        public $Streaming;
        /**
         * @var Zend_Service_Yahoo_Video
         */
        public $Thumbnail;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @param DOMElement $result
         *
         * @return void
         */
        public function __construct(\DOMElement $result)
        {
        }
    }
    class Zend_Service_Yahoo_VideoResultSet extends \Zend_Service_Yahoo_ResultSet
    {
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @return Zend_Service_Yahoo_VideoResult
         *
         * @throws Zend_Service_Exception
         */
        public function current()
        {
        }
    }
    class Zend_Service_Yahoo_WebResult extends \Zend_Service_Yahoo_Result
    {
        /**
         * @var string
         */
        public $Summary;
        /**
         * @var string
         */
        public $MimeType;
        /**
         * @var string
         */
        public $ModificationDate;
        /**
         * @var string
         */
        public $CacheUrl;
        /**
         * @var int
         */
        public $CacheSize;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @param DOMElement $result
         *
         * @return void
         */
        public function __construct(\DOMElement $result)
        {
        }
    }
    class Zend_Service_Yahoo_WebResultSet extends \Zend_Service_Yahoo_ResultSet
    {
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @return Zend_Service_Yahoo_WebResult
         *
         * @throws Zend_Service_Exception
         */
        public function current()
        {
        }
    }
    class Zend_Session extends \Zend_Session_Abstract
    {
        public const _THROW_NOT_WRITABLE_MSG = 'Zend_Session is currently marked as read-only.';
        public const _THROW_NOT_READABLE_MSG = 'Zend_Session is not marked as readable.';
        /**
         * @var bool
         */
        public static $_unitTestEnabled;
        /**
         * @var bitset|bool
         */
        public static $_throwStartupExceptions;
        /**
         * @var bool
         */
        public static $_sessionStarted;
        /**
         * @var int
         */
        public static $_regenerateIdState;
        /**
         * @var array<array-key, mixed>
         */
        public static $_defaultOptions;
        /**
         * @var array<array-key, mixed>
         */
        public static $_localOptions;
        /**
         * @var bool
         */
        public static $_writeClosed;
        /**
         * @var bool
         */
        public static $_sessionCookieDeleted;
        /**
         * @var bool
         */
        public static $_destroyed;
        /**
         * @var bool
         */
        public static $_strict;
        /**
         * @var int
         */
        public static $_rememberMeSeconds;
        /**
         * @var bool
         */
        public static $_defaultOptionsSet;
        /**
         * @var Zend_Session_SaveHandler_Interface
         */
        public static $_saveHandler;
        public function __construct()
        {
        }
        /**
         * @param array<array-key, mixed> $userOptions
         *
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public static function setOptions(array $userOptions = array())
        {
        }
        /**
         * @param null|string $optionName
         *
         * @return array<array-key, mixed>|string
         */
        public static function getOptions($optionName = null)
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public static function setSaveHandler(\Zend_Session_SaveHandler_Interface $saveHandler)
        {
        }
        /**
         * @return Zend_Session_SaveHandler_Interface
         */
        public static function getSaveHandler()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public static function regenerateId()
        {
        }
        /**
         * @param int|null $seconds
         *
         * @return void
         */
        public static function rememberMe($seconds = null)
        {
        }
        /**
         * @return void
         */
        public static function forgetMe()
        {
        }
        /**
         * @param int $seconds
         *
         * @return void
         */
        public static function rememberUntil($seconds = 0)
        {
        }
        /**
         * @return bool
         */
        public static function sessionExists()
        {
        }
        /**
         * @return bool
         */
        public static function isDestroyed()
        {
        }
        /**
         * @param array<array-key, mixed>|bool $options
         *
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public static function start($options = false)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public static function _checkId($id)
        {
        }
        /**
         * @return void
         */
        public static function _processStartupMetadataGlobal()
        {
        }
        /**
         * @return bool
         */
        public static function isStarted()
        {
        }
        /**
         * @return bool
         */
        public static function isRegenerated()
        {
        }
        /**
         * @return string
         */
        public static function getId()
        {
        }
        /**
         * @param string $id
         *
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public static function setId($id)
        {
        }
        /**
         * @param Zend_Session_Validator_Interface $validator
         *
         * @return void
         */
        public static function registerValidator(\Zend_Session_Validator_Interface $validator)
        {
        }
        /**
         * @return void
         */
        public static function stop()
        {
        }
        /**
         * @param bool $readonly
         *
         * @return void
         */
        public static function writeClose($readonly = true)
        {
        }
        /**
         * @param bool $remove_cookie
         * @param bool $readonly
         *
         * @return void
         */
        public static function destroy($remove_cookie = true, $readonly = true)
        {
        }
        /**
         * @return void
         */
        public static function expireSessionCookie()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public static function _processValidators()
        {
        }
        /**
         * @param string $namespace
         *
         * @return bool
         */
        public static function namespaceIsset($namespace)
        {
        }
        /**
         * @param string $namespace
         *
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public static function namespaceUnset($namespace)
        {
        }
        /**
         * @param string $namespace
         *
         * @return array<array-key, mixed>
         */
        public static function namespaceGet($namespace)
        {
        }
        /**
         * @return ArrayObject
         *
         * @throws Zend_Session_Exception
         */
        public static function getIterator()
        {
        }
        /**
         * @return bool
         */
        public static function isWritable()
        {
        }
        /**
         * @return bool
         */
        public static function isReadable()
        {
        }
    }
    class Zend_Session_Abstract
    {
        public const _THROW_NOT_WRITABLE_MSG = 'Zend_Session is currently marked as read-only.';
        public const _THROW_NOT_READABLE_MSG = 'Zend_Session is not marked as readable.';
        /**
         * @var bool
         */
        public static $_writable;
        /**
         * @var bool
         */
        public static $_readable;
        /**
         * @var array<array-key, mixed>
         */
        public static $_expiringData;
        /**
         * @param string $namespace
         * @param null|string $name
         *
         * @return bool
         */
        public static function _namespaceIsset($namespace, $name = null)
        {
        }
        /**
         * @param string $namespace
         * @param null|string $name
         *
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public static function _namespaceUnset($namespace, $name = null)
        {
        }
        /**
         * @param string $namespace
         * @param null|string $name
         *
         * @return mixed
         */
        public static function _namespaceGet($namespace, $name = null)
        {
        }
        /**
         * @param string $namespace
         *
         * @return mixed
         */
        public static function _namespaceGetAll($namespace)
        {
        }
    }
    class Zend_Session_Exception extends \Zend_Exception
    {
        /**
         * @var string
         */
        public static $sessionStartError;
        /**
         * @param int $errno
         * @param string $errstr
         *
         * @return void
         */
        public static function handleSessionStartError($errno, $errstr, $errfile, $errline, $errcontext)
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         *
         * @return void
         */
        public static function handleSilentWriteClose($errno, $errstr, $errfile, $errline, $errcontext)
        {
        }
    }
    class Zend_Session_Namespace extends \Zend_Session_Abstract
    {
        public const _THROW_NOT_WRITABLE_MSG = 'Zend_Session is currently marked as read-only.';
        public const _THROW_NOT_READABLE_MSG = 'Zend_Session is not marked as readable.';
        public const SINGLE_INSTANCE = true;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @var array<array-key, mixed>
         */
        public static $_namespaceLocks;
        /**
         * @var array<array-key, mixed>
         */
        public static $_singleInstances;
        /**
         * @param null|string $namespaceName
         *
         * @return null
         */
        public static function resetSingleInstance($namespaceName = null)
        {
        }
        /**
         * @param string $namespace
         * @param bool $singleInstance
         *
         * @return void
         */
        public function __construct($namespace = 'Default', $singleInstance = false)
        {
        }
        /**
         * @return ArrayObject
         */
        public function getIterator()
        {
        }
        /**
         * @return void
         */
        public function lock()
        {
        }
        /**
         * @return void
         */
        public function unlock()
        {
        }
        /**
         * @return void
         */
        public static function unlockAll()
        {
        }
        /**
         * @return bool
         */
        public function isLocked()
        {
        }
        /**
         * @return true
         */
        public function unsetAll()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return true
         *
         * @throws Zend_Session_Exception
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param array<array-key, mixed>|string $callback
         */
        public function apply($callback)
        {
        }
        /**
         * @param array<array-key, mixed>|string $callback
         */
        public function applySet($callback)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return true
         */
        public function __unset($name)
        {
        }
        /**
         * @param int $seconds
         * @param mixed|null $variables
         *
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public function setExpirationSeconds($seconds, $variables = null)
        {
        }
        /**
         * @param int $hops
         * @param mixed|null $variables
         * @param bool $hopCountOnUsageOnly
         *
         * @return void
         *
         * @throws Zend_Session_Exception
         */
        public function setExpirationHops($hops, $variables = null, $hopCountOnUsageOnly = false)
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
    }
    class Zend_Session_SaveHandler_DbTable extends \Zend_Db_Table_Abstract
    {
        public const ADAPTER = 'db';
        public const DEFINITION = 'definition';
        public const DEFINITION_CONFIG_NAME = 'definitionConfigName';
        public const SCHEMA = 'schema';
        public const NAME = 'name';
        public const PRIMARY = 'primary';
        public const COLS = 'cols';
        public const METADATA = 'metadata';
        public const METADATA_CACHE = 'metadataCache';
        public const METADATA_CACHE_IN_CLASS = 'metadataCacheInClass';
        public const ROW_CLASS = 'rowClass';
        public const ROWSET_CLASS = 'rowsetClass';
        public const REFERENCE_MAP = 'referenceMap';
        public const DEPENDENT_TABLES = 'dependentTables';
        public const SEQUENCE = 'sequence';
        public const COLUMNS = 'columns';
        public const REF_TABLE_CLASS = 'refTableClass';
        public const REF_COLUMNS = 'refColumns';
        public const ON_DELETE = 'onDelete';
        public const ON_UPDATE = 'onUpdate';
        public const CASCADE = 'cascade';
        public const CASCADE_RECURSE = 'cascadeRecurse';
        public const RESTRICT = 'restrict';
        public const SET_NULL = 'setNull';
        public const DEFAULT_NONE = 'defaultNone';
        public const DEFAULT_CLASS = 'defaultClass';
        public const DEFAULT_DB = 'defaultDb';
        public const SELECT_WITH_FROM_PART = true;
        public const SELECT_WITHOUT_FROM_PART = false;
        public const PRIMARY_ASSIGNMENT = 'primaryAssignment';
        public const PRIMARY_ASSIGNMENT_SESSION_SAVE_PATH = 'sessionSavePath';
        public const PRIMARY_ASSIGNMENT_SESSION_NAME = 'sessionName';
        public const PRIMARY_ASSIGNMENT_SESSION_ID = 'sessionId';
        public const MODIFIED_COLUMN = 'modifiedColumn';
        public const LIFETIME_COLUMN = 'lifetimeColumn';
        public const DATA_COLUMN = 'dataColumn';
        public const LIFETIME = 'lifetime';
        public const OVERRIDE_LIFETIME = 'overrideLifetime';
        public const PRIMARY_TYPE_NUM = 'PRIMARY_TYPE_NUM';
        public const PRIMARY_TYPE_PRIMARYNUM = 'PRIMARY_TYPE_PRIMARYNUM';
        public const PRIMARY_TYPE_ASSOC = 'PRIMARY_TYPE_ASSOC';
        public const PRIMARY_TYPE_WHERECLAUSE = 'PRIMARY_TYPE_WHERECLAUSE';
        /**
         * @var array<array-key, mixed>
         */
        public $_primaryAssignment;
        /**
         * @var string
         */
        public $_modifiedColumn;
        /**
         * @var string
         */
        public $_lifetimeColumn;
        /**
         * @var string
         */
        public $_dataColumn;
        /**
         * @var int
         */
        public $_lifetime;
        /**
         * @var bool
         */
        public $_overrideLifetime;
        /**
         * @var string
         */
        public $_sessionSavePath;
        /**
         * @var string
         */
        public $_sessionName;
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         *
         * @return void
         *
         * @throws Zend_Session_SaveHandler_Exception
         */
        public function __construct($config)
        {
        }
        /**
         * @return void
         */
        public function __destruct()
        {
        }
        /**
         * @param int $lifetime
         * @param bool|null $overrideLifetime
         *
         * @return Zend_Session_SaveHandler_DbTable
         */
        public function setLifetime($lifetime, $overrideLifetime = null)
        {
        }
        /**
         * @return int
         */
        public function getLifetime()
        {
        }
        /**
         * @param bool $overrideLifetime
         *
         * @return Zend_Session_SaveHandler_DbTable
         */
        public function setOverrideLifetime($overrideLifetime)
        {
        }
        /**
         * @return bool
         */
        public function getOverrideLifetime()
        {
        }
        /**
         * @param string $save_path
         * @param string $name
         *
         * @return bool
         */
        public function open($save_path, $name)
        {
        }
        /**
         * @return bool
         */
        public function close()
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function read($id)
        {
        }
        /**
         * @param string $id
         * @param string $data
         *
         * @return bool
         */
        public function write($id, $data)
        {
        }
        /**
         * @param string $id
         *
         * @return bool
         */
        public function destroy($id)
        {
        }
        /**
         * @param int $maxlifetime
         *
         * @return true
         */
        public function gc($maxlifetime)
        {
        }
        /**
         * @return void
         */
        public function _setup()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Session_SaveHandler_Exception
         */
        public function _setupTableName()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Session_SaveHandler_Exception
         */
        public function _setupPrimaryAssignment()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Session_SaveHandler_Exception
         */
        public function _checkRequiredColumns()
        {
        }
        /**
         * @param string $id
         * @param null|string $type
         *
         * @return array<array-key, mixed>
         */
        public function _getPrimary($id, $type = null)
        {
        }
        /**
         * @param Zend_Db_Table_Row_Abstract $row
         *
         * @return int
         */
        public function _getLifetime(\Zend_Db_Table_Row_Abstract $row)
        {
        }
        /**
         * @param Zend_Db_Table_Row_Abstract $row
         *
         * @return int
         */
        public function _getExpirationTime(\Zend_Db_Table_Row_Abstract $row)
        {
        }
    }
    class Zend_Session_SaveHandler_Exception extends \Zend_Session_Exception
    {
    }
    interface Zend_Session_SaveHandler_Interface
    {
        /**
         * @param string $save_path
         * @param string $name
         */
        public function open($save_path, $name);
        public function close();
        /**
         * @param string $id
         */
        public function read($id);
        /**
         * @param string $id
         * @param mixed $data
         */
        public function write($id, $data);
        /**
         * @param string $id
         */
        public function destroy($id);
        /**
         * @param int $maxlifetime
         */
        public function gc($maxlifetime);
    }
    class Zend_Session_Validator_Abstract implements \Zend_Session_Validator_Interface
    {
        /**
         * @param mixed $data
         *
         * @return void
         */
        public function setValidData($data)
        {
        }
        /**
         * @return mixed
         */
        public function getValidData()
        {
        }
    }
    class Zend_Session_Validator_Exception extends \Zend_Session_Exception
    {
    }
    class Zend_Session_Validator_HttpUserAgent extends \Zend_Session_Validator_Abstract
    {
        /**
         * @return void
         */
        public function setup()
        {
        }
        /**
         * @return bool
         */
        public function validate()
        {
        }
    }
    interface Zend_Session_Validator_Interface
    {
        /**
         * @return void
         */
        public function setup();
        /**
         * @return bool
         */
        public function validate();
    }
    class Zend_Soap_AutoDiscover implements \Zend_Server_Interface
    {
        /**
         * @var Zend_Soap_Wsdl
         */
        public $_wsdl;
        /**
         * @var Zend_Server_Reflection
         */
        public $_reflection;
        /**
         * @var array<array-key, mixed>
         */
        public $_functions;
        /**
         * @var bool
         */
        public $_strategy;
        /**
         * @var WSDL
         */
        public $_uri;
        /**
         * @var array<array-key, mixed>
         */
        public $_operationBodyStyle;
        /**
         * @var array<array-key, mixed>
         */
        public $_bindingStyle;
        /**
         * @var string
         */
        public $_wsdlClass;
        /**
         * @param Zend_Soap_Wsdl_Strategy_Interface|bool|string $strategy
         * @param Zend_Uri|null|string $uri
         * @param null|string $wsdlClass
         */
        public function __construct($strategy = true, $uri = null, $wsdlClass = null)
        {
        }
        /**
         * @param Zend_Uri|string $uri
         *
         * @return Zend_Soap_AutoDiscover
         *
         * @throws Zend_Soap_AutoDiscover_Exception
         */
        public function setUri($uri)
        {
        }
        /**
         * @return Zend_Uri
         */
        public function getUri()
        {
        }
        /**
         * @param string $wsdlClass
         *
         * @return Zend_Soap_AutoDiscover
         *
         * @throws Zend_Soap_AutoDiscover_Exception
         */
        public function setWsdlClass($wsdlClass)
        {
        }
        /**
         * @return string
         */
        public function getWsdlClass()
        {
        }
        /**
         * @param array<array-key, mixed> $operationStyle
         *
         * @return Zend_Soap_AutoDiscover
         *
         * @throws Zend_Soap_AutoDiscover_Exception
         */
        public function setOperationBodyStyle(array $operationStyle = array())
        {
        }
        /**
         * @param array<array-key, mixed> $bindingStyle
         *
         * @return Zend_Soap_AutoDiscover
         */
        public function setBindingStyle(array $bindingStyle = array())
        {
        }
        /**
         * @return string
         */
        public function getSchema()
        {
        }
        /**
         * @return string
         */
        public function getHostName()
        {
        }
        /**
         * @return string
         */
        public function getRequestUriWithoutParameters()
        {
        }
        /**
         * @param Zend_Soap_Wsdl_Strategy_Interface|bool|string $strategy
         *
         * @return Zend_Soap_AutoDiscover
         */
        public function setComplexTypeStrategy($strategy)
        {
        }
        /**
         * @param string $class
         * @param string $namespace
         * @param array<array-key, mixed>|null $argv
         *
         * @return Zend_Soap_AutoDiscover
         */
        public function setClass($class, $namespace = '', $argv = null)
        {
        }
        /**
         * @param string $function
         * @param string $namespace
         *
         * @return Zend_Soap_AutoDiscover
         */
        public function addFunction($function, $namespace = '')
        {
        }
        /**
         * @param Zend_Server_Reflection_Function_Abstract $function
         * @param Zend_Soap_Wsdl $wsdl
         * @param object $port
         * @param object $binding
         *
         * @return void
         */
        public function _addFunctionToWsdl($function, $wsdl, $port, $binding)
        {
        }
        /**
         * @param null|string $fault
         * @param int|null|string $code
         *
         * @throws Zend_Soap_AutoDiscover_Exception
         */
        public function fault($fault = null, $code = null)
        {
        }
        /**
         * @param string $request
         */
        public function handle($request = false)
        {
        }
        /**
         * @param string $filename
         *
         * @return bool
         *
         * @throws Zend_Soap_AutoDiscover_Exception
         */
        public function dump($filename)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Soap_AutoDiscover_Exception
         */
        public function toXml()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFunctions()
        {
        }
        /**
         * @param unknown_type $definition
         *
         * @throws Zend_Soap_AutoDiscover_Exception
         */
        public function loadFunctions($definition)
        {
        }
        /**
         * @param int $mode
         *
         * @throws Zend_Soap_AutoDiscover_Exception
         */
        public function setPersistence($mode)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function getType($type)
        {
        }
    }
    class Zend_Soap_AutoDiscover_Exception extends \Zend_Exception
    {
    }
    class Zend_Soap_Client
    {
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var array<array-key, mixed>
         */
        public $_classmap;
        /**
         * @var array<array-key, mixed>
         */
        public $_faultExceptions;
        /**
         * @var int
         */
        public $_soapVersion;
        public $_uri = null;
        public $_location = null;
        public $_style = null;
        public $_use = null;
        public $_login = null;
        public $_password = null;
        public $_proxy_host = null;
        public $_proxy_port = null;
        public $_proxy_login = null;
        public $_proxy_password = null;
        public $_local_cert = null;
        public $_passphrase = null;
        public $_compression = null;
        public $_connection_timeout = null;
        public $_stream_context = null;
        public $_features = null;
        public $_cache_wsdl = null;
        public $_user_agent = null;
        public $_exceptions = null;
        /**
         * @var string
         */
        public $_wsdl;
        /**
         * @var SoapClient
         */
        public $_soapClient;
        /**
         * @var string
         */
        public $_lastMethod;
        /**
         * @var array<array-key, mixed>
         */
        public $_soapInputHeaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_permanentSoapInputHeaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_soapOutputHeaders;
        /**
         * @param null|string $wsdl
         * @param array<array-key, mixed>|null $options
         */
        public function __construct($wsdl = null, $options = null)
        {
        }
        /**
         * @param string $wsdl
         *
         * @return Zend_Soap_Client
         */
        public function setWsdl($wsdl)
        {
        }
        /**
         * @return string
         */
        public function getWsdl()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_SoapClient_Exception
         */
        public function setOptions($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param int $version
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function setSoapVersion($version)
        {
        }
        /**
         * @return int
         */
        public function getSoapVersion()
        {
        }
        /**
         * @param array<array-key, mixed> $classmap
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function setClassmap(array $classmap)
        {
        }
        /**
         * @return mixed
         */
        public function getClassmap()
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $urn
         *
         * @return true
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function validateUrn($urn)
        {
        }
        /**
         * @param string $uri
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function setUri($uri)
        {
        }
        /**
         * @return string
         */
        public function getUri()
        {
        }
        /**
         * @param string $location
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function setLocation($location)
        {
        }
        /**
         * @return string
         */
        public function getLocation()
        {
        }
        /**
         * @param int $style
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function setStyle($style)
        {
        }
        /**
         * @return int
         */
        public function getStyle()
        {
        }
        /**
         * @param int $use
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function setEncodingMethod($use)
        {
        }
        /**
         * @return int
         */
        public function getEncodingMethod()
        {
        }
        /**
         * @param string $login
         *
         * @return Zend_Soap_Client
         */
        public function setHttpLogin($login)
        {
        }
        /**
         * @return string
         */
        public function getHttpLogin()
        {
        }
        /**
         * @param string $password
         *
         * @return Zend_Soap_Client
         */
        public function setHttpPassword($password)
        {
        }
        /**
         * @return string
         */
        public function getHttpPassword()
        {
        }
        /**
         * @param string $proxyHost
         *
         * @return Zend_Soap_Client
         */
        public function setProxyHost($proxyHost)
        {
        }
        /**
         * @return string
         */
        public function getProxyHost()
        {
        }
        /**
         * @param int $proxyPort
         *
         * @return Zend_Soap_Client
         */
        public function setProxyPort($proxyPort)
        {
        }
        /**
         * @return int
         */
        public function getProxyPort()
        {
        }
        /**
         * @param string $proxyLogin
         *
         * @return Zend_Soap_Client
         */
        public function setProxyLogin($proxyLogin)
        {
        }
        /**
         * @return string
         */
        public function getProxyLogin()
        {
        }
        /**
         * @return Zend_Soap_Client
         */
        public function setProxyPassword($proxyPassword)
        {
        }
        /**
         * @param string $localCert
         *
         * @return Zend_Soap_Client
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function setHttpsCertificate($localCert)
        {
        }
        /**
         * @return string
         */
        public function getHttpsCertificate()
        {
        }
        /**
         * @param string $passphrase
         *
         * @return Zend_Soap_Client
         */
        public function setHttpsCertPassphrase($passphrase)
        {
        }
        /**
         * @return string
         */
        public function getHttpsCertPassphrase()
        {
        }
        /**
         * @param int|null $compressionOptions
         *
         * @return Zend_Soap_Client
         */
        public function setCompressionOptions($compressionOptions)
        {
        }
        /**
         * @return int
         */
        public function getCompressionOptions()
        {
        }
        /**
         * @return string
         */
        public function getProxyPassword()
        {
        }
        /**
         * @return Zend_Soap_Client
         */
        public function setStreamContext($context)
        {
        }
        /**
         * @return resource
         */
        public function getStreamContext()
        {
        }
        /**
         * @param int|string $feature
         *
         * @return Zend_Soap_Client
         */
        public function setSoapFeatures($feature)
        {
        }
        /**
         * @return int
         */
        public function getSoapFeatures()
        {
        }
        /**
         * @param bool|int|null|string $caching
         *
         * @return Zend_Soap_Client
         */
        public function setWsdlCache($caching)
        {
        }
        /**
         * @return int
         */
        public function getWsdlCache()
        {
        }
        /**
         * @param null|string $userAgent
         *
         * @return Zend_Soap_Client
         */
        public function setUserAgent($userAgent)
        {
        }
        /**
         * @return null|string
         */
        public function getUserAgent()
        {
        }
        /**
         * @param bool $exceptions
         *
         * @return static
         */
        public function setExceptions($exceptions)
        {
        }
        /**
         * @return bool|null
         */
        public function getExceptions()
        {
        }
        /**
         * @return string
         */
        public function getLastRequest()
        {
        }
        /**
         * @return string
         */
        public function getLastResponse()
        {
        }
        /**
         * @return string
         */
        public function getLastRequestHeaders()
        {
        }
        /**
         * @return string
         */
        public function getLastResponseHeaders()
        {
        }
        /**
         * @return string
         */
        public function getLastMethod()
        {
        }
        /**
         * @param Zend_Soap_Client_Common $client
         * @param string $request
         * @param string $location
         * @param string $action
         * @param int $version
         * @param int|null $one_way
         *
         * @return mixed
         */
        public function _doRequest(\Zend_Soap_Client_Common $client, $request, $location, $action, $version, $one_way = null)
        {
        }
        /**
         * @throws Zend_Soap_Client_Exception
         */
        public function _initSoapClientObject()
        {
        }
        /**
         * @param array<array-key, mixed> $arguments
         */
        public function _preProcessArguments($arguments)
        {
        }
        public function _preProcessResult($result)
        {
        }
        /**
         * @param SoapHeader $header
         * @param bool $permanent
         *
         * @return Zend_Soap_Client
         */
        public function addSoapInputHeader(\SoapHeader $header, $permanent = false)
        {
        }
        /**
         * @return Zend_Soap_Client
         */
        public function resetSoapInputHeaders()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLastSoapOutputHeaderObjects()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $arguments
         *
         * @return mixed
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function getFunctions()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function getTypes()
        {
        }
        /**
         * @param SoapClient $soapClient
         *
         * @return Zend_Soap_Client
         */
        public function setSoapClient(\SoapClient $soapClient)
        {
        }
        /**
         * @return SoapClient
         */
        public function getSoapClient()
        {
        }
        /**
         * @return Zend_Soap_Client
         */
        public function setCookie($cookieName, $cookieValue = null)
        {
        }
    }
    class Zend_Soap_Client_Common extends \SoapClient
    {
        /**
         * @var callback
         */
        public $_doRequestCallback;
        /**
         * @param string $wsdl
         * @param array<array-key, mixed> $options
         */
        public function __construct($doRequestCallback, $wsdl, $options)
        {
        }
        /**
         * @param string $request
         * @param string $location
         * @param string $action
         * @param int $version
         * @param int|null $one_way
         *
         * @return mixed
         */
        public function __doRequest($request, $location, $action, $version, $one_way = null)
        {
        }
    }
    class Zend_Soap_Client_DotNet extends \Zend_Soap_Client
    {
        /**
         * @param null|string $wsdl
         * @param array<array-key, mixed>|null $options
         */
        public function __construct($wsdl = null, $options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $arguments
         *
         * @throws Zend_Soap_Client_Exception
         */
        public function _preProcessArguments($arguments)
        {
        }
        public function _preProcessResult($result)
        {
        }
    }
    class Zend_Soap_Client_Exception extends \Zend_Exception
    {
    }
    class Zend_Soap_Client_Local extends \Zend_Soap_Client
    {
        /**
         * @var Zend_Soap_Server
         */
        public $_server;
        /**
         * @param Zend_Soap_Server $server
         * @param string $wsdl
         * @param array<array-key, mixed>|null $options
         */
        public function __construct(\Zend_Soap_Server $server, $wsdl, $options = null)
        {
        }
        /**
         * @param Zend_Soap_Client_Common $client
         * @param string $request
         * @param string $location
         * @param string $action
         * @param int $version
         * @param int|null $one_way
         *
         * @return mixed
         */
        public function _doRequest(\Zend_Soap_Client_Common $client, $request, $location, $action, $version, $one_way = null)
        {
        }
    }
    class Zend_Soap_Server implements \Zend_Server_Interface
    {
        /**
         * @var string
         */
        public $_actor;
        /**
         * @var string
         */
        public $_class;
        /**
         * @var array<array-key, mixed>
         */
        public $_classArgs;
        public $_object;
        /**
         * @var array<array-key, mixed>
         */
        public $_classmap;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var int
         */
        public $_features;
        /**
         * @var mixed
         */
        public $_wsdlCache;
        /**
         * @var bool
         */
        public $_wsiCompliant;
        /**
         * @var array<array-key, mixed>
         */
        public $_faultExceptions;
        /**
         * @var array<array-key, mixed>|int
         */
        public $_functions;
        /**
         * @var int
         */
        public $_persistence;
        /**
         * @var string
         */
        public $_request;
        /**
         * @var string
         */
        public $_response;
        /**
         * @var bool
         */
        public $_returnResponse;
        /**
         * @var int
         */
        public $_soapVersion;
        /**
         * @var string
         */
        public $_wsdl;
        /**
         * @var string
         */
        public $_uri;
        /**
         * @param null|string $wsdl
         * @param array<array-key, mixed>|null $options
         *
         * @return void
         */
        public function __construct($wsdl = null, ?array $options = null)
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Soap_Server
         */
        public function setOptions($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param bool $value
         *
         * @return Zend_Soap_Server
         */
        public function setWsiCompliant($value)
        {
        }
        /**
         * @return bool
         */
        public function getWsiCompliant()
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_Soap_Server
         *
         * @throws Zend_Soap_Server_Exception
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param int $version
         *
         * @return Zend_Soap_Server
         *
         * @throws Zend_Soap_Server_Exception
         */
        public function setSoapVersion($version)
        {
        }
        /**
         * @return int
         */
        public function getSoapVersion()
        {
        }
        /**
         * @param string $urn
         *
         * @return true
         *
         * @throws Zend_Soap_Server_Exception
         */
        public function validateUrn($urn)
        {
        }
        /**
         * @param string $actor
         *
         * @return Zend_Soap_Server
         */
        public function setActor($actor)
        {
        }
        /**
         * @return string
         */
        public function getActor()
        {
        }
        /**
         * @param string $uri
         *
         * @return Zend_Soap_Server
         *
         * @throws Zend_Soap_Server_Exception
         */
        public function setUri($uri)
        {
        }
        /**
         * @return string
         */
        public function getUri()
        {
        }
        /**
         * @param array<array-key, mixed> $classmap
         *
         * @return Zend_Soap_Server
         *
         * @throws Zend_Soap_Server_Exception
         */
        public function setClassmap($classmap)
        {
        }
        /**
         * @return mixed
         */
        public function getClassmap()
        {
        }
        /**
         * @param string $wsdl
         *
         * @return Zend_Soap_Server
         */
        public function setWsdl($wsdl)
        {
        }
        /**
         * @return string
         */
        public function getWsdl()
        {
        }
        /**
         * @param int|string $feature
         *
         * @return Zend_Soap_Server
         */
        public function setSoapFeatures($feature)
        {
        }
        /**
         * @return int
         */
        public function getSoapFeatures()
        {
        }
        /**
         * @return Zend_Soap_Server
         */
        public function setWsdlCache($options)
        {
        }
        public function getWsdlCache()
        {
        }
        /**
         * @param array<array-key, mixed>|string $function
         * @param string $namespace
         *
         * @return Zend_Soap_Server
         *
         * @throws Zend_Soap_Server_Exception
         */
        public function addFunction($function, $namespace = '')
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Soap_Server
         *
         * @throws Zend_Soap_Server_Exception
         */
        public function setClass($class, $namespace = '', $argv = null)
        {
        }
        /**
         * @param object $object
         *
         * @return Zend_Soap_Server
         */
        public function setObject($object)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFunctions()
        {
        }
        /**
         * @return void
         *
         * @throws Zend_Soap_Server_Exception
         */
        public function loadFunctions($definition)
        {
        }
        /**
         * @param int $mode
         *
         * @return Zend_Soap_Server
         */
        public function setPersistence($mode)
        {
        }
        /**
         * @return Zend_Soap_Server
         */
        public function getPersistence()
        {
        }
        /**
         * @param DOMDocument|DOMNode|SimpleXMLElement|stdClass|string $request
         *
         * @return Zend_Soap_Server
         */
        public function _setRequest($request)
        {
        }
        /**
         * @return string
         */
        public function getLastRequest()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Soap_Server
         */
        public function setReturnResponse($flag)
        {
        }
        /**
         * @return bool
         */
        public function getReturnResponse()
        {
        }
        /**
         * @return string
         */
        public function getLastResponse()
        {
        }
        /**
         * @return SoapServer
         */
        public function _getSoap()
        {
        }
        /**
         * @param DOMDocument|DOMNode|SimpleXMLElement|null|stdClass|string $request
         *
         * @return null|string
         */
        public function handle($request = null)
        {
        }
        /**
         * @return bool
         */
        public function _initializeSoapErrorContext()
        {
        }
        /**
         * @param array<array-key, mixed>|string $class
         *
         * @return Zend_Soap_Server
         */
        public function registerFaultException($class)
        {
        }
        /**
         * @param string $class
         *
         * @return bool
         */
        public function deregisterFaultException($class)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFaultExceptions()
        {
        }
        /**
         * @param Exception|null|string $fault
         * @param string $code
         *
         * @return SoapFault
         */
        public function fault($fault = null, $code = 'Receiver')
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param null|string $errfile
         * @param int|null $errline
         * @param array<array-key, mixed>|null $errcontext
         *
         * @return void
         *
         * @throws SoapFault
         */
        public function handlePhpErrors($errno, $errstr, $errfile = null, $errline = null, ?array $errcontext = null)
        {
        }
    }
    class Zend_Soap_Server_Exception extends \Zend_Exception
    {
    }
    class Zend_Soap_Server_Proxy
    {
        /**
         * @var object
         */
        public $_classInstance;
        /**
         * @var string
         */
        public $_className;
        public function __construct($className, $classArgs = array())
        {
        }
        /**
         * @param string $name
         * @param string $arguments
         *
         * @return array<array-key, mixed>
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * @param mixed $arguments
         *
         * @return array<array-key, mixed>
         */
        public function _preProcessArguments($arguments)
        {
        }
    }
    class Zend_Soap_Wsdl
    {
        /**
         * @var object
         */
        public $_dom;
        /**
         * @var object
         */
        public $_wsdl;
        /**
         * @var string
         */
        public $_uri;
        /**
         * @var DOMElement
         */
        public $_schema;
        /**
         * @var array<array-key, mixed>
         */
        public $_includedTypes;
        public $_strategy = null;
        /**
         * @param string $name
         * @param string $uri
         * @param Zend_Soap_Wsdl_Strategy_Interface|bool|string $strategy
         */
        public function __construct($name, $uri, $strategy = true)
        {
        }
        /**
         * @param Zend_Uri_Http|string $uri
         *
         * @return Zend_Server_Wsdl
         */
        public function setUri($uri)
        {
        }
        /**
         * @param Zend_Soap_Wsdl_Strategy_Interface|bool|string $strategy
         *
         * @return Zend_Soap_Wsdl
         */
        public function setComplexTypeStrategy($strategy)
        {
        }
        /**
         * @return Zend_Soap_Wsdl_Strategy_Interface
         */
        public function getComplexTypeStrategy()
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $parts
         *
         * @return object
         */
        public function addMessage($name, $parts)
        {
        }
        /**
         * @param string $name
         *
         * @return object
         */
        public function addPortType($name)
        {
        }
        /**
         * @param object $portType
         * @param string $name
         * @param string $input
         * @param string $output
         * @param string $fault
         *
         * @return object
         */
        public function addPortOperation($portType, $name, $input = false, $output = false, $fault = false)
        {
        }
        /**
         * @param string $name
         *
         * @return object
         */
        public function addBinding($name, $portType)
        {
        }
        /**
         * @param object $binding
         * @param array<array-key, mixed> $input
         * @param array<array-key, mixed> $output
         * @param array<array-key, mixed> $fault
         *
         * @return object
         */
        public function addBindingOperation($binding, $name, $input = false, $output = false, $fault = false)
        {
        }
        /**
         * @param object $binding
         * @param string $style
         * @param string $transport
         *
         * @return bool
         */
        public function addSoapBinding($binding, $style = 'document', $transport = 'http://schemas.xmlsoap.org/soap/http')
        {
        }
        /**
         * @param string $soap_action
         *
         * @return bool
         */
        public function addSoapOperation($binding, $soap_action)
        {
        }
        /**
         * @param string $name
         * @param string $port_name
         * @param string $binding
         * @param string $location
         *
         * @return object
         */
        public function addService($name, $port_name, $binding, $location)
        {
        }
        /**
         * @param object $input_node
         * @param string $documentation
         *
         * @return DOMElement
         */
        public function addDocumentation($input_node, $documentation)
        {
        }
        /**
         * @param object $types
         */
        public function addTypes($types)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Soap_Wsdl
         */
        public function addType($type)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTypes()
        {
        }
        /**
         * @return DOMElement
         */
        public function getSchema()
        {
        }
        /**
         * @return string
         */
        public function toXML()
        {
        }
        /**
         * @return object
         */
        public function toDomDocument()
        {
        }
        /**
         * @return bool
         */
        public function dump($filename = false)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function getType($type)
        {
        }
        /**
         * @return Zend_Soap_Wsdl
         */
        public function addSchemaTypeSection()
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function addComplexType($type)
        {
        }
        /**
         * @param array<array-key, mixed> $element
         *
         * @return DOMElement
         */
        public function _parseElement($element)
        {
        }
        /**
         * @param array<array-key, mixed> $element
         *
         * @return string
         */
        public function addElement($element)
        {
        }
    }
    class Zend_Soap_Wsdl_Exception extends \Zend_Exception
    {
    }
    class Zend_Soap_Wsdl_Strategy_Abstract implements \Zend_Soap_Wsdl_Strategy_Interface
    {
        /**
         * @var Zend_Soap_Wsdl
         */
        public $_context;
        /**
         * @param Zend_Soap_Wsdl $context
         *
         * @return void
         */
        public function setContext(\Zend_Soap_Wsdl $context)
        {
        }
        /**
         * @return Zend_Soap_Wsdl
         */
        public function getContext()
        {
        }
    }
    class Zend_Soap_Wsdl_Strategy_AnyType implements \Zend_Soap_Wsdl_Strategy_Interface
    {
        /**
         * @param Zend_Soap_Wsdl $context
         */
        public function setContext(\Zend_Soap_Wsdl $context)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function addComplexType($type)
        {
        }
    }
    class Zend_Soap_Wsdl_Strategy_ArrayOfTypeComplex extends \Zend_Soap_Wsdl_Strategy_DefaultComplexType
    {
        public $_inProcess = array();
        /**
         * @param string $type
         *
         * @return string
         */
        public function addComplexType($type)
        {
        }
        public function _addArrayOfComplexType($singularType, $type)
        {
        }
        public function _getXsdComplexTypeName($type)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function _getSingularPhpType($type)
        {
        }
        /**
         * @param string $type
         *
         * @return int
         */
        public function _getNestedCount($type)
        {
        }
    }
    class Zend_Soap_Wsdl_Strategy_ArrayOfTypeSequence extends \Zend_Soap_Wsdl_Strategy_DefaultComplexType
    {
        /**
         * @param string $type
         *
         * @return string
         */
        public function addComplexType($type)
        {
        }
        /**
         * @param string $singularType
         * @param int $level
         *
         * @return string
         */
        public function _getTypeNameBasedOnNestingLevel($singularType, $level)
        {
        }
        /**
         * @param string $singularType
         *
         * @return string
         */
        public function _getStrippedXsdType($singularType)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         *
         * @throws Zend_Soap_Wsdl_Exception
         */
        public function _getSingularType($type)
        {
        }
        /**
         * @param string $type
         *
         * @return int
         */
        public function _getNestedCount($type)
        {
        }
        /**
         * @param string $arrayType
         * @param string $childTypeName
         *
         * @return void
         */
        public function _addElementFromWsdlAndChildTypes($arrayType, $childTypeName)
        {
        }
    }
    class Zend_Soap_Wsdl_Strategy_Composite implements \Zend_Soap_Wsdl_Strategy_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_typeMap;
        /**
         * @var Zend_Soap_Wsdl_Strategy_Interface|string
         */
        public $_defaultStrategy;
        /**
         * @var Zend_Soap_Wsdl|null
         */
        public $_context;
        /**
         * @param array<array-key, mixed> $typeMap
         * @param Zend_Soap_Wsdl_Strategy_Interface|string $defaultStrategy
         *
         * @throws Zend_Soap_Wsdl_Exception
         */
        public function __construct(array $typeMap = array(), $defaultStrategy = 'Zend_Soap_Wsdl_Strategy_DefaultComplexType')
        {
        }
        /**
         * @param string $type
         * @param Zend_Soap_Wsdl_Strategy_Interface|string $strategy
         *
         * @return Zend_Soap_Wsdl_Strategy_Composite
         *
         * @throws Zend_Soap_Wsdl_Exception
         */
        public function connectTypeToStrategy($type, $strategy)
        {
        }
        /**
         * @return Zend_Soap_Wsdl_Strategy_Interface
         *
         * @throws Zend_Soap_Wsdl_Exception
         */
        public function getDefaultStrategy()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Soap_Wsdl_Strategy_Interface
         *
         * @throws Zend_Soap_Wsdl_Exception
         */
        public function getStrategyOfType($type)
        {
        }
        /**
         * @param Zend_Soap_Wsdl $context
         */
        public function setContext(\Zend_Soap_Wsdl $context)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         *
         * @throws Zend_Soap_Wsdl_Exception
         */
        public function addComplexType($type)
        {
        }
    }
    class Zend_Soap_Wsdl_Strategy_DefaultComplexType extends \Zend_Soap_Wsdl_Strategy_Abstract
    {
        /**
         * @param string $type
         *
         * @return string
         */
        public function addComplexType($type)
        {
        }
    }
    interface Zend_Soap_Wsdl_Strategy_Interface
    {
        public function setContext(\Zend_Soap_Wsdl $context);
        /**
         * @param string $type
         *
         * @return string
         */
        public function addComplexType($type);
    }
    class Zend_Stdlib_CallbackHandler
    {
        /**
         * @var array<array-key, mixed>|string
         */
        public $callback;
        /**
         * @var bool
         */
        public $error;
        /**
         * @var array<array-key, mixed>
         */
        public $metadata;
        /**
         * @param array<array-key, mixed>|object|string $callback
         *
         * @return void
         */
        public function __construct($callback, array $metadata = array())
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         *
         * @return void
         */
        public function errorHandler($errno, $errstr)
        {
        }
        /**
         * @param callable $callback
         *
         * @return void
         */
        public function registerCallback($callback)
        {
        }
        /**
         * @return callable
         */
        public function getCallback()
        {
        }
        /**
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function call(array $args = array())
        {
        }
        /**
         * @return mixed
         */
        public function __invoke()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMetadata()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getMetadatum($name)
        {
        }
        /**
         * @param string $callback
         *
         * @return true
         *
         * @throws Zend_Stdlib_Exception_InvalidCallbackException
         */
        public function validateStringCallbackFor54($callback)
        {
        }
    }
    interface Zend_Stdlib_Exception
    {
    }
    class Zend_Stdlib_Exception_InvalidCallbackException extends \DomainException
    {
    }
    class Zend_Stdlib_PriorityQueue implements \Countable, \IteratorAggregate, \Serializable
    {
        public const EXTR_DATA = 1;
        public const EXTR_PRIORITY = 2;
        public const EXTR_BOTH = 3;
        /**
         * @var string
         */
        public $queueClass;
        /**
         * @var array<array-key, mixed>
         */
        public $items;
        /**
         * @var SplPriorityQueue
         */
        public $queue;
        /**
         * @param mixed $data
         * @param int $priority
         *
         * @return Zend_Stdlib_PriorityQueue
         */
        public function insert($data, $priority = 1)
        {
        }
        /**
         * @param mixed $datum
         *
         * @return bool
         */
        public function remove($datum)
        {
        }
        /**
         * @return bool
         */
        public function isEmpty()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return mixed
         */
        public function top()
        {
        }
        /**
         * @return mixed
         */
        public function extract()
        {
        }
        /**
         * @return SplPriorityQueue
         */
        public function getIterator()
        {
        }
        /**
         * @return string
         */
        public function serialize()
        {
        }
        /**
         * @param string $data
         *
         * @return void
         */
        public function unserialize($data)
        {
        }
        /**
         * @param int $flag
         *
         * @return array<array-key, mixed>
         */
        public function toArray($flag)
        {
        }
        /**
         * @param string $class
         *
         * @return Zend_Stdlib_PriorityQueue
         */
        public function setInternalQueueClass($class)
        {
        }
        /**
         * @param mixed $datum
         *
         * @return bool
         */
        public function contains($datum)
        {
        }
        /**
         * @param int $priority
         *
         * @return bool
         */
        public function hasPriority($priority)
        {
        }
        /**
         * @return Zend_Stdlib_SplPriorityQueue
         */
        public function getQueue()
        {
        }
        /**
         * @param array<array-key, mixed> $item
         *
         * @return mixed
         */
        public function returnPriority($item)
        {
        }
        /**
         * @param array<array-key, mixed> $item
         *
         * @return mixed
         */
        public function returnData($item)
        {
        }
    }
    class Zend_Stdlib_SplPriorityQueue extends \SplPriorityQueue
    {
        public const EXTR_DATA = 1;
        public const EXTR_PRIORITY = 2;
        public const EXTR_BOTH = 3;
        /**
         * @var int
         */
        public $serial;
        /**
         * @var bool
         */
        public $isPhp53;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param mixed $datum
         * @param mixed $priority
         *
         * @return void
         */
        public function insert($datum, $priority)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function toArray()
        {
        }
        /**
         * @return string
         */
        public function serialize()
        {
        }
        /**
         * @param string $data
         *
         * @return void
         */
        public function unserialize($data)
        {
        }
    }
    class Zend_Tag_Cloud
    {
        /**
         * @var Zend_Tag_Cloud_Decorator_Cloud
         */
        public $_cloudDecorator;
        /**
         * @var Zend_Tag_Cloud_Decorator_Tag
         */
        public $_tagDecorator;
        /**
         * @var Zend_Tag_ItemList
         */
        public $_tags;
        /**
         * @var Zend_Loader_PluginLoader
         */
        public $_pluginLoader;
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @param mixed|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Tag_Cloud
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Tag_Cloud
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return Zend_Tag_Cloud
         */
        public function setTags(array $tags)
        {
        }
        /**
         * @param Zend_Tag_Taggable|array<array-key, mixed> $tag
         *
         * @return Zend_Tag_Cloud
         */
        public function appendTag($tag)
        {
        }
        /**
         * @param Zend_Tag_ItemList $itemList
         *
         * @return Zend_Tag_Cloud
         */
        public function setItemList(\Zend_Tag_ItemList $itemList)
        {
        }
        /**
         * @return Zend_Tag_ItemList
         */
        public function getItemList()
        {
        }
        /**
         * @param mixed $decorator
         *
         * @return Zend_Tag_Cloud
         */
        public function setCloudDecorator($decorator)
        {
        }
        /**
         * @return Zend_Tag_Cloud_Decorator_Cloud
         */
        public function getCloudDecorator()
        {
        }
        /**
         * @param mixed $decorator
         *
         * @return Zend_Tag_Cloud
         */
        public function setTagDecorator($decorator)
        {
        }
        /**
         * @return Zend_Tag_Cloud_Decorator_Tag
         */
        public function getTagDecorator()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader_Interface $loader
         *
         * @return Zend_Tag_Cloud
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader_Interface $loader)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public function getPluginLoader()
        {
        }
        /**
         * @param array<array-key, mixed> $paths
         *
         * @return Zend_Tag_Cloud
         */
        public function addPrefixPaths(array $paths)
        {
        }
        /**
         * @param string $prefix
         * @param string $path
         *
         * @return Zend_Tag_Cloud
         */
        public function addPrefixPath($prefix, $path)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Tag_Cloud_Decorator_Cloud
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @param mixed|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Tag_Cloud
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return string
         */
        public abstract function render(array $tags);
    }
    class Zend_Tag_Cloud_Decorator_Exception extends \Zend_Tag_Cloud_Exception
    {
    }
    class Zend_Tag_Cloud_Decorator_HtmlCloud extends \Zend_Tag_Cloud_Decorator_Cloud
    {
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var array<array-key, mixed>
         */
        public $_htmlTags;
        /**
         * @var string
         */
        public $_separator;
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        public function setEncoding($value)
        {
        }
        /**
         * @param array<array-key, mixed> $htmlTags
         *
         * @return Zend_Tag_Cloud_Decorator_HtmlCloud
         */
        public function setHtmlTags(array $htmlTags)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHtmlTags()
        {
        }
        public function setSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getSeparator()
        {
        }
        /**
         * @param array<array-key, mixed> $tags
         *
         * @return string
         */
        public function render(array $tags)
        {
        }
    }
    class Zend_Tag_Cloud_Decorator_HtmlTag extends \Zend_Tag_Cloud_Decorator_Tag
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_classList;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var string
         */
        public $_fontSizeUnit;
        /**
         * @var array<array-key, mixed>
         */
        public $_alloweFontSizeUnits;
        /**
         * @var array<array-key, mixed>
         */
        public $_htmlTags;
        /**
         * @var int
         */
        public $_maxFontSize;
        /**
         * @var int
         */
        public $_minFontSize;
        /**
         * @param array<array-key, mixed>|null $classList
         *
         * @return Zend_Tag_Cloud_Decorator_HtmlTag
         *
         * @throws Zend_Tag_Cloud_Decorator_Exception
         */
        public function setClassList(?array $classList = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getClassList()
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $value
         *
         * @return Zend_Tag_Cloud_Decorator_HtmlTag
         */
        public function setEncoding($value)
        {
        }
        /**
         * @param string $fontSizeUnit
         *
         * @return Zend_Tag_Cloud_Decorator_HtmlTag
         *
         * @throws Zend_Tag_Cloud_Decorator_Exception
         */
        public function setFontSizeUnit($fontSizeUnit)
        {
        }
        /**
         * @return string
         */
        public function getFontSizeUnit()
        {
        }
        /**
         * @param array<array-key, mixed> $htmlTags
         *
         * @return Zend_Tag_Cloud_Decorator_HtmlTag
         */
        public function setHtmlTags(array $htmlTags)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHtmlTags()
        {
        }
        /**
         * @param int $maxFontSize
         *
         * @return Zend_Tag_Cloud_Decorator_HtmlTag
         *
         * @throws Zend_Tag_Cloud_Decorator_Exception
         */
        public function setMaxFontSize($maxFontSize)
        {
        }
        /**
         * @return int
         */
        public function getMaxFontSize()
        {
        }
        /**
         * @param int $minFontSize
         *
         * @return Zend_Tag_Cloud_Decorator_HtmlTag
         *
         * @throws Zend_Tag_Cloud_Decorator_Exception
         */
        public function setMinFontSize($minFontSize)
        {
        }
        /**
         * @return int
         */
        public function getMinFontSize()
        {
        }
        /**
         * @param Zend_Tag_ItemList $tags
         *
         * @return array<array-key, mixed>
         */
        public function render(\Zend_Tag_ItemList $tags)
        {
        }
    }
    class Zend_Tag_Cloud_Decorator_Tag
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @param mixed|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Tag_Cloud
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Tag_ItemList $tags
         *
         * @return array<array-key, mixed>
         */
        public abstract function render(\Zend_Tag_ItemList $tags);
    }
    class Zend_Tag_Cloud_Exception extends \Zend_Tag_Exception
    {
    }
    class Zend_Tag_Exception extends \Zend_Exception
    {
    }
    class Zend_Tag_Item implements \Zend_Tag_Taggable
    {
        /**
         * @var string
         */
        public $_title;
        /**
         * @var float
         */
        public $_weight;
        /**
         * @var string
         */
        public $_params;
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return void
         *
         * @throws Zend_Tag_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Tag_Item
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @param string $title
         *
         * @return Zend_Tag_Item
         *
         * @throws Zend_Tag_Exception
         */
        public function setTitle($title)
        {
        }
        /**
         * @return float
         */
        public function getWeight()
        {
        }
        /**
         * @param float $weight
         *
         * @return Zend_Tag_Item
         *
         * @throws Zend_Tag_Exception
         */
        public function setWeight($weight)
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return Zend_Tag_Item
         */
        public function setParams(array $params)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Tag_Item
         */
        public function setParam($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getParam($name)
        {
        }
    }
    class Zend_Tag_ItemList implements \Countable, \SeekableIterator, \ArrayAccess
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_items;
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @param array<array-key, mixed> $values
         *
         * @return void
         *
         * @throws Zend_Tag_Exception
         */
        public function spreadWeightValues(array $values)
        {
        }
        /**
         * @param int $index
         *
         * @return void
         *
         * @throws OutOfBoundsException
         */
        public function seek($index)
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
        /**
         * @return mixed
         */
        public function next()
        {
        }
        /**
         * @return mixed
         */
        public function key()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return void
         */
        public function rewind()
        {
        }
        /**
         * @param mixed $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param mixed $offset
         *
         * @return Zend_Tag_Taggable
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param mixed $offset
         * @param Zend_Tag_Taggable $item
         *
         * @return void
         *
         * @throws OutOfBoundsException
         */
        public function offsetSet($offset, $item)
        {
        }
        /**
         * @param mixed $offset
         *
         * @return void
         */
        public function offsetUnset($offset)
        {
        }
    }
    interface Zend_Tag_Taggable
    {
        /**
         * @return string
         */
        public function getTitle();
        /**
         * @return float
         */
        public function getWeight();
        /**
         * @param string $name
         * @param string $value
         */
        public function setParam($name, $value);
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function getParam($name);
    }
    class Zend_Test_DbAdapter extends \Zend_Db_Adapter_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_statementStack;
        /**
         * @var bool
         */
        public $_connected;
        /**
         * @var array<array-key, mixed>
         */
        public $_listTables;
        /**
         * @var array<array-key, mixed>
         */
        public $_lastInsertIdStack;
        /**
         * @var array<array-key, mixed>
         */
        public $_describeTables;
        /**
         * @var string
         */
        public $_quoteIdentifierSymbol;
        public function __construct()
        {
        }
        /**
         * @param Zend_Test_DbStatement $stmt
         *
         * @return Zend_Test_DbAdapter
         */
        public function appendStatementToStack(\Zend_Test_DbStatement $stmt)
        {
        }
        /**
         * @param int|string $id
         *
         * @return Zend_Test_DbAdapter
         */
        public function appendLastInsertIdToStack($id)
        {
        }
        public function setQuoteIdentifierSymbol($symbol)
        {
        }
        /**
         * @return string
         */
        public function getQuoteIdentifierSymbol()
        {
        }
        /**
         * @param array<array-key, mixed> $listTables
         */
        public function setListTables(array $listTables)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listTables()
        {
        }
        /**
         * @param string $table
         * @param array<array-key, mixed> $tableInfo
         *
         * @return Zend_Test_DbAdapter
         */
        public function setDescribeTable($table, $tableInfo)
        {
        }
        /**
         * @param string $tableName
         * @param null|string $schemaName
         *
         * @return array<array-key, mixed>
         */
        public function describeTable($tableName, $schemaName = null)
        {
        }
        /**
         * @return void
         */
        public function _connect()
        {
        }
        /**
         * @return bool
         */
        public function isConnected()
        {
        }
        /**
         * @return void
         */
        public function closeConnection()
        {
        }
        /**
         * @param Zend_Db_Select|string $sql
         *
         * @return PDOStatement|Zend_Db_Statment
         */
        public function prepare($sql)
        {
        }
        /**
         * @param null|string $tableName
         * @param null|string $primaryKey
         *
         * @return string
         */
        public function lastInsertId($tableName = null, $primaryKey = null)
        {
        }
        public function _beginTransaction()
        {
        }
        public function _commit()
        {
        }
        public function _rollBack()
        {
        }
        /**
         * @param int $mode
         *
         * @return void
         *
         * @throws Zend_Db_Adapter_Exception
         */
        public function setFetchMode($mode)
        {
        }
        /**
         * @param mixed $sql
         * @param int $count
         * @param int $offset
         *
         * @return string
         */
        public function limit($sql, $count, $offset = 0)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function supportsParameters($type)
        {
        }
        /**
         * @return string
         */
        public function getServerVersion()
        {
        }
    }
    class Zend_Test_DbStatement implements \Zend_Db_Statement_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_fetchStack;
        /**
         * @var int
         */
        public $_columnCount;
        /**
         * @var int
         */
        public $_rowCount;
        /**
         * @var Zend_Db_Profiler_Query
         */
        public $_queryProfile;
        /**
         * @param array<array-key, mixed> $rows
         *
         * @return Zend_Test_DbStatement
         */
        public static function createSelectStatement(array $rows = array())
        {
        }
        /**
         * @param int $affectedRows
         *
         * @return Zend_Test_DbStatement
         */
        public static function createInsertStatement($affectedRows = 0)
        {
        }
        /**
         * @param int $affectedRows
         *
         * @return Zend_Test_DbStatement
         */
        public static function createDeleteStatement($affectedRows = 0)
        {
        }
        /**
         * @param int $affectedRows
         *
         * @return Zend_Test_DbStatement
         */
        public static function createUpdateStatement($affectedRows = 0)
        {
        }
        /**
         * @param int $affectedRows
         *
         * @return Zend_Test_DbStatement
         */
        public static function _createRowCountStatement($affectedRows)
        {
        }
        /**
         * @param Zend_Db_Profiler_Query $qp
         */
        public function setQueryProfile(\Zend_Db_Profiler_Query $qp)
        {
        }
        /**
         * @param int $rowCount
         */
        public function setRowCount($rowCount)
        {
        }
        /**
         * @param array<array-key, mixed> $row
         */
        public function append($row)
        {
        }
        /**
         * @param string $column
         * @param mixed $param
         * @param mixed|null $type
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindColumn($column, &$param, $type = null)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $variable
         * @param mixed|null $type
         * @param mixed|null $length
         * @param mixed|null $options
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindParam($parameter, &$variable, $type = null, $length = null, $options = null)
        {
        }
        /**
         * @param mixed $parameter
         * @param mixed $value
         * @param mixed|null $type
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function bindValue($parameter, $value, $type = null)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function closeCursor()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function columnCount()
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorCode()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function errorInfo()
        {
        }
        /**
         * @param array<array-key, mixed> $params
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function execute(array $params = array())
        {
        }
        /**
         * @param int|null $style
         * @param int|null $cursor
         * @param int|null $offset
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetch($style = null, $cursor = null, $offset = null)
        {
        }
        /**
         * @param int|null $style
         * @param int|null $col
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchAll($style = null, $col = null)
        {
        }
        /**
         * @param int $col
         *
         * @return string
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchColumn($col = 0)
        {
        }
        /**
         * @param string $class
         * @param array<array-key, mixed> $config
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function fetchObject($class = 'stdClass', array $config = array())
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function getAttribute($key)
        {
        }
        /**
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function nextRowset()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function rowCount()
        {
        }
        /**
         * @param string $key
         * @param mixed $val
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function setAttribute($key, $val)
        {
        }
        /**
         * @param int $mode
         *
         * @return bool
         *
         * @throws Zend_Db_Statement_Exception
         */
        public function setFetchMode($mode)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_DomQuery extends \Zend_Test_PHPUnit_Constraint_DomQuery41
    {
        public const ASSERT_QUERY = 'assertQuery';
        public const ASSERT_CONTENT_CONTAINS = 'assertQueryContentContains';
        public const ASSERT_CONTENT_REGEX = 'assertQueryContentRegex';
        public const ASSERT_CONTENT_COUNT = 'assertQueryCount';
        public const ASSERT_CONTENT_COUNT_MIN = 'assertQueryCountMin';
        public const ASSERT_CONTENT_COUNT_MAX = 'assertQueryCountMax';
    }
    class Zend_Test_PHPUnit_Constraint_DomQuery34 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_QUERY = 'assertQuery';
        public const ASSERT_CONTENT_CONTAINS = 'assertQueryContentContains';
        public const ASSERT_CONTENT_REGEX = 'assertQueryContentRegex';
        public const ASSERT_CONTENT_COUNT = 'assertQueryCount';
        public const ASSERT_CONTENT_COUNT_MIN = 'assertQueryCountMin';
        public const ASSERT_CONTENT_COUNT_MAX = 'assertQueryCountMax';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var string
         */
        public $_content;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @var string
         */
        public $_path;
        /**
         * @var bool
         */
        public $_useXpath;
        /**
         * @var array<array-key, mixed>
         */
        public $_xpathNamespaces;
        /**
         * @param string $path
         *
         * @return void
         */
        public function __construct($path)
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Test_PHPUnit_Constraint_DomQuery
         */
        public function setUseXpath($flag = true)
        {
        }
        /**
         * @param string $other
         *
         * @return bool
         */
        public function evaluate($other, $assertType = null)
        {
        }
        /**
         * @param mixed $other
         * @param string $description
         * @param bool $not
         *
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, $not = false)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param array<array-key, mixed> $xpathNamespaces
         *
         * @return void
         */
        public function registerXpathNamespaces($xpathNamespaces)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $match
         *
         * @return bool
         */
        public function _matchContent($result, $match)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $match
         *
         * @return bool
         */
        public function _notMatchContent($result, $match)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $pattern
         *
         * @return bool
         */
        public function _regexContent($result, $pattern)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $pattern
         *
         * @return bool
         */
        public function _notRegexContent($result, $pattern)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param int $test
         * @param string $type
         *
         * @return bool
         */
        public function _countContent($result, $test, $type)
        {
        }
        /**
         * @param DOMNode $node
         *
         * @return string
         */
        public function _getNodeContent(\DOMNode $node)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_DomQuery37 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_QUERY = 'assertQuery';
        public const ASSERT_CONTENT_CONTAINS = 'assertQueryContentContains';
        public const ASSERT_CONTENT_REGEX = 'assertQueryContentRegex';
        public const ASSERT_CONTENT_COUNT = 'assertQueryCount';
        public const ASSERT_CONTENT_COUNT_MIN = 'assertQueryCountMin';
        public const ASSERT_CONTENT_COUNT_MAX = 'assertQueryCountMax';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var string
         */
        public $_content;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @var string
         */
        public $_path;
        /**
         * @var bool
         */
        public $_useXpath;
        /**
         * @var array<array-key, mixed>
         */
        public $_xpathNamespaces;
        /**
         * @param string $path
         *
         * @return void
         */
        public function __construct($path)
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Test_PHPUnit_Constraint_DomQuery
         */
        public function setUseXpath($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function evaluate($content, $assertType = '', $match = false)
        {
        }
        /**
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, ?\PHPUnit_Framework_ComparisonFailure $cannot_be_used = null)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param array<array-key, mixed> $xpathNamespaces
         *
         * @return void
         */
        public function registerXpathNamespaces($xpathNamespaces)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $match
         *
         * @return bool
         */
        public function _matchContent($result, $match)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $match
         *
         * @return bool
         */
        public function _notMatchContent($result, $match)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $pattern
         *
         * @return bool
         */
        public function _regexContent($result, $pattern)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $pattern
         *
         * @return bool
         */
        public function _notRegexContent($result, $pattern)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param int $test
         * @param string $type
         *
         * @return bool
         */
        public function _countContent($result, $test, $type)
        {
        }
        /**
         * @param DOMNode $node
         *
         * @return string
         */
        public function _getNodeContent(\DOMNode $node)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_DomQuery41 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_QUERY = 'assertQuery';
        public const ASSERT_CONTENT_CONTAINS = 'assertQueryContentContains';
        public const ASSERT_CONTENT_REGEX = 'assertQueryContentRegex';
        public const ASSERT_CONTENT_COUNT = 'assertQueryCount';
        public const ASSERT_CONTENT_COUNT_MIN = 'assertQueryCountMin';
        public const ASSERT_CONTENT_COUNT_MAX = 'assertQueryCountMax';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var string
         */
        public $_content;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @var string
         */
        public $_path;
        /**
         * @var bool
         */
        public $_useXpath;
        /**
         * @var array<array-key, mixed>
         */
        public $_xpathNamespaces;
        /**
         * @param string $path
         *
         * @return void
         */
        public function __construct($path)
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Test_PHPUnit_Constraint_DomQuery
         */
        public function setUseXpath($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function evaluate($content, $assertType = '', $match = false)
        {
        }
        /**
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, ?\SebastianBergmann\Comparator\ComparisonFailure $cannot_be_used = null)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param array<array-key, mixed> $xpathNamespaces
         *
         * @return void
         */
        public function registerXpathNamespaces($xpathNamespaces)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $match
         *
         * @return bool
         */
        public function _matchContent($result, $match)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $match
         *
         * @return bool
         */
        public function _notMatchContent($result, $match)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $pattern
         *
         * @return bool
         */
        public function _regexContent($result, $pattern)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param string $pattern
         *
         * @return bool
         */
        public function _notRegexContent($result, $pattern)
        {
        }
        /**
         * @param Zend_Dom_Query_Result $result
         * @param int $test
         * @param string $type
         *
         * @return bool
         */
        public function _countContent($result, $test, $type)
        {
        }
        /**
         * @param DOMNode $node
         *
         * @return string
         */
        public function _getNodeContent(\DOMNode $node)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_Exception extends \PHPUnit_Framework_ExpectationFailedException
    {
    }
    class Zend_Test_PHPUnit_Constraint_Redirect extends \Zend_Test_PHPUnit_Constraint_Redirect41
    {
        public const ASSERT_REDIRECT = 'assertRedirect';
        public const ASSERT_REDIRECT_TO = 'assertRedirectTo';
        public const ASSERT_REDIRECT_REGEX = 'assertRedirectRegex';
    }
    class Zend_Test_PHPUnit_Constraint_Redirect34 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_REDIRECT = 'assertRedirect';
        public const ASSERT_REDIRECT_TO = 'assertRedirectTo';
        public const ASSERT_REDIRECT_REGEX = 'assertRedirectRegex';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var string
         */
        public $_match;
        public $_actual = null;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @param string $other
         *
         * @return bool
         */
        public function evaluate($other, $assertType = null)
        {
        }
        /**
         * @param mixed $other
         * @param string $description
         * @param bool $not
         *
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, $not = false)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $match
         *
         * @return bool
         */
        public function _match($response, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $match
         *
         * @return bool
         */
        public function _notMatch($response, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $pattern
         *
         * @return bool
         */
        public function _regex($response, $pattern)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $pattern
         *
         * @return bool
         */
        public function _notRegex($response, $pattern)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_Redirect37 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_REDIRECT = 'assertRedirect';
        public const ASSERT_REDIRECT_TO = 'assertRedirectTo';
        public const ASSERT_REDIRECT_REGEX = 'assertRedirectRegex';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var string
         */
        public $_match;
        public $_actual = null;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @param string $other
         *
         * @return bool
         */
        public function evaluate($other, $assertType = null, $variable = false)
        {
        }
        /**
         * @param mixed $other
         * @param string $description
         *
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, ?\PHPUnit_Framework_ComparisonFailure $cannot_be_used = null)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $match
         *
         * @return bool
         */
        public function _match($response, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $match
         *
         * @return bool
         */
        public function _notMatch($response, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $pattern
         *
         * @return bool
         */
        public function _regex($response, $pattern)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $pattern
         *
         * @return bool
         */
        public function _notRegex($response, $pattern)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_Redirect41 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_REDIRECT = 'assertRedirect';
        public const ASSERT_REDIRECT_TO = 'assertRedirectTo';
        public const ASSERT_REDIRECT_REGEX = 'assertRedirectRegex';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var string
         */
        public $_match;
        public $_actual = null;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @param string $other
         *
         * @return bool
         */
        public function evaluate($other, $assertType = null, $variable = false)
        {
        }
        /**
         * @param mixed $other
         * @param string $description
         *
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, ?\SebastianBergmann\Comparator\ComparisonFailure $cannot_be_used = null)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $match
         *
         * @return bool
         */
        public function _match($response, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $match
         *
         * @return bool
         */
        public function _notMatch($response, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $pattern
         *
         * @return bool
         */
        public function _regex($response, $pattern)
        {
        }
        /**
         * @param Zend_Controller_Response_HttpTestCase $response
         * @param string $pattern
         *
         * @return bool
         */
        public function _notRegex($response, $pattern)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_ResponseHeader extends \Zend_Test_PHPUnit_Constraint_ResponseHeader41
    {
        public const ASSERT_RESPONSE_CODE = 'assertResponseCode';
        public const ASSERT_HEADER = 'assertHeader';
        public const ASSERT_HEADER_CONTAINS = 'assertHeaderContains';
        public const ASSERT_HEADER_REGEX = 'assertHeaderRegex';
    }
    class Zend_Test_PHPUnit_Constraint_ResponseHeader34 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_RESPONSE_CODE = 'assertResponseCode';
        public const ASSERT_HEADER = 'assertHeader';
        public const ASSERT_HEADER_CONTAINS = 'assertHeaderContains';
        public const ASSERT_HEADER_REGEX = 'assertHeaderRegex';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var int
         */
        public $_code;
        /**
         * @var int
         */
        public $_actualCode;
        /**
         * @var string
         */
        public $_header;
        /**
         * @var string
         */
        public $_match;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $other
         *
         * @return bool
         */
        public function evaluate($other, $assertType = null)
        {
        }
        /**
         * @param mixed $other
         * @param string $description
         * @param bool $not
         *
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, $not = false)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param int $code
         *
         * @return bool
         */
        public function _code(\Zend_Controller_Response_Abstract $response, $code)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param int $code
         *
         * @return bool
         */
        public function _notCode(\Zend_Controller_Response_Abstract $response, $code)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         *
         * @return int
         */
        public function _getCode(\Zend_Controller_Response_Abstract $response)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return bool
         */
        public function _header(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return bool
         */
        public function _notHeader(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return null|string
         */
        public function _getHeader(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $match
         *
         * @return bool
         */
        public function _headerContains(\Zend_Controller_Response_Abstract $response, $header, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $match
         *
         * @return bool
         */
        public function _notHeaderContains(\Zend_Controller_Response_Abstract $response, $header, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $pattern
         *
         * @return bool
         */
        public function _headerRegex(\Zend_Controller_Response_Abstract $response, $header, $pattern)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $pattern
         *
         * @return bool
         */
        public function _notHeaderRegex(\Zend_Controller_Response_Abstract $response, $header, $pattern)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_ResponseHeader37 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_RESPONSE_CODE = 'assertResponseCode';
        public const ASSERT_HEADER = 'assertHeader';
        public const ASSERT_HEADER_CONTAINS = 'assertHeaderContains';
        public const ASSERT_HEADER_REGEX = 'assertHeaderRegex';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var int
         */
        public $_code;
        /**
         * @var int
         */
        public $_actualCode;
        /**
         * @var string
         */
        public $_header;
        /**
         * @var string
         */
        public $_match;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function evaluate($response, $assertType = '', $variable = false)
        {
        }
        /**
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, ?\PHPUnit_Framework_ComparisonFailure $cannot_be_used = null)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param int $code
         *
         * @return bool
         */
        public function _code(\Zend_Controller_Response_Abstract $response, $code)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param int $code
         *
         * @return bool
         */
        public function _notCode(\Zend_Controller_Response_Abstract $response, $code)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         *
         * @return int
         */
        public function _getCode(\Zend_Controller_Response_Abstract $response)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return bool
         */
        public function _header(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return bool
         */
        public function _notHeader(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return null|string
         */
        public function _getHeader(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $match
         *
         * @return bool
         */
        public function _headerContains(\Zend_Controller_Response_Abstract $response, $header, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $match
         *
         * @return bool
         */
        public function _notHeaderContains(\Zend_Controller_Response_Abstract $response, $header, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $pattern
         *
         * @return bool
         */
        public function _headerRegex(\Zend_Controller_Response_Abstract $response, $header, $pattern)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $pattern
         *
         * @return bool
         */
        public function _notHeaderRegex(\Zend_Controller_Response_Abstract $response, $header, $pattern)
        {
        }
    }
    class Zend_Test_PHPUnit_Constraint_ResponseHeader41 extends \PHPUnit_Framework_Constraint
    {
        public const ASSERT_RESPONSE_CODE = 'assertResponseCode';
        public const ASSERT_HEADER = 'assertHeader';
        public const ASSERT_HEADER_CONTAINS = 'assertHeaderContains';
        public const ASSERT_HEADER_REGEX = 'assertHeaderRegex';
        /**
         * @var string
         */
        public $_assertType;
        /**
         * @var array<array-key, mixed>
         */
        public $_assertTypes;
        /**
         * @var int
         */
        public $_code;
        /**
         * @var int
         */
        public $_actualCode;
        /**
         * @var string
         */
        public $_header;
        /**
         * @var string
         */
        public $_match;
        /**
         * @var bool
         */
        public $_negate;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public function setNegate($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function evaluate($response, $assertType = '', $variable = false)
        {
        }
        /**
         * @return void
         *
         * @throws PHPUnit_Framework_ExpectationFailedException
         */
        public function fail($other, $description, ?\SebastianBergmann\Comparator\ComparisonFailure $cannot_be_used = null)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param int $code
         *
         * @return bool
         */
        public function _code(\Zend_Controller_Response_Abstract $response, $code)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param int $code
         *
         * @return bool
         */
        public function _notCode(\Zend_Controller_Response_Abstract $response, $code)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         *
         * @return int
         */
        public function _getCode(\Zend_Controller_Response_Abstract $response)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return bool
         */
        public function _header(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return bool
         */
        public function _notHeader(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         *
         * @return null|string
         */
        public function _getHeader(\Zend_Controller_Response_Abstract $response, $header)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $match
         *
         * @return bool
         */
        public function _headerContains(\Zend_Controller_Response_Abstract $response, $header, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $match
         *
         * @return bool
         */
        public function _notHeaderContains(\Zend_Controller_Response_Abstract $response, $header, $match)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $pattern
         *
         * @return bool
         */
        public function _headerRegex(\Zend_Controller_Response_Abstract $response, $header, $pattern)
        {
        }
        /**
         * @param Zend_Controller_Response_Abstract $response
         * @param string $header
         * @param string $pattern
         *
         * @return bool
         */
        public function _notHeaderRegex(\Zend_Controller_Response_Abstract $response, $header, $pattern)
        {
        }
    }
    class Zend_Test_PHPUnit_ControllerTestCase extends \PHPUnit_Framework_TestCase
    {
        /**
         * @var mixed
         */
        public $bootstrap;
        /**
         * @var Zend_Controller_Front
         */
        public $_frontController;
        /**
         * @var Zend_Dom_Query
         */
        public $_query;
        /**
         * @var Zend_Controller_Request_Abstract
         */
        public $_request;
        /**
         * @var Zend_Controller_Response_Abstract
         */
        public $_response;
        /**
         * @var array<array-key, mixed>
         */
        public $_xpathNamespaces;
        /**
         * @param string $name
         * @param mixed $value
         *
         * @throws Zend_Exception
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param mixed $name
         *
         * @return Zend_Controller_Front|Zend_Controller_Request_HttpTestCase|Zend_Controller_Response_HttpTestCase|null
         */
        public function __get($name)
        {
        }
        public function setUp()
        {
        }
        public function bootstrap()
        {
        }
        /**
         * @param null|string $url
         */
        public function dispatch($url = null)
        {
        }
        public function reset()
        {
        }
        public function _resetPlaceholders()
        {
        }
        /**
         * @return Zend_Test_PHPUnit_ControllerTestCase
         */
        public function resetRequest()
        {
        }
        /**
         * @return Zend_Test_PHPUnit_ControllerTestCase
         */
        public function resetResponse()
        {
        }
        /**
         * @param string $path
         * @param string $message
         */
        public function assertQuery($path, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $message
         */
        public function assertNotQuery($path, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $match
         * @param string $message
         */
        public function assertQueryContentContains($path, $match, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $match
         * @param string $message
         */
        public function assertNotQueryContentContains($path, $match, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $pattern
         * @param string $message
         */
        public function assertQueryContentRegex($path, $pattern, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $pattern
         * @param string $message
         */
        public function assertNotQueryContentRegex($path, $pattern, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $count
         * @param string $message
         */
        public function assertQueryCount($path, $count, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $count
         * @param string $message
         */
        public function assertNotQueryCount($path, $count, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $count
         * @param string $message
         */
        public function assertQueryCountMin($path, $count, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $count
         * @param string $message
         */
        public function assertQueryCountMax($path, $count, $message = '')
        {
        }
        /**
         * @param array<array-key, mixed> $xpathNamespaces
         */
        public function registerXpathNamespaces($xpathNamespaces)
        {
        }
        /**
         * @param string $path
         * @param string $message
         */
        public function assertXpath($path, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $message
         */
        public function assertNotXpath($path, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $match
         * @param string $message
         */
        public function assertXpathContentContains($path, $match, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $match
         * @param string $message
         */
        public function assertNotXpathContentContains($path, $match, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $pattern
         * @param string $message
         */
        public function assertXpathContentRegex($path, $pattern, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $pattern
         * @param string $message
         */
        public function assertNotXpathContentRegex($path, $pattern, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $count
         * @param string $message
         */
        public function assertXpathCount($path, $count, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $count
         * @param string $message
         */
        public function assertNotXpathCount($path, $count, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $count
         * @param string $message
         */
        public function assertXpathCountMin($path, $count, $message = '')
        {
        }
        /**
         * @param string $path
         * @param string $count
         * @param string $message
         */
        public function assertXpathCountMax($path, $count, $message = '')
        {
        }
        /**
         * @param string $message
         */
        public function assertRedirect($message = '')
        {
        }
        /**
         * @param string $message
         */
        public function assertNotRedirect($message = '')
        {
        }
        /**
         * @param string $url
         * @param string $message
         */
        public function assertRedirectTo($url, $message = '')
        {
        }
        /**
         * @param string $url
         * @param string $message
         */
        public function assertNotRedirectTo($url, $message = '')
        {
        }
        /**
         * @param string $pattern
         * @param string $message
         */
        public function assertRedirectRegex($pattern, $message = '')
        {
        }
        /**
         * @param string $pattern
         * @param string $message
         */
        public function assertNotRedirectRegex($pattern, $message = '')
        {
        }
        /**
         * @param int $code
         * @param string $message
         */
        public function assertResponseCode($code, $message = '')
        {
        }
        /**
         * @param int $code
         * @param string $message
         */
        public function assertNotResponseCode($code, $message = '')
        {
        }
        /**
         * @param string $header
         * @param string $message
         */
        public function assertHeader($header, $message = '')
        {
        }
        /**
         * @param string $header
         * @param string $message
         */
        public function assertNotHeader($header, $message = '')
        {
        }
        /**
         * @param string $header
         * @param string $match
         * @param string $message
         */
        public function assertHeaderContains($header, $match, $message = '')
        {
        }
        /**
         * @param string $header
         * @param string $match
         * @param string $message
         */
        public function assertNotHeaderContains($header, $match, $message = '')
        {
        }
        /**
         * @param string $header
         * @param string $pattern
         * @param string $message
         */
        public function assertHeaderRegex($header, $pattern, $message = '')
        {
        }
        /**
         * @param string $header
         * @param string $pattern
         * @param string $message
         */
        public function assertNotHeaderRegex($header, $pattern, $message = '')
        {
        }
        /**
         * @param string $module
         * @param string $message
         */
        public function assertModule($module, $message = '')
        {
        }
        /**
         * @param string $module
         * @param string $message
         */
        public function assertNotModule($module, $message = '')
        {
        }
        /**
         * @param string $controller
         * @param string $message
         */
        public function assertController($controller, $message = '')
        {
        }
        /**
         * @param string $controller
         * @param string $message
         */
        public function assertNotController($controller, $message = '')
        {
        }
        /**
         * @param string $action
         * @param string $message
         */
        public function assertAction($action, $message = '')
        {
        }
        /**
         * @param string $action
         * @param string $message
         */
        public function assertNotAction($action, $message = '')
        {
        }
        /**
         * @param string $route
         * @param string $message
         */
        public function assertRoute($route, $message = '')
        {
        }
        /**
         * @param string $route
         * @param string $message
         */
        public function assertNotRoute($route, $message = '')
        {
        }
        /**
         * @return Zend_Controller_Front
         */
        public function getFrontController()
        {
        }
        /**
         * @return Zend_Controller_Request_HttpTestCase
         */
        public function getRequest()
        {
        }
        /**
         * @return Zend_Controller_Response_HttpTestCase
         */
        public function getResponse()
        {
        }
        /**
         * @return Zend_Dom_Query
         */
        public function getQuery()
        {
        }
        /**
         * @param array<array-key, mixed> $urlOptions
         * @param null|string $name
         * @param bool $reset
         * @param bool $encode
         *
         * @return string
         *
         * @throws Exception
         * @throws Zend_Controller_Router_Exception
         */
        public function url($urlOptions = array(), $name = null, $reset = false, $encode = true)
        {
        }
        /**
         * @param array<array-key, mixed> $urlOptions
         * @param bool $actionControllerModuleOnly
         *
         * @return mixed
         */
        public function urlizeOptions($urlOptions, $actionControllerModuleOnly = true)
        {
        }
        public function _incrementAssertionCount()
        {
        }
    }
    class Zend_Test_PHPUnit_DatabaseTestCase extends \PHPUnit_Extensions_Database_TestCase
    {
        /**
         * @param Zend_Db_Adapter_Abstract $connection
         * @param string $schema
         *
         * @return Zend_Test_PHPUnit_Db_Connection
         */
        public function createZendDbConnection(\Zend_Db_Adapter_Abstract $connection, $schema)
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function getAdapter()
        {
        }
        /**
         * @return PHPUnit_Extensions_Database_Operation_DatabaseOperation
         */
        public function getSetUpOperation()
        {
        }
        /**
         * @return PHPUnit_Extensions_Database_Operation_DatabaseOperation
         */
        public function getTearDownOperation()
        {
        }
        /**
         * @param array<array-key, mixed> $tables
         *
         * @return Zend_Test_PHPUnit_Db_DataSet_DbTableDataSet
         */
        public function createDbTableDataSet(array $tables = array())
        {
        }
        /**
         * @param Zend_Db_Table_Abstract $table
         * @param null|string $where
         * @param null|string $order
         * @param null|string $count
         * @param null|string $offset
         *
         * @return Zend_Test_PHPUnit_Db_DataSet_DbTable
         */
        public function createDbTable(\Zend_Db_Table_Abstract $table, $where = null, $order = null, $count = null, $offset = null)
        {
        }
        public function createDbRowset(\Zend_Db_Table_Rowset_Abstract $rowset, $tableName = null)
        {
        }
    }
    class Zend_Test_PHPUnit_Db_Connection extends \PHPUnit_Extensions_Database_DB_DefaultDatabaseConnection
    {
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_connection;
        /**
         * @var string
         */
        public $_schema;
        public $_metaData;
        /**
         * @param Zend_Db_Adapter_Abstract $db
         * @param string $schema
         */
        public function __construct(\Zend_Db_Adapter_Abstract $db, $schema)
        {
        }
        /**
         * @return void
         */
        public function close()
        {
        }
        /**
         * @param string $resultName
         * @param string $sql
         *
         * @return PHPUnit_Extensions_Database_DataSet_ITable
         */
        public function createQueryTable($resultName, $sql)
        {
        }
        /**
         * @return Zend_Db_Adapter_Abstract
         */
        public function getConnection()
        {
        }
        /**
         * @return PHPUnit_Extensions_Database_DB_IMetaData
         */
        public function getMetaData()
        {
        }
        /**
         * @return string
         */
        public function getSchema()
        {
        }
        /**
         * @return string
         */
        public function getTruncateCommand()
        {
        }
    }
    class Zend_Test_PHPUnit_Db_DataSet_DbRowset extends \PHPUnit_Extensions_Database_DataSet_AbstractTable
    {
        /**
         * @param Zend_Db_Table_Rowset_Abstract $rowset
         * @param null|string $tableName
         */
        public function __construct(\Zend_Db_Table_Rowset_Abstract $rowset, $tableName = null)
        {
        }
    }
    class Zend_Test_PHPUnit_Db_DataSet_DbTable extends \PHPUnit_Extensions_Database_DataSet_QueryTable
    {
        /**
         * @var Zend_Db_Table_Abstract
         */
        public $_table;
        /**
         * @var array<array-key, mixed>
         */
        public $_columns;
        /**
         * @var string
         */
        public $_where;
        /**
         * @var string
         */
        public $_orderBy;
        /**
         * @var string
         */
        public $_count;
        /**
         * @var int
         */
        public $_offset;
        /**
         * @param Zend_Db_Table_Abstract $table
         * @param Zend_Db_Select|null|string $where
         * @param null|string $order
         * @param int|null $count
         * @param int|null $offset
         */
        public function __construct(\Zend_Db_Table_Abstract $table, $where = null, $order = null, $count = null, $offset = null)
        {
        }
        /**
         * @return void
         */
        public function loadData()
        {
        }
        public function createTableMetaData()
        {
        }
    }
    class Zend_Test_PHPUnit_Db_DataSet_DbTableDataSet extends \PHPUnit_Extensions_Database_DataSet_AbstractDataSet
    {
        /**
         * @var array<array-key, mixed>
         */
        public $tables;
        /**
         * @param Zend_Db_Table_Abstract $table
         * @param null|string $where
         * @param null|string $order
         * @param null|string $count
         * @param null|string $offset
         */
        public function addTable(\Zend_Db_Table_Abstract $table, $where = null, $order = null, $count = null, $offset = null)
        {
        }
        /**
         * @param bool $reverse
         *
         * @return PHPUnit_Extensions_Database_DB_TableIterator
         */
        public function createIterator($reverse = false)
        {
        }
        /**
         * @param string $tableName
         *
         * @return PHPUnit_Extensions_Database_DB_Table
         */
        public function getTable($tableName)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTableNames()
        {
        }
    }
    class Zend_Test_PHPUnit_Db_DataSet_QueryDataSet extends \PHPUnit_Extensions_Database_DataSet_QueryDataSet
    {
        /**
         * @param PHPUnit_Extensions_Database_DB_IDatabaseConnection $databaseConnection
         */
        public function __construct(\PHPUnit_Extensions_Database_DB_IDatabaseConnection $databaseConnection)
        {
        }
        /**
         * @param string $tableName
         * @param Zend_Db_Select|null|string $query
         */
        public function addTable($tableName, $query = null)
        {
        }
    }
    class Zend_Test_PHPUnit_Db_DataSet_QueryTable extends \PHPUnit_Extensions_Database_DataSet_QueryTable
    {
        /**
         * @param string $tableName
         * @param string $query
         * @param PHPUnit_Extensions_Database_DB_IDatabaseConnection $databaseConnection
         *
         * @throws Zend_Test_PHPUnit_Db_Exception
         */
        public function __construct($tableName, $query, \PHPUnit_Extensions_Database_DB_IDatabaseConnection $databaseConnection)
        {
        }
        /**
         * @return void
         */
        public function loadData()
        {
        }
        public function createTableMetaData()
        {
        }
    }
    class Zend_Test_PHPUnit_Db_Exception extends \Zend_Exception
    {
    }
    class Zend_Test_PHPUnit_Db_Metadata_Generic implements \PHPUnit_Extensions_Database_DB_IMetaData
    {
        /**
         * @var Zend_Db_Adapter_Abstract
         */
        public $_connection;
        /**
         * @var string
         */
        public $_schema;
        /**
         * @var array<array-key, mixed>
         */
        public $_tableMetadata;
        /**
         * @param Zend_Db_Adapter_Abstract $db
         * @param string $schema
         */
        public function __construct(\Zend_Db_Adapter_Abstract $db, $schema)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTableNames()
        {
        }
        /**
         * @param string $tableName
         *
         * @return array<array-key, mixed>
         */
        public function getTableDescription($tableName)
        {
        }
        /**
         * @param string $tableName
         *
         * @return array<array-key, mixed>
         */
        public function getTableColumns($tableName)
        {
        }
        /**
         * @param string $tableName
         *
         * @return array<array-key, mixed>
         */
        public function getTablePrimaryKeys($tableName)
        {
        }
        /**
         * @return string
         */
        public function getSchema()
        {
        }
        /**
         * @param string $object
         *
         * @return string
         */
        public function quoteSchemaObject($object)
        {
        }
        /**
         * @return bool
         */
        public function allowsCascading()
        {
        }
        /**
         * @param string $tableName
         */
        public function disablePrimaryKeys($tableName)
        {
        }
        /**
         * @param string $tableName
         */
        public function enablePrimaryKeys($tableName)
        {
        }
    }
    class Zend_Test_PHPUnit_Db_Operation_DeleteAll implements \PHPUnit_Extensions_Database_Operation_IDatabaseOperation
    {
        /**
         * @param PHPUnit_Extensions_Database_DB_IDatabaseConnection $connection
         * @param PHPUnit_Extensions_Database_DataSet_IDataSet $dataSet
         */
        public function execute(\PHPUnit_Extensions_Database_DB_IDatabaseConnection $connection, \PHPUnit_Extensions_Database_DataSet_IDataSet $dataSet)
        {
        }
    }
    class Zend_Test_PHPUnit_Db_Operation_Insert implements \PHPUnit_Extensions_Database_Operation_IDatabaseOperation
    {
        /**
         * @param PHPUnit_Extensions_Database_DB_IDatabaseConnection $connection
         * @param PHPUnit_Extensions_Database_DataSet_IDataSet $dataSet
         */
        public function execute(\PHPUnit_Extensions_Database_DB_IDatabaseConnection $connection, \PHPUnit_Extensions_Database_DataSet_IDataSet $dataSet)
        {
        }
        /**
         * @param PHPUnit_Extensions_Database_DataSet_ITable $table
         * @param int $rowNum
         *
         * @return array<array-key, mixed>
         */
        public function buildInsertValues(\PHPUnit_Extensions_Database_DataSet_ITable $table, $rowNum)
        {
        }
    }
    class Zend_Test_PHPUnit_Db_Operation_Truncate implements \PHPUnit_Extensions_Database_Operation_IDatabaseOperation
    {
        /**
         * @param PHPUnit_Extensions_Database_DB_IDatabaseConnection $connection
         * @param PHPUnit_Extensions_Database_DataSet_IDataSet $dataSet
         *
         * @return void
         */
        public function execute(\PHPUnit_Extensions_Database_DB_IDatabaseConnection $connection, \PHPUnit_Extensions_Database_DataSet_IDataSet $dataSet)
        {
        }
        /**
         * @param Zend_Db_Adapter_Abstract $db
         * @param string $tableName
         *
         * @return void
         */
        public function _truncate(\Zend_Db_Adapter_Abstract $db, $tableName)
        {
        }
        /**
         * @param Zend_Db_Adapter_Abstract $db
         *
         * @return bool
         */
        public function _isMssqlOrOracle($db)
        {
        }
    }
    class Zend_Test_PHPUnit_Db_SimpleTester extends \PHPUnit_Extensions_Database_DefaultTester
    {
        /**
         * @param PHPUnit_Extensions_Database_DB_IDatabaseConnection $connection
         */
        public function __construct(\PHPUnit_Extensions_Database_DB_IDatabaseConnection $connection)
        {
        }
        /**
         * @param PHPUnit_Extensions_Database_DataSet_IDataSet $dataSet
         */
        public function setUpDatabase(\PHPUnit_Extensions_Database_DataSet_IDataSet $dataSet)
        {
        }
    }
    class Zend_Text_Exception extends \Zend_Exception
    {
    }
    class Zend_Text_Figlet
    {
        public const SM_EQUAL = 1;
        public const SM_LOWLINE = 2;
        public const SM_HIERARCHY = 4;
        public const SM_PAIR = 8;
        public const SM_BIGX = 16;
        public const SM_HARDBLANK = 32;
        public const SM_KERN = 64;
        public const SM_SMUSH = 128;
        public const SMO_NO = 0;
        public const SMO_YES = 1;
        public const SMO_FORCE = 2;
        public const JUSTIFICATION_LEFT = 0;
        public const JUSTIFICATION_CENTER = 1;
        public const JUSTIFICATION_RIGHT = 2;
        public const DIRECTION_LEFT_TO_RIGHT = 0;
        public const DIRECTION_RIGHT_TO_LEFT = 1;
        public const FONTFILE_MAGIC_NUMBER = 'flf2';
        /**
         * @var array<array-key, mixed>
         */
        public $_charList;
        /**
         * @var bool
         */
        public $_fontLoaded;
        /**
         * @var array<array-key, mixed>
         */
        public $_germanChars;
        /**
         * @var int
         */
        public $_outputWidth;
        /**
         * @var string
         */
        public $_hardBlank;
        /**
         * @var int
         */
        public $_charHeight;
        /**
         * @var int
         */
        public $_maxLength;
        /**
         * @var int
         */
        public $_smushMode;
        /**
         * @var int
         */
        public $_fontSmush;
        /**
         * @var int
         */
        public $_userSmush;
        /**
         * @var bool
         */
        public $_handleParagraphs;
        /**
         * @var int
         */
        public $_justification;
        /**
         * @var int
         */
        public $_rightToLeft;
        /**
         * @var int
         */
        public $_smushOverride;
        /**
         * @var array<array-key, mixed>
         */
        public $_fontOptions;
        /**
         * @var int
         */
        public $_previousCharWidth;
        /**
         * @var int
         */
        public $_currentCharWidth;
        /**
         * @var int
         */
        public $_outlineLength;
        /**
         * @var int
         */
        public $_outlineLengthLimit;
        /**
         * @var string
         */
        public $_inCharLine;
        /**
         * @var int
         */
        public $_inCharLineLength;
        /**
         * @var int
         */
        public $_inCharLineLengthLimit;
        /**
         * @var array<array-key, mixed>
         */
        public $_currentChar;
        /**
         * @var array<array-key, mixed>
         */
        public $_outputLine;
        /**
         * @var string
         */
        public $_output;
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Text_Figlet
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Text_Figlet
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param string $font
         *
         * @return Zend_Text_Figlet
         */
        public function setFont($font)
        {
        }
        /**
         * @param bool $handleParagraphs
         *
         * @return Zend_Text_Figlet
         */
        public function setHandleParagraphs($handleParagraphs)
        {
        }
        /**
         * @param int $justification
         *
         * @return Zend_Text_Figlet
         */
        public function setJustification($justification)
        {
        }
        /**
         * @param int $outputWidth
         *
         * @return Zend_Text_Figlet
         */
        public function setOutputWidth($outputWidth)
        {
        }
        /**
         * @param int $rightToLeft
         *
         * @return Zend_Text_Figlet
         */
        public function setRightToLeft($rightToLeft)
        {
        }
        /**
         * @param int $smushMode
         *
         * @return Zend_Text_Figlet
         */
        public function setSmushMode($smushMode)
        {
        }
        /**
         * @param string $text
         * @param string $encoding
         *
         * @return string
         *
         * @throws InvalidArgumentException
         * @throws Zend_Text_Figlet_Exception
         */
        public function render($text, $encoding = 'UTF-8')
        {
        }
        /**
         * @param string $string
         *
         * @return void
         */
        public function _putString($string)
        {
        }
        /**
         * @return void
         */
        public function _appendLine()
        {
        }
        /**
         * @return void
         */
        public function _splitLine()
        {
        }
        /**
         * @return void
         */
        public function _clearLine()
        {
        }
        /**
         * @param string $char
         *
         * @return bool
         */
        public function _addChar($char)
        {
        }
        /**
         * @param string $char
         *
         * @return void
         */
        public function _getLetter($char)
        {
        }
        /**
         * @return int
         */
        public function _smushAmount()
        {
        }
        /**
         * @param string $leftChar
         * @param string $rightChar
         *
         * @return string
         */
        public function _smushem($leftChar, $rightChar)
        {
        }
        /**
         * @param string $fontFile
         *
         * @return void
         *
         * @throws Zend_Text_Figlet_Exception
         */
        public function _loadFont($fontFile)
        {
        }
        /**
         * @return void
         */
        public function _setUsedSmush()
        {
        }
        /**
         * @param resource $fp
         *
         * @return string
         */
        public function _readMagic($fp)
        {
        }
        /**
         * @param resource $fp
         *
         * @return void
         */
        public function _skipToEol($fp)
        {
        }
        /**
         * @param resource $fp
         *
         * @return array<array-key, mixed>
         */
        public function _loadChar($fp)
        {
        }
        /**
         * @param string $c
         *
         * @return int
         */
        public function _uniOrd($c)
        {
        }
    }
    class Zend_Text_Figlet_Exception extends \Zend_Text_Exception
    {
    }
    class Zend_Text_MultiByte
    {
        /**
         * @param string $string
         * @param int $width
         * @param string $break
         * @param bool $cut
         * @param string $charset
         *
         * @return string
         */
        public static function wordWrap($string, $width = 75, $break = '
', $cut = false, $charset = 'utf-8')
        {
        }
        /**
         * @param string $input
         * @param int $padLength
         * @param string $padString
         * @param int $padType
         * @param string $charset
         *
         * @return string
         */
        public static function strPad($input, $padLength, $padString = ' ', $padType, $charset = 'utf-8')
        {
        }
    }
    class Zend_Text_Table
    {
        public const AUTO_SEPARATE_NONE = 0;
        public const AUTO_SEPARATE_HEADER = 1;
        public const AUTO_SEPARATE_FOOTER = 2;
        public const AUTO_SEPARATE_ALL = 4;
        /**
         * @var Zend_Text_Table_Decorator_Interface
         */
        public $_decorator;
        /**
         * @var array<array-key, mixed>
         */
        public $_columnWidths;
        /**
         * @var array<array-key, mixed>
         */
        public $_rows;
        /**
         * @var int
         */
        public $_autoSeparate;
        /**
         * @var int
         */
        public $_padding;
        /**
         * @var array<array-key, mixed>
         */
        public $_defaultColumnAligns;
        /**
         * @var string
         */
        public $_pluginLoader;
        /**
         * @var string
         */
        public static $_inputCharset;
        /**
         * @var string
         */
        public static $_outputCharset;
        /**
         * @var array<array-key, mixed>
         */
        public $_skipOptions;
        /**
         * @param Zend_Config|array<array-key, mixed>|null $options
         *
         * @throws Zend_Text_Table_Exception
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Text_Table
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Config $config
         *
         * @return Zend_Text_Table
         */
        public function setConfig(\Zend_Config $config)
        {
        }
        /**
         * @param array<array-key, mixed> $columnWidths
         *
         * @return Zend_Text_Table
         *
         * @throws Zend_Text_Table_Exception
         */
        public function setColumnWidths(array $columnWidths)
        {
        }
        /**
         * @param int $autoSeparate
         *
         * @return Zend_Text_Table
         */
        public function setAutoSeparate($autoSeparate)
        {
        }
        /**
         * @param Zend_Text_Table_Decorator_Interface|string $decorator
         *
         * @return Zend_Text_Table
         */
        public function setDecorator($decorator)
        {
        }
        /**
         * @param int $padding
         *
         * @return Zend_Text_Table
         */
        public function setPadding($padding)
        {
        }
        /**
         * @return Zend_Loader_PluginLoader
         */
        public function getPluginLoader()
        {
        }
        /**
         * @param int $columnNum
         * @param string $align
         *
         * @return Zend_Text_Table
         */
        public function setDefaultColumnAlign($columnNum, $align)
        {
        }
        /**
         * @param string $charset
         */
        public static function setInputCharset($charset)
        {
        }
        public static function getInputCharset()
        {
        }
        /**
         * @param string $charset
         */
        public static function setOutputCharset($charset)
        {
        }
        public static function getOutputCharset()
        {
        }
        /**
         * @param Zend_Text_Table_Row|array<array-key, mixed> $row
         *
         * @return Zend_Text_Table
         *
         * @throws Zend_Text_Table_Exception
         */
        public function appendRow($row)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Text_Table_Exception
         */
        public function render()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Text_Table_Column
    {
        public const ALIGN_LEFT = 'left';
        public const ALIGN_CENTER = 'center';
        public const ALIGN_RIGHT = 'right';
        /**
         * @var string
         */
        public $_content;
        /**
         * @var string
         */
        public $_align;
        /**
         * @var int
         */
        public $_colSpan;
        /**
         * @var array<array-key, mixed>
         */
        public $_allowedAligns;
        /**
         * @param null|string $content
         * @param null|string $align
         * @param int|null $colSpan
         * @param null|string $charset
         */
        public function __construct($content = null, $align = null, $colSpan = null, $charset = null)
        {
        }
        /**
         * @param string $content
         * @param null|string $charset
         *
         * @return Zend_Text_Table_Column
         *
         * @throws Zend_Text_Table_Exception
         */
        public function setContent($content, $charset = null)
        {
        }
        /**
         * @param string $align
         *
         * @return Zend_Text_Table_Column
         *
         * @throws Zend_Text_Table_Exception
         */
        public function setAlign($align)
        {
        }
        /**
         * @param int $colSpan
         *
         * @return Zend_Text_Table_Column
         *
         * @throws Zend_Text_Table_Exception
         */
        public function setColSpan($colSpan)
        {
        }
        /**
         * @return int
         */
        public function getColSpan()
        {
        }
        /**
         * @param int $columnWidth
         * @param int $padding
         *
         * @return string
         *
         * @throws Zend_Text_Table_Exception
         */
        public function render($columnWidth, $padding = 0)
        {
        }
    }
    class Zend_Text_Table_Decorator_Ascii implements \Zend_Text_Table_Decorator_Interface
    {
        /**
         * @return string
         */
        public function getTopLeft()
        {
        }
        /**
         * @return string
         */
        public function getTopRight()
        {
        }
        /**
         * @return string
         */
        public function getBottomLeft()
        {
        }
        /**
         * @return string
         */
        public function getBottomRight()
        {
        }
        /**
         * @return string
         */
        public function getVertical()
        {
        }
        /**
         * @return string
         */
        public function getHorizontal()
        {
        }
        /**
         * @return string
         */
        public function getCross()
        {
        }
        /**
         * @return string
         */
        public function getVerticalRight()
        {
        }
        /**
         * @return string
         */
        public function getVerticalLeft()
        {
        }
        /**
         * @return string
         */
        public function getHorizontalDown()
        {
        }
        /**
         * @return string
         */
        public function getHorizontalUp()
        {
        }
    }
    interface Zend_Text_Table_Decorator_Interface
    {
        /**
         * @return string
         */
        public function getTopLeft();
        /**
         * @return string
         */
        public function getTopRight();
        /**
         * @return string
         */
        public function getBottomLeft();
        /**
         * @return string
         */
        public function getBottomRight();
        /**
         * @return string
         */
        public function getVertical();
        /**
         * @return string
         */
        public function getHorizontal();
        /**
         * @return string
         */
        public function getCross();
        /**
         * @return string
         */
        public function getVerticalRight();
        /**
         * @return string
         */
        public function getVerticalLeft();
        /**
         * @return string
         */
        public function getHorizontalDown();
        /**
         * @return string
         */
        public function getHorizontalUp();
    }
    class Zend_Text_Table_Decorator_Unicode implements \Zend_Text_Table_Decorator_Interface
    {
        /**
         * @return string
         */
        public function getTopLeft()
        {
        }
        /**
         * @return string
         */
        public function getTopRight()
        {
        }
        /**
         * @return string
         */
        public function getBottomLeft()
        {
        }
        /**
         * @return string
         */
        public function getBottomRight()
        {
        }
        /**
         * @return string
         */
        public function getVertical()
        {
        }
        /**
         * @return string
         */
        public function getHorizontal()
        {
        }
        /**
         * @return string
         */
        public function getCross()
        {
        }
        /**
         * @return string
         */
        public function getVerticalRight()
        {
        }
        /**
         * @return string
         */
        public function getVerticalLeft()
        {
        }
        /**
         * @return string
         */
        public function getHorizontalDown()
        {
        }
        /**
         * @return string
         */
        public function getHorizontalUp()
        {
        }
        /**
         * @param int $code
         *
         * @return false|string
         */
        public function _uniChar($code)
        {
        }
    }
    class Zend_Text_Table_Exception extends \Zend_Text_Exception
    {
    }
    class Zend_Text_Table_Row
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_columns;
        /**
         * @var array<array-key, mixed>
         */
        public $_columnWidths;
        /**
         * @param string $content
         * @param array<array-key, mixed>|null $options
         *
         * @return Zend_Text_Table_Row
         */
        public function createColumn($content, ?array $options = null)
        {
        }
        /**
         * @param Zend_Text_Table_Column $column
         *
         * @return Zend_Text_Table_Row
         */
        public function appendColumn(\Zend_Text_Table_Column $column)
        {
        }
        /**
         * @param int $index
         *
         * @return Zend_Text_Table_Column|null
         */
        public function getColumn($index)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getColumns()
        {
        }
        /**
         * @return int
         *
         * @throws Zend_Text_Table_Exception
         */
        public function getColumnWidths()
        {
        }
        /**
         * @param array<array-key, mixed> $columnWidths
         * @param Zend_Text_Table_Decorator_Interface $decorator
         * @param int $padding
         *
         * @return string
         *
         * @throws Zend_Text_Table_Exception
         */
        public function render(array $columnWidths, \Zend_Text_Table_Decorator_Interface $decorator, $padding = 0)
        {
        }
    }
    class Zend_TimeSync implements \IteratorAggregate
    {
        public const DEFAULT_PROTOCOL = 'Ntp';
        /**
         * @var array<array-key, mixed>
         */
        public $_timeservers;
        /**
         * @var object
         */
        public $_current;
        /**
         * @var array<array-key, mixed>
         */
        public $_allowedSchemes;
        /**
         * @var array<array-key, mixed>
         */
        public static $options;
        /**
         * @param array<array-key, mixed>|null|string $target
         * @param null|string $alias
         *
         * @return object
         */
        public function __construct($target = null, $alias = null)
        {
        }
        /**
         * @return ArrayObject
         */
        public function getIterator()
        {
        }
        /**
         * @param array<array-key, mixed>|string $target
         * @param null|string $alias
         *
         * @throws Zend_TimeSync_Exception
         */
        public function addServer($target, $alias = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         */
        public static function setOptions(array $options)
        {
        }
        /**
         * @param int|string $alias
         *
         * @throws Zend_TimeSync_Exception
         */
        public function setServer($alias)
        {
        }
        /**
         * @param null|string $key
         *
         * @return mixed
         *
         * @throws Zend_TimeSync_Exception
         */
        public static function getOptions($key = null)
        {
        }
        /**
         * @param int|null|string $alias
         *
         * @return object
         *
         * @throws Zend_TimeSync_Exception
         */
        public function getServer($alias = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getInfo()
        {
        }
        /**
         * @param Zend_Locale|null $locale
         *
         * @return object
         *
         * @throws Zend_TimeSync_Exception
         */
        public function getDate($locale = null)
        {
        }
        /**
         * @param array<array-key, mixed>|string $target
         * @param string $alias
         */
        public function _addServer($target, $alias)
        {
        }
    }
    class Zend_TimeSync_Exception extends \Zend_Exception
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_exceptions;
        /**
         * @param Zend_TimeSync_Exception $exception
         *
         * @return void
         */
        public function addException(\Zend_TimeSync_Exception $exception)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function get()
        {
        }
    }
    class Zend_TimeSync_Ntp extends \Zend_TimeSync_Protocol
    {
        /**
         * @var int
         */
        public $_port;
        /**
         * @param string $timeserver
         * @param int $port
         */
        public function __construct($timeserver, $port = 123)
        {
        }
        /**
         * @return string
         */
        public function _prepare()
        {
        }
        /**
         * @param string $input
         *
         * @return int
         */
        public function _getInteger($input)
        {
        }
        /**
         * @param string $input
         *
         * @return float
         */
        public function _getFloat($input)
        {
        }
        /**
         * @param string $input
         *
         * @return float
         */
        public function _getTimestamp($input)
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_TimeSync_Exception
         */
        public function _read()
        {
        }
        /**
         * @param string $data
         *
         * @return void
         */
        public function _write($data)
        {
        }
        /**
         * @param array<array-key, mixed>|string $binary
         *
         * @return int
         */
        public function _extract($binary)
        {
        }
    }
    class Zend_TimeSync_Protocol
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_socket;
        /**
         * @var array<array-key, mixed>
         */
        public $_exceptions;
        /**
         * @var string
         */
        public $_timeserver;
        /**
         * @var array<array-key, mixed>
         */
        public $_info;
        /**
         * @return mixed
         */
        public abstract function _prepare();
        /**
         * @return mixed
         */
        public abstract function _read();
        /**
         * @param string $data
         *
         * @return void
         */
        public abstract function _write($data);
        /**
         * @param array<array-key, mixed>|string $data
         *
         * @return int
         */
        public abstract function _extract($data);
        /**
         * @return void
         *
         * @throws Zend_TimeSync_Exception
         */
        public function _connect()
        {
        }
        /**
         * @return void
         */
        public function _disconnect()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getInfo()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Date
         */
        public function getDate($locale = null)
        {
        }
    }
    class Zend_TimeSync_Sntp extends \Zend_TimeSync_Protocol
    {
        /**
         * @var int
         */
        public $_port;
        /**
         * @var int
         */
        public $_delay;
        /**
         * @param string $timeserver
         * @param int $port
         */
        public function __construct($timeserver, $port)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _prepare()
        {
        }
        /**
         * @return string
         */
        public function _read()
        {
        }
        /**
         * @param string $data
         *
         * @return void
         */
        public function _write($data)
        {
        }
        /**
         * @param string $result
         *
         * @return int
         */
        public function _extract($result)
        {
        }
    }
    class Zend_Tool_Framework_Action_Base implements \Zend_Tool_Framework_Action_Interface
    {
        /**
         * @var string
         */
        public $_name;
        /**
         * @param null|unknown_type $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Tool_Framework_Action_Base
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function _parseName()
        {
        }
    }
    class Zend_Tool_Framework_Action_Exception extends \Zend_Tool_Framework_Exception
    {
    }
    interface Zend_Tool_Framework_Action_Interface
    {
        public function getName();
    }
    class Zend_Tool_Framework_Action_Repository implements \Zend_Tool_Framework_Registry_EnabledInterface, \IteratorAggregate, \Countable
    {
        /**
         * @var Zend_Tool_Framework_Registry_Interface
         */
        public $_registry;
        /**
         * @var array<array-key, mixed>
         */
        public $_actions;
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @param Zend_Tool_Framework_Action_Interface $action
         *
         * @return Zend_Tool_Framework_Action_Repository
         */
        public function addAction(\Zend_Tool_Framework_Action_Interface $action, $overrideExistingAction = false)
        {
        }
        /**
         * @return unknown
         */
        public function process()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getActions()
        {
        }
        /**
         * @param string $actionName
         *
         * @return Zend_Tool_Framework_Action_Interface
         */
        public function getAction($actionName)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getIterator()
        {
        }
    }
    class Zend_Tool_Framework_Client_Abstract implements \Zend_Tool_Framework_Registry_EnabledInterface
    {
        /**
         * @var Zend_Tool_Framework_Registry
         */
        public $_registry;
        /**
         * @var callback|null
         */
        public $_interactiveCallback;
        /**
         * @var bool
         */
        public $_isInitialized;
        /**
         * @var Zend_Log
         */
        public $_debugLogger;
        public function __construct($options = array())
        {
        }
        public function setOptions(array $options)
        {
        }
        /**
         * @return string
         */
        public abstract function getName();
        public function initialize()
        {
        }
        public function _preInit()
        {
        }
        public abstract function _preDispatch();
        public function _postDispatch()
        {
        }
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Client_Abstract
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @return Zend_Tool_Framework_Registry_Interface
         */
        public function getRegistry()
        {
        }
        /**
         * @return bool
         */
        public function hasInteractiveInput()
        {
        }
        public function promptInteractiveInput($inputRequest)
        {
        }
        public function dispatch()
        {
        }
        public function convertToClientNaming($string)
        {
        }
        public function convertFromClientNaming($string)
        {
        }
        public function _handleDispatch()
        {
        }
        public function _handleDispatchExecution($class, $methodName, $callParameters)
        {
        }
    }
    class Zend_Tool_Framework_Client_Config
    {
        public $_configFilepath = null;
        /**
         * @var Zend_Config
         */
        public $_config;
        /**
         * @param array<array-key, mixed> $options
         */
        public function __config($options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param string $configFilepath
         *
         * @return Zend_Tool_Framework_Client_Config
         */
        public function setConfigFilepath($configFilepath)
        {
        }
        /**
         * @param string $configFilepath
         */
        public function loadConfig($configFilepath)
        {
        }
        /**
         * @return string
         */
        public function getConfigFilepath()
        {
        }
        /**
         * @param string $name
         * @param null|string $defaultValue
         *
         * @return mixed
         */
        public function get($name, $defaultValue = null)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         */
        public function __unset($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @return Zend_Config
         *
         * @throws Zend_Tool_Framework_Client_Exception
         */
        public function getConfigInstance()
        {
        }
        /**
         * @return bool
         */
        public function save()
        {
        }
        /**
         * @return Zend_Config_Writer_FileAbstract
         */
        public function getConfigWriter()
        {
        }
    }
    class Zend_Tool_Framework_Client_Console extends \Zend_Tool_Framework_Client_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_configOptions;
        /**
         * @var array<array-key, mixed>
         */
        public $_storageOptions;
        /**
         * @var Zend_Filter_Word_CamelCaseToDash
         */
        public $_filterToClientNaming;
        /**
         * @var Zend_Filter_Word_DashToCamelCase
         */
        public $_filterFromClientNaming;
        /**
         * @var array<array-key, mixed>
         */
        public $_classesToLoad;
        public static function main($options = array())
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param array<array-key, mixed> $configOptions
         */
        public function setConfigOptions($configOptions)
        {
        }
        /**
         * @param array<array-key, mixed> $storageOptions
         */
        public function setStorageOptions($storageOptions)
        {
        }
        /**
         * @param array<array-key, mixed> $classesToLoad
         */
        public function setClassesToLoad($classesToLoad)
        {
        }
        public function _preInit()
        {
        }
        public function _preDispatch()
        {
        }
        public function _postDispatch()
        {
        }
        /**
         * @param Zend_Tool_Framework_Client_Interactive_InputRequest $inputRequest
         *
         * @return string
         */
        public function handleInteractiveInputRequest(\Zend_Tool_Framework_Client_Interactive_InputRequest $inputRequest)
        {
        }
        /**
         * @param string $output
         */
        public function handleInteractiveOutput($output)
        {
        }
        /**
         * @param Zend_Tool_Framework_Provider_Interface $provider
         * @param Zend_Tool_Framework_Action_Interface $actionInterface
         * @param string $missingParameterName
         *
         * @return string
         */
        public function getMissingParameterPromptString(\Zend_Tool_Framework_Provider_Interface $provider, \Zend_Tool_Framework_Action_Interface $actionInterface, $missingParameterName)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public function convertToClientNaming($string)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public function convertFromClientNaming($string)
        {
        }
    }
    class Zend_Tool_Framework_Client_Console_ArgumentParser implements \Zend_Tool_Framework_Registry_EnabledInterface
    {
        /**
         * @var Zend_Tool_Framework_Registry_Interface
         */
        public $_registry;
        /**
         * @var Zend_Tool_Framework_Manifest_Repository
         */
        public $_manifestRepository;
        /**
         * @var Zend_Tool_Framework_Client_Request
         */
        public $_request;
        /**
         * @var Zend_Tool_Framework_Client_Response
         */
        public $_response;
        public $_argumentsOriginal = null;
        public $_argumentsWorking = null;
        /**
         * @var bool
         */
        public $_help;
        public $_helpKnownAction = false;
        public $_helpKnownProvider = false;
        public $_helpKnownSpecialty = false;
        /**
         * @param array<array-key, mixed> $arguments
         *
         * @return Zend_Tool_Framework_Client_Console_ArgumentParser
         */
        public function setArguments(array $arguments)
        {
        }
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Client_Console_ArgumentParser
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @return null
         */
        public function parse()
        {
        }
        /**
         * @return null
         */
        public function _parseGlobalPart()
        {
        }
        /**
         * @return null
         */
        public function _parseActionPart()
        {
        }
        /**
         * @return null
         */
        public function _parseProviderPart()
        {
        }
        /**
         * @return null
         */
        public function _parseProviderOptionsPart()
        {
        }
        /**
         * @param unknown_type $options
         */
        public function _createHelpResponse($options = array())
        {
        }
    }
    class Zend_Tool_Framework_Client_Console_HelpSystem
    {
        /**
         * @var Zend_Tool_Framework_Registry_Interface
         */
        public $_registry;
        /**
         * @var Zend_Tool_Framework_Client_Response
         */
        public $_response;
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @param string $errorMessage
         * @param Exception|null $exception
         */
        public function respondWithErrorMessage($errorMessage, ?\Exception $exception = null)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function respondWithGeneralHelp()
        {
        }
        /**
         * @param string $actionName
         *
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function respondWithActionHelp($actionName)
        {
        }
        /**
         * @param string $providerName
         * @param string $actionName
         *
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function respondWithSpecialtyAndParamHelp($providerName, $actionName)
        {
        }
        /**
         * @param string $providerName
         *
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function respondWithProviderHelp($providerName)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function _respondWithHeader()
        {
        }
        /**
         * @param null|string $providerNameFilter
         * @param null|string $actionNameFilter
         * @param bool $includeAllSpecialties
         *
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function _respondWithSystemInformation($providerNameFilter = null, $actionNameFilter = null, $includeAllSpecialties = false)
        {
        }
        /**
         * @param Zend_Tool_Framework_Metadata_Tool $providerMetadata
         *
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function _respondWithProviderName(\Zend_Tool_Framework_Metadata_Tool $providerMetadata)
        {
        }
        /**
         * @param Zend_Tool_Framework_Metadata_Tool $providerMetadata
         * @param Zend_Tool_Framework_Metadata_Tool $actionMetadata
         * @param Zend_Tool_Framework_Metadata_Tool $specialtyMetadata
         * @param Zend_Tool_Framework_Metadata_Tool $parameterLongMetadata
         *
         * @return Zend_Tool_Framework_Client_Console_HelpSystem
         */
        public function _respondWithCommand(\Zend_Tool_Framework_Metadata_Tool $providerMetadata, \Zend_Tool_Framework_Metadata_Tool $actionMetadata, \Zend_Tool_Framework_Metadata_Tool $specialtyMetadata, \Zend_Tool_Framework_Metadata_Tool $parameterLongMetadata)
        {
        }
    }
    class Zend_Tool_Framework_Client_Console_Manifest implements \Zend_Tool_Framework_Registry_EnabledInterface, \Zend_Tool_Framework_Manifest_MetadataManifestable
    {
        /**
         * @var Zend_Tool_Framework_Registry_Interface
         */
        public $_registry;
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Client_Console_Manifest
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMetadata()
        {
        }
        public function getIndex()
        {
        }
    }
    class Zend_Tool_Framework_Client_Console_ResponseDecorator_AlignCenter implements \Zend_Tool_Framework_Client_Response_ContentDecorator_Interface
    {
        public function getName()
        {
        }
        /**
         * @param string $content
         * @param int $lineLength
         */
        public function decorate($content, $lineLength)
        {
        }
    }
    class Zend_Tool_Framework_Client_Console_ResponseDecorator_Blockize implements \Zend_Tool_Framework_Client_Response_ContentDecorator_Interface
    {
        public function getName()
        {
        }
        /**
         * @param string $content
         * @param int $lineLength
         *
         * @return string
         */
        public function decorate($content, $lineLength)
        {
        }
    }
    class Zend_Tool_Framework_Client_Console_ResponseDecorator_Colorizer implements \Zend_Tool_Framework_Client_Response_ContentDecorator_Interface
    {
        public $_colorOptions = 'Psalm could not infer this type';
        public function getName()
        {
        }
        public function decorate($content, $color)
        {
        }
    }
    class Zend_Tool_Framework_Client_Console_ResponseDecorator_Indention implements \Zend_Tool_Framework_Client_Response_ContentDecorator_Interface
    {
        public function getName()
        {
        }
        /**
         * @param string $content
         * @param int $indention
         */
        public function decorate($content, $indention)
        {
        }
    }
    class Zend_Tool_Framework_Client_Exception extends \Zend_Tool_Framework_Exception
    {
    }
    class Zend_Tool_Framework_Client_Interactive_InputHandler
    {
        /**
         * @var Zend_Tool_Framework_Client_Interactive_InputInterface
         */
        public $_client;
        public $_inputRequest = null;
        public function setClient(\Zend_Tool_Framework_Client_Interactive_InputInterface $client)
        {
        }
        public function setInputRequest($inputRequest)
        {
        }
        public function handle()
        {
        }
    }
    interface Zend_Tool_Framework_Client_Interactive_InputInterface
    {
        /**
         * @param Zend_Tool_Framework_Client_Interactive_InputRequest $inputRequest
         *
         * @return Zend_Tool_Framework_Client_Interactive_InputResponse|string
         */
        public function handleInteractiveInputRequest(\Zend_Tool_Framework_Client_Interactive_InputRequest $inputRequest);
        public function getMissingParameterPromptString(\Zend_Tool_Framework_Provider_Interface $provider, \Zend_Tool_Framework_Action_Interface $actionInterface, $missingParameterName);
    }
    class Zend_Tool_Framework_Client_Interactive_InputRequest
    {
        public $_content = null;
        public function __construct($content = null)
        {
        }
        public function setContent($content)
        {
        }
        public function getContent()
        {
        }
        public function __toString()
        {
        }
    }
    class Zend_Tool_Framework_Client_Interactive_InputResponse
    {
        public $_content = null;
        public function __construct($content = null)
        {
        }
        public function setContent($content)
        {
        }
        public function getContent()
        {
        }
    }
    interface Zend_Tool_Framework_Client_Interactive_OutputInterface
    {
        public function handleInteractiveOutput($string);
    }
    class Zend_Tool_Framework_Client_Manifest implements \Zend_Tool_Framework_Registry_EnabledInterface, \Zend_Tool_Framework_Manifest_MetadataManifestable
    {
        /**
         * @var Zend_Tool_Framework_Registry_Interface
         */
        public $_registry;
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Client_Console_Manifest
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMetadata()
        {
        }
        public function getIndex()
        {
        }
    }
    class Zend_Tool_Framework_Client_Request
    {
        /**
         * @var string
         */
        public $_providerName;
        /**
         * @var string
         */
        public $_specialtyName;
        /**
         * @var string
         */
        public $_actionName;
        /**
         * @var array<array-key, mixed>
         */
        public $_actionParameters;
        /**
         * @var array<array-key, mixed>
         */
        public $_providerParameters;
        /**
         * @var bool
         */
        public $_isPretend;
        /**
         * @var bool
         */
        public $_isDebug;
        /**
         * @var bool
         */
        public $_isVerbose;
        /**
         * @var bool
         */
        public $_isDispatchable;
        /**
         * @param string $providerName
         *
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setProviderName($providerName)
        {
        }
        /**
         * @return string
         */
        public function getProviderName()
        {
        }
        /**
         * @param string $specialtyName
         *
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setSpecialtyName($specialtyName)
        {
        }
        /**
         * @return string
         */
        public function getSpecialtyName()
        {
        }
        /**
         * @param string $actionName
         *
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setActionName($actionName)
        {
        }
        /**
         * @return string
         */
        public function getActionName()
        {
        }
        /**
         * @param string $parameterName
         * @param string $parameterValue
         *
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setActionParameter($parameterName, $parameterValue)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getActionParameters()
        {
        }
        /**
         * @param string $parameterName
         *
         * @return string
         */
        public function getActionParameter($parameterName)
        {
        }
        /**
         * @param string $parameterName
         * @param string $parameterValue
         *
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setProviderParameter($parameterName, $parameterValue)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getProviderParameters()
        {
        }
        /**
         * @param string $parameterName
         *
         * @return string
         */
        public function getProviderParameter($parameterName)
        {
        }
        /**
         * @param bool $pretend
         *
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setPretend($pretend)
        {
        }
        /**
         * @return bool
         */
        public function isPretend()
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setDebug($debug)
        {
        }
        /**
         * @return bool
         */
        public function isDebug()
        {
        }
        /**
         * @param bool $verbose
         *
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setVerbose($verbose)
        {
        }
        /**
         * @return bool
         */
        public function isVerbose()
        {
        }
        /**
         * @param bool $dispatchable
         *
         * @return Zend_Tool_Framework_Client_Request
         */
        public function setDispatchable($dispatchable)
        {
        }
        /**
         * @return bool
         */
        public function isDispatchable()
        {
        }
    }
    class Zend_Tool_Framework_Client_Response
    {
        /**
         * @var callback|null
         */
        public $_callback;
        /**
         * @var array<array-key, mixed>
         */
        public $_content;
        /**
         * @var Zend_Tool_Framework_Exception
         */
        public $_exception;
        /**
         * @var array<array-key, mixed>
         */
        public $_decorators;
        /**
         * @var array<array-key, mixed>
         */
        public $_defaultDecoratorOptions;
        /**
         * @param callback $callback
         *
         * @return Zend_Tool_Framework_Client_Response
         */
        public function setContentCallback($callback)
        {
        }
        /**
         * @param string $content
         *
         * @return Zend_Tool_Framework_Client_Response
         */
        public function setContent($content, array $decoratorOptions = array())
        {
        }
        /**
         * @param string $content
         *
         * @return Zend_Tool_Framework_Client_Response
         */
        public function appendContent($content, array $decoratorOptions = array())
        {
        }
        /**
         * @param array<array-key, mixed> $decoratorOptions
         * @param bool $mergeIntoExisting
         *
         * @return Zend_Tool_Framework_Client_Response
         */
        public function setDefaultDecoratorOptions(array $decoratorOptions, $mergeIntoExisting = false)
        {
        }
        /**
         * @return string
         */
        public function getContent()
        {
        }
        /**
         * @return bool
         */
        public function isException()
        {
        }
        /**
         * @param Exception $exception
         *
         * @return Zend_Tool_Framework_Client_Response
         */
        public function setException(\Exception $exception)
        {
        }
        /**
         * @return Exception
         */
        public function getException()
        {
        }
        /**
         * @param Zend_Tool_Framework_Client_Response_ContentDecorator_Interface $contentDecorator
         *
         * @return unknown
         */
        public function addContentDecorator(\Zend_Tool_Framework_Client_Response_ContentDecorator_Interface $contentDecorator)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getContentDecorators()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $content
         * @param array<array-key, mixed> $decoratorOptions
         *
         * @return string
         */
        public function _applyDecorators($content, array $decoratorOptions)
        {
        }
    }
    interface Zend_Tool_Framework_Client_Response_ContentDecorator_Interface
    {
        public function getName();
        public function decorate($content, $decoratorValue);
    }
    class Zend_Tool_Framework_Client_Response_ContentDecorator_Separator implements \Zend_Tool_Framework_Client_Response_ContentDecorator_Interface
    {
        /**
         * @var string
         */
        public $_separator;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $separator
         *
         * @return Zend_Tool_Framework_Client_Response_ContentDecorator_Separator
         */
        public function setSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getSeparator()
        {
        }
        public function decorate($content, $decoratorValue)
        {
        }
    }
    class Zend_Tool_Framework_Client_Storage
    {
        /**
         * @var Zend_Tool_Framework_Client_Storage_AdapterInterface
         */
        public $_adapter;
        public function __construct($options = array())
        {
        }
        public function setAdapter($adapter)
        {
        }
        public function isEnabled()
        {
        }
        public function put($name, $value)
        {
        }
        public function get($name, $defaultValue = false)
        {
        }
        public function has($name)
        {
        }
        public function remove($name)
        {
        }
        public function getStreamUri($name)
        {
        }
    }
    interface Zend_Tool_Framework_Client_Storage_AdapterInterface
    {
        public function put($name, $value);
        public function get($name);
        public function has($name);
        public function remove($name);
        public function getStreamUri($name);
    }
    class Zend_Tool_Framework_Client_Storage_Directory implements \Zend_Tool_Framework_Client_Storage_AdapterInterface
    {
        public $_directoryPath = null;
        public function __construct($directoryPath)
        {
        }
        public function put($name, $value)
        {
        }
        public function get($name)
        {
        }
        public function has($name)
        {
        }
        public function remove($name)
        {
        }
        public function getStreamUri($name)
        {
        }
    }
    class Zend_Tool_Framework_Exception extends \Zend_Exception
    {
    }
    class Zend_Tool_Framework_Loader_Abstract implements \Zend_Tool_Framework_Loader_Interface, \Zend_Tool_Framework_Registry_EnabledInterface
    {
        /**
         * @var Zend_Tool_Framework_Repository_Interface
         */
        public $_registry;
        /**
         * @var array<array-key, mixed>
         */
        public $_retrievedFiles;
        /**
         * @var array<array-key, mixed>
         */
        public $_loadedClasses;
        /**
         * @return array<array-key, mixed>
         */
        public abstract function _getFiles();
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Loader_Abstract
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        public function load()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getRetrievedFiles()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getLoadedClasses()
        {
        }
    }
    class Zend_Tool_Framework_Loader_BasicLoader implements \Zend_Tool_Framework_Loader_Interface, \Zend_Tool_Framework_Registry_EnabledInterface
    {
        /**
         * @var Zend_Tool_Framework_Repository_Interface
         */
        public $_registry;
        /**
         * @var array<array-key, mixed>
         */
        public $_classesToLoad;
        public function __construct($options = array())
        {
        }
        public function setOptions(array $options)
        {
        }
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Loader_Abstract
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @param array<array-key, mixed> $classesToLoad
         *
         * @return Zend_Tool_Framework_Loader_Abstract
         */
        public function setClassesToLoad(array $classesToLoad)
        {
        }
        public function load()
        {
        }
        /**
         * @param ReflectionClass $reflectionClass
         *
         * @return bool
         */
        public function _isManifestImplementation($reflectionClass)
        {
        }
        /**
         * @param ReflectionClass $reflectionClass
         *
         * @return bool
         */
        public function _isProviderImplementation($reflectionClass)
        {
        }
    }
    class Zend_Tool_Framework_Loader_IncludePathLoader extends \Zend_Tool_Framework_Loader_Abstract
    {
        /**
         * @return array<array-key, mixed>
         */
        public function _getFiles()
        {
        }
        /**
         * @param string $file
         *
         * @return bool
         */
        public function _fileIsBlacklisted($file)
        {
        }
    }
    class Zend_Tool_Framework_Loader_IncludePathLoader_RecursiveFilterIterator extends \RecursiveFilterIterator
    {
        public $_denyDirectoryPattern = null;
        public $_acceptFilePattern = null;
        /**
         * @param RecursiveIterator $iterator
         * @param null|string $denyDirectoryPattern
         * @param null|string $acceptFilePattern
         */
        public function __construct(\RecursiveIterator $iterator, $denyDirectoryPattern = null, $acceptFilePattern = null)
        {
        }
        /**
         * @return unknown
         */
        public function accept()
        {
        }
        /**
         * @return Zend_Tool_Framework_Loader_IncludePathLoader_RecursiveFilterIterator
         */
        public function getChildren()
        {
        }
    }
    interface Zend_Tool_Framework_Loader_Interface
    {
        /**
         * @return array<array-key, mixed>
         */
        public function load();
    }
    interface Zend_Tool_Framework_Manifest_ActionManifestable extends \Zend_Tool_Framework_Manifest_Interface
    {
        /**
         * @return Zend_Tool_Framework_Action_Interface|array<array-key, mixed>
         */
        public function getActions();
    }
    class Zend_Tool_Framework_Manifest_ActionMetadata
    {
    }
    class Zend_Tool_Framework_Manifest_Exception extends \Zend_Tool_Framework_Exception
    {
    }
    interface Zend_Tool_Framework_Manifest_Indexable extends \Zend_Tool_Framework_Manifest_Interface
    {
        /**
         * @return Zend_Tool_Framework_Action_Interface|array<array-key, mixed>
         */
        public function getIndex();
    }
    interface Zend_Tool_Framework_Manifest_Interface
    {
    }
    class Zend_Tool_Framework_Manifest_Metadata
    {
    }
    interface Zend_Tool_Framework_Manifest_MetadataManifestable extends \Zend_Tool_Framework_Manifest_Interface
    {
        /**
         * @return Zend_Tool_Framework_Manifest_Metadata|array<array-key, mixed>
         */
        public function getMetadata();
    }
    interface Zend_Tool_Framework_Manifest_ProviderManifestable extends \Zend_Tool_Framework_Manifest_Interface
    {
        /**
         * @return Zend_Tool_Framework_Provider_Interface|array<array-key, mixed>|string
         */
        public function getProviders();
    }
    class Zend_Tool_Framework_Manifest_ProviderMetadata
    {
    }
    class Zend_Tool_Framework_Manifest_Repository implements \Zend_Tool_Framework_Registry_EnabledInterface, \IteratorAggregate, \Countable
    {
        /**
         * @var Zend_Tool_Framework_Provider_Registry_Interface
         */
        public $_registry;
        /**
         * @var array<array-key, mixed>
         */
        public $_manifests;
        /**
         * @var array<array-key, mixed>
         */
        public $_metadatas;
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return unknown
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @param Zend_Tool_Framework_Manifest_Interface $manifest
         *
         * @return Zend_Tool_Framework_Manifest_Repository
         */
        public function addManifest(\Zend_Tool_Framework_Manifest_Interface $manifest)
        {
        }
        /**
         * @return array<array-key, Zend_Tool_Framework_Manifest_Interface>
         */
        public function getManifests()
        {
        }
        /**
         * @param Zend_Tool_Framework_Manifest_Metadata $metadata
         *
         * @return Zend_Tool_Framework_Manifest_Repository
         */
        public function addMetadata(\Zend_Tool_Framework_Metadata_Interface $metadata)
        {
        }
        /**
         * @return Zend_Tool_Framework_Manifest_Repository
         */
        public function process()
        {
        }
        /**
         * @param array<array-key, mixed> $searchProperties
         * @param bool $includeNonExistentProperties
         *
         * @return array<array-key, Zend_Tool_Framework_Manifest_Metadata>
         */
        public function getMetadatas(array $searchProperties = array(), $includeNonExistentProperties = true)
        {
        }
        /**
         * @param array<array-key, mixed> $searchProperties
         * @param bool $includeNonExistentProperties
         *
         * @return Zend_Tool_Framework_Manifest_Metadata
         */
        public function getMetadata(array $searchProperties = array(), $includeNonExistentProperties = true)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return ArrayIterator
         */
        public function getIterator()
        {
        }
    }
    interface Zend_Tool_Framework_Metadata_Attributable
    {
        public function getAttributes();
    }
    class Zend_Tool_Framework_Metadata_Basic implements \Zend_Tool_Framework_Metadata_Interface, \Zend_Tool_Framework_Metadata_Attributable
    {
        public const ATTRIBUTES_ALL = 'attributesAll';
        public const ATTRIBUTES_NO_PARENT = 'attributesParent';
        public $_type = 'Basic';
        public $_name = null;
        public $_value = null;
        /**
         * @var mixed
         */
        public $_reference;
        /**
         * @param array<array-key, mixed> $options
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Tool_Framework_Metadata_Basic
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Tool_Framework_Metadata_Basic
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Tool_Framework_Metadata_Basic
         */
        public function setName($name)
        {
        }
        /**
         * @return mixed
         */
        public function getValue()
        {
        }
        /**
         * @return Zend_Tool_Framework_Metadata_Basic
         */
        public function setValue($value)
        {
        }
        /**
         * @param mixed $reference
         *
         * @return Zend_Tool_Framework_Metadata_Basic
         */
        public function setReference($reference)
        {
        }
        /**
         * @return mixed
         */
        public function getReference()
        {
        }
        /**
         * @param const $type
         *
         * @return array<array-key, mixed>
         */
        public function getAttributes($type, $stringRepresentationOfNonScalars = false)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Tool_Framework_Metadata_Dynamic implements \Zend_Tool_Framework_Metadata_Interface, \Zend_Tool_Framework_Metadata_Attributable
    {
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var string
         */
        public $_value;
        /**
         * @var array<array-key, mixed>
         */
        public $_dynamicAttributes;
        public function __construct($options = array())
        {
        }
        public function setOptions(array $options = array())
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Tool_Framework_Metadata_Dynamic
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Tool_Framework_Metadata_Dynamic
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_Tool_Framework_Metadata_Dynamic
         */
        public function setValue($value)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        public function getAttributes()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return null
         */
        public function __unset($name)
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public function __set($name, $value)
        {
        }
    }
    interface Zend_Tool_Framework_Metadata_Interface
    {
        public function getType();
        public function getName();
        public function getValue();
    }
    class Zend_Tool_Framework_Metadata_Tool extends \Zend_Tool_Framework_Metadata_Basic
    {
        public const ATTRIBUTES_ALL = 'attributesAll';
        public const ATTRIBUTES_NO_PARENT = 'attributesParent';
        /**
         * @var string
         */
        public $_type;
        public $_clientName = null;
        public $_actionName = null;
        public $_providerName = null;
        public $_specialtyName = null;
        public $_clientReference = null;
        public $_actionReference = null;
        public $_providerReference = null;
        public function setClientName($clientName)
        {
        }
        public function getClientName()
        {
        }
        /**
         * @param string $actionName
         *
         * @return Zend_Tool_Framework_Metadata_Tool
         */
        public function setActionName($actionName)
        {
        }
        /**
         * @return string
         */
        public function getActionName()
        {
        }
        /**
         * @param string $providerName
         *
         * @return Zend_Tool_Framework_Metadata_Tool
         */
        public function setProviderName($providerName)
        {
        }
        /**
         * @return string
         */
        public function getProviderName()
        {
        }
        /**
         * @param string $specialtyName
         *
         * @return Zend_Tool_Framework_Metadata_Tool
         */
        public function setSpecialtyName($specialtyName)
        {
        }
        /**
         * @return string
         */
        public function getSpecialtyName()
        {
        }
        /**
         * @param Zend_Tool_Framework_Client_Abstract $client
         *
         * @return Zend_Tool_Framework_Metadata_Tool
         */
        public function setClientReference(\Zend_Tool_Framework_Client_Abstract $client)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Abstract
         */
        public function getClientReference()
        {
        }
        /**
         * @param Zend_Tool_Framework_Action_Interface $action
         *
         * @return Zend_Tool_Framework_Metadata_Tool
         */
        public function setActionReference(\Zend_Tool_Framework_Action_Interface $action)
        {
        }
        /**
         * @return Zend_Tool_Framework_Action_Interface
         */
        public function getActionReference()
        {
        }
        /**
         * @param Zend_Tool_Framework_Provider_Interface $provider
         *
         * @return Zend_Tool_Framework_Metadata_Tool
         */
        public function setProviderReference(\Zend_Tool_Framework_Provider_Interface $provider)
        {
        }
        /**
         * @return Zend_Tool_Framework_Provider_Interface
         */
        public function getProviderReference()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Tool_Framework_Provider_Abstract implements \Zend_Tool_Framework_Provider_Interface, \Zend_Tool_Framework_Registry_EnabledInterface
    {
        /**
         * @var Zend_Tool_Framework_Registry_Interface
         */
        public $_registry;
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Provider_Abstract
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
    }
    interface Zend_Tool_Framework_Provider_DocblockManifestInterface
    {
    }
    class Zend_Tool_Framework_Provider_Exception extends \Zend_Tool_Framework_Exception
    {
    }
    interface Zend_Tool_Framework_Provider_Initializable
    {
        public function initialize();
    }
    interface Zend_Tool_Framework_Provider_Interactable
    {
    }
    interface Zend_Tool_Framework_Provider_Interface
    {
    }
    interface Zend_Tool_Framework_Provider_Pretendable
    {
    }
    class Zend_Tool_Framework_Provider_Repository implements \Zend_Tool_Framework_Registry_EnabledInterface, \IteratorAggregate, \Countable
    {
        /**
         * @var Zend_Tool_Framework_Registry
         */
        public $_registry;
        /**
         * @var bool
         */
        public $_processOnAdd;
        /**
         * @var array<array-key, Zend_Tool_Framework_Provider_Interface>
         */
        public $_unprocessedProviders;
        /**
         * @var array<array-key, Zend_Tool_Framework_Provider_Signature>
         */
        public $_providerSignatures;
        /**
         * @var array<array-key, mixed>
         */
        public $_providers;
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return unknown
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @param unknown_type $processOnAdd
         *
         * @return unknown
         */
        public function setProcessOnAdd($processOnAdd = true)
        {
        }
        /**
         * @param Zend_Tool_Framework_Provider_Interface $provider
         *
         * @return Zend_Tool_Framework_Provider_Repository
         */
        public function addProvider(\Zend_Tool_Framework_Provider_Interface $provider, $overwriteExistingProvider = false)
        {
        }
        public function hasProvider($providerOrClassName, $processedOnly = true)
        {
        }
        public function process()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getProviders()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getProviderSignatures()
        {
        }
        /**
         * @param string $providerName
         *
         * @return Zend_Tool_Framework_Provider_Interface
         */
        public function getProvider($providerName)
        {
        }
        /**
         * @param string $providerName
         *
         * @return Zend_Tool_Framework_Provider_Signature
         */
        public function getProviderSignature($providerName)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return ArrayIterator
         */
        public function getIterator()
        {
        }
        /**
         * @return string
         */
        public function _parseName(\Zend_Tool_Framework_Provider_Interface $provider)
        {
        }
    }
    class Zend_Tool_Framework_Provider_Signature implements \Zend_Tool_Framework_Registry_EnabledInterface
    {
        /**
         * @var Zend_Tool_Framework_Registry
         */
        public $_registry;
        /**
         * @var Zend_Tool_Framework_Provider_Interface
         */
        public $_provider;
        /**
         * @var string
         */
        public $_name;
        /**
         * @var array<array-key, mixed>
         */
        public $_specialties;
        /**
         * @var array<array-key, mixed>
         */
        public $_actionableMethods;
        /**
         * @var unknown_type
         */
        public $_actions;
        /**
         * @var Zend_Reflection_Class
         */
        public $_providerReflection;
        /**
         * @var bool
         */
        public $_isProcessed;
        /**
         * @param Zend_Tool_Framework_Provider_Interface $provider
         */
        public function __construct(\Zend_Tool_Framework_Provider_Interface $provider)
        {
        }
        /**
         * @param Zend_Tool_Framework_Registry_Interface $registry
         *
         * @return Zend_Tool_Framework_Provider_Signature
         */
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        public function process()
        {
        }
        /**
         * @return unknown
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Framework_Provider_Interface
         */
        public function getProvider()
        {
        }
        /**
         * @return Zend_Reflection_Class
         */
        public function getProviderReflection()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getSpecialties()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getActions()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getActionableMethods()
        {
        }
        /**
         * @param string $methodName
         *
         * @return array<array-key, mixed>
         */
        public function getActionableMethod($methodName)
        {
        }
        /**
         * @param string $actionName
         *
         * @return array<array-key, mixed>
         */
        public function getActionableMethodByActionName($actionName, $specialtyName = '_Global')
        {
        }
        public function _process()
        {
        }
        public function _processName()
        {
        }
        public function _processSpecialties()
        {
        }
        public function _processActionableMethods()
        {
        }
    }
    class Zend_Tool_Framework_Registry implements \Zend_Tool_Framework_Registry_Interface
    {
        /**
         * @var Zend_Tool_Framework_Loader_Abstract
         */
        public $_loader;
        /**
         * @var Zend_Tool_Framework_Client_Abstract
         */
        public $_client;
        /**
         * @var Zend_Tool_Framework_Client_Config
         */
        public $_config;
        /**
         * @var Zend_Tool_Framework_Client_Storage
         */
        public $_storage;
        /**
         * @var Zend_Tool_Framework_Action_Repository
         */
        public $_actionRepository;
        /**
         * @var Zend_Tool_Framework_Provider_Repository
         */
        public $_providerRepository;
        /**
         * @var Zend_Tool_Framework_Manifest_Repository
         */
        public $_manifestRepository;
        /**
         * @var Zend_Tool_Framework_Client_Request
         */
        public $_request;
        /**
         * @var Zend_Tool_Framework_Client_Response
         */
        public $_response;
        public function reset()
        {
        }
        /**
         * @param Zend_Tool_Framework_Client_Abstract $client
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setClient(\Zend_Tool_Framework_Client_Abstract $client)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Abstract
         */
        public function getClient()
        {
        }
        /**
         * @param Zend_Tool_Framework_Client_Config $config
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setConfig(\Zend_Tool_Framework_Client_Config $config)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Config
         */
        public function getConfig()
        {
        }
        /**
         * @param Zend_Tool_Framework_Client_Storage $storage
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setStorage(\Zend_Tool_Framework_Client_Storage $storage)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Storage
         */
        public function getStorage()
        {
        }
        /**
         * @param Zend_Tool_Framework_Loader_Interface $loader
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setLoader(\Zend_Tool_Framework_Loader_Interface $loader)
        {
        }
        /**
         * @return Zend_Tool_Framework_Loader_Abstract
         */
        public function getLoader()
        {
        }
        /**
         * @param Zend_Tool_Framework_Action_Repository $actionRepository
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setActionRepository(\Zend_Tool_Framework_Action_Repository $actionRepository)
        {
        }
        /**
         * @return Zend_Tool_Framework_Action_Repository
         */
        public function getActionRepository()
        {
        }
        /**
         * @param Zend_Tool_Framework_Provider_Repository $providerRepository
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setProviderRepository(\Zend_Tool_Framework_Provider_Repository $providerRepository)
        {
        }
        /**
         * @return Zend_Tool_Framework_Provider_Repository
         */
        public function getProviderRepository()
        {
        }
        /**
         * @param Zend_Tool_Framework_Manifest_Repository $manifestRepository
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setManifestRepository(\Zend_Tool_Framework_Manifest_Repository $manifestRepository)
        {
        }
        /**
         * @return Zend_Tool_Framework_Manifest_Repository
         */
        public function getManifestRepository()
        {
        }
        /**
         * @param Zend_Tool_Framework_Client_Request $request
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setRequest(\Zend_Tool_Framework_Client_Request $request)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Request
         */
        public function getRequest()
        {
        }
        /**
         * @param Zend_Tool_Framework_Client_Response $response
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setResponse(\Zend_Tool_Framework_Client_Response $response)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Response
         */
        public function getResponse()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param object $object
         *
         * @return bool
         */
        public function isObjectRegistryEnablable($object)
        {
        }
        /**
         * @param object $object
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function enableRegistryOnObject($object)
        {
        }
    }
    interface Zend_Tool_Framework_Registry_EnabledInterface
    {
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry);
    }
    class Zend_Tool_Framework_Registry_Exception extends \Zend_Tool_Framework_Exception
    {
    }
    interface Zend_Tool_Framework_Registry_Interface
    {
        /**
         * @param Zend_Tool_Framework_Client_Abstract $client
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setClient(\Zend_Tool_Framework_Client_Abstract $client);
        /**
         * @return Zend_Tool_Framework_Client_Abstract
         */
        public function getClient();
        /**
         * @param Zend_Tool_Framework_Loader_Abstract $loader
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setLoader(\Zend_Tool_Framework_Loader_Interface $loader);
        /**
         * @return Zend_Tool_Framework_Loader_Abstract
         */
        public function getLoader();
        /**
         * @param Zend_Tool_Framework_Action_Repository $actionRepository
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setActionRepository(\Zend_Tool_Framework_Action_Repository $actionRepository);
        /**
         * @return Zend_Tool_Framework_Action_Repository
         */
        public function getActionRepository();
        /**
         * @param Zend_Tool_Framework_Provider_Repository $providerRepository
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setProviderRepository(\Zend_Tool_Framework_Provider_Repository $providerRepository);
        /**
         * @return Zend_Tool_Framework_Provider_Repository
         */
        public function getProviderRepository();
        /**
         * @param Zend_Tool_Framework_Manifest_Repository $manifestRepository
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setManifestRepository(\Zend_Tool_Framework_Manifest_Repository $manifestRepository);
        /**
         * @return Zend_Tool_Framework_Manifest_Repository
         */
        public function getManifestRepository();
        /**
         * @param Zend_Tool_Framework_Client_Request $request
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setRequest(\Zend_Tool_Framework_Client_Request $request);
        /**
         * @return Zend_Tool_Framework_Client_Request
         */
        public function getRequest();
        /**
         * @param Zend_Tool_Framework_Client_Response $response
         *
         * @return Zend_Tool_Framework_Registry
         */
        public function setResponse(\Zend_Tool_Framework_Client_Response $response);
        /**
         * @return Zend_Tool_Framework_Client_Response
         */
        public function getResponse();
    }
    class Zend_Tool_Framework_System_Action_Create extends \Zend_Tool_Framework_Action_Base
    {
    }
    class Zend_Tool_Framework_System_Action_Delete extends \Zend_Tool_Framework_Action_Base
    {
    }
    class Zend_Tool_Framework_System_Manifest implements \Zend_Tool_Framework_Manifest_ProviderManifestable, \Zend_Tool_Framework_Manifest_ActionManifestable
    {
        public function getProviders()
        {
        }
        public function getActions()
        {
        }
    }
    class Zend_Tool_Framework_System_Provider_Config extends \Zend_Tool_Framework_Provider_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_levelCompleted;
        /**
         * @var array<array-key, mixed>
         */
        public $_specialties;
        public function create()
        {
        }
        /**
         * @return string
         */
        public function _detectHomeDirectory()
        {
        }
        /**
         * @return void
         */
        public function show()
        {
        }
        /**
         * @param string $key
         * @param string $value
         * @param int $level
         *
         * @return string
         */
        public function _printTree($key, $value, $level = 1, $isLast = false)
        {
        }
        public function enable()
        {
        }
        public function disable()
        {
        }
        /**
         * @param string $className
         */
        public function enableProvider($className)
        {
        }
        public function _doEnable($className)
        {
        }
        /**
         * @param string $className
         */
        public function enableManifest($className)
        {
        }
        /**
         * @param string $className
         */
        public function disableManifest($className)
        {
        }
        /**
         * @param string $className
         */
        public function disableProvider($className)
        {
        }
        /**
         * @return Zend_Tool_Framework_Client_Config
         */
        public function _loadUserConfigIfExists()
        {
        }
    }
    class Zend_Tool_Framework_System_Provider_Manifest implements \Zend_Tool_Framework_Provider_Interface, \Zend_Tool_Framework_Registry_EnabledInterface
    {
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        public function getName()
        {
        }
        public function show()
        {
        }
    }
    class Zend_Tool_Framework_System_Provider_Phpinfo implements \Zend_Tool_Framework_Provider_Interface
    {
        public function showAction()
        {
        }
    }
    class Zend_Tool_Framework_System_Provider_Version implements \Zend_Tool_Framework_Provider_Interface, \Zend_Tool_Framework_Registry_EnabledInterface
    {
        public const MODE_MAJOR = 'major';
        public const MODE_MINOR = 'minor';
        public const MODE_MINI = 'mini';
        /**
         * @var Zend_Tool_Framework_Registry_Interface
         */
        public $_registry;
        public $_specialties = 'Psalm could not infer this type';
        public function setRegistry(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
        /**
         * @param string $mode
         * @param bool $nameIncluded
         */
        public function show($mode, $nameIncluded = true)
        {
        }
        public function showMajorPart($nameIncluded = true)
        {
        }
        public function showMinorPart($nameIncluded = true)
        {
        }
        public function showMiniPart($nameIncluded = true)
        {
        }
        public function _splitVersion()
        {
        }
    }
    class Zend_Tool_Project_Context_Content_Engine
    {
        /**
         * @var Zend_Tool_Framework_Client_Storage
         */
        public $_storage;
        /**
         * @var string
         */
        public $_keyInStorage;
        /**
         * @var array<array-key, mixed>
         */
        public $_engines;
        /**
         * @param Zend_Tool_Framework_Client_Storage $storage
         */
        public function __construct(\Zend_Tool_Framework_Client_Storage $storage)
        {
        }
        /**
         * @param Zend_Tool_Project_Context_Interface $context
         * @param string $methodName
         * @param mixed $parameters
         *
         * @return string
         */
        public function getContent(\Zend_Tool_Project_Context_Interface $context, $methodName, $parameters)
        {
        }
    }
    class Zend_Tool_Project_Context_Content_Engine_CodeGenerator
    {
        /**
         * @var Zend_Tool_Framework_Client_Storage
         */
        public $_storage;
        /**
         * @var string
         */
        public $_contentPrefix;
        /**
         * @param Zend_Tool_Framework_Client_Storage $storage
         * @param string $contentPrefix
         */
        public function __construct(\Zend_Tool_Framework_Client_Storage $storage, $contentPrefix)
        {
        }
        /**
         * @param Zend_Tool_Project_Context_Interface $context
         * @param string $method
         *
         * @return string
         */
        public function hasContent(\Zend_Tool_Project_Context_Interface $context, $method)
        {
        }
        /**
         * @param Zend_Tool_Project_Context_Interface $context
         * @param string $method
         * @param mixed $parameters
         *
         * @return string
         */
        public function getContent(\Zend_Tool_Project_Context_Interface $context, $method, $parameters)
        {
        }
    }
    class Zend_Tool_Project_Context_Content_Engine_Phtml
    {
        /**
         * @var Zend_Tool_Framework_Client_Storage
         */
        public $_storage;
        /**
         * @var string
         */
        public $_contentPrefix;
        /**
         * @param Zend_Tool_Framework_Client_Storage $storage
         * @param string $contentPrefix
         */
        public function __construct(\Zend_Tool_Framework_Client_Storage $storage, $contentPrefix)
        {
        }
        /**
         * @param Zend_Tool_Project_Context_Interface $context
         * @param string $method
         *
         * @return string
         */
        public function hasContent(\Zend_Tool_Project_Context_Interface $context, $method)
        {
        }
        /**
         * @param Zend_Tool_Project_Context_Interface $context
         * @param string $method
         * @param mixed $parameters
         */
        public function getContent(\Zend_Tool_Project_Context_Interface $context, $method, $parameters)
        {
        }
    }
    class Zend_Tool_Project_Context_Exception extends \Zend_Tool_Project_Exception
    {
    }
    class Zend_Tool_Project_Context_Filesystem_Abstract implements \Zend_Tool_Project_Context_Interface
    {
        /**
         * @var Zend_Tool_Project_Profile_Resource
         */
        public $_resource;
        /**
         * @var string
         */
        public $_baseDirectory;
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return Zend_Tool_Project_Context_Filesystem_Abstract
         */
        public function init()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile_Resource $resource
         *
         * @return Zend_Tool_Project_Context_Filesystem_Abstract
         */
        public function setResource(\Zend_Tool_Project_Profile_Resource $resource)
        {
        }
        /**
         * @param string $baseDirectory
         *
         * @return Zend_Tool_Project_Context_Filesystem_Abstract
         */
        public function setBaseDirectory($baseDirectory)
        {
        }
        /**
         * @return string
         */
        public function getBaseDirectory()
        {
        }
        /**
         * @param string $filesystemName
         *
         * @return Zend_Tool_Project_Context_Filesystem_Abstract
         */
        public function setFilesystemName($filesystemName)
        {
        }
        /**
         * @return string
         */
        public function getFilesystemName()
        {
        }
        /**
         * @return string
         */
        public function getPath()
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        public abstract function create();
        public abstract function delete();
    }
    class Zend_Tool_Project_Context_Filesystem_Directory extends \Zend_Tool_Project_Context_Filesystem_Abstract
    {
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function create()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Filesystem_Directory
         */
        public function delete()
        {
        }
    }
    class Zend_Tool_Project_Context_Filesystem_File extends \Zend_Tool_Project_Context_Filesystem_Abstract
    {
        public $_fileOnlyContext = null;
        public $_filesystemName = null;
        public $_content = null;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Filesystem_File
         */
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @param unknown_type $resource
         */
        public function setResource(\Zend_Tool_Project_Profile_Resource $resource)
        {
        }
        /**
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function getResource()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Filesystem_File
         */
        public function create()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Filesystem_File
         */
        public function delete()
        {
        }
        /**
         * @return null
         */
        public function getContents()
        {
        }
        public function _initFileOnlyContext()
        {
        }
    }
    interface Zend_Tool_Project_Context_Interface
    {
        public function getName();
    }
    class Zend_Tool_Project_Context_Repository implements \Countable
    {
        public static $_instance = null;
        public static $_isInitialized = false;
        public $_shortContextNames = array();
        public $_contexts = array();
        /**
         * @return Zend_Tool_Project_Context_Repository
         */
        public static function getInstance()
        {
        }
        public static function resetInstance()
        {
        }
        public function __construct()
        {
        }
        public function addContextsFromDirectory($directory, $prefix)
        {
        }
        public function addContextClass($contextClass)
        {
        }
        /**
         * @param Zend_Tool_Project_Context_Interface $context
         *
         * @return Zend_Tool_Project_Context_Repository
         */
        public function addContext(\Zend_Tool_Project_Context_Interface $context)
        {
        }
        public function getContext($name)
        {
        }
        public function hasContext($name)
        {
        }
        public function isSystemContext($name)
        {
        }
        public function isTopLevelContext($name)
        {
        }
        public function isOverwritableContext($name)
        {
        }
        public function count()
        {
        }
        public function _normalizeName($name)
        {
        }
    }
    interface Zend_Tool_Project_Context_System_Interface
    {
    }
    interface Zend_Tool_Project_Context_System_NotOverwritable
    {
    }
    class Zend_Tool_Project_Context_System_ProjectDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_System_ProjectDirectory
         */
        public function init()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_System_ProjectDirectory
         */
        public function create()
        {
        }
    }
    class Zend_Tool_Project_Context_System_ProjectProfileFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @var Zend_Tool_Project_Profile
         */
        public $_profile;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         *
         * @return Zend_Tool_Project_Context_System_ProjectProfileFile
         */
        public function setProfile($profile)
        {
        }
        /**
         * @return Zend_Tool_Project_Context_System_ProjectProfileFile
         */
        public function save()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_System_ProjectProvidersDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function loadProviders(\Zend_Tool_Framework_Registry_Interface $registry)
        {
        }
    }
    interface Zend_Tool_Project_Context_System_TopLevelRestrictable
    {
    }
    class Zend_Tool_Project_Context_Zf_AbstractClassFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @param string $localClassName
         * @param null|string $classContextName
         */
        public function getFullClassName($localClassName, $classContextName = null)
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ActionMethod implements \Zend_Tool_Project_Context_Interface
    {
        /**
         * @var Zend_Tool_Project_Profile_Resource
         */
        public $_resource;
        /**
         * @var Zend_Tool_Project_Profile_Resource
         */
        public $_controllerResource;
        /**
         * @var string
         */
        public $_controllerPath;
        /**
         * @var string
         */
        public $_actionName;
        /**
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile_Resource $resource
         *
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function setResource(\Zend_Tool_Project_Profile_Resource $resource)
        {
        }
        /**
         * @param string $actionName
         *
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function setActionName($actionName)
        {
        }
        /**
         * @return string
         */
        public function getActionName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function create()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function delete()
        {
        }
        /**
         * @param string $controllerPath
         * @param string $actionName
         * @param string $body
         *
         * @return true
         */
        public static function createActionMethod($controllerPath, $actionName, $body = '        // action body')
        {
        }
        /**
         * @param string $controllerPath
         * @param string $actionName
         *
         * @return bool
         */
        public static function hasActionMethod($controllerPath, $actionName)
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ApisDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ApplicationConfigFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @var string
         */
        public $_content;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_ApplicationConfigFile
         */
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
        public function getAsZendConfig($section = 'production')
        {
        }
        /**
         * @param string $key
         * @param string $value
         * @param string $section
         * @param bool $quoteValue
         *
         * @return Zend_Tool_Project_Context_Zf_ApplicationConfigFile
         */
        public function addStringItem($key, $value, $section = 'production', $quoteValue = true)
        {
        }
        /**
         * @param array<array-key, mixed> $item
         * @param string $section
         * @param bool $quoteValue
         *
         * @return Zend_Tool_Project_Context_Zf_ApplicationConfigFile
         */
        public function addItem($item, $section = 'production', $quoteValue = true)
        {
        }
        public function removeStringItem($key, $section = 'production')
        {
        }
        public function removeItem($item, $section = 'production')
        {
        }
        public function _getDefaultContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ApplicationDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        public $_filesystemName = 'application';
        public $_classNamePrefix = 'Application_';
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        public function getName()
        {
        }
        public function setClassNamePrefix($classNamePrefix)
        {
        }
        public function getClassNamePrefix()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_BootstrapFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @var Zend_Tool_Project_Profile_Resource
         */
        public $_applicationConfigFile;
        /**
         * @var Zend_Tool_Project_Profile_Resource
         */
        public $_applicationDirectory;
        /**
         * @var Zend_Application
         */
        public $_applicationInstance;
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getContents()
        {
        }
        public function getApplicationInstance()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_CacheDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ConfigFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ConfigsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ControllerFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_controllerName;
        /**
         * @var string
         */
        public $_moduleName;
        /**
         * @var string
         */
        public $_filesystemName;
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getControllerName()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
        /**
         * @param string $actionName
         */
        public function addAction($actionName)
        {
        }
        /**
         * @return Zend_CodeGenerator_Php_Class
         */
        public function getCodeGenerator()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ControllersDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_DataDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_DbTableDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_DbTableFile extends \Zend_Tool_Project_Context_Zf_AbstractClassFile
    {
        public $_dbTableName = null;
        public $_actualTableName = null;
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function init()
        {
        }
        public function getPersistentAttributes()
        {
        }
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_DocsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function create()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_FormFile extends \Zend_Tool_Project_Context_Zf_AbstractClassFile
    {
        /**
         * @var string
         */
        public $_formName;
        /**
         * @var string
         */
        public $_filesystemName;
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function getFormName()
        {
        }
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_FormsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_HtaccessFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_LayoutScriptFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @var string
         */
        public $_layoutName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_ViewScriptFile
         */
        public function init()
        {
        }
        /**
         * @return unknown
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_LayoutScriptsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_LayoutsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_LibraryDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_LocalesDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_LogsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ModelFile extends \Zend_Tool_Project_Context_Zf_AbstractClassFile
    {
        /**
         * @var string
         */
        public $_modelName;
        /**
         * @var string
         */
        public $_filesystemName;
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function getModelName()
        {
        }
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ModelsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ModuleDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_moduleName;
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return Zend_Tool_Project_Context_Zf_ControllerFile
         */
        public function init()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getModuleName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ModulesDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ProjectProviderFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_projectProviderName;
        /**
         * @var array<array-key, mixed>
         */
        public $_actionNames;
        /**
         * @return Zend_Tool_Project_Context_Zf_ProjectProviderFile
         */
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getProjectProviderName()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_PublicDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_PublicImagesDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_PublicIndexFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_PublicScriptsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_PublicStylesheetsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_SearchIndexesDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ServicesDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_SessionsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TemporaryDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestApplicationActionMethod implements \Zend_Tool_Project_Context_Interface
    {
        /**
         * @var Zend_Tool_Project_Profile_Resource
         */
        public $_resource;
        /**
         * @var Zend_Tool_Project_Profile_Resource
         */
        public $_testApplicationControllerResource;
        /**
         * @var string
         */
        public $_testApplicationControllerPath;
        /**
         * @var string
         */
        public $_forActionName;
        /**
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile_Resource $resource
         *
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function setResource(\Zend_Tool_Project_Profile_Resource $resource)
        {
        }
        /**
         * @return string
         */
        public function getForActionName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function create()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_ActionMethod
         */
        public function delete()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestApplicationBootstrapFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestApplicationControllerDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestApplicationControllerFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_forControllerName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_TestApplicationControllerFile
         */
        public function init()
        {
        }
        /**
         * @return unknown
         */
        public function getPersistentAttributes()
        {
        }
        public function getForControllerName()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestApplicationDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestApplicationModuleDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_forModuleName;
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return Zend_Tool_Project_Context_Zf_ControllerFile
         */
        public function init()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getForModuleName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestApplicationModulesDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestLibraryBootstrapFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestLibraryDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestLibraryFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_forClassName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_TestLibraryFile
         */
        public function init()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestLibraryNamespaceDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_namespaceName;
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_TestLibraryNamespaceDirectory
         */
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestPHPUnitBootstrapFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestPHPUnitConfigFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function getContents()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_TestsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_UploadsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ViewControllerScriptsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @var name
         */
        public $_forControllerName;
        /**
         * @return Zend_Tool_Project_Context_Zf_ViewControllerScriptsDirectory
         */
        public function init()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function _convertControllerNameToFilesystemName($controllerName)
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ViewFiltersDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ViewHelpersDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ViewScriptFile extends \Zend_Tool_Project_Context_Filesystem_File
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @var string
         */
        public $_forActionName;
        /**
         * @var string
         */
        public $_scriptName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Zf_ViewScriptFile
         */
        public function init()
        {
        }
        /**
         * @return unknown
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @return string
         */
        public function getContents()
        {
        }
        public function _convertActionNameToFilesystemName($actionName)
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ViewScriptsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ViewsDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
    }
    class Zend_Tool_Project_Context_Zf_ZfStandardLibraryDirectory extends \Zend_Tool_Project_Context_Filesystem_Directory
    {
        /**
         * @var string
         */
        public $_filesystemName;
        /**
         * @return string
         */
        public function getName()
        {
        }
        public function create()
        {
        }
        /**
         * @return false|string
         */
        public function _getZfPath()
        {
        }
    }
    class Zend_Tool_Project_Exception extends \Zend_Exception
    {
    }
    class Zend_Tool_Project_Profile extends \Zend_Tool_Project_Profile_Resource_Container
    {
        /**
         * @var bool
         */
        public static $_traverseEnabled;
        /**
         * @param array<array-key, mixed>|null $options
         *
         * @return bool
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return RecursiveIteratorIterator
         */
        public function getIterator()
        {
        }
        public function loadFromData()
        {
        }
        /**
         * @return bool
         */
        public function isLoadableFromFile()
        {
        }
        public function loadFromFile()
        {
        }
        public function storeToFile()
        {
        }
        /**
         * @return string
         */
        public function storeToData()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_Tool_Project_Profile_Exception extends \Zend_Tool_Project_Exception
    {
    }
    interface Zend_Tool_Project_Profile_FileParser_Interface
    {
        /**
         * @param Zend_Tool_Project_Profile $profile
         *
         * @return string
         */
        public function serialize(\Zend_Tool_Project_Profile $profile);
        /**
         * @param string $data
         * @param Zend_Tool_Project_Profile $profile
         */
        public function unserialize($data, \Zend_Tool_Project_Profile $profile);
    }
    class Zend_Tool_Project_Profile_FileParser_Xml implements \Zend_Tool_Project_Profile_FileParser_Interface
    {
        /**
         * @var Zend_Tool_Project_Profile
         */
        public $_profile;
        /**
         * @var Zend_Tool_Project_Context_Repository
         */
        public $_contextRepository;
        public function __construct()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         *
         * @return string
         */
        public function serialize(\Zend_Tool_Project_Profile $profile)
        {
        }
        /**
         * @return Zend_Tool_Project_Profile
         */
        public function unserialize($data, \Zend_Tool_Project_Profile $profile)
        {
        }
        /**
         * @param array<array-key, mixed> $resources
         * @param SimpleXmlElement $xmlNode
         */
        public function _serializeRecurser($resources, \SimpleXmlElement $xmlNode)
        {
        }
        /**
         * @param SimpleXMLIterator $xmlIterator
         * @param Zend_Tool_Project_Profile_Resource|null $resource
         */
        public function _unserializeRecurser(\SimpleXMLIterator $xmlIterator, ?\Zend_Tool_Project_Profile_Resource $resource = null)
        {
        }
        public function _lazyLoadContexts()
        {
        }
    }
    class Zend_Tool_Project_Profile_Iterator_ContextFilter extends \RecursiveFilterIterator
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_acceptTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_denyTypes;
        /**
         * @var array<array-key, mixed>
         */
        public $_acceptNames;
        /**
         * @var array<array-key, mixed>
         */
        public $_denyNames;
        /**
         * @var array<array-key, mixed>
         */
        public $_rawOptions;
        /**
         * @param RecursiveIterator $iterator
         * @param array<array-key, mixed> $options
         */
        public function __construct(\RecursiveIterator $iterator, $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $acceptTypes
         *
         * @return Zend_Tool_Project_Profile_Iterator_ContextFilter
         */
        public function setAcceptTypes($acceptTypes)
        {
        }
        /**
         * @param array<array-key, mixed>|string $denyTypes
         *
         * @return Zend_Tool_Project_Profile_Iterator_ContextFilter
         */
        public function setDenyTypes($denyTypes)
        {
        }
        /**
         * @param array<array-key, mixed>|string $acceptNames
         *
         * @return Zend_Tool_Project_Profile_Iterator_ContextFilter
         */
        public function setAcceptNames($acceptNames)
        {
        }
        /**
         * @param array<array-key, mixed>|string $denyNames
         *
         * @return Zend_Tool_Project_Profile_Iterator_ContextFilter
         */
        public function setDenyNames($denyNames)
        {
        }
        /**
         * @return bool
         */
        public function accept()
        {
        }
        /**
         * @return unknown
         */
        public function getChildren()
        {
        }
    }
    class Zend_Tool_Project_Profile_Iterator_EnabledResourceFilter extends \RecursiveFilterIterator
    {
        /**
         * @return bool
         */
        public function accept()
        {
        }
    }
    class Zend_Tool_Project_Profile_Resource extends \Zend_Tool_Project_Profile_Resource_Container
    {
        /**
         * @var Zend_Tool_Project_Profile
         */
        public $_profile;
        /**
         * @var Zend_Tool_Project_Profile_Resource
         */
        public $_parentResource;
        public $_deleted = false;
        public $_enabled = true;
        /**
         * @var Zend_Tool_Project_Context|string
         */
        public $_context;
        /**
         * @var array<array-key, mixed>
         */
        public $_attributes;
        /**
         * @var bool
         */
        public $_isContextInitialized;
        /**
         * @param Zend_Tool_Project_Context_Interface|string $context
         */
        public function __construct($context)
        {
        }
        /**
         * @param Zend_Tool_Project_Context_Interface|string $context
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function setContext($context)
        {
        }
        /**
         * @return Zend_Tool_Project_Context_Interface
         */
        public function getContext()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function setProfile(\Zend_Tool_Project_Profile $profile)
        {
        }
        /**
         * @return Zend_Tool_Project_Profile
         */
        public function getProfile()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getPersistentAttributes()
        {
        }
        /**
         * @param bool $enabled
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function setEnabled($enabled = true)
        {
        }
        /**
         * @return bool
         */
        public function isEnabled()
        {
        }
        /**
         * @param bool $deleted
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function setDeleted($deleted = true)
        {
        }
        /**
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function isDeleted()
        {
        }
        /**
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function initializeContext()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $arguments
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function __call($method, $arguments)
        {
        }
    }
    class Zend_Tool_Project_Profile_Resource_Container implements \RecursiveIterator, \Countable
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_subResources;
        /**
         * @var int
         */
        public $_position;
        /**
         * @var bool
         */
        public $_appendable;
        /**
         * @var array<array-key, mixed>
         */
        public $_attributes;
        /**
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function search($matchSearchConstraints, $nonMatchSearchConstraints = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile_Resource_SearchConstraints|array<array-key, mixed> $appendResourceOrSearchConstraints
         * @param string $context
         * @param array<array-key, mixed> $attributes
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function createResourceAt($appendResourceOrSearchConstraints, $context, array $attributes = array())
        {
        }
        /**
         * @param string $context
         * @param array<array-key, mixed> $attributes
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function createResource($context, array $attributes = array())
        {
        }
        /**
         * @param array<array-key, mixed> $attributes
         *
         * @return Zend_Tool_Project_Profile_Resource_Container
         */
        public function setAttributes(array $attributes)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttributes()
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return Zend_Tool_Project_Profile_Resource_Container
         */
        public function setAttribute($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_Tool_Project_Profile_Resource_Container
         */
        public function getAttribute($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasAttribute($name)
        {
        }
        /**
         * @param bool $appendable
         *
         * @return Zend_Tool_Project_Profile_Resource_Container
         */
        public function setAppendable($appendable)
        {
        }
        /**
         * @return bool
         */
        public function isAppendable()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile_Resource_Container $parentResource
         *
         * @return Zend_Tool_Project_Profile_Resource_Container
         */
        public function setParentResource(\Zend_Tool_Project_Profile_Resource_Container $parentResource)
        {
        }
        /**
         * @return Zend_Tool_Project_Profile_Resource_Container
         */
        public function getParentResource()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile_Resource_Container $resource
         *
         * @return Zend_Tool_Project_Profile_Resource_Container
         */
        public function append(\Zend_Tool_Project_Profile_Resource_Container $resource)
        {
        }
        /**
         * @return Zend_Tool_Project_Profile_Resource
         */
        public function current()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return bool
         */
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return bool
         */
        public function hasChildren()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getChildren()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        public function __clone()
        {
        }
    }
    class Zend_Tool_Project_Profile_Resource_SearchConstraints
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_constraints;
        /**
         * @param array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param array<array-key, mixed> $option
         *
         * @return Zend_Tool_Project_Profile_Resource_SearchConstraints
         */
        public function setOptions(array $option)
        {
        }
        /**
         * @param array<array-key, mixed>|string $constraint
         *
         * @return Zend_Tool_Project_Profile_Resource_SearchConstraints
         */
        public function addConstraint($constraint)
        {
        }
        /**
         * @return ArrayObject
         */
        public function getConstraint()
        {
        }
        /**
         * @param string $name
         * @param mixed $params
         *
         * @return ArrayObject
         */
        public function _makeConstraint($name, $params)
        {
        }
    }
    class Zend_Tool_Project_Provider_Abstract extends \Zend_Tool_Framework_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        /**
         * @var bool
         */
        public static $_isInitialized;
        public $_projectPath = null;
        /**
         * @var Zend_Tool_Project_Profile
         */
        public $_loadedProfile;
        public function initialize()
        {
        }
        public function getContextClasses()
        {
        }
        /**
         * @param bool $loadProfileFlag
         * @param null|string $projectDirectory
         * @param bool $searchParentDirectories
         *
         * @return Zend_Tool_Project_Profile
         */
        public function _loadProfile($loadProfileFlag, $projectDirectory = null, $searchParentDirectories = true)
        {
        }
        public function _findProfileDirectory($projectDirectory = null, $searchParentDirectories = true)
        {
        }
        /**
         * @return Zend_Tool_Project_Profile
         */
        public function _loadProfileRequired()
        {
        }
        /**
         * @return Zend_Tool_Project_Profile
         */
        public function _getProfile($loadProfileFlag)
        {
        }
        public function _storeProfile()
        {
        }
        public function _getContentForContext(\Zend_Tool_Project_Context_Interface $context, $methodName, $parameters)
        {
        }
        public function _hasProjectProviderDirectory($pathToProfileFile)
        {
        }
        /**
         * @param array<array-key, mixed> $contextClasses
         */
        public function _loadContextClassesIntoRegistry($contextClasses)
        {
        }
    }
    class Zend_Tool_Project_Provider_Action extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $actionName
         * @param string $controllerName
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function createResource(\Zend_Tool_Project_Profile $profile, $actionName, $controllerName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $actionName
         * @param string $controllerName
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function hasResource(\Zend_Tool_Project_Profile $profile, $actionName, $controllerName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $controllerName
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function _getControllerFileResource(\Zend_Tool_Project_Profile $profile, $controllerName, $moduleName = null)
        {
        }
        /**
         * @param string $name
         * @param string $controllerName
         * @param bool $viewIncluded
         * @param null|string $module
         */
        public function create($name, $controllerName = 'Index', $viewIncluded = true, $module = null)
        {
        }
    }
    class Zend_Tool_Project_Provider_Application extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public $_specialties = 'Psalm could not infer this type';
        /**
         * @param string $classNamePrefix
         */
        public function changeClassNamePrefix($classNamePrefix)
        {
        }
    }
    class Zend_Tool_Project_Provider_Controller extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $controllerName
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function createResource(\Zend_Tool_Project_Profile $profile, $controllerName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $controllerName
         * @param null|string $moduleName
         *
         * @return bool
         */
        public static function hasResource(\Zend_Tool_Project_Profile $profile, $controllerName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function _getControllersDirectoryResource(\Zend_Tool_Project_Profile $profile, $moduleName = null)
        {
        }
        /**
         * @param string $name
         * @param bool $indexActionIncluded
         */
        public function create($name, $indexActionIncluded = true, $module = null)
        {
        }
    }
    class Zend_Tool_Project_Provider_DbAdapter extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public $_appConfigFilePath = null;
        public $_config = null;
        public $_sectionName = 'production';
        public function configure($dsn = null, $sectionName = 'production')
        {
        }
        public function _configureViaDSN($dsn)
        {
        }
        public function _cleanMagicQuotesInValues(&$value, $key)
        {
        }
    }
    class Zend_Tool_Project_Provider_DbTable extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public $_specialties = 'Psalm could not infer this type';
        /**
         * @var Zend_Filter
         */
        public $_nameFilter;
        public static function createResource(\Zend_Tool_Project_Profile $profile, $dbTableName, $actualTableName, $moduleName = null)
        {
        }
        public static function hasResource(\Zend_Tool_Project_Profile $profile, $dbTableName, $moduleName = null)
        {
        }
        public function create($name, $actualTableName, $module = null, $forceOverwrite = false)
        {
        }
        /**
         * @param null|string $module
         * @param bool $forceOverwrite
         *
         * @return void
         */
        public function createFromDatabase($module = null, $forceOverwrite = false)
        {
        }
        public function _convertTableNameToClassName($tableName)
        {
        }
    }
    class Zend_Tool_Project_Provider_Exception extends \Zend_Tool_Project_Exception
    {
    }
    class Zend_Tool_Project_Provider_Form extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public static function createResource(\Zend_Tool_Project_Profile $profile, $formName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $formName
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function hasResource(\Zend_Tool_Project_Profile $profile, $formName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function _getFormsDirectoryResource(\Zend_Tool_Project_Profile $profile, $moduleName = null)
        {
        }
        public function enable($module = null)
        {
        }
        /**
         * @param string $name
         * @param null|string $module
         */
        public function create($name, $module = null)
        {
        }
    }
    class Zend_Tool_Project_Provider_Layout extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        /**
         * @var string
         */
        public $_layoutPath;
        public static function createResource(\Zend_Tool_Project_Profile $profile, $layoutName = 'layout')
        {
        }
        public function enable()
        {
        }
        public function disable()
        {
        }
        public function _getApplicationConfigResource(\Zend_Tool_Project_Profile $profile)
        {
        }
    }
    class Zend_Tool_Project_Provider_Manifest implements \Zend_Tool_Framework_Manifest_ProviderManifestable
    {
        /**
         * @return array<array-key, mixed>
         */
        public function getProviders()
        {
        }
    }
    class Zend_Tool_Project_Provider_Model extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public static function createResource(\Zend_Tool_Project_Profile $profile, $modelName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $modelName
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function hasResource(\Zend_Tool_Project_Profile $profile, $modelName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function _getModelsDirectoryResource(\Zend_Tool_Project_Profile $profile, $moduleName = null)
        {
        }
        /**
         * @param string $name
         * @param null|string $module
         */
        public function create($name, $module = null)
        {
        }
    }
    class Zend_Tool_Project_Provider_Module extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public static function createResources(\Zend_Tool_Project_Profile $profile, $moduleName, ?\Zend_Tool_Project_Profile_Resource $targetModuleResource = null)
        {
        }
        /**
         * @param string $name
         */
        public function create($name)
        {
        }
    }
    class Zend_Tool_Project_Provider_Profile extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public function show()
        {
        }
    }
    class Zend_Tool_Project_Provider_Project extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public $_specialties = 'Psalm could not infer this type';
        /**
         * @param string $path
         * @param null|string $nameOfProfile
         * @param null|string $fileOfProfile
         */
        public function create($path, $nameOfProfile = null, $fileOfProfile = null)
        {
        }
        public function show()
        {
        }
        public function showInfo()
        {
        }
        public function _getDefaultProfile()
        {
        }
        public static function getDefaultReadmeContents($caller = null)
        {
        }
    }
    class Zend_Tool_Project_Provider_ProjectProvider extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $projectProviderName
         * @param null|string $actionNames
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function createResource(\Zend_Tool_Project_Profile $profile, $projectProviderName, $actionNames = null)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @throws Zend_Tool_Project_Provider_Exception
         */
        public function create($name, $actions = null)
        {
        }
    }
    class Zend_Tool_Project_Provider_Test extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        public $_specialties = 'Psalm could not infer this type';
        /**
         * @param Zend_Tool_Project_Profile $profile
         *
         * @return bool
         */
        public static function isTestingEnabled(\Zend_Tool_Project_Profile $profile)
        {
        }
        public static function isPHPUnitAvailable()
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $controllerName
         * @param string $actionName
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function createApplicationResource(\Zend_Tool_Project_Profile $profile, $controllerName, $actionName, $moduleName = null)
        {
        }
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $libraryClassName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function createLibraryResource(\Zend_Tool_Project_Profile $profile, $libraryClassName)
        {
        }
        public function enable()
        {
        }
        public function disable()
        {
        }
        /**
         * @param string $libraryClassName
         */
        public function create($libraryClassName)
        {
        }
    }
    class Zend_Tool_Project_Provider_View extends \Zend_Tool_Project_Provider_Abstract
    {
        public const NO_PROFILE_THROW_EXCEPTION = true;
        public const NO_PROFILE_RETURN_FALSE = false;
        /**
         * @param Zend_Tool_Project_Profile $profile
         * @param string $actionName
         * @param string $controllerName
         * @param null|string $moduleName
         *
         * @return Zend_Tool_Project_Profile_Resource
         */
        public static function createResource(\Zend_Tool_Project_Profile $profile, $actionName, $controllerName, $moduleName = null)
        {
        }
        /**
         * @param string $controllerName
         * @param string $actionNameOrSimpleName
         */
        public function create($controllerName, $actionNameOrSimpleName, $module = null)
        {
        }
    }
    class Zend_Translate
    {
        public const AN_ARRAY = 'Array';
        public const AN_CSV = 'Csv';
        public const AN_GETTEXT = 'Gettext';
        public const AN_INI = 'Ini';
        public const AN_QT = 'Qt';
        public const AN_TBX = 'Tbx';
        public const AN_TMX = 'Tmx';
        public const AN_XLIFF = 'Xliff';
        public const AN_XMLTM = 'XmlTm';
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        /**
         * @var Zend_Translate_Adapter
         */
        public $_adapter;
        /**
         * @param Zend_Config|Zend_Translate_Adapter|array<array-key, mixed> $options
         *
         * @throws Zend_Translate_Exception
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param Zend_Config|Zend_Translate_Adapter|array<array-key, mixed> $options
         *
         * @throws Zend_Translate_Exception
         */
        public function setAdapter($options = array())
        {
        }
        /**
         * @return Zend_Translate_Adapter
         */
        public function getAdapter()
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public static function getCache()
        {
        }
        /**
         * @param Zend_Cache_Core $cache
         *
         * @return void
         */
        public static function setCache(\Zend_Cache_Core $cache)
        {
        }
        /**
         * @return bool
         */
        public static function hasCache()
        {
        }
        /**
         * @return void
         */
        public static function removeCache()
        {
        }
        /**
         * @param null|string $tag
         *
         * @return void
         */
        public static function clearCache($tag = null)
        {
        }
        public function __call($method, array $options)
        {
        }
    }
    class Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        /**
         * @var bool
         */
        public $_automatic;
        public $_routed = array();
        /**
         * @var Zend_Cache_Core
         */
        public static $_cache;
        /**
         * @var bool
         */
        public static $_cacheTags;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_translate;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $options
         *
         * @return void
         *
         * @throws Zend_Translate_Exception
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @return Zend_Translate_Adapter
         *
         * @throws Zend_Translate_Exception
         */
        public function addTranslation($options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Translate_Adapter
         *
         * @throws Zend_Translate_Exception
         */
        public function setOptions(array $options = array())
        {
        }
        /**
         * @param null|string $optionKey
         *
         * @return array<array-key, mixed>|int|null|string
         */
        public function getOptions($optionKey = null)
        {
        }
        /**
         * @return Zend_Locale|null|string
         */
        public function getLocale()
        {
        }
        /**
         * @param Zend_Locale|string $locale
         *
         * @return Zend_Translate_Adapter
         *
         * @throws Zend_Translate_Exception
         */
        public function setLocale($locale)
        {
        }
        /**
         * @return array<array-key, mixed>|null
         */
        public function getList()
        {
        }
        /**
         * @param string $message
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>|false|string
         */
        public function getMessageId($message, $locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public function getMessageIds($locale = null)
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return array<array-key, mixed>
         */
        public function getMessages($locale = null)
        {
        }
        /**
         * @param Zend_Locale|string $locale
         *
         * @return bool
         */
        public function isAvailable($locale)
        {
        }
        /**
         * @param mixed $data
         * @param Zend_Locale|string $locale
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public abstract function _loadTranslationData($data, $locale, array $options = array());
        /**
         * @return Zend_Translate_Adapter
         *
         * @throws Zend_Translate_Exception
         */
        public function _addTranslationData($options = array())
        {
        }
        /**
         * @param array<array-key, mixed>|string $messageId
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function translate($messageId, $locale = null)
        {
        }
        /**
         * @param string $singular
         * @param string $plural
         * @param int $number
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function plural($singular, $plural, $number, $locale = null)
        {
        }
        /**
         * @param string $message
         * @param string $locale
         */
        public function _log($message, $locale)
        {
        }
        /**
         * @param string $messageId
         * @param Zend_Locale|null|string $locale
         *
         * @return string
         */
        public function _($messageId, $locale = null)
        {
        }
        /**
         * @param string $messageId
         * @param bool $original
         * @param Zend_Locale|null|string $locale
         *
         * @return bool
         */
        public function isTranslated($messageId, $original = false, $locale = null)
        {
        }
        /**
         * @return Zend_Cache_Core
         */
        public static function getCache()
        {
        }
        /**
         * @param Zend_Cache_Core $cache
         */
        public static function setCache(\Zend_Cache_Core $cache)
        {
        }
        /**
         * @return bool
         */
        public static function hasCache()
        {
        }
        /**
         * @return void
         */
        public static function removeCache()
        {
        }
        /**
         * @param null|string $tag
         *
         * @return void
         */
        public static function clearCache($tag = null)
        {
        }
        /**
         * @return string
         */
        public abstract function toString();
        public static function _getTagSupportForCache()
        {
        }
    }
    class Zend_Translate_Adapter_Array extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_data = array();
        /**
         * @param array<array-key, mixed>|string $data
         * @param string $locale
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function _loadTranslationData($data, $locale, array $options = array())
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Adapter_Csv extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_data = array();
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @param array<array-key, mixed>|string $filename
         * @param string $locale
         *
         * @return array<array-key, mixed>
         */
        public function _loadTranslationData($filename, $locale, array $options = array())
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Adapter_Gettext extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_bigEndian = false;
        public $_file = false;
        public $_adapterInfo = array();
        public $_data = array();
        /**
         * @param string $bytes
         */
        public function _readMOData($bytes)
        {
        }
        /**
         * @param string $filename
         * @param string $locale
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Translation_Exception
         */
        public function _loadTranslationData($filename, $locale, array $options = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAdapterInfo()
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Adapter_Ini extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_data = array();
        /**
         * @param array<array-key, mixed>|string $data
         * @param string $locale
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Translate_Exception
         */
        public function _loadTranslationData($data, $locale, array $options = array())
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Adapter_Qt extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_file = false;
        public $_cleared = array();
        public $_transunit = null;
        public $_source = null;
        public $_target = null;
        public $_scontent = null;
        public $_tcontent = null;
        public $_stag = false;
        public $_ttag = true;
        public $_data = array();
        /**
         * @param string $filename
         * @param string $locale
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Translation_Exception
         */
        public function _loadTranslationData($filename, $locale, array $options = array())
        {
        }
        public function _startElement($file, $name, $attrib)
        {
        }
        public function _endElement($file, $name)
        {
        }
        public function _contentElement($file, $data)
        {
        }
        public function _findEncoding($filename)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Adapter_Tbx extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_file = false;
        public $_cleared = array();
        public $_langset = null;
        public $_termentry = null;
        public $_content = null;
        public $_term = null;
        public $_data = array();
        /**
         * @param string $filename
         * @param string $locale
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Translation_Exception
         */
        public function _loadTranslationData($filename, $locale, array $options = array())
        {
        }
        public function _startElement($file, $name, $attrib)
        {
        }
        public function _endElement($file, $name)
        {
        }
        public function _contentElement($file, $data)
        {
        }
        public function _findEncoding($filename)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Adapter_Tmx extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_file = false;
        public $_useId = true;
        public $_srclang = null;
        public $_tu = null;
        public $_tuv = null;
        public $_seg = null;
        public $_content = null;
        public $_data = array();
        /**
         * @param string $filename
         * @param string $locale
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Translation_Exception
         */
        public function _loadTranslationData($filename, $locale, array $options = array())
        {
        }
        /**
         * @param resource $file
         * @param string $name
         * @param array<array-key, mixed> $attrib
         */
        public function _startElement($file, $name, $attrib)
        {
        }
        /**
         * @param resource $file
         * @param string $name
         */
        public function _endElement($file, $name)
        {
        }
        /**
         * @param resource $file
         * @param string $data
         */
        public function _contentElement($file, $data)
        {
        }
        /**
         * @return string
         */
        public function _findEncoding($filename)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Adapter_Xliff extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_file = false;
        public $_useId = true;
        public $_cleared = array();
        public $_transunit = null;
        public $_source = null;
        public $_target = null;
        public $_langId = null;
        public $_scontent = null;
        public $_tcontent = null;
        public $_stag = false;
        public $_ttag = false;
        public $_data = array();
        /**
         * @param string $filename
         * @param string $locale
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Translation_Exception
         */
        public function _loadTranslationData($filename, $locale, array $options = array())
        {
        }
        public function _startElement($file, $name, $attrib)
        {
        }
        public function _endElement($file, $name)
        {
        }
        public function _contentElement($file, $data)
        {
        }
        public function _findEncoding($filename)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Adapter_XmlTm extends \Zend_Translate_Adapter
    {
        public const LOCALE_DIRECTORY = 'directory';
        public const LOCALE_FILENAME = 'filename';
        public $_file = false;
        public $_cleared = array();
        public $_lang = null;
        public $_content = null;
        public $_tag = null;
        public $_data = array();
        /**
         * @param string $filename
         * @param string $locale
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Translation_Exception
         */
        public function _loadTranslationData($filename, $locale, array $options = array())
        {
        }
        public function _startElement($file, $name, $attrib)
        {
        }
        public function _endElement($file, $name)
        {
        }
        public function _contentElement($file, $data)
        {
        }
        public function _findEncoding($filename)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
    }
    class Zend_Translate_Exception extends \Zend_Exception
    {
    }
    class Zend_Translate_Plural
    {
        /**
         * @var string
         */
        public static $_plural;
        /**
         * @param int $number
         * @param string $locale
         *
         * @return int
         */
        public static function getPlural($number, $locale)
        {
        }
        /**
         * @param string $rule
         * @param string $locale
         *
         * @return null
         */
        public static function setPlural($rule, $locale)
        {
        }
    }
    class Zend_Uri
    {
        /**
         * @var string
         */
        public $_scheme;
        /**
         * @var array<array-key, mixed>
         */
        public static $_config;
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $uri
         *
         * @return bool
         */
        public static function check($uri)
        {
        }
        /**
         * @param string $uri
         * @param null|string $className
         *
         * @return Zend_Uri
         *
         * @throws Zend_Uri_Exception
         */
        public static function factory($uri = 'http', $className = null)
        {
        }
        /**
         * @return false|string
         */
        public function getScheme()
        {
        }
        /**
         * @param Zend_Config|array<array-key, mixed> $config
         */
        public static function setConfig($config)
        {
        }
        /**
         * @param string $scheme
         * @param string $schemeSpecific
         */
        public abstract function __construct($scheme, $schemeSpecific = '');
        /**
         * @return string
         */
        public abstract function getUri();
        /**
         * @return bool
         */
        public abstract function valid();
    }
    class Zend_Uri_Exception extends \Zend_Exception
    {
    }
    class Zend_Uri_Http extends \Zend_Uri
    {
        public const CHAR_ALNUM = 'A-Za-z0-9';
        public const CHAR_MARK = '-_.!~*\'()\\[\\]';
        public const CHAR_RESERVED = ';\\/?:@&=+$,';
        public const CHAR_SEGMENT = ':@&=+$,;';
        public const CHAR_UNWISE = '{}|\\\\^`';
        /**
         * @var string
         */
        public $_username;
        /**
         * @var string
         */
        public $_password;
        /**
         * @var string
         */
        public $_host;
        /**
         * @var string
         */
        public $_port;
        /**
         * @var string
         */
        public $_path;
        /**
         * @var string
         */
        public $_query;
        /**
         * @var string
         */
        public $_fragment;
        /**
         * @var array<array-key, mixed>
         */
        public $_regex;
        /**
         * @param string $scheme
         * @param string $schemeSpecific
         *
         * @throws Zend_Uri_Exception
         */
        public function __construct($scheme, $schemeSpecific = '')
        {
        }
        /**
         * @param string $uri
         *
         * @return Zend_Uri_Http
         *
         * @throws InvalidArgumentException
         * @throws Zend_Uri_Exception
         */
        public static function fromString($uri)
        {
        }
        /**
         * @param string $schemeSpecific
         *
         * @return void
         *
         * @throws Zend_Uri_Exception
         */
        public function _parseUri($schemeSpecific)
        {
        }
        /**
         * @return string
         *
         * @throws Zend_Uri_Exception
         */
        public function getUri()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return string
         */
        public function getUsername()
        {
        }
        /**
         * @param null|string $username
         *
         * @return bool
         *
         * @throws Zend_Uri_Exception
         */
        public function validateUsername($username = null)
        {
        }
        /**
         * @param string $username
         *
         * @return string
         *
         * @throws Zend_Uri_Exception
         */
        public function setUsername($username)
        {
        }
        /**
         * @return string
         */
        public function getPassword()
        {
        }
        /**
         * @param null|string $password
         *
         * @return bool
         *
         * @throws Zend_Uri_Exception
         */
        public function validatePassword($password = null)
        {
        }
        /**
         * @param string $password
         *
         * @return string
         *
         * @throws Zend_Uri_Exception
         */
        public function setPassword($password)
        {
        }
        /**
         * @return string
         */
        public function getHost()
        {
        }
        /**
         * @param null|string $host
         *
         * @return bool
         */
        public function validateHost($host = null)
        {
        }
        /**
         * @param string $host
         *
         * @return string
         *
         * @throws Zend_Uri_Exception
         */
        public function setHost($host)
        {
        }
        /**
         * @return string
         */
        public function getPort()
        {
        }
        /**
         * @param null|string $port
         *
         * @return bool
         */
        public function validatePort($port = null)
        {
        }
        /**
         * @param string $port
         *
         * @return string
         *
         * @throws Zend_Uri_Exception
         */
        public function setPort($port)
        {
        }
        /**
         * @return string
         */
        public function getPath()
        {
        }
        /**
         * @param null|string $path
         *
         * @return bool
         *
         * @throws Zend_Uri_Exception
         */
        public function validatePath($path = null)
        {
        }
        /**
         * @param string $path
         *
         * @return string
         *
         * @throws Zend_Uri_Exception
         */
        public function setPath($path)
        {
        }
        /**
         * @return string
         */
        public function getQuery()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getQueryAsArray()
        {
        }
        /**
         * @param null|string $query
         *
         * @return bool
         *
         * @throws Zend_Uri_Exception
         */
        public function validateQuery($query = null)
        {
        }
        /**
         * @param array<array-key, mixed> $queryParams
         *
         * @return string
         */
        public function addReplaceQueryParameters(array $queryParams)
        {
        }
        /**
         * @param array<array-key, mixed> $queryParamKeys
         *
         * @return string
         */
        public function removeQueryParameters(array $queryParamKeys)
        {
        }
        /**
         * @param array<array-key, mixed>|string $query
         *
         * @return string
         *
         * @throws Zend_Uri_Exception
         */
        public function setQuery($query)
        {
        }
        /**
         * @return false|string
         */
        public function getFragment()
        {
        }
        /**
         * @param null|string $fragment
         *
         * @return bool
         *
         * @throws Zend_Uri_Exception
         */
        public function validateFragment($fragment = null)
        {
        }
        /**
         * @param string $fragment
         *
         * @return string
         *
         * @throws Zend_Uri_Exception
         */
        public function setFragment($fragment)
        {
        }
    }
    class Zend_Validate implements \Zend_Validate_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_validators;
        /**
         * @var array<array-key, mixed>
         */
        public $_messages;
        /**
         * @var array<array-key, mixed>
         */
        public static $_defaultNamespaces;
        /**
         * @var array<array-key, mixed>
         */
        public $_errors;
        /**
         * @param Zend_Validate_Interface $validator
         * @param bool $breakChainOnFailure
         *
         * @return Zend_Validate
         */
        public function addValidator(\Zend_Validate_Interface $validator, $breakChainOnFailure = false)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getDefaultNamespaces()
        {
        }
        /**
         * @param array<array-key, mixed>|string $namespace
         *
         * @return null
         */
        public static function setDefaultNamespaces($namespace)
        {
        }
        /**
         * @param array<array-key, mixed>|string $namespace
         *
         * @return null
         */
        public static function addDefaultNamespaces($namespace)
        {
        }
        /**
         * @return bool
         */
        public static function hasDefaultNamespaces()
        {
        }
        /**
         * @param mixed $value
         * @param string $classBaseName
         * @param array<array-key, mixed> $args
         * @param mixed $namespaces
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public static function is($value, $classBaseName, array $args = array(), $namespaces = array())
        {
        }
        /**
         * @return int
         */
        public static function getMessageLength()
        {
        }
        /**
         * @param int $length
         */
        public static function setMessageLength($length = -1)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public static function getDefaultTranslator($translator = null)
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translator
         */
        public static function setDefaultTranslator($translator = null)
        {
        }
    }
    class Zend_Validate_Abstract implements \Zend_Validate_Interface
    {
        /**
         * @var mixed
         */
        public $_value;
        /**
         * @var array<array-key, mixed>
         */
        protected $_messageVariables;
        /**
         * @var array<array-key, mixed>
         */
        protected $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messages;
        /**
         * @var bool
         */
        public $_obscureValue;
        /**
         * @var array<array-key, mixed>
         */
        public $_errors;
        /**
         * @var Zend_Translate
         */
        public $_translator;
        /**
         * @var Zend_Translate
         */
        public static $_defaultTranslator;
        /**
         * @var Boolean
         */
        public $_translatorDisabled;
        /**
         * @var Integer
         */
        public static $_messageLength;
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessageVariables()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMessageTemplates()
        {
        }
        /**
         * @param string $messageString
         * @param null|string $messageKey
         *
         * @return Zend_Validate_Abstract
         *
         * @throws Zend_Validate_Exception
         */
        public function setMessage($messageString, $messageKey = null)
        {
        }
        /**
         * @param array<array-key, mixed> $messages
         *
         * @return Zend_Validate_Abstract
         */
        public function setMessages(array $messages)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         *
         * @throws Zend_Validate_Exception
         */
        public function __get($property)
        {
        }
        /**
         * @param string $messageKey
         * @param string $value
         *
         * @return string
         */
        public function _createMessage($messageKey, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $pieces
         *
         * @return string
         */
        public function _implodeRecursive(array $pieces)
        {
        }
        /**
         * @param string $messageKey
         * @param null|string $value
         *
         * @return void
         */
        public function _error($messageKey, $value = null)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function _setValue($value)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getErrors()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Validate_Abstract
         */
        public function setObscureValue($flag)
        {
        }
        /**
         * @return bool
         */
        public function getObscureValue()
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translator
         *
         * @return Zend_Validate_Abstract
         *
         * @throws Zend_Validate_Exception
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @return bool
         */
        public function hasTranslator()
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translator
         *
         * @throws Zend_Validate_Exception
         */
        public static function setDefaultTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public static function getDefaultTranslator()
        {
        }
        /**
         * @return bool
         */
        public static function hasDefaultTranslator()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Validate_Abstract
         */
        public function setDisableTranslator($flag)
        {
        }
        /**
         * @return bool
         */
        public function translatorIsDisabled()
        {
        }
        /**
         * @return int
         */
        public static function getMessageLength()
        {
        }
        /**
         * @param int $length
         */
        public static function setMessageLength($length = -1)
        {
        }
    }
    class Zend_Validate_Alnum extends \Zend_Validate_Abstract
    {
        public const INVALID = 'alnumInvalid';
        public const NOT_ALNUM = 'notAlnum';
        public const STRING_EMPTY = 'alnumStringEmpty';
        /**
         * @var bool
         */
        public $allowWhiteSpace;
        /**
         * @var Zend_Filter_Alnum
         */
        public static $_filter;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param Zend_Config|bool $allowWhiteSpace
         */
        public function __construct($allowWhiteSpace = false)
        {
        }
        /**
         * @return bool
         */
        public function getAllowWhiteSpace()
        {
        }
        /**
         * @param bool $allowWhiteSpace
         *
         * @return Zend_Filter_Alnum
         */
        public function setAllowWhiteSpace($allowWhiteSpace)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Alpha extends \Zend_Validate_Abstract
    {
        public const INVALID = 'alphaInvalid';
        public const NOT_ALPHA = 'notAlpha';
        public const STRING_EMPTY = 'alphaStringEmpty';
        /**
         * @var bool
         */
        public $allowWhiteSpace;
        /**
         * @var Zend_Filter_Alpha
         */
        public static $_filter;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param Zend_Config|bool $allowWhiteSpace
         */
        public function __construct($allowWhiteSpace = false)
        {
        }
        /**
         * @return bool
         */
        public function getAllowWhiteSpace()
        {
        }
        /**
         * @param bool $allowWhiteSpace
         *
         * @return Zend_Filter_Alpha
         */
        public function setAllowWhiteSpace($allowWhiteSpace)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Barcode extends \Zend_Validate_Abstract
    {
        public const INVALID = 'barcodeInvalid';
        public const FAILED = 'barcodeFailed';
        public const INVALID_CHARS = 'barcodeInvalidChars';
        public const INVALID_LENGTH = 'barcodeInvalidLength';
        public $_messageTemplates = 'Psalm could not infer this type';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var int
         */
        public $_length;
        /**
         * @var Zend_Validate_Barcode_BarcodeAdapter
         */
        public $_adapter;
        /**
         * @throws Zend_Validate_Exception
         */
        public function __construct($adapter)
        {
        }
        /**
         * @return Zend_Validate_Barcode_BarcodeAdapter
         */
        public function getAdapter()
        {
        }
        /**
         * @param Zend_Validate_Barcode|string $adapter
         * @param array<array-key, mixed>|null $options
         *
         * @return static
         *
         * @throws Zend_Validate_Exception
         */
        public function setAdapter($adapter, $options = null)
        {
        }
        /**
         * @return bool
         */
        public function getChecksum()
        {
        }
        /**
         * @param bool $checksum
         *
         * @return Zend_Validate_Barcode
         */
        public function setChecksum($checksum)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Barcode_AdapterAbstract implements \Zend_Validate_Barcode_AdapterInterface
    {
        /**
         * @var array<array-key, mixed>|int|string
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var array<array-key, mixed>|string
         */
        public $_checksum;
        /**
         * @var bool
         */
        public $_hasChecksum;
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checkLength($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checkChars($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checksum($value)
        {
        }
        /**
         * @return string
         */
        public function getLength()
        {
        }
        /**
         * @return int|string
         */
        public function getCharacters()
        {
        }
        public function getChecksum()
        {
        }
        /**
         * @return bool
         */
        public function getCheck()
        {
        }
        /**
         * @param bool $check
         *
         * @return Zend_Validate_Barcode_AdapterAbstract
         */
        public function setCheck($check)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _gtin($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _identcode($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _code25($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _postnet($value)
        {
        }
    }
    interface Zend_Validate_Barcode_AdapterInterface
    {
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checkLength($value);
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checkChars($value);
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checksum($value);
        /**
         * @return bool
         */
        public function getCheck();
        /**
         * @param bool $check
         *
         * @return Zend_Validate_Barcode_Adapter
         */
        public function setCheck($check);
    }
    class Zend_Validate_Barcode_Code25 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
        public function __construct()
        {
        }
    }
    class Zend_Validate_Barcode_Code25interleaved extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
        public function __construct()
        {
        }
    }
    class Zend_Validate_Barcode_Code39 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
        /**
         * @var array<array-key, mixed>
         */
        public $_check;
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _code39($value)
        {
        }
    }
    class Zend_Validate_Barcode_Code39ext extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        public function __construct()
        {
        }
    }
    class Zend_Validate_Barcode_Code93 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
        /**
         * @var array<array-key, mixed>
         */
        public $_check;
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _code93($value)
        {
        }
    }
    class Zend_Validate_Barcode_Code93ext extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        public function __construct()
        {
        }
    }
    class Zend_Validate_Barcode_Ean12 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Ean13 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Ean14 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Ean18 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Ean2 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        public function __construct()
        {
        }
    }
    class Zend_Validate_Barcode_Ean5 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        public function __construct()
        {
        }
    }
    class Zend_Validate_Barcode_Ean8 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checkLength($value)
        {
        }
    }
    class Zend_Validate_Barcode_Gtin12 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Gtin13 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Gtin14 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Identcode extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_IntelligentMail extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        public function __construct()
        {
        }
    }
    class Zend_Validate_Barcode_Issn extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checkChars($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checksum($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _issn($value)
        {
        }
    }
    class Zend_Validate_Barcode_Itf14 extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Leitcode extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Planet extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Postnet extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Royalmail extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        public $_rows = 'Psalm could not infer this type';
        public $_columns = 'Psalm could not infer this type';
        /**
         * @var string
         */
        public $_checksum;
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _royalmail($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checkChars($value)
        {
        }
    }
    class Zend_Validate_Barcode_Sscc extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Upca extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
    }
    class Zend_Validate_Barcode_Upce extends \Zend_Validate_Barcode_AdapterAbstract
    {
        /**
         * @var int
         */
        public $_length;
        /**
         * @var string
         */
        public $_characters;
        /**
         * @var string
         */
        public $_checksum;
        /**
         * @param string $value
         *
         * @return bool
         */
        public function checkLength($value)
        {
        }
    }
    class Zend_Validate_Between extends \Zend_Validate_Abstract
    {
        public const NOT_BETWEEN = 'notBetween';
        public const NOT_BETWEEN_STRICT = 'notBetweenStrict';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var mixed
         */
        public $_min;
        /**
         * @var mixed
         */
        public $_max;
        /**
         * @var bool
         */
        public $_inclusive;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return mixed
         */
        public function getMin()
        {
        }
        /**
         * @param mixed $min
         *
         * @return Zend_Validate_Between
         */
        public function setMin($min)
        {
        }
        /**
         * @return mixed
         */
        public function getMax()
        {
        }
        /**
         * @param mixed $max
         *
         * @return Zend_Validate_Between
         */
        public function setMax($max)
        {
        }
        /**
         * @return bool
         */
        public function getInclusive()
        {
        }
        /**
         * @param bool $inclusive
         *
         * @return Zend_Validate_Between
         */
        public function setInclusive($inclusive)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Callback extends \Zend_Validate_Abstract
    {
        public const INVALID_CALLBACK = 'callbackInvalid';
        public const INVALID_VALUE = 'callbackValue';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>|string
         */
        public $_callback;
        /**
         * @var mixed
         */
        public $_options;
        /**
         * @param mixed|null $callback
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($callback = null)
        {
        }
        /**
         * @return mixed
         */
        public function getCallback()
        {
        }
        /**
         * @param array<array-key, mixed>|string $callback
         *
         * @return Zend_Validate_Callback
         *
         * @throws Zend_Validate_Exception
         */
        public function setCallback($callback)
        {
        }
        /**
         * @return mixed
         */
        public function getOptions()
        {
        }
        /**
         * @param mixed $options
         *
         * @return Zend_Validate_Callback
         */
        public function setOptions($options)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Ccnum extends \Zend_Validate_Abstract
    {
        public const LENGTH = 'ccnumLength';
        public const CHECKSUM = 'ccnumChecksum';
        /**
         * @var Zend_Filter_Digits
         */
        public static $_filter;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        public function __construct()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_CreditCard extends \Zend_Validate_Abstract
    {
        public const ALL = 'All';
        public const AMERICAN_EXPRESS = 'American_Express';
        public const UNIONPAY = 'Unionpay';
        public const DINERS_CLUB = 'Diners_Club';
        public const DINERS_CLUB_US = 'Diners_Club_US';
        public const DISCOVER = 'Discover';
        public const JCB = 'JCB';
        public const LASER = 'Laser';
        public const MAESTRO = 'Maestro';
        public const MASTERCARD = 'Mastercard';
        public const SOLO = 'Solo';
        public const VISA = 'Visa';
        public const CHECKSUM = 'creditcardChecksum';
        public const CONTENT = 'creditcardContent';
        public const INVALID = 'creditcardInvalid';
        public const LENGTH = 'creditcardLength';
        public const PREFIX = 'creditcardPrefix';
        public const SERVICE = 'creditcardService';
        public const SERVICEFAILURE = 'creditcardServiceFailure';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_cardLength;
        /**
         * @var array<array-key, mixed>
         */
        public $_cardType;
        /**
         * @var array<array-key, mixed>
         */
        public $_type;
        /**
         * @var callback
         */
        public $_service;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getType()
        {
        }
        /**
         * @param array<array-key, mixed>|string $type
         *
         * @return Zend_Validate_CreditCard
         */
        public function setType($type)
        {
        }
        /**
         * @param array<array-key, mixed>|string $type
         *
         * @return Zend_Validate_CreditCard
         */
        public function addType($type)
        {
        }
        /**
         * @return callback
         */
        public function getService()
        {
        }
        /**
         * @param mixed $service
         *
         * @return static
         *
         * @throws Zend_Validate_Exception
         */
        public function setService($service)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Date extends \Zend_Validate_Abstract
    {
        public const INVALID = 'dateInvalid';
        public const INVALID_DATE = 'dateInvalidDate';
        public const FALSEFORMAT = 'dateFalseFormat';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var null|string
         */
        public $_format;
        /**
         * @var Zend_Locale|null|string
         */
        public $_locale;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return Zend_Locale|null|string
         */
        public function getLocale()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Validate_Date
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @return null|string
         */
        public function getFormat()
        {
        }
        /**
         * @param null|string $format
         *
         * @return Zend_Validate_Date
         */
        public function setFormat($format = null)
        {
        }
        /**
         * @param Zend_Date|array<array-key, mixed>|string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _checkFormat($value)
        {
        }
    }
    class Zend_Validate_Db_Abstract extends \Zend_Validate_Abstract
    {
        public const ERROR_NO_RECORD_FOUND = 'noRecordFound';
        public const ERROR_RECORD_FOUND = 'recordFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_schema;
        /**
         * @var string
         */
        public $_table;
        /**
         * @var string
         */
        public $_field;
        /**
         * @var mixed
         */
        public $_exclude;
        /**
         * @var unknown_type
         */
        public $_adapter;
        /**
         * @var Zend_Db_Select
         */
        public $_select;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return Zend_Db_Adapter
         *
         * @throws Zend_Validate_Exception
         */
        public function getAdapter()
        {
        }
        /**
         * @param Zend_Db_Adapter_Abstract $adapter
         *
         * @return Zend_Validate_Db_Abstract
         *
         * @throws Zend_Validate_Exception
         */
        public function setAdapter($adapter)
        {
        }
        /**
         * @return array<array-key, mixed>|string
         */
        public function getExclude()
        {
        }
        /**
         * @param array<array-key, mixed>|string $exclude
         *
         * @return Zend_Validate_Db_Abstract
         */
        public function setExclude($exclude)
        {
        }
        /**
         * @return array<array-key, mixed>|string
         */
        public function getField()
        {
        }
        /**
         * @param string $field
         *
         * @return Zend_Validate_Db_Abstract
         */
        public function setField($field)
        {
        }
        /**
         * @return string
         */
        public function getTable()
        {
        }
        /**
         * @param string $table
         *
         * @return Zend_Validate_Db_Abstract
         */
        public function setTable($table)
        {
        }
        /**
         * @return string
         */
        public function getSchema()
        {
        }
        /**
         * @param string $schema
         *
         * @return Zend_Validate_Db_Abstract
         */
        public function setSchema($schema)
        {
        }
        /**
         * @param Zend_Db_Select $select
         *
         * @return Zend_Validate_Db_Abstract
         *
         * @throws Zend_Validate_Exception
         */
        public function setSelect($select)
        {
        }
        /**
         * @return Zend_Db_Select
         */
        public function getSelect()
        {
        }
        /**
         * @param string $value
         *
         * @return array<array-key, mixed>
         */
        public function _query($value)
        {
        }
    }
    class Zend_Validate_Db_NoRecordExists extends \Zend_Validate_Db_Abstract
    {
        public const ERROR_NO_RECORD_FOUND = 'noRecordFound';
        public const ERROR_RECORD_FOUND = 'recordFound';
        /**
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Db_RecordExists extends \Zend_Validate_Db_Abstract
    {
        public const ERROR_NO_RECORD_FOUND = 'noRecordFound';
        public const ERROR_RECORD_FOUND = 'recordFound';
        /**
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Digits extends \Zend_Validate_Abstract
    {
        public const NOT_DIGITS = 'notDigits';
        public const STRING_EMPTY = 'digitsStringEmpty';
        public const INVALID = 'digitsInvalid';
        /**
         * @var Zend_Filter_Digits
         */
        public static $_filter;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_EmailAddress extends \Zend_Validate_Abstract
    {
        public const INVALID = 'emailAddressInvalid';
        public const INVALID_FORMAT = 'emailAddressInvalidFormat';
        public const INVALID_HOSTNAME = 'emailAddressInvalidHostname';
        public const INVALID_MX_RECORD = 'emailAddressInvalidMxRecord';
        public const INVALID_SEGMENT = 'emailAddressInvalidSegment';
        public const DOT_ATOM = 'emailAddressDotAtom';
        public const QUOTED_STRING = 'emailAddressQuotedString';
        public const INVALID_LOCAL_PART = 'emailAddressInvalidLocalPart';
        public const LENGTH_EXCEEDED = 'emailAddressLengthExceeded';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_invalidIp;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var string
         */
        public $_hostname;
        /**
         * @var string
         */
        public $_localPart;
        public $_options;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Validate_EmailAddress
         */
        public function setOptions(array $options = array())
        {
        }
        /**
         * @param string $messageString
         * @param null|string $messageKey
         *
         * @return Zend_Validate_Abstract
         *
         * @throws Zend_Validate_Exception
         */
        public function setMessage($messageString, $messageKey = null)
        {
        }
        /**
         * @return Zend_Validate_Hostname
         */
        public function getHostnameValidator()
        {
        }
        /**
         * @param Zend_Validate_Hostname|null $hostnameValidator
         * @param int $allow
         *
         * @return static
         */
        public function setHostnameValidator(?\Zend_Validate_Hostname $hostnameValidator = null, $allow)
        {
        }
        /**
         * @return bool
         */
        public function validateMxSupported()
        {
        }
        /**
         * @return bool
         */
        public function getValidateMx()
        {
        }
        /**
         * @param bool $mx
         *
         * @return Zend_Validate_EmailAddress
         *
         * @throws Zend_Validate_Exception
         */
        public function setValidateMx($mx)
        {
        }
        /**
         * @return bool
         */
        public function getDeepMxCheck()
        {
        }
        /**
         * @param bool $deep
         *
         * @return Zend_Validate_EmailAddress
         */
        public function setDeepMxCheck($deep)
        {
        }
        /**
         * @return unknown
         */
        public function getDomainCheck()
        {
        }
        /**
         * @param bool $domain
         *
         * @return Zend_Validate_EmailAddress
         */
        public function setDomainCheck($domain = true)
        {
        }
        /**
         * @param string $host
         *
         * @return bool
         */
        public function _isReserved($host)
        {
        }
        /**
         * @param string $binary
         *
         * @return mixed
         */
        public function _toIp($binary)
        {
        }
        /**
         * @return bool
         */
        public function _validateLocalPart()
        {
        }
        /**
         * @return bool
         */
        public function _validateMXRecords()
        {
        }
        /**
         * @return bool
         */
        public function _validateHostnamePart()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Exception extends \Zend_Exception
    {
    }
    class Zend_Validate_File_Count extends \Zend_Validate_Abstract
    {
        public const TOO_MANY = 'fileCountTooMany';
        public const TOO_FEW = 'fileCountTooFew';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var int
         */
        public $_min;
        /**
         * @var int|null
         */
        public $_max;
        /**
         * @var int
         */
        public $_count;
        /**
         * @var array<array-key, mixed>
         */
        public $_files;
        /**
         * @param Zend_Config|array<array-key, mixed>|int $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return int
         */
        public function getMin()
        {
        }
        /**
         * @param array<array-key, mixed>|int $min
         *
         * @return Zend_Validate_File_Count
         *
         * @throws Zend_Validate_Exception
         */
        public function setMin($min)
        {
        }
        /**
         * @return int
         */
        public function getMax()
        {
        }
        /**
         * @param array<array-key, mixed>|int $max
         *
         * @return Zend_Validate_StringLength
         *
         * @throws Zend_Validate_Exception
         */
        public function setMax($max)
        {
        }
        /**
         * @param array<array-key, mixed>|string $file
         *
         * @return static
         */
        public function addFile($file)
        {
        }
        /**
         * @param array<array-key, mixed>|string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_Crc32 extends \Zend_Validate_File_Hash
    {
        public const DOES_NOT_MATCH = 'fileCrc32DoesNotMatch';
        public const NOT_DETECTED = 'fileCrc32NotDetected';
        public const NOT_FOUND = 'fileCrc32NotFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_hash;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Crc32
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getCrc32()
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function setHash($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function setCrc32($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         *
         * @throws Zend_Validate_Exception
         */
        public function addHash($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function addCrc32($options)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
    }
    class Zend_Validate_File_ExcludeExtension extends \Zend_Validate_File_Extension
    {
        public const FALSE_EXTENSION = 'fileExcludeExtensionFalse';
        public const NOT_FOUND = 'fileExcludeExtensionNotFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
    }
    class Zend_Validate_File_ExcludeMimeType extends \Zend_Validate_File_MimeType
    {
        public const FALSE_TYPE = 'fileExcludeMimeTypeFalse';
        public const NOT_DETECTED = 'fileExcludeMimeTypeNotDetected';
        public const NOT_READABLE = 'fileExcludeMimeTypeNotReadable';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
    }
    class Zend_Validate_File_Exists extends \Zend_Validate_Abstract
    {
        public const DOES_NOT_EXIST = 'fileExistsDoesNotExist';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_directory;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $directory
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($directory = array())
        {
        }
        /**
         * @param bool $asArray
         *
         * @return string
         */
        public function getDirectory($asArray = false)
        {
        }
        /**
         * @param array<array-key, mixed>|string $directory
         *
         * @return Zend_Validate_File_Extension
         */
        public function setDirectory($directory)
        {
        }
        /**
         * @param array<array-key, mixed>|string $directory
         *
         * @return Zend_Validate_File_Extension
         *
         * @throws Zend_Validate_Exception
         */
        public function addDirectory($directory)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_Extension extends \Zend_Validate_Abstract
    {
        public const FALSE_EXTENSION = 'fileExtensionFalse';
        public const NOT_FOUND = 'fileExtensionNotFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_extension;
        /**
         * @var bool
         */
        public $_case;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $options
         */
        public function __construct($options)
        {
        }
        /**
         * @return bool
         */
        public function getCase()
        {
        }
        /**
         * @param bool $case
         *
         * @return Zend_Validate_File_Extension
         */
        public function setCase($case)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getExtension()
        {
        }
        /**
         * @param array<array-key, mixed>|string $extension
         *
         * @return Zend_Validate_File_Extension
         */
        public function setExtension($extension)
        {
        }
        /**
         * @param array<array-key, mixed>|string $extension
         *
         * @return Zend_Validate_File_Extension
         */
        public function addExtension($extension)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_FilesSize extends \Zend_Validate_File_Size
    {
        public const TOO_BIG = 'fileFilesSizeTooBig';
        public const TOO_SMALL = 'fileFilesSizeTooSmall';
        public const NOT_FOUND = 'fileSizeNotFound';
        public const NOT_READABLE = 'fileFilesSizeNotReadable';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_files;
        /**
         * @param Zend_Config|array<array-key, mixed>|int $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
    }
    class Zend_Validate_File_Hash extends \Zend_Validate_Abstract
    {
        public const DOES_NOT_MATCH = 'fileHashDoesNotMatch';
        public const NOT_DETECTED = 'fileHashHashNotDetected';
        public const NOT_FOUND = 'fileHashNotFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_hash;
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHash()
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function setHash($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         *
         * @throws Zend_Validate_Exception
         */
        public function addHash($options)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_ImageSize extends \Zend_Validate_Abstract
    {
        public const WIDTH_TOO_BIG = 'fileImageSizeWidthTooBig';
        public const WIDTH_TOO_SMALL = 'fileImageSizeWidthTooSmall';
        public const HEIGHT_TOO_BIG = 'fileImageSizeHeightTooBig';
        public const HEIGHT_TOO_SMALL = 'fileImageSizeHeightTooSmall';
        public const NOT_DETECTED = 'fileImageSizeNotDetected';
        public const NOT_READABLE = 'fileImageSizeNotReadable';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var int
         */
        public $_minwidth;
        /**
         * @var int
         */
        public $_maxwidth;
        /**
         * @var int
         */
        public $_minheight;
        /**
         * @var int
         */
        public $_maxheight;
        /**
         * @var int
         */
        public $_width;
        /**
         * @var int
         */
        public $_height;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImageMin()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImageMax()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImageWidth()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getImageHeight()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Validate_File_ImageSize
         *
         * @throws Zend_Validate_Exception
         */
        public function setImageMin($options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Validate_StringLength
         *
         * @throws Zend_Validate_Exception
         */
        public function setImageMax($options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Validate_File_ImageSize
         */
        public function setImageWidth($options)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Validate_File_ImageSize
         */
        public function setImageHeight($options)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_IsCompressed extends \Zend_Validate_File_MimeType
    {
        public const FALSE_TYPE = 'fileIsCompressedFalseType';
        public const NOT_DETECTED = 'fileIsCompressedNotDetected';
        public const NOT_READABLE = 'fileIsCompressedNotReadable';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $mimetype
         */
        public function __construct($mimetype = array())
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_IsImage extends \Zend_Validate_File_MimeType
    {
        public const FALSE_TYPE = 'fileIsImageFalseType';
        public const NOT_DETECTED = 'fileIsImageNotDetected';
        public const NOT_READABLE = 'fileIsImageNotReadable';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param Zend_Config|array<array-key, mixed>|string $mimetype
         */
        public function __construct($mimetype = array())
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_Md5 extends \Zend_Validate_File_Hash
    {
        public const DOES_NOT_MATCH = 'fileMd5DoesNotMatch';
        public const NOT_DETECTED = 'fileMd5NotDetected';
        public const NOT_FOUND = 'fileMd5NotFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_hash;
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Md5
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getMd5()
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function setHash($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function setMd5($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         *
         * @throws Zend_Validate_Exception
         */
        public function addHash($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function addMd5($options)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
    }
    class Zend_Validate_File_MimeType extends \Zend_Validate_Abstract
    {
        public const FALSE_TYPE = 'fileMimeTypeFalse';
        public const NOT_DETECTED = 'fileMimeTypeNotDetected';
        public const NOT_READABLE = 'fileMimeTypeNotReadable';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var null|string
         */
        public $_mimetype;
        /**
         * @var null|string
         */
        public $_magicfile;
        /**
         * @var resource
         */
        public $_finfo;
        /**
         * @var array<array-key, mixed>
         */
        public $_magicFiles;
        /**
         * @var bool
         */
        public $_tryCommonMagicFiles;
        /**
         * @var bool
         */
        public $_headerCheck;
        /**
         * @var array<array-key, mixed>
         */
        public $_finfoError;
        /**
         * @param array<array-key, mixed>|string $mimetype
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($mimetype)
        {
        }
        /**
         * @return string
         */
        public function getMagicFile()
        {
        }
        /**
         * @param string $file
         *
         * @return Zend_Validate_File_MimeType
         *
         * @throws Zend_Validate_Exception
         */
        public function setMagicFile($file)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_Validate_File_MimeType
         */
        public function setTryCommonMagicFilesFlag($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function shouldTryCommonMagicFiles()
        {
        }
        /**
         * @return bool
         */
        public function getHeaderCheck()
        {
        }
        /**
         * @param bool $headerCheck
         *
         * @return Zend_Validate_File_MimeType
         */
        public function enableHeaderCheck($headerCheck = true)
        {
        }
        /**
         * @param bool $asArray
         *
         * @return array<array-key, mixed>|string
         */
        public function getMimeType($asArray = false)
        {
        }
        /**
         * @param array<array-key, mixed>|string $mimetype
         *
         * @return Zend_Validate_File_Extension
         */
        public function setMimeType($mimetype)
        {
        }
        /**
         * @param array<array-key, mixed>|string $mimetype
         *
         * @return Zend_Validate_File_Extension
         *
         * @throws Zend_Validate_Exception
         */
        public function addMimeType($mimetype)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
        /**
         * @param string $file
         *
         * @return string
         */
        public function _detectMimeType($file)
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param string $errfile
         * @param int $errline
         */
        public function _errorHandler($errno, $errstr, $errfile, $errline)
        {
        }
    }
    class Zend_Validate_File_NotExists extends \Zend_Validate_File_Exists
    {
        public const DOES_NOT_EXIST = 'fileExistsDoesNotExist';
        public const DOES_EXIST = 'fileNotExistsDoesExist';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
    }
    class Zend_Validate_File_Sha1 extends \Zend_Validate_File_Hash
    {
        public const DOES_NOT_MATCH = 'fileSha1DoesNotMatch';
        public const NOT_DETECTED = 'fileSha1NotDetected';
        public const NOT_FOUND = 'fileSha1NotFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_hash;
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Sha1
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getSha1()
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function setHash($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function setSha1($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         *
         * @throws Zend_Validate_Exception
         */
        public function addHash($options)
        {
        }
        /**
         * @param array<array-key, mixed>|string $options
         *
         * @return Zend_Validate_File_Hash
         */
        public function addSha1($options)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
    }
    class Zend_Validate_File_Size extends \Zend_Validate_Abstract
    {
        public const TOO_BIG = 'fileSizeTooBig';
        public const TOO_SMALL = 'fileSizeTooSmall';
        public const NOT_FOUND = 'fileSizeNotFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var int
         */
        public $_min;
        /**
         * @var int|null
         */
        public $_max;
        /**
         * @var int
         */
        public $_size;
        /**
         * @var bool
         */
        public $_useByteString;
        /**
         * @param array<array-key, mixed>|int $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @param bool $byteString
         *
         * @return int
         */
        public function setUseByteString($byteString = true)
        {
        }
        /**
         * @return bool
         */
        public function useByteString()
        {
        }
        /**
         * @param bool $raw
         *
         * @return int|string
         */
        public function getMin($raw = false)
        {
        }
        /**
         * @param int $min
         *
         * @return Zend_Validate_File_Size
         *
         * @throws Zend_Validate_Exception
         */
        public function setMin($min)
        {
        }
        /**
         * @param bool $raw
         *
         * @return int|string
         */
        public function getMax($raw = false)
        {
        }
        /**
         * @param int $max
         *
         * @return Zend_Validate_StringLength
         *
         * @throws Zend_Validate_Exception
         */
        public function setMax($max)
        {
        }
        /**
         * @return int
         */
        public function _getSize()
        {
        }
        /**
         * @param int $size
         *
         * @return Zend_Validate_File_Size
         */
        public function _setSize($size)
        {
        }
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param int $size
         *
         * @return string
         */
        public function _toByteString($size)
        {
        }
        /**
         * @param string $size
         *
         * @return int
         */
        public function _fromByteString($size)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_Upload extends \Zend_Validate_Abstract
    {
        public const INI_SIZE = 'fileUploadErrorIniSize';
        public const FORM_SIZE = 'fileUploadErrorFormSize';
        public const PARTIAL = 'fileUploadErrorPartial';
        public const NO_FILE = 'fileUploadErrorNoFile';
        public const NO_TMP_DIR = 'fileUploadErrorNoTmpDir';
        public const CANT_WRITE = 'fileUploadErrorCantWrite';
        public const EXTENSION = 'fileUploadErrorExtension';
        public const ATTACK = 'fileUploadErrorAttack';
        public const FILE_NOT_FOUND = 'fileUploadErrorFileNotFound';
        public const UNKNOWN = 'fileUploadErrorUnknown';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_files;
        /**
         * @param Zend_Config|array<array-key, mixed> $files
         */
        public function __construct($files = array())
        {
        }
        /**
         * @param null|string $file
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Validate_Exception
         */
        public function getFiles($file = null)
        {
        }
        /**
         * @param array<array-key, mixed> $files
         *
         * @return Zend_Validate_File_Upload
         */
        public function setFiles($files = array())
        {
        }
        /**
         * @param string $value
         * @param null|string $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_File_WordCount extends \Zend_Validate_File_Count
    {
        public const TOO_MANY = 'fileCountTooMany';
        public const TOO_FEW = 'fileCountTooFew';
        public const TOO_MUCH = 'fileWordCountTooMuch';
        public const TOO_LESS = 'fileWordCountTooLess';
        public const NOT_FOUND = 'fileWordCountNotFound';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         * @param array<array-key, mixed>|null $file
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $file = null)
        {
        }
        /**
         * @param string $file
         * @param string $errorType
         *
         * @return false
         */
        public function _throw($file, $errorType)
        {
        }
    }
    class Zend_Validate_Float extends \Zend_Validate_Abstract
    {
        public const INVALID = 'floatInvalid';
        public const NOT_FLOAT = 'notFloat';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        public $_locale;
        /**
         * @param Zend_Config|Zend_Locale|null|string $locale
         */
        public function __construct($locale = null)
        {
        }
        public function getLocale()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return static
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_GreaterThan extends \Zend_Validate_Abstract
    {
        public const NOT_GREATER = 'notGreaterThan';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var mixed
         */
        public $_min;
        /**
         * @param Zend_Config|mixed $min
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($min)
        {
        }
        /**
         * @return mixed
         */
        public function getMin()
        {
        }
        /**
         * @param mixed $min
         *
         * @return Zend_Validate_GreaterThan
         */
        public function setMin($min)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Hex extends \Zend_Validate_Abstract
    {
        public const INVALID = 'hexInvalid';
        public const NOT_HEX = 'notHex';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Hostname extends \Zend_Validate_Abstract
    {
        public const CANNOT_DECODE_PUNYCODE = 'hostnameCannotDecodePunycode';
        public const INVALID = 'hostnameInvalid';
        public const INVALID_DASH = 'hostnameDashCharacter';
        public const INVALID_HOSTNAME = 'hostnameInvalidHostname';
        public const INVALID_HOSTNAME_SCHEMA = 'hostnameInvalidHostnameSchema';
        public const INVALID_LOCAL_NAME = 'hostnameInvalidLocalName';
        public const INVALID_URI = 'hostnameInvalidUri';
        public const IP_ADDRESS_NOT_ALLOWED = 'hostnameIpAddressNotAllowed';
        public const LOCAL_NAME_NOT_ALLOWED = 'hostnameLocalNameNotAllowed';
        public const UNDECIPHERABLE_TLD = 'hostnameUndecipherableTld';
        public const UNKNOWN_TLD = 'hostnameUnknownTld';
        public const ALLOW_DNS = 1;
        public const ALLOW_IP = 2;
        public const ALLOW_LOCAL = 4;
        public const ALLOW_URI = 8;
        public const ALLOW_ALL = 15;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var array<array-key, mixed>
         */
        public $_validTlds;
        /**
         * @var string
         */
        public $_tld;
        /**
         * @var array<array-key, mixed>
         */
        public $_validIdns;
        public $_idnLength = 'Psalm could not infer this type';
        public $_options = 'Psalm could not infer this type';
        /**
         * @param array<array-key, mixed> $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Validate_Hostname
         */
        public function setOptions($options)
        {
        }
        /**
         * @return Zend_Validate_Ip
         */
        public function getIpValidator()
        {
        }
        /**
         * @param Zend_Validate_Ip|null $ipValidator
         *
         * @return Zend_Validate_Hostname
         */
        public function setIpValidator(?\Zend_Validate_Ip $ipValidator = null)
        {
        }
        /**
         * @return int
         */
        public function getAllow()
        {
        }
        /**
         * @param int $allow
         *
         * @return Zend_Validate_Hostname
         */
        public function setAllow($allow)
        {
        }
        /**
         * @return bool
         */
        public function getValidateIdn()
        {
        }
        /**
         * @param bool $allowed
         *
         * @return static
         */
        public function setValidateIdn($allowed)
        {
        }
        /**
         * @return bool
         */
        public function getValidateTld()
        {
        }
        /**
         * @param bool $allowed
         *
         * @return static
         */
        public function setValidateTld($allowed)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
        /**
         * @param string $encoded
         *
         * @return string
         */
        public function decodePunycode($encoded)
        {
        }
    }
    class Zend_Validate_Iban extends \Zend_Validate_Abstract
    {
        public const NOTSUPPORTED = 'ibanNotSupported';
        public const FALSEFORMAT = 'ibanFalseFormat';
        public const CHECKFAILED = 'ibanCheckFailed';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var Zend_Locale|null|string
         */
        public $_locale;
        /**
         * @var array<array-key, mixed>
         */
        public $_ibanregex;
        /**
         * @param Zend_Config|Zend_Locale|null|string $locale
         */
        public function __construct($locale = null)
        {
        }
        /**
         * @return Zend_Locale|null|string
         */
        public function getLocale()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Validate_Date
         *
         * @throws Zend_Locale_Exception
         * @throws Zend_Validate_Exception
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Identical extends \Zend_Validate_Abstract
    {
        public const NOT_SAME = 'notSame';
        public const MISSING_TOKEN = 'missingToken';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var string
         */
        public $_tokenString;
        public $_token;
        public $_strict = true;
        /**
         * @param mixed|null $token
         */
        public function __construct($token = null)
        {
        }
        /**
         * @return string
         */
        public function getToken()
        {
        }
        /**
         * @param mixed $token
         *
         * @return Zend_Validate_Identical
         */
        public function setToken($token)
        {
        }
        /**
         * @return bool
         */
        public function getStrict()
        {
        }
        public function setStrict($strict)
        {
        }
        /**
         * @param mixed $value
         * @param array<array-key, mixed>|null $context
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value, $context = null)
        {
        }
    }
    class Zend_Validate_InArray extends \Zend_Validate_Abstract
    {
        public const NOT_IN_ARRAY = 'notInArray';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_haystack;
        /**
         * @var bool
         */
        public $_strict;
        /**
         * @var bool
         */
        public $_recursive;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options)
        {
        }
        /**
         * @return mixed
         */
        public function getHaystack()
        {
        }
        /**
         * @param mixed $haystack
         *
         * @return Zend_Validate_InArray
         */
        public function setHaystack(array $haystack)
        {
        }
        /**
         * @return bool
         */
        public function getStrict()
        {
        }
        /**
         * @param bool $strict
         *
         * @return Zend_Validate_InArray
         */
        public function setStrict($strict)
        {
        }
        /**
         * @return bool
         */
        public function getRecursive()
        {
        }
        /**
         * @param bool $recursive
         *
         * @return Zend_Validate_InArray
         */
        public function setRecursive($recursive)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Int extends \Zend_Validate_Abstract
    {
        public const INVALID = 'intInvalid';
        public const NOT_INT = 'notInt';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        public $_locale;
        /**
         * @param Zend_Config|Zend_Locale|null|string $locale
         */
        public function __construct($locale = null)
        {
        }
        public function getLocale()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return static
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @param int|string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    interface Zend_Validate_Interface
    {
        /**
         * @param mixed $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value);
        /**
         * @return array<array-key, mixed>
         */
        public function getMessages();
    }
    class Zend_Validate_Ip extends \Zend_Validate_Abstract
    {
        public const INVALID = 'ipInvalid';
        public const NOT_IP_ADDRESS = 'notIpAddress';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param array<array-key, mixed> $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_Validate_Ip
         *
         * @throws Zend_Validate_Exception
         */
        public function setOptions($options)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _validateIPv4($value)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public function _validateIPv6($value)
        {
        }
    }
    class Zend_Validate_Isbn extends \Zend_Validate_Abstract
    {
        public const AUTO = 'auto';
        public const ISBN10 = '10';
        public const ISBN13 = '13';
        public const INVALID = 'isbnInvalid';
        public const NO_ISBN = 'isbnNoIsbn';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_separator;
        /**
         * @param Zend_Config|array<array-key, mixed> $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return string
         */
        public function _detectFormat()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
        /**
         * @param string $separator
         *
         * @return Zend_Validate_Isbn
         *
         * @throws Zend_Validate_Exception
         */
        public function setSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getSeparator()
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Validate_Isbn
         *
         * @throws Zend_Validate_Exception
         */
        public function setType($type)
        {
        }
        /**
         * @return string
         */
        public function getType()
        {
        }
    }
    class Zend_Validate_Ldap_Dn extends \Zend_Validate_Abstract
    {
        public const MALFORMED = 'malformed';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_LessThan extends \Zend_Validate_Abstract
    {
        public const NOT_LESS = 'notLessThan';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var mixed
         */
        public $_max;
        /**
         * @param Zend_Config|mixed $max
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($max)
        {
        }
        /**
         * @return mixed
         */
        public function getMax()
        {
        }
        /**
         * @param mixed $max
         *
         * @return Zend_Validate_LessThan
         */
        public function setMax($max)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_NotEmpty extends \Zend_Validate_Abstract
    {
        public const BOOLEAN = 1;
        public const INTEGER = 2;
        public const FLOAT = 4;
        public const STRING = 8;
        public const ZERO = 16;
        public const EMPTY_ARRAY = 32;
        public const NULL = 64;
        public const PHP = 127;
        public const SPACE = 128;
        public const OBJECT = 256;
        public const OBJECT_STRING = 512;
        public const OBJECT_COUNT = 1024;
        public const ALL = 2047;
        public const INVALID = 'notEmptyInvalid';
        public const IS_EMPTY = 'isEmpty';
        public $_constants = 'Psalm could not infer this type';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var int
         */
        public $_type;
        /**
         * @param Zend_Config|array<array-key, mixed>|null|string $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getType()
        {
        }
        /**
         * @param array<array-key, mixed>|int|null $type
         *
         * @return Zend_Validate_NotEmpty
         *
         * @throws Zend_Validate_Exception
         */
        public function setType($type = null)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_PostCode extends \Zend_Validate_Abstract
    {
        public const INVALID = 'postcodeInvalid';
        public const NO_MATCH = 'postcodeNoMatch';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var string
         */
        public $_locale;
        /**
         * @var unknown_type
         */
        public $_format;
        /**
         * @param Zend_Config|Zend_Locale|array<array-key, mixed>|null|string $options
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($options = null)
        {
        }
        /**
         * @return Zend_Locale|string
         */
        public function getLocale()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_Validate_PostCode
         *
         * @throws Zend_Validate_Exception
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @return string
         */
        public function getFormat()
        {
        }
        /**
         * @param string $format
         *
         * @return Zend_Validate_PostCode
         *
         * @throws Zend_Validate_Exception
         */
        public function setFormat($format)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Regex extends \Zend_Validate_Abstract
    {
        public const INVALID = 'regexInvalid';
        public const NOT_MATCH = 'regexNotMatch';
        public const ERROROUS = 'regexErrorous';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var string
         */
        public $_pattern;
        /**
         * @param Zend_Config|string|string[] $pattern
         *
         * @throws Zend_Validate_Exception
         */
        public function __construct($pattern)
        {
        }
        /**
         * @return string
         */
        public function getPattern()
        {
        }
        /**
         * @param string $pattern
         *
         * @return Zend_Validate_Regex
         *
         * @throws Zend_Validate_Exception
         */
        public function setPattern($pattern)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Sitemap_Changefreq extends \Zend_Validate_Abstract
    {
        public const NOT_VALID = 'sitemapChangefreqNotValid';
        public const INVALID = 'sitemapChangefreqInvalid';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_changeFreqs;
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Sitemap_Lastmod extends \Zend_Validate_Abstract
    {
        public const LASTMOD_REGEX = '/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T([0-1][0-9]|2[0-3])(:[0-5][0-9])(:[0-5][0-9])?(\\+|-)([0-1][0-9]|2[0-3]):[0-5][0-9])?$/';
        public const NOT_VALID = 'sitemapLastmodNotValid';
        public const INVALID = 'sitemapLastmodInvalid';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Sitemap_Loc extends \Zend_Validate_Abstract
    {
        public const NOT_VALID = 'sitemapLocNotValid';
        public const INVALID = 'sitemapLocInvalid';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_Sitemap_Priority extends \Zend_Validate_Abstract
    {
        public const NOT_VALID = 'sitemapPriorityNotValid';
        public const INVALID = 'sitemapPriorityInvalid';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Validate_StringLength extends \Zend_Validate_Abstract
    {
        public const INVALID = 'stringLengthInvalid';
        public const TOO_SHORT = 'stringLengthTooShort';
        public const TOO_LONG = 'stringLengthTooLong';
        /**
         * @var array<array-key, mixed>
         */
        public $_messageTemplates;
        /**
         * @var array<array-key, mixed>
         */
        public $_messageVariables;
        /**
         * @var int
         */
        public $_min;
        /**
         * @var int|null
         */
        public $_max;
        /**
         * @var null|string
         */
        public $_encoding;
        /**
         * @param Zend_Config|array<array-key, mixed>|int $options
         */
        public function __construct($options = array())
        {
        }
        /**
         * @return int
         */
        public function getMin()
        {
        }
        /**
         * @param int $min
         *
         * @return Zend_Validate_StringLength
         *
         * @throws Zend_Validate_Exception
         */
        public function setMin($min)
        {
        }
        /**
         * @return int|null
         */
        public function getMax()
        {
        }
        /**
         * @param int|null $max
         *
         * @return Zend_Validate_StringLength
         *
         * @throws Zend_Validate_Exception
         */
        public function setMax($max)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param null|string $encoding
         *
         * @return Zend_Validate_StringLength
         *
         * @throws Zend_Validate_Exception
         */
        public function setEncoding($encoding = null)
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         *
         * @throws Zend_Validate_Exception
         */
        public function isValid($value)
        {
        }
    }
    class Zend_Version
    {
        public const VERSION = '1.12.20';
        /**
         * @var string
         */
        public static $_latestVersion;
        /**
         * @param string $version
         *
         * @return int
         */
        public static function compareVersion($version)
        {
        }
        /**
         * @return string
         */
        public static function getLatest()
        {
        }
    }
    class Zend_View extends \Zend_View_Abstract
    {
        /**
         * @var bool
         */
        public $_useViewStream;
        /**
         * @var bool
         */
        public $_useStreamWrapper;
        /**
         * @param array<array-key, mixed> $config
         *
         * @return void
         */
        public function __construct($config = array())
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View
         */
        public function setUseStreamWrapper($flag)
        {
        }
        /**
         * @return bool
         */
        public function useStreamWrapper()
        {
        }
        public function _run()
        {
        }
    }
    class Zend_View_Abstract implements \Zend_View_Interface
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_path;
        /**
         * @var string
         */
        public $_file;
        /**
         * @var array<array-key, mixed>
         */
        public $_helper;
        /**
         * @var array<array-key, mixed>
         */
        public $_helperLoaded;
        /**
         * @var array<array-key, mixed>
         */
        public $_helperLoadedDir;
        /**
         * @var array<array-key, mixed>
         */
        public $_filter;
        /**
         * @var array<array-key, mixed>
         */
        public $_filterClass;
        /**
         * @var array<array-key, mixed>
         */
        public $_filterLoaded;
        /**
         * @var array<array-key, mixed>
         */
        public $_filterLoadedDir;
        /**
         * @var string
         */
        public $_escape;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var bool
         */
        public $_lfiProtectionOn;
        /**
         * @var array<array-key, mixed>
         */
        public $_loaders;
        /**
         * @var array<array-key, mixed>
         */
        public $_loaderTypes;
        /**
         * @var bool
         */
        public $_strictVars;
        /**
         * @param array<array-key, mixed> $config
         */
        public function __construct($config = array())
        {
        }
        /**
         * @return Zend_View_Abstract
         */
        public function getEngine()
        {
        }
        /**
         * @return void
         */
        public function init()
        {
        }
        /**
         * @param string $key
         *
         * @return null
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $val
         *
         * @return void
         *
         * @throws Zend_View_Exception
         * @psalm-taint-sink html $val
         */
        public function __set($key, $val)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function __unset($key)
        {
        }
        /**
         * @param string $name
         * @param array<array-key, mixed> $args
         *
         * @return string
         * @psalm-taint-sink callable $name
         */
        public function __call($name, $args)
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $path
         */
        public function setBasePath($path, $classPrefix = 'Zend_View')
        {
        }
        /**
         * @param string $path
         *
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $path
         */
        public function addBasePath($path, $classPrefix = 'Zend_View')
        {
        }
        /**
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $path
         */
        public function addScriptPath($path)
        {
        }
        /**
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $path
         */
        public function setScriptPath($path)
        {
        }
        /**
         * @param string $name
         *
         * @return false|string
         *
         * @throws Zend_View_Exception
         */
        public function getScriptPath($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getScriptPaths()
        {
        }
        /**
         * @param Zend_Loader_PluginLoader $loader
         * @param string $type
         *
         * @return Zend_View_Abstract
         */
        public function setPluginLoader(\Zend_Loader_PluginLoader $loader, $type)
        {
        }
        /**
         * @param string $type
         *
         * @return Zend_Loader_PluginLoader
         */
        public function getPluginLoader($type)
        {
        }
        /**
         * @param string $classPrefix
         *
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $path
         */
        public function addHelperPath($path, $classPrefix = 'Zend_View_Helper_')
        {
        }
        /**
         * @param array<array-key, mixed>|string $path
         * @param string $classPrefix
         *
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $path
         */
        public function setHelperPath($path, $classPrefix = 'Zend_View_Helper_')
        {
        }
        /**
         * @param string $name
         *
         * @return false|string
         */
        public function getHelperPath($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHelperPaths()
        {
        }
        /**
         * @param object $helper
         * @param string $name
         *
         * @return Zend_View_Abstract
         *
         * @throws Zend_View_Exception
         */
        public function registerHelper($helper, $name)
        {
        }
        /**
         * @param string $name
         *
         * @return object
         */
        public function getHelper($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHelpers()
        {
        }
        /**
         * @param string $classPrefix
         *
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $path
         */
        public function addFilterPath($path, $classPrefix = 'Zend_View_Filter_')
        {
        }
        /**
         * @param string $classPrefix
         *
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $path
         */
        public function setFilterPath($path, $classPrefix = 'Zend_View_Filter_')
        {
        }
        /**
         * @param string $name
         *
         * @return false|string
         */
        public function getFilterPath($name)
        {
        }
        /**
         * @param string $name
         *
         * @return object
         */
        public function getFilter($name)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFilters()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFilterPaths()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAllPaths()
        {
        }
        /**
         * @return Zend_View_Abstract
         */
        public function addFilter($name)
        {
        }
        /**
         * @return Zend_View_Abstract
         */
        public function setFilter($name)
        {
        }
        /**
         * @param mixed $spec
         *
         * @return Zend_View_Abstract
         */
        public function setEscape($spec)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Abstract
         */
        public function setLfiProtection($flag)
        {
        }
        /**
         * @return bool
         */
        public function isLfiProtectionOn()
        {
        }
        /**
         * @return Zend_View_Abstract
         *
         * @throws Zend_View_Exception
         * @psalm-taint-sink html $value
         */
        public function assign($spec, $value = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getVars()
        {
        }
        /**
         * @return void
         */
        public function clearVars()
        {
        }
        /**
         * @param string $name
         *
         * @return string
         * @psalm-taint-sink include $name
         */
        public function render($name)
        {
        }
        /**
         * @param mixed $var
         *
         * @return mixed
         * @psalm-taint-escape html
         */
        public function escape($var)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_View_Abstract
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Abstract
         */
        public function strictVars($flag = true)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         * @psalm-taint-sink include $name
         */
        public function _script($name)
        {
        }
        /**
         * @param string $buffer
         *
         * @return string
         * @psalm-taint-sink include $buffer
         */
        public function _filter($buffer)
        {
        }
        /**
         * @param string $type
         * @param array<array-key, mixed>|string $path
         * @param null|string $prefix
         *
         * @return void
         * @psalm-taint-sink include $path
         */
        public function _addPath($type, $path, $prefix = null)
        {
        }
        /**
         * @param string $type
         * @param array<array-key, mixed>|string $path
         * @param null|string $classPrefix
         * @psalm-taint-sink include $path
         */
        public function _setPath($type, $path, $classPrefix = null)
        {
        }
        /**
         * @param string $type
         *
         * @return array<array-key, mixed>
         */
        public function _getPaths($type)
        {
        }
        /**
         * @param string $name
         * @param string $class
         * @param string $file
         *
         * @return void
         * @psalm-taint-sink include $file
         */
        public function _setHelperClass($name, $class, $file)
        {
        }
        /**
         * @param string $name
         * @param string $class
         * @param string $file
         *
         * @return void
         * @psalm-taint-sink include $file
         */
        public function _setFilterClass($name, $class, $file)
        {
        }
        /**
         * @param string $type
         * @param string $classPrefix
         * @param array<array-key, mixed> $paths
         *
         * @return Zend_View_Abstract
         * @psalm-taint-sink include $paths
         */
        public function _addPluginPath($type, $classPrefix, array $paths)
        {
        }
        /**
         * @param string $type
         * @param string $name
         *
         * @return false|string
         */
        public function _getPluginPath($type, $name)
        {
        }
        /**
         * @param string $type
         * @param string $name
         *
         * @return object
         */
        public function _getPlugin($type, $name)
        {
        }
        /**
         * @return mixed
         */
        public abstract function _run();
    }
    class Zend_View_Exception extends \Zend_Exception
    {
        public $view = null;
        public function setView(?\Zend_View_Interface $view = null)
        {
        }
        public function getView()
        {
        }
    }
    class Zend_View_Helper_Abstract implements \Zend_View_Helper_Interface
    {
        /**
         * @var Zend_View_Interface
         */
        public $view;
        /**
         * @param Zend_View_Interface $view
         *
         * @return Zend_View_Helper_Abstract
         */
        public function setView(\Zend_View_Interface $view)
        {
        }
        /**
         * @return void
         */
        public function direct()
        {
        }
    }
    class Zend_View_Helper_Action extends \Zend_View_Helper_Abstract
    {
        /**
         * @var string
         */
        public $defaultModule;
        /**
         * @var Zend_Controller_Dispatcher_Interface
         */
        public $dispatcher;
        /**
         * @var Zend_Controller_Request_Abstract
         */
        public $request;
        /**
         * @var Zend_Controller_Response_Abstract
         */
        public $response;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return void
         */
        public function resetObjects()
        {
        }
        /**
         * @param string $action
         * @param string $controller
         * @param null|string $module
         * @param array<array-key, mixed> $params
         *
         * @return string
         */
        public function action($action, $controller, $module = null, array $params = array())
        {
        }
        /**
         * @return Zend_View_Interface
         */
        public function cloneView()
        {
        }
    }
    class Zend_View_Helper_BaseUrl extends \Zend_View_Helper_Abstract
    {
        /**
         * @var string
         */
        public $_baseUrl;
        /**
         * @param null|string $file
         *
         * @return string
         * @paslm-taint-sink file $file
         */
        public function baseUrl($file = null)
        {
        }
        /**
         * @param string $base
         *
         * @return Zend_View_Helper_BaseUrl
         * @paslm-taint-sink file $file
         */
        public function setBaseUrl($base)
        {
        }
        /**
         * @return string
         */
        public function getBaseUrl()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function _removeScriptName($url)
        {
        }
    }
    class Zend_View_Helper_Currency extends \Zend_View_Helper_Abstract
    {
        /**
         * @var Zend_Currency
         */
        public $_currency;
        /**
         * @param Zend_Currency|null $currency
         *
         * @return void
         */
        public function __construct($currency = null)
        {
        }
        /**
         * @param float|int|null $value
         * @param Zend_Locale|array<array-key, mixed>|null|string $currency
         *
         * @return string
         */
        public function currency($value = null, $currency = null)
        {
        }
        /**
         * @param Zend_Currency|Zend_Locale|null|string $currency
         *
         * @return Zend_View_Helper_Currency
         *
         * @throws Zend_View_Exception
         */
        public function setCurrency($currency = null)
        {
        }
        /**
         * @return Zend_Currency|null
         */
        public function getCurrency()
        {
        }
    }
    class Zend_View_Helper_Cycle implements \Iterator
    {
        public const DEFAULT_NAME = 'default';
        /**
         * @var array<array-key, mixed>
         */
        public $_pointers;
        /**
         * @var array<array-key, mixed>
         */
        public $_data;
        /**
         * @var string
         */
        public $_name;
        /**
         * @param array<array-key, mixed> $data
         * @param string $name
         *
         * @return Zend_View_Helper_Cycle
         */
        public function cycle(array $data = array(), $name)
        {
        }
        /**
         * @param array<array-key, mixed> $data
         * @param string $name
         *
         * @return Zend_View_Helper_Cycle
         */
        public function assign(array $data, $name)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_View_Helper_Cycle
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAll()
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return Zend_View_Helper_Cycle
         */
        public function next()
        {
        }
        /**
         * @return Zend_View_Helper_Cycle
         */
        public function prev()
        {
        }
        /**
         * @return int
         */
        public function key()
        {
        }
        /**
         * @return Zend_View_Helper_Cycle
         */
        public function rewind()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
    }
    class Zend_View_Helper_DeclareVars extends \Zend_View_Helper_Abstract
    {
        /**
         * @var Zend_View
         */
        public $view;
        /**
         * @return void
         */
        public function declareVars()
        {
        }
        /**
         * @param string $key
         * @param string $value
         *
         * @return void
         */
        public function _declareVar($key, $value = '')
        {
        }
    }
    class Zend_View_Helper_Doctype extends \Zend_View_Helper_Abstract
    {
        public const XHTML11 = 'XHTML11';
        public const XHTML1_STRICT = 'XHTML1_STRICT';
        public const XHTML1_TRANSITIONAL = 'XHTML1_TRANSITIONAL';
        public const XHTML1_FRAMESET = 'XHTML1_FRAMESET';
        public const XHTML1_RDFA = 'XHTML1_RDFA';
        public const XHTML1_RDFA11 = 'XHTML1_RDFA11';
        public const XHTML_BASIC1 = 'XHTML_BASIC1';
        public const XHTML5 = 'XHTML5';
        public const HTML4_STRICT = 'HTML4_STRICT';
        public const HTML4_LOOSE = 'HTML4_LOOSE';
        public const HTML4_FRAMESET = 'HTML4_FRAMESET';
        public const HTML5 = 'HTML5';
        public const CUSTOM_XHTML = 'CUSTOM_XHTML';
        public const CUSTOM = 'CUSTOM';
        /**
         * @var string
         */
        public $_defaultDoctype;
        /**
         * @var ArrayObject
         */
        public $_registry;
        /**
         * @var string
         */
        public $_regKey;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param null|string $doctype
         *
         * @return Zend_View_Helper_Doctype
         */
        public function doctype($doctype = null)
        {
        }
        /**
         * @param string $doctype
         *
         * @return Zend_View_Helper_Doctype
         */
        public function setDoctype($doctype)
        {
        }
        /**
         * @return string
         */
        public function getDoctype()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDoctypes()
        {
        }
        /**
         * @return bool
         */
        public function isXhtml()
        {
        }
        /**
         * @return bool
         */
        public function isStrict()
        {
        }
        /**
         * @return booleean
         */
        public function isHtml5()
        {
        }
        /**
         * @return booleean
         */
        public function isRdfa()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_View_Helper_Fieldset extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param string $name
         * @param string $content
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function fieldset($name, $content, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_Form extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param string $name
         * @param array<array-key, mixed>|null $attribs
         * @param false|string $content
         *
         * @return string
         */
        public function form($name, $attribs = null, $content = false)
        {
        }
    }
    class Zend_View_Helper_FormButton extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formButton($name, $value = null, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormCheckbox extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @var array<array-key, mixed>
         */
        public static $_defaultCheckedOptions;
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formCheckbox($name, $value = null, $attribs = null, ?array $checkedOptions = null)
        {
        }
        /**
         * @param string $value
         * @param bool $checked
         * @param array<array-key, mixed>|null $checkedOptions
         *
         * @return array<array-key, mixed>
         */
        public static function determineCheckboxInfo($value, $checked, ?array $checkedOptions = null)
        {
        }
    }
    class Zend_View_Helper_FormElement extends \Zend_View_Helper_HtmlElement
    {
        public const EOL = '
';
        /**
         * @var Zend_Translate_Adapter|null
         */
        public $_translator;
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translator
         *
         * @return Zend_View_Helper_FormElement
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getInfo($name, $value = null, $attribs = null, $options = null, $listsep = null)
        {
        }
        /**
         * @param string $name
         * @param null|string $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function _hidden($name, $value = null, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormErrors extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @var Zend_Form_Element
         */
        public $_element;
        public $_htmlElementEnd = '</li></ul>';
        public $_htmlElementStart = '<ul%s><li>';
        public $_htmlElementSeparator = '</li><li>';
        /**
         * @param array<array-key, mixed>|string $errors
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function formErrors($errors, ?array $options = null)
        {
        }
        /**
         * @param string $string
         *
         * @return Zend_View_Helper_FormErrors
         */
        public function setElementEnd($string)
        {
        }
        /**
         * @return string
         */
        public function getElementEnd()
        {
        }
        /**
         * @param string $string
         *
         * @return Zend_View_Helper_FormErrors
         */
        public function setElementSeparator($string)
        {
        }
        /**
         * @return string
         */
        public function getElementSeparator()
        {
        }
        /**
         * @param string $string
         *
         * @return Zend_View_Helper_FormErrors
         */
        public function setElementStart($string)
        {
        }
        /**
         * @return string
         */
        public function getElementStart()
        {
        }
    }
    class Zend_View_Helper_FormFile extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formFile($name, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormHidden extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formHidden($name, $value = null, ?array $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormImage extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formImage($name, $value = null, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormLabel extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param string $name
         * @param null|string $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formLabel($name, $value = null, ?array $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormMultiCheckbox extends \Zend_View_Helper_FormRadio
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_inputType;
        /**
         * @var bool
         */
        public $_isArray;
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null|string $attribs
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function formMultiCheckbox($name, $value = null, $attribs = null, $options = null, $listsep = '<br />
')
        {
        }
    }
    class Zend_View_Helper_FormNote extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param array<array-key, mixed>|null $value
         *
         * @return string
         */
        public function formNote($name, $value = null)
        {
        }
    }
    class Zend_View_Helper_FormPassword extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formPassword($name, $value = null, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormRadio extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_inputType;
        /**
         * @var bool
         */
        public $_isArray;
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null|string $attribs
         * @param array<array-key, mixed>|null $options
         *
         * @return string
         */
        public function formRadio($name, $value = null, $attribs = null, $options = null, $listsep = '<br />
')
        {
        }
    }
    class Zend_View_Helper_FormReset extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formReset($name = '', $value = 'Reset', $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormSelect extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null|string $attribs
         * @param array<array-key, mixed>|null $options
         * @param string $listsep
         *
         * @return string
         */
        public function formSelect($name, $value = null, $attribs = null, $options = null, $listsep = '<br />
')
        {
        }
        /**
         * @param string $value
         * @param string $label
         * @param array<array-key, mixed> $selected
         * @param array<array-key, mixed>|bool $disable
         * @param array<array-key, mixed> $optionClasses
         *
         * @return string
         */
        public function _build($value, $label, $selected, $disable, $optionClasses = array())
        {
        }
    }
    class Zend_View_Helper_FormSubmit extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formSubmit($name, $value = null, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormText extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formText($name, $value = null, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_FormTextarea extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @var int
         */
        public $rows;
        /**
         * @var int
         */
        public $cols;
        /**
         * @param array<array-key, mixed>|string $name
         * @param mixed|null $value
         * @param array<array-key, mixed>|null $attribs
         *
         * @return string
         */
        public function formTextarea($name, $value = null, $attribs = null)
        {
        }
    }
    class Zend_View_Helper_Gravatar extends \Zend_View_Helper_HtmlElement
    {
        public const EOL = '
';
        public const GRAVATAR_URL = 'http://www.gravatar.com/avatar';
        public const GRAVATAR_URL_SECURE = 'https://secure.gravatar.com/avatar';
        public const RATING_G = 'g';
        public const RATING_PG = 'pg';
        public const RATING_R = 'r';
        public const RATING_X = 'x';
        public const DEFAULT_404 = '404';
        public const DEFAULT_MM = 'mm';
        public const DEFAULT_IDENTICON = 'identicon';
        public const DEFAULT_MONSTERID = 'monsterid';
        public const DEFAULT_WAVATAR = 'wavatar';
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var string
         */
        public $_email;
        /**
         * @var array<array-key, mixed>
         */
        public $_attribs;
        /**
         * @param null|string $email
         * @param array<array-key, mixed>|null $options
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_View_Helper_Gravatar
         */
        public function gravatar($email = '', $options = array(), $attribs = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return Zend_View_Helper_Gravatar
         */
        public function setOptions(array $options)
        {
        }
        /**
         * @return int
         */
        public function getImgSize()
        {
        }
        /**
         * @param int $imgSize
         *
         * @return Zend_View_Helper_Gravatar
         */
        public function setImgSize($imgSize)
        {
        }
        /**
         * @return string
         */
        public function getDefaultImg()
        {
        }
        /**
         * @param string $defaultImg
         *
         * @return Zend_View_Helper_Gravatar
         */
        public function setDefaultImg($defaultImg)
        {
        }
        /**
         * @param string $rating
         *
         * @throws Zend_View_Exception
         */
        public function setRating($rating)
        {
        }
        /**
         * @return string
         */
        public function getRating()
        {
        }
        /**
         * @param string $email
         *
         * @return Zend_View_Helper_Gravatar
         */
        public function setEmail($email)
        {
        }
        /**
         * @return string
         */
        public function getEmail()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Helper_Gravatar
         */
        public function setSecure($flag)
        {
        }
        /**
         * @return bool
         */
        public function getSecure()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getAttribs()
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return Zend_View_Helper_Gravatar
         */
        public function setAttribs(array $attribs)
        {
        }
        /**
         * @return string
         */
        public function _getGravatarUrl()
        {
        }
        /**
         * @return string
         */
        public function _getAvatarUrl()
        {
        }
        public function _setSrcAttribForImg()
        {
        }
        /**
         * @return string
         */
        public function getImgTag()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_View_Helper_HeadLink extends \Zend_View_Helper_Placeholder_Container_Standalone
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_itemKeys;
        /**
         * @var string
         */
        public $_regKey;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return Zend_View_Helper_HeadLink
         */
        public function headLink(?array $attributes = null, $placement)
        {
        }
        /**
         * @param mixed $method
         * @param mixed $args
         *
         * @return void
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function _isValid($value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return void
         */
        public function append($value)
        {
        }
        /**
         * @param int|string $index
         * @param array<array-key, mixed> $value
         *
         * @return void
         */
        public function offsetSet($index, $value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Layout_ViewHelper_HeadLink
         */
        public function prepend($value)
        {
        }
        /**
         * @param array<array-key, mixed> $value
         *
         * @return Zend_Layout_ViewHelper_HeadLink
         */
        public function set($value)
        {
        }
        /**
         * @param stdClass $item
         *
         * @return string
         */
        public function itemToString(\stdClass $item)
        {
        }
        /**
         * @param int|null|string $indent
         *
         * @return string
         */
        public function toString($indent = null)
        {
        }
        /**
         * @param array<array-key, mixed> $attributes
         *
         * @return stdClass
         */
        public function createData(array $attributes)
        {
        }
        /**
         * @param array<array-key, mixed> $args
         *
         * @return false|stdClass
         */
        public function createDataStylesheet(array $args)
        {
        }
        /**
         * @param string $uri
         *
         * @return bool
         */
        public function _isDuplicateStylesheet($uri)
        {
        }
        /**
         * @param array<array-key, mixed> $args
         *
         * @return stdClass
         */
        public function createDataAlternate(array $args)
        {
        }
        /**
         * @param array<array-key, mixed> $attributes
         *
         * @return array<array-key, mixed>
         */
        public function _applyExtras($attributes)
        {
        }
    }
    class Zend_View_Helper_HeadMeta extends \Zend_View_Helper_Placeholder_Container_Standalone
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_typeKeys;
        public $_requiredKeys = 'Psalm could not infer this type';
        public $_modifierKeys = 'Psalm could not infer this type';
        /**
         * @var string
         */
        public $_regKey;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param null|string $content
         * @param null|string $keyValue
         * @param string $keyType
         * @param array<array-key, mixed> $modifiers
         * @param string $placement
         *
         * @return Zend_View_Helper_HeadMeta
         */
        public function headMeta($content = null, $keyValue = null, $keyType = 'name', $modifiers = array(), $placement)
        {
        }
        public function _normalizeType($type)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return Zend_View_Helper_HeadMeta
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $charset
         *
         * @return Zend_View_Helper_HeadMeta
         */
        public function setCharset($charset)
        {
        }
        /**
         * @param mixed $item
         *
         * @return bool
         */
        public function _isValid($item)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         *
         * @throws Zend_View_Exception
         */
        public function append($value)
        {
        }
        /**
         * @param int|string $index
         * @param string $value
         *
         * @return void
         *
         * @throws Zend_View_Exception
         */
        public function offsetSet($index, $value)
        {
        }
        /**
         * @param int|string $index
         *
         * @return void
         *
         * @throws Zend_View_Exception
         */
        public function offsetUnset($index)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         *
         * @throws Zend_View_Exception
         */
        public function prepend($value)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         *
         * @throws Zend_View_Exception
         */
        public function set($value)
        {
        }
        /**
         * @return string
         */
        public function itemToString(\stdClass $item)
        {
        }
        /**
         * @param int|null|string $indent
         *
         * @return string
         */
        public function toString($indent = null)
        {
        }
        /**
         * @param string $type
         * @param string $typeValue
         * @param string $content
         * @param array<array-key, mixed> $modifiers
         *
         * @return stdClass
         */
        public function createData($type, $typeValue, $content, array $modifiers)
        {
        }
    }
    class Zend_View_Helper_HeadScript extends \Zend_View_Helper_Placeholder_Container_Standalone
    {
        public const FILE = 'FILE';
        public const SCRIPT = 'SCRIPT';
        /**
         * @var string
         */
        public $_regKey;
        /**
         * @var bool
         */
        public $_arbitraryAttributes;
        public $_captureLock;
        public $_captureScriptType = null;
        public $_captureScriptAttrs = null;
        public $_captureType;
        /**
         * @var array<array-key, mixed>
         */
        public $_optionalAttributes;
        /**
         * @var string
         */
        public $_requiredAttributes;
        /**
         * @var bool
         */
        public $useCdata;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param string $mode
         * @param null|string $spec
         * @param string $placement
         * @param array<array-key, mixed> $attrs
         * @param string $type
         *
         * @return Zend_View_Helper_HeadScript
         */
        public function headScript($mode, $spec = null, $placement = 'APPEND', array $attrs = array(), $type = 'text/javascript')
        {
        }
        /**
         * @param mixed $captureType
         *
         * @return void
         */
        public function captureStart($captureType, $type = 'text/javascript', $attrs = array())
        {
        }
        /**
         * @return void
         */
        public function captureEnd()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return Zend_View_Helper_HeadScript
         *
         * @throws Zend_View_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param string $file
         *
         * @return bool
         */
        public function _isDuplicate($file)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function _isValid($value)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         */
        public function append($value)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         */
        public function prepend($value)
        {
        }
        /**
         * @param string $value
         *
         * @return void
         */
        public function set($value)
        {
        }
        /**
         * @param int|string $index
         * @param mixed $value
         *
         * @return void
         */
        public function offsetSet($index, $value)
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Helper_HeadScript
         */
        public function setAllowArbitraryAttributes($flag)
        {
        }
        /**
         * @return bool
         */
        public function arbitraryAttributesAllowed()
        {
        }
        /**
         * @param int|string $indent
         *
         * @return string
         */
        public function itemToString($item, $indent, $escapeStart, $escapeEnd)
        {
        }
        /**
         * @param int|null|string $indent
         *
         * @return string
         */
        public function toString($indent = null)
        {
        }
        /**
         * @param string $type
         * @param array<array-key, mixed> $attributes
         * @param null|string $content
         *
         * @return stdClass
         */
        public function createData($type, array $attributes, $content = null)
        {
        }
    }
    class Zend_View_Helper_HeadStyle extends \Zend_View_Helper_Placeholder_Container_Standalone
    {
        /**
         * @var string
         */
        public $_regKey;
        /**
         * @var array<array-key, mixed>
         */
        public $_optionalAttributes;
        /**
         * @var array<array-key, mixed>
         */
        public $_mediaTypes;
        /**
         * @var string
         */
        public $_captureAttrs;
        /**
         * @var bool
         */
        public $_captureLock;
        /**
         * @var string
         */
        public $_captureType;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param null|string $content
         * @param string $placement
         * @param array<array-key, mixed>|string $attributes
         *
         * @return Zend_View_Helper_HeadStyle
         */
        public function headStyle($content = null, $placement = 'APPEND', $attributes = array())
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return void
         *
         * @throws Zend_View_Exception
         */
        public function __call($method, $args)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public function _isValid($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function append($value)
        {
        }
        /**
         * @param int|string $index
         * @param mixed $value
         *
         * @return void
         */
        public function offsetSet($index, $value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function prepend($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function set($value)
        {
        }
        /**
         * @return void
         */
        public function captureStart($type, $attrs = null)
        {
        }
        /**
         * @return void
         */
        public function captureEnd()
        {
        }
        /**
         * @param stdClass $item
         * @param string $indent
         *
         * @return string
         */
        public function itemToString(\stdClass $item, $indent)
        {
        }
        /**
         * @param int|null|string $indent
         *
         * @return string
         */
        public function toString($indent = null)
        {
        }
        /**
         * @param string $content
         * @param array<array-key, mixed> $attributes
         *
         * @return stdClass
         */
        public function createData($content, array $attributes)
        {
        }
    }
    class Zend_View_Helper_HeadTitle extends \Zend_View_Helper_Placeholder_Container_Standalone
    {
        /**
         * @var string
         */
        public $_regKey;
        /**
         * @var bool
         */
        public $_translate;
        /**
         * @var Zend_Translate_Adapter
         */
        public $_translator;
        /**
         * @var string
         */
        public $_defaultAttachOrder;
        /**
         * @param null|string $title
         * @param null|string $setType
         *
         * @return Zend_View_Helper_HeadTitle
         */
        public function headTitle($title = null, $setType = null)
        {
        }
        /**
         * @param string $setType
         */
        public function setDefaultAttachOrder($setType)
        {
        }
        /**
         * @return mixed
         */
        public function getDefaultAttachOrder()
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter $translate
         *
         * @return Zend_View_Helper_HeadTitle
         */
        public function setTranslator($translate)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @return Zend_View_Helper_HeadTitle
         */
        public function enableTranslation()
        {
        }
        /**
         * @return Zend_View_Helper_HeadTitle
         */
        public function disableTranslation()
        {
        }
        /**
         * @param null|string $indent
         * @param null|string $locale
         *
         * @return string
         */
        public function toString($indent = null, $locale = null)
        {
        }
    }
    class Zend_View_Helper_HtmlElement extends \Zend_View_Helper_Abstract
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_closingBracket;
        /**
         * @return string
         */
        public function getClosingBracket()
        {
        }
        /**
         * @return bool
         */
        public function _isXhtml()
        {
        }
        /**
         * @return bool
         */
        public function _isHtml5()
        {
        }
        /**
         * @return bool
         */
        public function _isStrictDoctype()
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function _htmlAttribs($attribs)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _normalizeId($value)
        {
        }
    }
    class Zend_View_Helper_HtmlFlash extends \Zend_View_Helper_HtmlObject
    {
        public const EOL = '
';
        public const TYPE = 'application/x-shockwave-flash';
        /**
         * @param string $data
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed> $params
         * @param null|string $content
         *
         * @return string
         */
        public function htmlFlash($data, array $attribs = array(), array $params = array(), $content = null)
        {
        }
    }
    class Zend_View_Helper_HtmlList extends \Zend_View_Helper_FormElement
    {
        public const EOL = '
';
        /**
         * @param array<array-key, mixed> $items
         * @param bool $ordered
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function htmlList(array $items, $ordered = false, $attribs = false, $escape = true)
        {
        }
    }
    class Zend_View_Helper_HtmlObject extends \Zend_View_Helper_HtmlElement
    {
        public const EOL = '
';
        /**
         * @param string $data
         * @param string $type
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed> $params
         * @param null|string $content
         *
         * @return string
         */
        public function htmlObject($data, $type, array $attribs = array(), array $params = array(), $content = null)
        {
        }
    }
    class Zend_View_Helper_HtmlPage extends \Zend_View_Helper_HtmlObject
    {
        public const EOL = '
';
        public const TYPE = 'text/html';
        public const ATTRIB_CLASSID = 'clsid:25336920-03F9-11CF-8FD0-00AA00686F13';
        /**
         * @var array<array-key, mixed>
         */
        public $_attribs;
        /**
         * @param string $data
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed> $params
         * @param null|string $content
         *
         * @return string
         */
        public function htmlPage($data, array $attribs = array(), array $params = array(), $content = null)
        {
        }
    }
    class Zend_View_Helper_HtmlQuicktime extends \Zend_View_Helper_HtmlObject
    {
        public const EOL = '
';
        public const TYPE = 'video/quicktime';
        public const ATTRIB_CLASSID = 'clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B';
        public const ATTRIB_CODEBASE = 'http://www.apple.com/qtactivex/qtplugin.cab';
        /**
         * @var array<array-key, mixed>
         */
        public $_attribs;
        /**
         * @param string $data
         * @param array<array-key, mixed> $attribs
         * @param array<array-key, mixed> $params
         * @param null|string $content
         *
         * @return string
         */
        public function htmlQuicktime($data, array $attribs = array(), array $params = array(), $content = null)
        {
        }
    }
    class Zend_View_Helper_InlineScript extends \Zend_View_Helper_HeadScript
    {
        public const FILE = 'FILE';
        public const SCRIPT = 'SCRIPT';
        /**
         * @var string
         */
        public $_regKey;
        /**
         * @param string $mode
         * @param null|string $spec
         * @param string $placement
         * @param array<array-key, mixed> $attrs
         * @param string $type
         *
         * @return Zend_View_Helper_InlineScript
         */
        public function inlineScript($mode, $spec = null, $placement = 'APPEND', array $attrs = array(), $type = 'text/javascript')
        {
        }
    }
    interface Zend_View_Helper_Interface
    {
        /**
         * @param Zend_View_Interface $view
         *
         * @return Zend_View_Helper_Interface
         */
        public function setView(\Zend_View_Interface $view);
        /**
         * @return mixed
         */
        public function direct();
    }
    class Zend_View_Helper_Json extends \Zend_View_Helper_Abstract
    {
        /**
         * @param mixed $data
         * @param bool $keepLayouts
         * @param bool $encodeData
         *
         * @return null|string
         * @psalm-taint-sink unserialize $data
         */
        public function json($data, $keepLayouts = false, $encodeData = true)
        {
        }
    }
    class Zend_View_Helper_Layout extends \Zend_View_Helper_Abstract
    {
        /**
         * @var Zend_Layout
         */
        public $_layout;
        /**
         * @return Zend_Layout
         */
        public function getLayout()
        {
        }
        /**
         * @param Zend_Layout $layout
         *
         * @return Zend_Layout_Controller_Action_Helper_Layout
         */
        public function setLayout(\Zend_Layout $layout)
        {
        }
        /**
         * @return Zend_Layout
         */
        public function layout()
        {
        }
    }
    class Zend_View_Helper_Navigation extends \Zend_View_Helper_Navigation_HelperAbstract
    {
        public const EOL = '
';
        public const NS = 'Zend_View_Helper_Navigation';
        /**
         * @var string
         */
        public $_defaultProxy;
        /**
         * @var array<array-key, mixed>
         */
        public $_helpers;
        /**
         * @var bool
         */
        public $_injectContainer;
        /**
         * @var bool
         */
        public $_injectAcl;
        /**
         * @var bool
         */
        public $_injectTranslator;
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return Zend_View_Helper_Navigation
         */
        public function navigation(?\Zend_Navigation_Container $container = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $arguments
         *
         * @return mixed
         *
         * @throws Zend_View_Exception
         * @throws Zend_Navigation_Exception
         * @psalm-taint-sink callable $method
         */
        public function __call($method, array $arguments = array())
        {
        }
        /**
         * @param string $proxy
         * @param bool $strict
         *
         * @return Zend_View_Helper_Navigation_Helper
         *
         * @throws Zend_Loader_PluginLoader_Exception
         * @throws Zend_View_Exception
         * @psalm-taint-sink callable $proxy
         */
        public function findHelper($proxy, $strict = true)
        {
        }
        /**
         * @param Zend_View_Helper_Navigation_Helper $helper
         *
         * @return void
         */
        public function _inject(\Zend_View_Helper_Navigation_Helper $helper)
        {
        }
        /**
         * @param string $proxy
         *
         * @return Zend_View_Helper_Navigation
         * @psalm-taint-sink callable $proxy
         */
        public function setDefaultProxy($proxy)
        {
        }
        /**
         * @return string
         */
        public function getDefaultProxy()
        {
        }
        /**
         * @param bool $injectContainer
         *
         * @return Zend_View_Helper_Navigation
         */
        public function setInjectContainer($injectContainer = true)
        {
        }
        /**
         * @return bool
         */
        public function getInjectContainer()
        {
        }
        /**
         * @param bool $injectAcl
         *
         * @return Zend_View_Helper_Navigation
         */
        public function setInjectAcl($injectAcl = true)
        {
        }
        /**
         * @return bool
         */
        public function getInjectAcl()
        {
        }
        /**
         * @param bool $injectTranslator
         *
         * @return Zend_View_Helper_Navigation
         */
        public function setInjectTranslator($injectTranslator = true)
        {
        }
        /**
         * @return bool
         */
        public function getInjectTranslator()
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return string
         *
         * @throws Zend_Loader_PluginLoader_Exception
         * @throws Zend_View_Exception
         */
        public function render(?\Zend_Navigation_Container $container = null)
        {
        }
    }
    class Zend_View_Helper_Navigation_Breadcrumbs extends \Zend_View_Helper_Navigation_HelperAbstract
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_separator;
        /**
         * @var int
         */
        public $_minDepth;
        /**
         * @var bool
         */
        public $_linkLast;
        /**
         * @var array<array-key, mixed>|string
         */
        public $_partial;
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return Zend_View_Helper_Navigation_Breadcrumbs
         */
        public function breadcrumbs(?\Zend_Navigation_Container $container = null)
        {
        }
        /**
         * @param string $separator
         *
         * @return Zend_View_Helper_Navigation_Breadcrumbs
         */
        public function setSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getSeparator()
        {
        }
        /**
         * @param bool $linkLast
         *
         * @return Zend_View_Helper_Navigation_Breadcrumbs
         */
        public function setLinkLast($linkLast)
        {
        }
        /**
         * @return bool
         */
        public function getLinkLast()
        {
        }
        /**
         * @param array<array-key, mixed>|string $partial
         *
         * @return Zend_View_Helper_Navigation_Breadcrumbs
         * @psalm-taint-sink include $partial
         */
        public function setPartial($partial)
        {
        }
        /**
         * @return array<array-key, mixed>|null|string
         */
        public function getPartial()
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return string
         */
        public function renderStraight(?\Zend_Navigation_Container $container = null)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         * @param array<array-key, mixed>|null|string $partial
         *
         * @return string
         * @psalm-taint-sink include $partial
         */
        public function renderPartial(?\Zend_Navigation_Container $container = null, $partial = null)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return string
         *
         * @throws Zend_View_Exception
         */
        public function render(?\Zend_Navigation_Container $container = null)
        {
        }
    }
    interface Zend_View_Helper_Navigation_Helper
    {
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return Zend_View_Helper_Navigation_Helper
         */
        public function setContainer(?\Zend_Navigation_Container $container = null);
        /**
         * @return Zend_Navigation_Container
         */
        public function getContainer();
        /**
         * @param mixed|null $translator
         *
         * @return Zend_View_Helper_Navigation_Helper
         */
        public function setTranslator($translator = null);
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator();
        /**
         * @param Zend_Acl|null $acl
         *
         * @return Zend_View_Helper_Navigation_Helper
         */
        public function setAcl(?\Zend_Acl $acl = null);
        /**
         * @return Zend_Acl|null
         */
        public function getAcl();
        /**
         * @param mixed|null $role
         *
         * @return Zend_View_Helper_Navigation_Helper
         *
         * @throws Zend_View_Exception
         */
        public function setRole($role = null);
        /**
         * @return Zend_Acl_Role_Interface|null|string
         */
        public function getRole();
        /**
         * @param bool $useAcl
         *
         * @return Zend_View_Helper_Navigation_Helper
         */
        public function setUseAcl($useAcl = true);
        /**
         * @return bool
         */
        public function getUseAcl();
        /**
         * @return bool
         */
        public function getRenderInvisible();
        /**
         * @param bool $renderInvisible
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setRenderInvisible($renderInvisible = true);
        /**
         * @param bool $useTranslator
         *
         * @return Zend_View_Helper_Navigation_Helper
         */
        public function setUseTranslator($useTranslator = true);
        /**
         * @return bool
         */
        public function getUseTranslator();
        /**
         * @return bool
         */
        public function hasContainer();
        /**
         * @return bool
         */
        public function hasAcl();
        /**
         * @return bool
         */
        public function hasRole();
        /**
         * @return bool
         */
        public function hasTranslator();
        /**
         * @return string
         */
        public function __toString();
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return string
         *
         * @throws Zend_View_Exception
         */
        public function render(?\Zend_Navigation_Container $container = null);
    }
    class Zend_View_Helper_Navigation_HelperAbstract extends \Zend_View_Helper_HtmlElement
    {
        public const EOL = '
';
        /**
         * @var Zend_Navigation_Container
         */
        public $_container;
        /**
         * @var int
         */
        public $_minDepth;
        /**
         * @var int
         */
        public $_maxDepth;
        /**
         * @var string
         */
        public $_indent;
        /**
         * @var bool
         */
        public $_formatOutput;
        /**
         * @var null|string
         */
        public $_prefixForId;
        /**
         * @var bool
         */
        public $_skipPrefixForId;
        /**
         * @var Zend_Translate_Adapter
         */
        public $_translator;
        /**
         * @var Zend_Acl
         */
        public $_acl;
        /**
         * @var bool
         */
        public $_renderInvisible;
        /**
         * @var Zend_Acl_Role_Interface|string
         */
        public $_role;
        /**
         * @var bool
         */
        public $_useTranslator;
        /**
         * @var bool
         */
        public $_useAcl;
        /**
         * @var Zend_Acl
         */
        public static $_defaultAcl;
        /**
         * @var Zend_Acl_Role_Interface|string
         */
        public static $_defaultRole;
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setContainer(?\Zend_Navigation_Container $container = null)
        {
        }
        /**
         * @return Zend_Navigation_Container
         */
        public function getContainer()
        {
        }
        /**
         * @param int|null $minDepth
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setMinDepth($minDepth = null)
        {
        }
        /**
         * @return int|null
         */
        public function getMinDepth()
        {
        }
        /**
         * @param int|null $maxDepth
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setMaxDepth($maxDepth = null)
        {
        }
        /**
         * @return int|null
         */
        public function getMaxDepth()
        {
        }
        /**
         * @param int|string $indent
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setIndent($indent)
        {
        }
        /**
         * @return string
         */
        public function getIndent()
        {
        }
        /**
         * @return string
         */
        public function getEOL()
        {
        }
        /**
         * @param bool $formatOutput
         *
         * @return Zend_View_Helper_Navigation_Sitemap
         */
        public function setFormatOutput($formatOutput = true)
        {
        }
        /**
         * @return bool
         */
        public function getFormatOutput()
        {
        }
        /**
         * @param string $prefix
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setPrefixForId($prefix)
        {
        }
        /**
         * @return string
         */
        public function getPrefixForId()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function skipPrefixForId($flag = true)
        {
        }
        /**
         * @param mixed|null $translator
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setTranslator($translator = null)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @param Zend_Acl|null $acl
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setAcl(?\Zend_Acl $acl = null)
        {
        }
        /**
         * @return Zend_Acl|null
         */
        public function getAcl()
        {
        }
        /**
         * @param mixed|null $role
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         *
         * @throws Zend_View_Exception
         */
        public function setRole($role = null)
        {
        }
        /**
         * @return Zend_Acl_Role_Interface|null|string
         */
        public function getRole()
        {
        }
        /**
         * @param bool $useAcl
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setUseAcl($useAcl = true)
        {
        }
        /**
         * @return bool
         */
        public function getUseAcl()
        {
        }
        /**
         * @return bool
         */
        public function getRenderInvisible()
        {
        }
        /**
         * @param bool $renderInvisible
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setRenderInvisible($renderInvisible = true)
        {
        }
        /**
         * @param bool $useTranslator
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setUseTranslator($useTranslator = true)
        {
        }
        /**
         * @return bool
         */
        public function getUseTranslator()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $arguments
         *
         * @return mixed
         *
         * @throws Zend_Navigation_Exception
         * @psalm-taint-sink callable $method
         */
        public function __call($method, array $arguments = array())
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        public function findActive(\Zend_Navigation_Container $container, $minDepth = null, $maxDepth = -1)
        {
        }
        /**
         * @return bool
         */
        public function hasContainer()
        {
        }
        /**
         * @return bool
         */
        public function hasAcl()
        {
        }
        /**
         * @return bool
         */
        public function hasRole()
        {
        }
        /**
         * @return bool
         */
        public function hasTranslator()
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return string
         */
        public function htmlify(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         * @param bool $recursive
         *
         * @return bool
         */
        public function accept(\Zend_Navigation_Page $page, $recursive = true)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return bool
         */
        public function _acceptAcl(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param int|string $indent
         *
         * @return string
         */
        public function _getWhitespace($indent)
        {
        }
        /**
         * @param array<array-key, mixed> $attribs
         *
         * @return string
         */
        public function _htmlAttribs($attribs)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function _normalizeId($value)
        {
        }
        /**
         * @param Zend_Acl|null $acl
         *
         * @return void
         */
        public static function setDefaultAcl(?\Zend_Acl $acl = null)
        {
        }
        /**
         * @param mixed|null $role
         *
         * @return void
         *
         * @throws Zend_View_Exception
         */
        public static function setDefaultRole($role = null)
        {
        }
    }
    class Zend_View_Helper_Navigation_Links extends \Zend_View_Helper_Navigation_HelperAbstract
    {
        public const EOL = '
';
        public const RENDER_ALTERNATE = 1;
        public const RENDER_STYLESHEET = 2;
        public const RENDER_START = 4;
        public const RENDER_NEXT = 8;
        public const RENDER_PREV = 16;
        public const RENDER_CONTENTS = 32;
        public const RENDER_INDEX = 64;
        public const RENDER_GLOSSARY = 128;
        public const RENDER_COPYRIGHT = 256;
        public const RENDER_CHAPTER = 512;
        public const RENDER_SECTION = 1024;
        public const RENDER_SUBSECTION = 2048;
        public const RENDER_APPENDIX = 4096;
        public const RENDER_HELP = 8192;
        public const RENDER_BOOKMARK = 16384;
        public const RENDER_CUSTOM = 32768;
        public const RENDER_ALL = 65535;
        /**
         * @var array<array-key, mixed>
         */
        public static $_RELATIONS;
        /**
         * @var int
         */
        public $_renderFlag;
        /**
         * @var Zend_Navigation_Container
         */
        public $_root;
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return Zend_View_Helper_Navigation_Links
         */
        public function links(?\Zend_Navigation_Container $container = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $arguments
         *
         * @throws Zend_Navigation_Exception
         * @psalm-taint-sink callable $method
         */
        public function __call($method, array $arguments = array())
        {
        }
        /**
         * @param int $renderFlag
         *
         * @return Zend_View_Helper_Navigation_Links
         */
        public function setRenderFlag($renderFlag)
        {
        }
        /**
         * @return int
         */
        public function getRenderFlag()
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return array<array-key, mixed>
         */
        public function findAllRelations(\Zend_Navigation_Page $page, $flag = null)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         * @param string $rel
         * @param string $type
         *
         * @return Zend_Navigaiton_Page|array<array-key, mixed>|null
         *
         * @throws Zend_View_Exception
         */
        public function findRelation(\Zend_Navigation_Page $page, $rel, $type)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         * @param string $rel
         * @param string $type
         *
         * @return Zend_Navigation_Page|array<array-key, mixed>|null
         */
        public function _findFromProperty(\Zend_Navigation_Page $page, $rel, $type)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         * @param string $rel
         * @param string $type
         *
         * @return array<array-key, mixed>|null
         */
        public function _findFromSearch(\Zend_Navigation_Page $page, $rel, $type)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return Zend_Navigation_Page|null
         */
        public function searchRelStart(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return Zend_Navigation_Page|null
         */
        public function searchRelNext(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return Zend_Navigation_Page|null
         */
        public function searchRelPrev(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return Zend_Navigation_Page|array<array-key, mixed>|null
         */
        public function searchRelChapter(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return Zend_Navigation_Page|array<array-key, mixed>|null
         */
        public function searchRelSection(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return Zend_Navigation_Page|array<array-key, mixed>|null
         */
        public function searchRelSubsection(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return Zend_Navigation_Page|null
         */
        public function searchRevSection(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return Zend_Navigation_Page|null
         */
        public function searchRevSubsection(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigaiton_Page $page
         *
         * @return Zend_Navigation_Container
         */
        public function _findRoot(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param mixed $mixed
         * @param bool $recursive
         *
         * @return Zend_Navigation_Page|array<array-key, mixed>|null
         */
        public function _convertToPages($mixed, $recursive = true)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         * @param string $attrib
         * @param string $relation
         *
         * @return string
         *
         * @throws Zend_View_Exception
         */
        public function renderLink(\Zend_Navigation_Page $page, $attrib, $relation)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return string
         *
         * @throws Zend_View_Exception
         */
        public function render(?\Zend_Navigation_Container $container = null)
        {
        }
    }
    class Zend_View_Helper_Navigation_Menu extends \Zend_View_Helper_Navigation_HelperAbstract
    {
        public const EOL = '
';
        /**
         * @var string
         */
        public $_ulClass;
        /**
         * @var string
         */
        public $_ulId;
        /**
         * @var string
         */
        public $_activeClass;
        /**
         * @var string
         */
        public $_parentClass;
        /**
         * @var bool
         */
        public $_renderParentClass;
        /**
         * @var bool
         */
        public $_onlyActiveBranch;
        /**
         * @var bool
         */
        public $_renderParents;
        /**
         * @var array<array-key, mixed>|string
         */
        public $_partial;
        /**
         * @var bool
         */
        public $_expandSiblingNodesOfActiveBranch;
        /**
         * @var bool
         */
        public $_addPageClassToLi;
        /**
         * @var string
         */
        public $_innerIndent;
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function menu(?\Zend_Navigation_Container $container = null)
        {
        }
        /**
         * @param string $ulClass
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function setUlClass($ulClass)
        {
        }
        /**
         * @return string
         */
        public function getUlClass()
        {
        }
        /**
         * @param null|string $ulId
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function setUlId($ulId)
        {
        }
        /**
         * @return null|string
         */
        public function getUlId()
        {
        }
        /**
         * @param string $activeClass
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function setActiveClass($activeClass)
        {
        }
        /**
         * @return string
         */
        public function getActiveClass()
        {
        }
        /**
         * @param string $parentClass
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function setParentClass($parentClass)
        {
        }
        /**
         * @return string
         */
        public function getParentClass()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function setRenderParentClass($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getRenderParentClass()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function setOnlyActiveBranch($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getOnlyActiveBranch()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function setExpandSiblingNodesOfActiveBranch($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getExpandSiblingNodesOfActiveBranch()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function setRenderParents($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getRenderParents()
        {
        }
        /**
         * @param array<array-key, mixed>|string $partial
         *
         * @return Zend_View_Helper_Navigation_Menu
         * @psalm-taint-sink include $partial
         */
        public function setPartial($partial)
        {
        }
        /**
         * @return array<array-key, mixed>|null|string
         */
        public function getPartial()
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_View_Helper_Navigation_Menu
         */
        public function addPageClassToLi($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function getAddPageClassToLi()
        {
        }
        /**
         * @param int|string $indent
         *
         * @return Zend_View_Helper_Navigation_HelperAbstract
         */
        public function setInnerIndent($indent)
        {
        }
        /**
         * @return string
         */
        public function getInnerIndent()
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return string
         */
        public function htmlify(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function _normalizeOptions(array $options = array())
        {
        }
        /**
         * @param Zend_Navigation_Container $container
         * @param string $ulClass
         * @param string $indent
         * @param string $innerIndent
         * @param int|null $minDepth
         * @param int|null $maxDepth
         * @param null|string $ulId
         * @param bool $addPageClassToLi
         * @param null|string $activeClass
         * @param string $parentClass
         * @param bool $renderParentClass
         *
         * @return string
         */
        public function _renderDeepestMenu(\Zend_Navigation_Container $container, $ulClass, $indent, $innerIndent, $minDepth, $maxDepth, $ulId, $addPageClassToLi, $activeClass, $parentClass, $renderParentClass)
        {
        }
        /**
         * @param Zend_Navigation_Container $container
         * @param string $ulClass
         * @param string $indent
         * @param string $innerIndent
         * @param int|null $minDepth
         * @param int|null $maxDepth
         * @param bool $onlyActive
         * @param bool $expandSibs
         * @param null|string $ulId
         * @param bool $addPageClassToLi
         * @param null|string $activeClass
         * @param string $parentClass
         * @param bool $renderParentClass
         *
         * @return string
         */
        public function _renderMenu(\Zend_Navigation_Container $container, $ulClass, $indent, $innerIndent, $minDepth, $maxDepth, $onlyActive, $expandSibs, $ulId, $addPageClassToLi, $activeClass, $parentClass, $renderParentClass)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         * @param array<array-key, mixed> $options
         *
         * @return string
         */
        public function renderMenu(?\Zend_Navigation_Container $container = null, array $options = array())
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         * @param null|string $ulClass
         * @param int|null|string $indent
         * @param null|string $ulId
         * @param bool $addPageClassToLi
         * @param int|null|string $innerIndent
         *
         * @return string
         */
        public function renderSubMenu(?\Zend_Navigation_Container $container = null, $ulClass = null, $indent = null, $ulId = null, $addPageClassToLi = false, $innerIndent = null)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         * @param array<array-key, mixed>|null|string $partial
         *
         * @return string
         *
         * @throws Zend_View_Exception
         * @psalm-taint-sink include $partial
         */
        public function renderPartial(?\Zend_Navigation_Container $container = null, $partial = null)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return string
         *
         * @throws Zend_View_Exception
         */
        public function render(?\Zend_Navigation_Container $container = null)
        {
        }
    }
    class Zend_View_Helper_Navigation_Sitemap extends \Zend_View_Helper_Navigation_HelperAbstract
    {
        public const EOL = '
';
        public const SITEMAP_NS = 'http://www.sitemaps.org/schemas/sitemap/0.9';
        public const SITEMAP_XSD = 'http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd';
        /**
         * @var bool
         */
        public $_useXmlDeclaration;
        /**
         * @var bool
         */
        public $_useSitemapValidators;
        /**
         * @var bool
         */
        public $_useSchemaValidation;
        /**
         * @var string
         */
        public $_serverUrl;
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return Zend_View_Helper_Navigation_Sitemap
         */
        public function sitemap(?\Zend_Navigation_Container $container = null)
        {
        }
        /**
         * @param bool $useXmlDecl
         *
         * @return Zend_View_Helper_Navigation_Sitemap
         */
        public function setUseXmlDeclaration($useXmlDecl)
        {
        }
        /**
         * @return bool
         */
        public function getUseXmlDeclaration()
        {
        }
        /**
         * @param bool $useSitemapValidators
         *
         * @return Zend_View_Helper_Navigation_Sitemap
         */
        public function setUseSitemapValidators($useSitemapValidators)
        {
        }
        /**
         * @return bool
         */
        public function getUseSitemapValidators()
        {
        }
        /**
         * @param bool $schemaValidation
         *
         * @return Zend_View_Helper_Navigation_Sitemap
         */
        public function setUseSchemaValidation($schemaValidation)
        {
        }
        /**
         * @return bool
         */
        public function getUseSchemaValidation()
        {
        }
        /**
         * @param string $serverUrl
         *
         * @return Zend_View_Helper_Navigation_Sitemap
         *
         * @throws Zend_Uri_Exception
         */
        public function setServerUrl($serverUrl)
        {
        }
        /**
         * @return string
         */
        public function getServerUrl()
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public function _xmlEscape($string)
        {
        }
        /**
         * @param Zend_Navigation_Page $page
         *
         * @return string
         */
        public function url(\Zend_Navigation_Page $page)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return DOMDocument
         *
         * @throws Zend_View_Exception
         */
        public function getDomSitemap(?\Zend_Navigation_Container $container = null)
        {
        }
        /**
         * @param Zend_Navigation_Container|null $container
         *
         * @return string
         *
         * @throws Zend_View_Exception
         */
        public function render(?\Zend_Navigation_Container $container = null)
        {
        }
    }
    class Zend_View_Helper_PaginationControl
    {
        /**
         * @var Zend_View_Instance
         */
        public $view;
        /**
         * @var array<array-key, mixed>|string
         */
        public static $_defaultViewPartial;
        /**
         * @param Zend_View_Interface $view
         *
         * @return Zend_View_Helper_PaginationControl
         */
        public function setView(\Zend_View_Interface $view)
        {
        }
        /**
         * @param array<array-key, mixed>|string $partial
         * @psalm-taint-sink include $partial
         */
        public static function setDefaultViewPartial($partial)
        {
        }
        /**
         * @return array<array-key, mixed>|string
         */
        public static function getDefaultViewPartial()
        {
        }
        /**
         * @param null|string $scrollingStyle
         * @param null|string $partial
         * @param array<array-key, mixed>|null|string $params
         *
         * @return string
         *
         * @throws Zend_View_Exception
         */
        public function paginationControl(?\Zend_Paginator $paginator = null, $scrollingStyle = null, $partial = null, $params = null)
        {
        }
    }
    class Zend_View_Helper_Partial extends \Zend_View_Helper_Abstract
    {
        /**
         * @var string
         */
        public $_objectKey;
        /**
         * @param null|string $name
         * @param array<array-key, mixed>|null|string $module
         * @param array<array-key, mixed>|null $model
         *
         * @return Zend_View_Helper_Partial|string
         * @psalm-taint-sink include $name
         */
        public function partial($name = null, $module = null, $model = null)
        {
        }
        /**
         * @return Zend_View_Interface
         */
        public function cloneView()
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_View_Helper_Partial
         */
        public function setObjectKey($key)
        {
        }
        /**
         * @return null|string
         */
        public function getObjectKey()
        {
        }
    }
    class Zend_View_Helper_PartialLoop extends \Zend_View_Helper_Partial
    {
        /**
         * @var int
         */
        public $partialCounter;
        /**
         * @param null|string $name
         * @param array<array-key, mixed>|null|string $module
         * @param array<array-key, mixed>|null $model
         *
         * @return string
         * @psalm-taint-sink include $name
         */
        public function partialLoop($name = null, $module = null, $model = null)
        {
        }
    }
    class Zend_View_Helper_Partial_Exception extends \Zend_View_Exception
    {
    }
    class Zend_View_Helper_Placeholder extends \Zend_View_Helper_Abstract
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_items;
        /**
         * @var Zend_View_Helper_Placeholder_Registry
         */
        public $_registry;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_View_Helper_Placeholder_Container_Abstract
         */
        public function placeholder($name)
        {
        }
        /**
         * @return Zend_View_Helper_Placeholder_Registry
         */
        public function getRegistry()
        {
        }
    }
    class Zend_View_Helper_Placeholder_Container extends \Zend_View_Helper_Placeholder_Container_Abstract
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        public const SET = 'SET';
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
    }
    class Zend_View_Helper_Placeholder_Container_Abstract extends \ArrayObject
    {
        public const STD_PROP_LIST = 1;
        public const ARRAY_AS_PROPS = 2;
        public const SET = 'SET';
        public const APPEND = 'APPEND';
        public const PREPEND = 'PREPEND';
        /**
         * @var string
         */
        public $_prefix;
        /**
         * @var string
         */
        public $_postfix;
        /**
         * @var string
         */
        public $_separator;
        /**
         * @var string
         */
        public $_indent;
        /**
         * @var bool
         */
        public $_captureLock;
        /**
         * @var string
         */
        public $_captureType;
        /**
         * @var string
         */
        public $_captureKey;
        /**
         * @return Zend_View_Helper_Placeholder_Container_Abstract
         */
        public function __construct()
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function set($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         */
        public function prepend($value)
        {
        }
        /**
         * @return mixed
         */
        public function getValue()
        {
        }
        /**
         * @param string $prefix
         *
         * @return Zend_View_Helper_Placeholder_Container
         */
        public function setPrefix($prefix)
        {
        }
        /**
         * @return string
         */
        public function getPrefix()
        {
        }
        /**
         * @param string $postfix
         *
         * @return Zend_View_Helper_Placeholder_Container
         */
        public function setPostfix($postfix)
        {
        }
        /**
         * @return string
         */
        public function getPostfix()
        {
        }
        /**
         * @param string $separator
         *
         * @return Zend_View_Helper_Placeholder_Container
         */
        public function setSeparator($separator)
        {
        }
        /**
         * @return string
         */
        public function getSeparator()
        {
        }
        /**
         * @param int|string $indent
         *
         * @return Zend_View_Helper_Placeholder_Container_Abstract
         */
        public function setIndent($indent)
        {
        }
        /**
         * @return string
         */
        public function getIndent()
        {
        }
        /**
         * @param int|string $indent
         *
         * @return string
         */
        public function getWhitespace($indent)
        {
        }
        /**
         * @param int|string $type
         * @param null $key
         *
         * @return void
         *
         * @throws Zend_View_Helper_Placeholder_Container_Exception
         */
        public function captureStart($type, $key = null)
        {
        }
        /**
         * @return void
         */
        public function captureEnd()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getKeys()
        {
        }
        /**
         * @return int
         */
        public function nextIndex()
        {
        }
        /**
         * @param null $indent
         *
         * @return string
         */
        public function toString($indent = null)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_View_Helper_Placeholder_Container_Exception extends \Zend_View_Exception
    {
    }
    class Zend_View_Helper_Placeholder_Container_Standalone extends \Zend_View_Helper_Abstract
    {
        /**
         * @var Zend_View_Helper_Placeholder_Container_Abstract
         */
        public $_container;
        /**
         * @var Zend_View_Helper_Placeholder_Registry
         */
        public $_registry;
        /**
         * @var string
         */
        public $_regKey;
        /**
         * @var book
         */
        public $_autoEscape;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return Zend_View_Helper_Placeholder_Registry
         */
        public function getRegistry()
        {
        }
        /**
         * @param Zend_View_Helper_Placeholder_Registry $registry
         *
         * @return Zend_View_Helper_Placeholder_Container_Standalone
         */
        public function setRegistry(\Zend_View_Helper_Placeholder_Registry $registry)
        {
        }
        /**
         * @param bool $autoEscape
         *
         * @return Zend_View_Helper_Placeholder_Container_Standalone
         */
        public function setAutoEscape($autoEscape = true)
        {
        }
        public function getAutoEscape()
        {
        }
        /**
         * @param string $string
         *
         * @return string
         * @psalm-taint-escape html
         */
        public function _escape($string)
        {
        }
        /**
         * @param Zend_View_Helper_Placeholder_Container_Abstract $container
         *
         * @return Zend_View_Helper_Placeholder_Container_Standalone
         */
        public function setContainer(\Zend_View_Helper_Placeholder_Container_Abstract $container)
        {
        }
        /**
         * @return Zend_View_Helper_Placeholder_Container_Abstract
         */
        public function getContainer()
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return void
         */
        public function __set($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key)
        {
        }
        /**
         * @param string $key
         *
         * @return void
         */
        public function __unset($key)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         * @psalm-taint-sink callable $method
         */
        public function __call($method, $args)
        {
        }
        /**
         * @return string
         */
        public function toString()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @param int|string $offset
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * @param int|string $offset
         *
         * @return mixed
         */
        public function offsetGet($offset)
        {
        }
        /**
         * @param int|string $offset
         * @param mixed $value
         *
         * @return void
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * @param int|string $offset
         *
         * @return void
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * @return Iterator
         */
        public function getIterator()
        {
        }
    }
    class Zend_View_Helper_Placeholder_Registry
    {
        public const REGISTRY_KEY = 'Zend_View_Helper_Placeholder_Registry';
        /**
         * @var string
         */
        public $_containerClass;
        /**
         * @var array<array-key, mixed>
         */
        public $_items;
        /**
         * @return void
         */
        public static function getRegistry()
        {
        }
        /**
         * @param string $key
         * @param array<array-key, mixed> $value
         *
         * @return Zend_View_Helper_Placeholder_Container_Abstract
         */
        public function createContainer($key, array $value = array())
        {
        }
        /**
         * @param string $key
         *
         * @return Zend_View_Helper_Placeholder_Container_Abstract
         */
        public function getContainer($key)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function containerExists($key)
        {
        }
        /**
         * @param string $key
         * @param Zend_View_Placeholder_Container_Abstract $container
         *
         * @return Zend_View_Placeholder_Registry
         */
        public function setContainer($key, \Zend_View_Helper_Placeholder_Container_Abstract $container)
        {
        }
        /**
         * @param string $key
         *
         * @return bool
         */
        public function deleteContainer($key)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_View_Helper_Placeholder_Registry
         */
        public function setContainerClass($name)
        {
        }
        /**
         * @return string
         */
        public function getContainerClass()
        {
        }
    }
    class Zend_View_Helper_Placeholder_Registry_Exception extends \Zend_View_Exception
    {
    }
    class Zend_View_Helper_RenderToPlaceholder extends \Zend_View_Helper_Abstract
    {
        /**
         * @param string $script
         * @param string $placeholder
         *
         * @return void
         */
        public function renderToPlaceholder($script, $placeholder)
        {
        }
    }
    class Zend_View_Helper_ServerUrl
    {
        /**
         * @var string
         */
        public $_scheme;
        /**
         * @var string
         */
        public $_host;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param bool|null|string $requestUri
         *
         * @return string
         */
        public function serverUrl($requestUri = null)
        {
        }
        /**
         * @return string
         */
        public function getHost()
        {
        }
        /**
         * @param string $host
         *
         * @return Zend_View_Helper_ServerUrl
         */
        public function setHost($host)
        {
        }
        /**
         * @return string
         */
        public function getScheme()
        {
        }
        /**
         * @param string $scheme
         *
         * @return Zend_View_Helper_ServerUrl
         */
        public function setScheme($scheme)
        {
        }
    }
    class Zend_View_Helper_Translate extends \Zend_View_Helper_Abstract
    {
        /**
         * @var Zend_Translate_Adapter
         */
        public $_translator;
        /**
         * @param Zend_Translate|Zend_Translate_Adapter|null $translate
         */
        public function __construct($translate = null)
        {
        }
        /**
         * @param null|string $messageid
         *
         * @return Zend_View_Helper_Translate|string
         */
        public function translate($messageid = null)
        {
        }
        /**
         * @param Zend_Translate|Zend_Translate_Adapter $translate
         *
         * @return Zend_View_Helper_Translate
         *
         * @throws Zend_View_Exception
         */
        public function setTranslator($translate)
        {
        }
        /**
         * @return Zend_Translate_Adapter|null
         */
        public function getTranslator()
        {
        }
        /**
         * @param Zend_Locale|null|string $locale
         *
         * @return Zend_View_Helper_Translate
         *
         * @throws Zend_View_Exception
         */
        public function setLocale($locale = null)
        {
        }
        /**
         * @return Zend_Locale|string
         *
         * @throws Zend_View_Exception
         */
        public function getLocale()
        {
        }
    }
    class Zend_View_Helper_Url extends \Zend_View_Helper_Abstract
    {
        /**
         * @param array<array-key, mixed> $urlOptions
         * @param mixed|null $name
         * @param bool $reset
         *
         * @return string
         */
        public function url(array $urlOptions = array(), $name = null, $reset = false, $encode = true)
        {
        }
    }
    class Zend_View_Helper_UserAgent extends \Zend_View_Helper_Abstract
    {
        /**
         * @var Zend_Http_UserAgent
         */
        public $_userAgent;
        /**
         * @param Zend_Http_UserAgent|null $userAgent
         *
         * @return Zend_Http_UserAgent
         */
        public function userAgent(?\Zend_Http_UserAgent $userAgent = null)
        {
        }
        /**
         * @param Zend_Http_UserAgent $userAgent
         *
         * @return Zend_View_Helper_UserAgent
         */
        public function setUserAgent(\Zend_Http_UserAgent $userAgent)
        {
        }
        /**
         * @return Zend_Http_UserAgent
         */
        public function getUserAgent()
        {
        }
    }
    interface Zend_View_Interface
    {
        /**
         * @return mixed
         */
        public function getEngine();
        /**
         * @return void
         */
        public function setScriptPath($path);
        /**
         * @return array<array-key, mixed>
         */
        public function getScriptPaths();
        /**
         * @param string $path
         * @param string $classPrefix
         *
         * @return void
         * @psalm-taint-sink include $path
         */
        public function setBasePath($path, $classPrefix = 'Zend_View');
        /**
         * @param string $path
         * @param string $classPrefix
         *
         * @return void
         * @psalm-taint-sink include $path
         */
        public function addBasePath($path, $classPrefix = 'Zend_View');
        /**
         * @param string $key
         * @param mixed $val
         *
         * @return void
         * @psalm-taint-sink html $val
         */
        public function __set($key, $val);
        /**
         * @param string $key
         *
         * @return bool
         */
        public function __isset($key);
        /**
         * @param string $key
         *
         * @return void
         */
        public function __unset($key);
        /**
         * @param array<array-key, mixed>|string $spec
         * @param mixed|null $value
         *
         * @return void
         * @psalm-taint-sink html $value
         */
        public function assign($spec, $value = null);
        /**
         * @return void
         */
        public function clearVars();
        /**
         * @param string $name
         *
         * @return string
         * @psalm-taint-sink include $name
         */
        public function render($name);
    }
    class Zend_View_Stream
    {
        /**
         * @var int
         */
        public $_pos;
        /**
         * @var string
         */
        public $_data;
        /**
         * @var array<array-key, mixed>
         */
        public $_stat;
        public function stream_open($path, $mode, $options, &$opened_path)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function url_stat()
        {
        }
        public function stream_read($count)
        {
        }
        public function stream_tell()
        {
        }
        public function stream_eof()
        {
        }
        public function stream_stat()
        {
        }
        public function stream_seek($offset, $whence)
        {
        }
    }
    class Zend_Wildfire_Channel_HttpHeaders extends \Zend_Controller_Plugin_Abstract
    {
        /**
         * @var string
         */
        public static $_headerPrefix;
        /**
         * @var Zend_Wildfire_Channel_HttpHeaders
         */
        public static $_instance;
        /**
         * @var int
         */
        public static $_controllerPluginStackIndex;
        /**
         * @var array<array-key, mixed>
         */
        public $_protocols;
        /**
         * @param null|string $class
         *
         * @return Zend_Wildfire_Channel_HttpHeaders
         *
         * @throws Zend_Wildfire_Exception
         */
        public static function init($class = null)
        {
        }
        /**
         * @param bool $skipCreate
         *
         * @return Zend_Wildfire_Channel_HttpHeaders
         */
        public static function getInstance($skipCreate = false)
        {
        }
        /**
         * @return void
         */
        public static function destroyInstance()
        {
        }
        /**
         * @param string $uri
         *
         * @return object
         */
        public function getProtocol($uri)
        {
        }
        /**
         * @param string $uri
         *
         * @return object
         *
         * @throws Zend_Wildfire_Exception
         */
        public function _initProtocol($uri)
        {
        }
        /**
         * @return bool
         */
        public function flush()
        {
        }
        /**
         * @param int $index
         *
         * @return int
         */
        public static function setControllerPluginStackIndex($index)
        {
        }
        /**
         * @return void
         */
        public function _registerControllerPlugin()
        {
        }
        /**
         * @param bool $forceCheckRequest
         *
         * @return bool
         */
        public function isReady($forceCheckRequest = false)
        {
        }
        /**
         * @return void
         */
        public function dispatchLoopShutdown()
        {
        }
        /**
         * @return Zend_Controller_Request_Abstract
         *
         * @throws Zend_Wildfire_Exception
         */
        public function getRequest()
        {
        }
        /**
         * @return Zend_Controller_Response_Abstract
         *
         * @throws Zend_Wildfire_Exception
         */
        public function getResponse()
        {
        }
    }
    interface Zend_Wildfire_Channel_Interface
    {
        /**
         * @return bool
         */
        public function isReady();
    }
    class Zend_Wildfire_Exception extends \Zend_Exception
    {
    }
    class Zend_Wildfire_Plugin_FirePhp implements \Zend_Wildfire_Plugin_Interface
    {
        public const LOG = 'LOG';
        public const INFO = 'INFO';
        public const WARN = 'WARN';
        public const ERROR = 'ERROR';
        public const TRACE = 'TRACE';
        public const EXCEPTION = 'EXCEPTION';
        public const TABLE = 'TABLE';
        public const DUMP = 'DUMP';
        public const GROUP_START = 'GROUP_START';
        public const GROUP_END = 'GROUP_END';
        public const PLUGIN_URI = 'http://meta.firephp.org/Wildfire/Plugin/ZendFramework/FirePHP/1.6.2';
        public const STRUCTURE_URI_DUMP = 'http://meta.firephp.org/Wildfire/Structure/FirePHP/Dump/0.1';
        public const STRUCTURE_URI_FIREBUGCONSOLE = 'http://meta.firephp.org/Wildfire/Structure/FirePHP/FirebugConsole/0.1';
        /**
         * @var Zend_Wildfire_Plugin_FirePhp
         */
        public static $_instance;
        /**
         * @var bool
         */
        public $_enabled;
        /**
         * @var Zend_Wildfire_Channel_Interface
         */
        public $_channel;
        /**
         * @var array<array-key, mixed>
         */
        public $_messages;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @var array<array-key, mixed>
         */
        public $_objectFilters;
        /**
         * @var array<array-key, mixed>
         */
        public $_objectStack;
        /**
         * @param null|string $class
         *
         * @return Zend_Wildfire_Plugin_FirePhp
         *
         * @throws Zend_Wildfire_Exception
         */
        public static function init($class = null)
        {
        }
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param bool $skipCreate
         *
         * @return Zend_Wildfire_Plugin_FirePhp
         */
        public static function getInstance($skipCreate = false)
        {
        }
        /**
         * @return void
         */
        public static function destroyInstance()
        {
        }
        /**
         * @param bool $enabled
         *
         * @return bool
         */
        public function setEnabled($enabled)
        {
        }
        /**
         * @return bool
         */
        public function getEnabled()
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return mixed
         */
        public function setOption($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getOption($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
        /**
         * @return void
         */
        public function setObjectFilter($class, $filter)
        {
        }
        /**
         * @param string $title
         * @param array<array-key, mixed> $options
         *
         * @return true
         */
        public static function group($title, $options = array())
        {
        }
        /**
         * @return true
         */
        public static function groupEnd()
        {
        }
        /**
         * @param mixed $var
         * @param null|string $label
         * @param null|string $style
         * @param array<array-key, mixed> $options
         *
         * @return bool
         *
         * @throws Zend_Wildfire_Exception
         */
        public static function send($var, $label = null, $style = null, $options = array())
        {
        }
        /**
         * @param array<array-key, mixed> $options
         *
         * @return array<array-key, mixed>
         */
        public function _getStackTrace($options)
        {
        }
        /**
         * @param string $structure
         * @param array<array-key, mixed> $data
         * @param bool $skipEncode
         *
         * @return bool
         *
         * @throws Zend_Wildfire_Exception
         */
        public function _recordMessage($structure, $data, $skipEncode = false)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _encodeTable($table)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _encodeTrace($trace)
        {
        }
        /**
         * @param mixed $object
         *
         * @return array<array-key, mixed>
         */
        public function _encodeObject($object, $objectDepth = 1, $arrayDepth = 1)
        {
        }
        /**
         * @return string
         */
        public function getUri()
        {
        }
        /**
         * @param string $protocolUri
         *
         * @return void
         */
        public function flushMessages($protocolUri)
        {
        }
    }
    class Zend_Wildfire_Plugin_FirePhp_Message
    {
        /**
         * @var string
         */
        public $_style;
        /**
         * @var string
         */
        public $_label;
        /**
         * @var mixed
         */
        public $_message;
        /**
         * @var bool
         */
        public $_buffered;
        /**
         * @var bool
         */
        public $_destroy;
        /**
         * @var string
         */
        public $_ruid;
        /**
         * @var array<array-key, mixed>
         */
        public $_options;
        /**
         * @param string $style
         * @param mixed $message
         *
         * @return void
         */
        public function __construct($style, $message)
        {
        }
        /**
         * @param string $label
         *
         * @return void
         */
        public function setLabel($label)
        {
        }
        /**
         * @return string
         */
        public function getLabel()
        {
        }
        /**
         * @param bool $buffered
         *
         * @return bool
         */
        public function setBuffered($buffered)
        {
        }
        /**
         * @return bool
         */
        public function getBuffered()
        {
        }
        /**
         * @param bool $destroy
         *
         * @return bool
         */
        public function setDestroy($destroy)
        {
        }
        /**
         * @return bool
         */
        public function getDestroy()
        {
        }
        /**
         * @return void
         */
        public function setStyle($style)
        {
        }
        /**
         * @return string
         */
        public function getStyle()
        {
        }
        /**
         * @return void
         */
        public function setMessage($message)
        {
        }
        /**
         * @return mixed
         */
        public function getMessage()
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return mixed
         */
        public function setOption($key, $value)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function getOption($key)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getOptions()
        {
        }
    }
    class Zend_Wildfire_Plugin_FirePhp_TableMessage extends \Zend_Wildfire_Plugin_FirePhp_Message
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_header;
        public $_rows = array();
        /**
         * @param string $label
         */
        public function __construct($label)
        {
        }
        /**
         * @param array<array-key, mixed> $header
         *
         * @return void
         */
        public function setHeader($header)
        {
        }
        /**
         * @param array<array-key, mixed> $row
         *
         * @return void
         */
        public function addRow($row)
        {
        }
        /**
         * @return mixed
         */
        public function getMessage()
        {
        }
        /**
         * @param int $index
         *
         * @return array<array-key, mixed>
         *
         * @throws Zend_Wildfire_Exception
         */
        public function getRowAt($index)
        {
        }
        /**
         * @param int $index
         * @param array<array-key, mixed> $row
         *
         * @throws Zend_Wildfire_Exception
         */
        public function setRowAt($index, $row)
        {
        }
        /**
         * @return int
         */
        public function getRowCount()
        {
        }
        /**
         * @return array<array-key, mixed>
         *
         * @throws Zend_Wildfire_Exception
         */
        public function getLastRow()
        {
        }
    }
    interface Zend_Wildfire_Plugin_Interface
    {
        /**
         * @param string $protocolUri
         *
         * @return void
         */
        public function flushMessages($protocolUri);
        /**
         * @return string
         */
        public function getUri();
    }
    class Zend_Wildfire_Protocol_JsonStream
    {
        public const PROTOCOL_URI = 'http://meta.wildfirehq.org/Protocol/JsonStream/0.2';
        /**
         * @var array<array-key, mixed>
         */
        public $_messages;
        /**
         * @var array<array-key, mixed>
         */
        public $_plugins;
        /**
         * @param Zend_Wildfire_Plugin_Interface $plugin
         *
         * @return bool
         */
        public function registerPlugin(\Zend_Wildfire_Plugin_Interface $plugin)
        {
        }
        /**
         * @param Zend_Wildfire_Plugin_Interface $plugin
         * @param string $structure
         * @param array<array-key, mixed> $data
         *
         * @return bool
         */
        public function recordMessage(\Zend_Wildfire_Plugin_Interface $plugin, $structure, $data)
        {
        }
        /**
         * @param Zend_Wildfire_Plugin_Interface $plugin
         *
         * @return bool
         */
        public function clearMessages(\Zend_Wildfire_Plugin_Interface $plugin)
        {
        }
        /**
         * @return mixed
         */
        public function getMessages()
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         */
        public function _encode($value)
        {
        }
        /**
         * @param Zend_Wildfire_Channel_Interface $channel
         *
         * @return mixed
         *
         * @throws Zend_Wildfire_Exception
         */
        public function getPayload(\Zend_Wildfire_Channel_Interface $channel)
        {
        }
    }
    class Zend_XmlRpc_Client
    {
        /**
         * @var string
         */
        public $_serverAddress;
        /**
         * @var Zend_Http_Client
         */
        public $_httpClient;
        /**
         * @var Zend_Http_Client_Introspector
         */
        public $_introspector;
        /**
         * @var Zend_XmlRpc_Request
         */
        public $_lastRequest;
        /**
         * @var Zend_XmlRpc_Response
         */
        public $_lastResponse;
        /**
         * @var array<array-key, mixed>
         */
        public $_proxyCache;
        /**
         * @var bool
         */
        public $_skipSystemLookup;
        /**
         * @param string $server
         * @param Zend_Http_Client|null $httpClient
         *
         * @return void
         */
        public function __construct($server, ?\Zend_Http_Client $httpClient = null)
        {
        }
        /**
         * @param Zend_Http_Client $httpClient
         *
         * @return Zend_Http_Client
         */
        public function setHttpClient(\Zend_Http_Client $httpClient)
        {
        }
        /**
         * @return Zend_Http_Client
         */
        public function getHttpClient()
        {
        }
        public function setIntrospector(\Zend_XmlRpc_Client_ServerIntrospection $introspector)
        {
        }
        /**
         * @return Zend_XmlRpc_Client_ServerIntrospection
         */
        public function getIntrospector()
        {
        }
        /**
         * @return Zend_XmlRpc_Request
         */
        public function getLastRequest()
        {
        }
        /**
         * @return Zend_XmlRpc_Response
         */
        public function getLastResponse()
        {
        }
        /**
         * @param string $namespace
         *
         * @return Zend_XmlRpc_Client_ServerProxy
         */
        public function getProxy($namespace = '')
        {
        }
        /**
         * @param bool $flag
         *
         * @return Zend_XmlRpc_Client
         */
        public function setSkipSystemLookup($flag = true)
        {
        }
        /**
         * @return bool
         */
        public function skipSystemLookup()
        {
        }
        /**
         * @param Zend_XmlRpc_Request $request
         * @param Zend_XmlRpc_Response|null $response
         *
         * @return void
         *
         * @throws Zend_XmlRpc_Client_HttpException
         */
        public function doRequest($request, $response = null)
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         *
         * @throws Zend_XmlRpc_Client_FaultException
         */
        public function call($method, $params = array())
        {
        }
        /**
         * @return Zend_XmlRpc_Request
         */
        public function _createRequest($method, $params)
        {
        }
    }
    class Zend_XmlRpc_Client_Exception extends \Zend_XmlRpc_Exception
    {
    }
    class Zend_XmlRpc_Client_FaultException extends \Zend_XmlRpc_Client_Exception
    {
    }
    class Zend_XmlRpc_Client_HttpException extends \Zend_XmlRpc_Client_Exception
    {
    }
    class Zend_XmlRpc_Client_IntrospectException extends \Zend_XmlRpc_Client_Exception
    {
    }
    class Zend_XmlRpc_Client_ServerIntrospection
    {
        /**
         * @var Zend_XmlRpc_Client_ServerProxy
         */
        public $_system;
        /**
         * @param Zend_XmlRpc_Client $client
         */
        public function __construct(\Zend_XmlRpc_Client $client)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getSignatureForEachMethod()
        {
        }
        /**
         * @param array<array-key, mixed>|null $methods
         *
         * @return array<array-key, mixed>
         */
        public function getSignatureForEachMethodByMulticall($methods = null)
        {
        }
        /**
         * @param array<array-key, mixed>|null $methods
         *
         * @return array<array-key, mixed>
         */
        public function getSignatureForEachMethodByLooping($methods = null)
        {
        }
        /**
         * @param array<array-key, mixed> $method
         *
         * @return array<array-key, mixed>
         */
        public function getMethodSignature($method)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listMethods()
        {
        }
    }
    class Zend_XmlRpc_Client_ServerProxy
    {
        /**
         * @var Zend_XmlRpc_Client
         */
        public $_client;
        /**
         * @var string
         */
        public $_namespace;
        /**
         * @var array<array-key, mixed>
         */
        public $_cache;
        /**
         * @param Zend_XmlRpc_Client $client
         * @param string $namespace
         */
        public function __construct($client, $namespace = '')
        {
        }
        /**
         * @return Zend_XmlRpc_Client_ServerProxy
         */
        public function __get($namespace)
        {
        }
        /**
         * @param array<array-key, mixed> $args
         *
         * @return mixed
         */
        public function __call($method, $args)
        {
        }
    }
    class Zend_XmlRpc_Exception extends \Zend_Exception
    {
    }
    class Zend_XmlRpc_Fault
    {
        /**
         * @var int
         */
        public $_code;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var string
         */
        public $_message;
        /**
         * @var array<array-key, mixed>
         */
        public $_internal;
        /**
         * @return Zend_XmlRpc_Fault
         */
        public function __construct($code = 404, $message = '')
        {
        }
        /**
         * @param int $code
         *
         * @return Zend_XmlRpc_Fault
         */
        public function setCode($code)
        {
        }
        /**
         * @return int
         */
        public function getCode()
        {
        }
        public function setMessage($message)
        {
        }
        /**
         * @return string
         */
        public function getMessage()
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_XmlRpc_Fault
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $fault
         *
         * @return bool
         *
         * @throws Zend_XmlRpc_Exception
         */
        public function loadXml($fault)
        {
        }
        /**
         * @param string $xml
         *
         * @return bool
         */
        public static function isFault($xml)
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_XmlRpc_Generator_DomDocument extends \Zend_XmlRpc_Generator_GeneratorAbstract
    {
        /**
         * @var DOMDocument
         */
        public $_dom;
        /**
         * @var DOMNode
         */
        public $_currentElement;
        /**
         * @param string $name
         *
         * @return void
         */
        public function _openElement($name)
        {
        }
        /**
         * @param string $text
         */
        public function _writeTextData($text)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function _closeElement($name)
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return void
         */
        public function _init()
        {
        }
    }
    class Zend_XmlRpc_Generator_GeneratorAbstract
    {
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @param string $encoding
         */
        public function __construct($encoding = 'UTF-8')
        {
        }
        /**
         * @param string $name
         * @param null|string $value
         *
         * @return Zend_XmlRpc_Generator_Abstract
         */
        public function openElement($name, $value = null)
        {
        }
        /**
         * @param string $name
         *
         * @return Zend_XmlRpc_Generator_Abstract
         */
        public function closeElement($name)
        {
        }
        /**
         * @return string
         */
        public abstract function saveXml();
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @return string
         */
        public function flush()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @param string $xml
         *
         * @return string
         */
        public function stripDeclaration($xml)
        {
        }
        /**
         * @param string $name
         */
        public abstract function _openElement($name);
        /**
         * @param string $text
         */
        public abstract function _writeTextData($text);
        /**
         * @param string $name
         */
        public abstract function _closeElement($name);
    }
    class Zend_XmlRpc_Generator_XmlWriter extends \Zend_XmlRpc_Generator_GeneratorAbstract
    {
        /**
         * @var XMLWriter
         */
        public $_xmlWriter;
        /**
         * @return void
         */
        public function _init()
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function _openElement($name)
        {
        }
        /**
         * @param string $text
         *
         * @return void
         */
        public function _writeTextData($text)
        {
        }
        /**
         * @param string $name
         *
         * @return void
         */
        public function _closeElement($name)
        {
        }
        public function saveXml()
        {
        }
    }
    class Zend_XmlRpc_Request
    {
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var string
         */
        public $_method;
        /**
         * @var string
         */
        public $_xml;
        /**
         * @var array<array-key, mixed>
         */
        public $_params;
        /**
         * @var Zend_XmlRpc_Fault
         */
        public $_fault;
        /**
         * @var array<array-key, mixed>
         */
        public $_types;
        /**
         * @var array<array-key, mixed>
         */
        public $_xmlRpcParams;
        /**
         * @param null|string $method
         * @param array<array-key, mixed>|null $params
         */
        public function __construct($method = null, $params = null)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_XmlRpc_Request
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param string $method
         *
         * @return bool
         */
        public function setMethod($method)
        {
        }
        /**
         * @return string
         */
        public function getMethod()
        {
        }
        /**
         * @param mixed $value
         * @param null|string $type
         *
         * @return void
         */
        public function addParam($value, $type = null)
        {
        }
        /**
         * @return void
         */
        public function setParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getParams()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getTypes()
        {
        }
        /**
         * @param string $request
         *
         * @return bool
         */
        public function loadXml($request)
        {
        }
        /**
         * @return bool
         */
        public function isFault()
        {
        }
        /**
         * @return Zend_XmlRpc_Fault|null
         */
        public function getFault()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function _getXmlRpcParams()
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_XmlRpc_Request_Http extends \Zend_XmlRpc_Request
    {
        /**
         * @var array<array-key, mixed>
         */
        public $_headers;
        /**
         * @var string
         */
        public $_xml;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function getRawRequest()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getHeaders()
        {
        }
        /**
         * @return string
         */
        public function getFullRequest()
        {
        }
    }
    class Zend_XmlRpc_Request_Stdin extends \Zend_XmlRpc_Request
    {
        /**
         * @var string
         */
        public $_xml;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @return string
         */
        public function getRawRequest()
        {
        }
    }
    class Zend_XmlRpc_Response
    {
        /**
         * @var mixed
         */
        public $_return;
        /**
         * @var string
         */
        public $_type;
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var Zend_XmlRpc_Fault|null
         */
        public $_fault;
        /**
         * @param mixed|null $return
         * @param null|string $type
         *
         * @return void
         */
        public function __construct($return = null, $type = null)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_XmlRpc_Response
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param mixed $value
         * @param null|string $type
         *
         * @return void
         */
        public function setReturnValue($value, $type = null)
        {
        }
        /**
         * @return mixed
         */
        public function getReturnValue()
        {
        }
        /**
         * @return Zend_XmlRpc_Value
         */
        public function _getXmlRpcReturn()
        {
        }
        /**
         * @return bool
         */
        public function isFault()
        {
        }
        /**
         * @return Zend_XmlRpc_Fault|null
         */
        public function getFault()
        {
        }
        /**
         * @param string $response
         *
         * @return bool
         */
        public function loadXml($response)
        {
        }
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_XmlRpc_Response_Http extends \Zend_XmlRpc_Response
    {
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Zend_XmlRpc_Server extends \Zend_Server_Abstract
    {
        /**
         * @var string
         */
        public $_encoding;
        /**
         * @var Zend_XmlRpc_Request|null
         */
        public $_request;
        /**
         * @var string
         */
        public $_responseClass;
        /**
         * @var Zend_Server_Definition
         */
        public $_table;
        /**
         * @var array<array-key, mixed>
         */
        public $_typeMap;
        /**
         * @var bool
         */
        public $_sendArgumentsToAllMethods;
        /**
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * @param string $method
         * @param array<array-key, mixed> $params
         *
         * @return mixed
         *
         * @throws Zend_XmlRpc_Server_Exception
         */
        public function __call($method, $params)
        {
        }
        /**
         * @param array<array-key, mixed>|string $function
         * @param string $namespace
         *
         * @return void
         *
         * @throws Zend_XmlRpc_Server_Exception
         */
        public function addFunction($function, $namespace = '')
        {
        }
        /**
         * @param object|string $class
         * @param string $namespace
         * @param mixed|null $argv
         *
         * @return void
         *
         * @throws Zend_XmlRpc_Server_Exception
         */
        public function setClass($class, $namespace = '', $argv = null)
        {
        }
        /**
         * @param Exception|null|string $fault
         * @param int $code
         *
         * @return Zend_XmlRpc_Server_Fault
         */
        public function fault($fault = null, $code = 404)
        {
        }
        /**
         * @param Zend_XmlRpc_Request $request
         *
         * @return Zend_XmlRpc_Fault|Zend_XmlRpc_Response
         */
        public function handle($request = false)
        {
        }
        /**
         * @param Zend_Server_Definition|array<array-key, mixed> $definition
         *
         * @return void
         *
         * @throws Zend_XmlRpc_Server_Exception
         */
        public function loadFunctions($definition)
        {
        }
        /**
         * @param string $encoding
         *
         * @return Zend_XmlRpc_Server
         */
        public function setEncoding($encoding)
        {
        }
        /**
         * @return string
         */
        public function getEncoding()
        {
        }
        /**
         * @param mixed $mode
         *
         * @return void
         */
        public function setPersistence($mode)
        {
        }
        /**
         * @param Zend_XmlRpc_Request|string $request
         *
         * @return Zend_XmlRpc_Server
         *
         * @throws Zend_XmlRpc_Server_Exception
         */
        public function setRequest($request)
        {
        }
        /**
         * @return Zend_XmlRpc_Request|null
         */
        public function getRequest()
        {
        }
        /**
         * @param string $class
         *
         * @return bool
         */
        public function setResponseClass($class)
        {
        }
        /**
         * @return string
         */
        public function getResponseClass()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getDispatchTable()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function getFunctions()
        {
        }
        /**
         * @return Zend_XmlRpc_Server_System
         */
        public function getSystem()
        {
        }
        public function sendArgumentsToAllMethods($flag = null)
        {
        }
        /**
         * @param string $type
         *
         * @return string
         */
        public function _fixType($type)
        {
        }
        /**
         * @param Zend_XmlRpc_Request $request
         *
         * @return Zend_XmlRpc_Response
         *
         * @throws Zend_XmlRpcServer_Exception
         * @throws Exception
         */
        public function _handle(\Zend_XmlRpc_Request $request)
        {
        }
        /**
         * @return void
         */
        public function _registerSystemMethods()
        {
        }
    }
    class Zend_XmlRpc_Server_Cache extends \Zend_Server_Cache
    {
        /**
         * @var array<array-key, mixed>
         */
        public static $_skipMethods;
    }
    class Zend_XmlRpc_Server_Exception extends \Zend_XmlRpc_Exception
    {
    }
    class Zend_XmlRpc_Server_Fault extends \Zend_XmlRpc_Fault
    {
        /**
         * @var Exception
         */
        public $_exception;
        /**
         * @var array<array-key, mixed>
         */
        public static $_faultExceptionClasses;
        /**
         * @var array<array-key, mixed>
         */
        public static $_observers;
        /**
         * @param Exception $e
         *
         * @return Zend_XmlRpc_Server_Fault
         */
        public function __construct(\Exception $e)
        {
        }
        /**
         * @param Exception $e
         *
         * @return Zend_XmlRpc_Server_Fault
         */
        public static function getInstance(\Exception $e)
        {
        }
        /**
         * @param array<array-key, mixed>|string $classes
         *
         * @return void
         */
        public static function attachFaultException($classes)
        {
        }
        /**
         * @param array<array-key, mixed>|string $classes
         *
         * @return void
         */
        public static function detachFaultException($classes)
        {
        }
        /**
         * @param string $class
         *
         * @return bool
         */
        public static function attachObserver($class)
        {
        }
        /**
         * @param string $class
         *
         * @return bool
         */
        public static function detachObserver($class)
        {
        }
        /**
         * @return Exception
         */
        public function getException()
        {
        }
    }
    class Zend_XmlRpc_Server_System
    {
        /**
         * @var Zend_XmlRpc_Server
         */
        public $_server;
        /**
         * @param Zend_XmlRpc_Server $server
         *
         * @return void
         */
        public function __construct(\Zend_XmlRpc_Server $server)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public function listMethods()
        {
        }
        /**
         * @param string $method
         *
         * @return string
         */
        public function methodHelp($method)
        {
        }
        /**
         * @param string $method
         *
         * @return array<array-key, mixed>
         */
        public function methodSignature($method)
        {
        }
        /**
         * @param array<array-key, mixed> $methods
         *
         * @return array<array-key, mixed>
         */
        public function multicall($methods)
        {
        }
    }
    class Zend_XmlRpc_Value
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        public $_value;
        public $_type;
        public $_xml;
        /**
         * @var Zend_XmlRpc_Generator_GeneratorAbstract
         */
        public static $_generator;
        /**
         * @return string
         */
        public function getType()
        {
        }
        /**
         * @return Zend_XmlRpc_Generator_GeneratorAbstract
         */
        public static function getGenerator()
        {
        }
        /**
         * @param Zend_XmlRpc_Generator_GeneratorAbstract $generator
         *
         * @return void
         */
        public static function setGenerator(\Zend_XmlRpc_Generator_GeneratorAbstract $generator)
        {
        }
        /**
         * @param string $encoding
         *
         * @return void
         */
        public static function setEncoding($encoding)
        {
        }
        /**
         * @return mixed
         */
        public abstract function getValue();
        /**
         * @return string
         */
        public function saveXml()
        {
        }
        /**
         * @return void
         */
        public function generateXml()
        {
        }
        /**
         * @param mixed $value
         * @param Zend_XmlRpc_Value::constant $type
         *
         * @return Zend_XmlRpc_Value
         */
        public static function getXmlRpcValue($value, $type)
        {
        }
        /**
         * @param mixed $value
         *
         * @return string
         */
        public static function getXmlRpcTypeByValue($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return Zend_XmlRpc_Value
         */
        public static function _phpVarToNativeXmlRpc($value)
        {
        }
        /**
         * @param SimpleXMLElement|string $xml
         *
         * @return Zend_XmlRpc_Value
         */
        public static function _xmlStringToNativeXmlRpc($xml)
        {
        }
        public static function _createSimpleXMLElement(&$xml)
        {
        }
        /**
         * @param SimpleXMLElement $xml
         * @param string $type
         * @param string $value
         *
         * @return void
         */
        public static function _extractTypeAndValue(\SimpleXMLElement $xml, &$type, &$value)
        {
        }
        /**
         * @param string $xml
         *
         * @return void
         */
        public function _setXML($xml)
        {
        }
    }
    class Zend_XmlRpc_Value_Array extends \Zend_XmlRpc_Value_Collection
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param array<array-key, mixed> $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return void
         */
        public function _generateXml()
        {
        }
    }
    class Zend_XmlRpc_Value_Base64 extends \Zend_XmlRpc_Value_Scalar
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param string $value
         */
        public function __construct($value, $alreadyEncoded = false)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_BigInteger extends \Zend_XmlRpc_Value_Integer
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param mixed $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_Boolean extends \Zend_XmlRpc_Value_Scalar
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param bool $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return bool
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_Collection extends \Zend_XmlRpc_Value
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param array<array-key, mixed> $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return arary
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_DateTime extends \Zend_XmlRpc_Value_Scalar
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @var string
         */
        public $_phpFormatString;
        /**
         * @var string
         */
        public $_isoFormatString;
        /**
         * @param mixed $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return int
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_Double extends \Zend_XmlRpc_Value_Scalar
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param float $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return float
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_Exception extends \Zend_XmlRpc_Exception
    {
    }
    class Zend_XmlRpc_Value_Integer extends \Zend_XmlRpc_Value_Scalar
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param int $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return int
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_Nil extends \Zend_XmlRpc_Value_Scalar
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        public function __construct()
        {
        }
        /**
         * @return null
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_Scalar extends \Zend_XmlRpc_Value
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @return void
         */
        public function _generateXml()
        {
        }
    }
    class Zend_XmlRpc_Value_String extends \Zend_XmlRpc_Value_Scalar
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param string $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
    }
    class Zend_XmlRpc_Value_Struct extends \Zend_XmlRpc_Value_Collection
    {
        public const AUTO_DETECT_TYPE = 'auto_detect';
        public const XML_STRING = 'xml';
        public const XMLRPC_TYPE_I4 = 'i4';
        public const XMLRPC_TYPE_INTEGER = 'int';
        public const XMLRPC_TYPE_I8 = 'i8';
        public const XMLRPC_TYPE_APACHEI8 = 'ex:i8';
        public const XMLRPC_TYPE_DOUBLE = 'double';
        public const XMLRPC_TYPE_BOOLEAN = 'boolean';
        public const XMLRPC_TYPE_STRING = 'string';
        public const XMLRPC_TYPE_DATETIME = 'dateTime.iso8601';
        public const XMLRPC_TYPE_BASE64 = 'base64';
        public const XMLRPC_TYPE_ARRAY = 'array';
        public const XMLRPC_TYPE_STRUCT = 'struct';
        public const XMLRPC_TYPE_NIL = 'nil';
        public const XMLRPC_TYPE_APACHENIL = 'ex:nil';
        /**
         * @param array<array-key, mixed> $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return void
         */
        public function _generateXML()
        {
        }
    }
    class Zend_Xml_Exception extends \Zend_Exception
    {
    }
    class Zend_Xml_Security
    {
        public const ENTITY_DETECT = 'Detected use of ENTITY in XML, disabled to prevent XXE/XEE attacks';
        /**
         * @param string $xml
         *
         * @throws Zend_Xml_Exception
         */
        public static function heuristicScan($xml)
        {
        }
        /**
         * @param int $errno
         * @param string $errstr
         * @param string $errfile
         * @param int $errline
         *
         * @return bool
         */
        public static function loadXmlErrorHandler($errno, $errstr, $errfile, $errline)
        {
        }
        /**
         * @param string $xml
         * @param DomDocument|null $dom
         *
         * @return DomDocument|SimpleXMLElement|bool
         *
         * @throws Zend_Xml_Exception
         */
        public static function scan($xml, ?\DOMDocument $dom = null)
        {
        }
        /**
         * @param string $file
         * @param DOMDocument|null $dom
         *
         * @return DomDocument|SimpleXMLElement
         *
         * @throws Zend_Xml_Exception
         */
        public static function scanFile($file, ?\DOMDocument $dom = null)
        {
        }
        /**
         * @return bool
         */
        public static function isPhpFpm()
        {
        }
        /**
         * @param string $xml
         *
         * @return array<array-key, string>
         */
        public static function getEntityComparison($xml)
        {
        }
        /**
         * @param string $xml
         *
         * @return string
         */
        public static function detectStringEncoding($xml)
        {
        }
        /**
         * @param string $string
         *
         * @return false|string
         */
        public static function detectBom($string)
        {
        }
        /**
         * @param string $xml
         *
         * @return string
         */
        public static function detectXmlStringEncoding($xml)
        {
        }
        /**
         * @param string $xml
         * @param string $fileEncoding
         *
         * @return array<array-key, string>
         */
        public static function detectXmlEncoding($xml, $fileEncoding)
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getBomMap()
        {
        }
        /**
         * @return array<array-key, mixed>
         */
        public static function getAsciiEncodingMap()
        {
        }
        /**
         * @param string $string
         * @param int $start
         * @param int $end
         *
         * @return string
         */
        public static function substr($string, $start, $end)
        {
        }
        /**
         * @param string $encoding
         *
         * @return string
         */
        public static function generateEntityComparison($encoding)
        {
        }
        /**
         * @param string $ascii
         *
         * @return string
         */
        public static function encodeToUTF32BE($ascii)
        {
        }
        /**
         * @param string $ascii
         *
         * @return string
         */
        public static function encodeToUTF32LE($ascii)
        {
        }
        /**
         * @param string $ascii
         *
         * @return string
         */
        public static function encodeToUTF32odd1($ascii)
        {
        }
        /**
         * @param string $ascii
         *
         * @return string
         */
        public static function encodeToUTF32odd2($ascii)
        {
        }
        /**
         * @param string $ascii
         *
         * @return string
         */
        public static function encodeToUTF16BE($ascii)
        {
        }
        /**
         * @param string $ascii
         *
         * @return string
         */
        public static function encodeToUTF16LE($ascii)
        {
        }
        /**
         * @param string $ascii
         *
         * @return string
         */
        public static function encodeToUTF8($ascii)
        {
        }
    }
}
